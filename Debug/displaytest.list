
displaytest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022b8c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001a5c  08022d8c  08022d8c  00032d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  080247e8  080247e8  000347e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  08024990  08024990  00034990  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00033900  080249a8  080249a8  000349a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 00000010  080582a8  080582a8  000682a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  080582b8  080582b8  0008c358  2**0
                  CONTENTS
  8 .ARM          00000008  080582b8  080582b8  000682b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  080582c0  080582c0  0008c358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000014  080582c0  080582c0  000682c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  080582d4  080582d4  000682d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         00000158  20000000  080582dc  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_Framebuffer 0001c200  20000158  08058434  00070158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          00003dd4  2001c358  08074634  0008c358  2**2
                  ALLOC
 15 ._user_heap_stack 00000604  2002012c  08074634  0009012c  2**0
                  ALLOC
 16 .ARM.attributes 00000036  00000000  00000000  0008c358  2**0
                  CONTENTS, READONLY
 17 .debug_info   00086b87  00000000  00000000  0008c38e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_abbrev 0001029b  00000000  00000000  00112f15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 000040f8  00000000  00000000  001231b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 00003bf8  00000000  00000000  001272a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0000f9f2  00000000  00000000  0012aea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0004b74a  00000000  00000000  0013a892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    001659a3  00000000  00000000  00185fdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      000000cf  00000000  00000000  002eb97f  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00011bc4  00000000  00000000  002eba50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	e000      	b.n	8000212 <__do_global_dtors_aux+0x12>
 8000210:	bf00      	nop
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2001c358 	.word	0x2001c358
 800021c:	00000000 	.word	0x00000000
 8000220:	08022d74 	.word	0x08022d74

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	e000      	b.n	8000232 <frame_dummy+0xe>
 8000230:	bf00      	nop
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2001c35c 	.word	0x2001c35c
 800023c:	08022d74 	.word	0x08022d74

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b982 	b.w	800055c <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000274:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000276:	4604      	mov	r4, r0
 8000278:	460f      	mov	r7, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d148      	bne.n	8000310 <__udivmoddi4+0xa0>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d961      	bls.n	8000348 <__udivmoddi4+0xd8>
 8000284:	fab2 f382 	clz	r3, r2
 8000288:	b143      	cbz	r3, 800029c <__udivmoddi4+0x2c>
 800028a:	f1c3 0120 	rsb	r1, r3, #32
 800028e:	409f      	lsls	r7, r3
 8000290:	fa02 fc03 	lsl.w	ip, r2, r3
 8000294:	409c      	lsls	r4, r3
 8000296:	fa20 f101 	lsr.w	r1, r0, r1
 800029a:	430f      	orrs	r7, r1
 800029c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 80002a0:	fa1f fe8c 	uxth.w	lr, ip
 80002a4:	0c22      	lsrs	r2, r4, #16
 80002a6:	fbb7 f6f1 	udiv	r6, r7, r1
 80002aa:	fb01 7716 	mls	r7, r1, r6, r7
 80002ae:	fb06 f00e 	mul.w	r0, r6, lr
 80002b2:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002b6:	4290      	cmp	r0, r2
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0x5c>
 80002ba:	eb1c 0202 	adds.w	r2, ip, r2
 80002be:	f106 37ff 	add.w	r7, r6, #4294967295
 80002c2:	d202      	bcs.n	80002ca <__udivmoddi4+0x5a>
 80002c4:	4290      	cmp	r0, r2
 80002c6:	f200 8137 	bhi.w	8000538 <__udivmoddi4+0x2c8>
 80002ca:	463e      	mov	r6, r7
 80002cc:	1a12      	subs	r2, r2, r0
 80002ce:	b2a4      	uxth	r4, r4
 80002d0:	fbb2 f0f1 	udiv	r0, r2, r1
 80002d4:	fb01 2210 	mls	r2, r1, r0, r2
 80002d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002dc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e0:	45a6      	cmp	lr, r4
 80002e2:	d908      	bls.n	80002f6 <__udivmoddi4+0x86>
 80002e4:	eb1c 0404 	adds.w	r4, ip, r4
 80002e8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ec:	d202      	bcs.n	80002f4 <__udivmoddi4+0x84>
 80002ee:	45a6      	cmp	lr, r4
 80002f0:	f200 811c 	bhi.w	800052c <__udivmoddi4+0x2bc>
 80002f4:	4610      	mov	r0, r2
 80002f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fa:	eba4 040e 	sub.w	r4, r4, lr
 80002fe:	2600      	movs	r6, #0
 8000300:	b11d      	cbz	r5, 800030a <__udivmoddi4+0x9a>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c5 4300 	strd	r4, r3, [r5]
 800030a:	4631      	mov	r1, r6
 800030c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000310:	428b      	cmp	r3, r1
 8000312:	d909      	bls.n	8000328 <__udivmoddi4+0xb8>
 8000314:	2d00      	cmp	r5, #0
 8000316:	f000 80fd 	beq.w	8000514 <__udivmoddi4+0x2a4>
 800031a:	2600      	movs	r6, #0
 800031c:	e9c5 0100 	strd	r0, r1, [r5]
 8000320:	4630      	mov	r0, r6
 8000322:	4631      	mov	r1, r6
 8000324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000328:	fab3 f683 	clz	r6, r3
 800032c:	2e00      	cmp	r6, #0
 800032e:	d14b      	bne.n	80003c8 <__udivmoddi4+0x158>
 8000330:	428b      	cmp	r3, r1
 8000332:	f0c0 80f2 	bcc.w	800051a <__udivmoddi4+0x2aa>
 8000336:	4282      	cmp	r2, r0
 8000338:	f240 80ef 	bls.w	800051a <__udivmoddi4+0x2aa>
 800033c:	4630      	mov	r0, r6
 800033e:	2d00      	cmp	r5, #0
 8000340:	d0e3      	beq.n	800030a <__udivmoddi4+0x9a>
 8000342:	e9c5 4700 	strd	r4, r7, [r5]
 8000346:	e7e0      	b.n	800030a <__udivmoddi4+0x9a>
 8000348:	b902      	cbnz	r2, 800034c <__udivmoddi4+0xdc>
 800034a:	deff      	udf	#255	; 0xff
 800034c:	fab2 f382 	clz	r3, r2
 8000350:	2b00      	cmp	r3, #0
 8000352:	f040 809d 	bne.w	8000490 <__udivmoddi4+0x220>
 8000356:	1a89      	subs	r1, r1, r2
 8000358:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800035c:	b297      	uxth	r7, r2
 800035e:	2601      	movs	r6, #1
 8000360:	0c20      	lsrs	r0, r4, #16
 8000362:	fbb1 f2fe 	udiv	r2, r1, lr
 8000366:	fb0e 1112 	mls	r1, lr, r2, r1
 800036a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800036e:	fb07 f002 	mul.w	r0, r7, r2
 8000372:	4288      	cmp	r0, r1
 8000374:	d90f      	bls.n	8000396 <__udivmoddi4+0x126>
 8000376:	eb1c 0101 	adds.w	r1, ip, r1
 800037a:	f102 38ff 	add.w	r8, r2, #4294967295
 800037e:	bf2c      	ite	cs
 8000380:	f04f 0901 	movcs.w	r9, #1
 8000384:	f04f 0900 	movcc.w	r9, #0
 8000388:	4288      	cmp	r0, r1
 800038a:	d903      	bls.n	8000394 <__udivmoddi4+0x124>
 800038c:	f1b9 0f00 	cmp.w	r9, #0
 8000390:	f000 80cf 	beq.w	8000532 <__udivmoddi4+0x2c2>
 8000394:	4642      	mov	r2, r8
 8000396:	1a09      	subs	r1, r1, r0
 8000398:	b2a4      	uxth	r4, r4
 800039a:	fbb1 f0fe 	udiv	r0, r1, lr
 800039e:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a2:	fb00 f707 	mul.w	r7, r0, r7
 80003a6:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003aa:	42a7      	cmp	r7, r4
 80003ac:	d908      	bls.n	80003c0 <__udivmoddi4+0x150>
 80003ae:	eb1c 0404 	adds.w	r4, ip, r4
 80003b2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003b6:	d202      	bcs.n	80003be <__udivmoddi4+0x14e>
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	f200 80b4 	bhi.w	8000526 <__udivmoddi4+0x2b6>
 80003be:	4608      	mov	r0, r1
 80003c0:	1be4      	subs	r4, r4, r7
 80003c2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003c6:	e79b      	b.n	8000300 <__udivmoddi4+0x90>
 80003c8:	f1c6 0720 	rsb	r7, r6, #32
 80003cc:	40b3      	lsls	r3, r6
 80003ce:	fa01 f406 	lsl.w	r4, r1, r6
 80003d2:	fa22 fc07 	lsr.w	ip, r2, r7
 80003d6:	40f9      	lsrs	r1, r7
 80003d8:	40b2      	lsls	r2, r6
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f307 	lsr.w	r3, r0, r7
 80003e2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003e6:	431c      	orrs	r4, r3
 80003e8:	fa1f fe8c 	uxth.w	lr, ip
 80003ec:	fa00 f306 	lsl.w	r3, r0, r6
 80003f0:	0c20      	lsrs	r0, r4, #16
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	fb09 1118 	mls	r1, r9, r8, r1
 80003fa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003fe:	fb08 f00e 	mul.w	r0, r8, lr
 8000402:	4288      	cmp	r0, r1
 8000404:	d90f      	bls.n	8000426 <__udivmoddi4+0x1b6>
 8000406:	eb1c 0101 	adds.w	r1, ip, r1
 800040a:	f108 3aff 	add.w	sl, r8, #4294967295
 800040e:	bf2c      	ite	cs
 8000410:	f04f 0b01 	movcs.w	fp, #1
 8000414:	f04f 0b00 	movcc.w	fp, #0
 8000418:	4288      	cmp	r0, r1
 800041a:	d903      	bls.n	8000424 <__udivmoddi4+0x1b4>
 800041c:	f1bb 0f00 	cmp.w	fp, #0
 8000420:	f000 808d 	beq.w	800053e <__udivmoddi4+0x2ce>
 8000424:	46d0      	mov	r8, sl
 8000426:	1a09      	subs	r1, r1, r0
 8000428:	b2a4      	uxth	r4, r4
 800042a:	fbb1 f0f9 	udiv	r0, r1, r9
 800042e:	fb09 1110 	mls	r1, r9, r0, r1
 8000432:	fb00 fe0e 	mul.w	lr, r0, lr
 8000436:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800043a:	458e      	cmp	lr, r1
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x1de>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 34ff 	add.w	r4, r0, #4294967295
 8000446:	d201      	bcs.n	800044c <__udivmoddi4+0x1dc>
 8000448:	458e      	cmp	lr, r1
 800044a:	d87f      	bhi.n	800054c <__udivmoddi4+0x2dc>
 800044c:	4620      	mov	r0, r4
 800044e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000452:	eba1 010e 	sub.w	r1, r1, lr
 8000456:	fba0 9802 	umull	r9, r8, r0, r2
 800045a:	4541      	cmp	r1, r8
 800045c:	464c      	mov	r4, r9
 800045e:	46c6      	mov	lr, r8
 8000460:	d302      	bcc.n	8000468 <__udivmoddi4+0x1f8>
 8000462:	d106      	bne.n	8000472 <__udivmoddi4+0x202>
 8000464:	454b      	cmp	r3, r9
 8000466:	d204      	bcs.n	8000472 <__udivmoddi4+0x202>
 8000468:	3801      	subs	r0, #1
 800046a:	ebb9 0402 	subs.w	r4, r9, r2
 800046e:	eb68 0e0c 	sbc.w	lr, r8, ip
 8000472:	2d00      	cmp	r5, #0
 8000474:	d070      	beq.n	8000558 <__udivmoddi4+0x2e8>
 8000476:	1b1a      	subs	r2, r3, r4
 8000478:	eb61 010e 	sbc.w	r1, r1, lr
 800047c:	fa22 f306 	lsr.w	r3, r2, r6
 8000480:	fa01 f707 	lsl.w	r7, r1, r7
 8000484:	40f1      	lsrs	r1, r6
 8000486:	2600      	movs	r6, #0
 8000488:	431f      	orrs	r7, r3
 800048a:	e9c5 7100 	strd	r7, r1, [r5]
 800048e:	e73c      	b.n	800030a <__udivmoddi4+0x9a>
 8000490:	fa02 fc03 	lsl.w	ip, r2, r3
 8000494:	f1c3 0020 	rsb	r0, r3, #32
 8000498:	fa01 f203 	lsl.w	r2, r1, r3
 800049c:	fa21 f600 	lsr.w	r6, r1, r0
 80004a0:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80004a4:	fa24 f100 	lsr.w	r1, r4, r0
 80004a8:	fa1f f78c 	uxth.w	r7, ip
 80004ac:	409c      	lsls	r4, r3
 80004ae:	4311      	orrs	r1, r2
 80004b0:	fbb6 f0fe 	udiv	r0, r6, lr
 80004b4:	0c0a      	lsrs	r2, r1, #16
 80004b6:	fb0e 6610 	mls	r6, lr, r0, r6
 80004ba:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004be:	fb00 f607 	mul.w	r6, r0, r7
 80004c2:	4296      	cmp	r6, r2
 80004c4:	d90e      	bls.n	80004e4 <__udivmoddi4+0x274>
 80004c6:	eb1c 0202 	adds.w	r2, ip, r2
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	bf2c      	ite	cs
 80004d0:	f04f 0901 	movcs.w	r9, #1
 80004d4:	f04f 0900 	movcc.w	r9, #0
 80004d8:	4296      	cmp	r6, r2
 80004da:	d902      	bls.n	80004e2 <__udivmoddi4+0x272>
 80004dc:	f1b9 0f00 	cmp.w	r9, #0
 80004e0:	d031      	beq.n	8000546 <__udivmoddi4+0x2d6>
 80004e2:	4640      	mov	r0, r8
 80004e4:	1b92      	subs	r2, r2, r6
 80004e6:	b289      	uxth	r1, r1
 80004e8:	fbb2 f6fe 	udiv	r6, r2, lr
 80004ec:	fb0e 2216 	mls	r2, lr, r6, r2
 80004f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004f4:	fb06 f207 	mul.w	r2, r6, r7
 80004f8:	428a      	cmp	r2, r1
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x29c>
 80004fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000500:	f106 38ff 	add.w	r8, r6, #4294967295
 8000504:	d201      	bcs.n	800050a <__udivmoddi4+0x29a>
 8000506:	428a      	cmp	r2, r1
 8000508:	d823      	bhi.n	8000552 <__udivmoddi4+0x2e2>
 800050a:	4646      	mov	r6, r8
 800050c:	1a89      	subs	r1, r1, r2
 800050e:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000512:	e725      	b.n	8000360 <__udivmoddi4+0xf0>
 8000514:	462e      	mov	r6, r5
 8000516:	4628      	mov	r0, r5
 8000518:	e6f7      	b.n	800030a <__udivmoddi4+0x9a>
 800051a:	1a84      	subs	r4, r0, r2
 800051c:	eb61 0303 	sbc.w	r3, r1, r3
 8000520:	2001      	movs	r0, #1
 8000522:	461f      	mov	r7, r3
 8000524:	e70b      	b.n	800033e <__udivmoddi4+0xce>
 8000526:	4464      	add	r4, ip
 8000528:	3802      	subs	r0, #2
 800052a:	e749      	b.n	80003c0 <__udivmoddi4+0x150>
 800052c:	4464      	add	r4, ip
 800052e:	3802      	subs	r0, #2
 8000530:	e6e1      	b.n	80002f6 <__udivmoddi4+0x86>
 8000532:	3a02      	subs	r2, #2
 8000534:	4461      	add	r1, ip
 8000536:	e72e      	b.n	8000396 <__udivmoddi4+0x126>
 8000538:	3e02      	subs	r6, #2
 800053a:	4462      	add	r2, ip
 800053c:	e6c6      	b.n	80002cc <__udivmoddi4+0x5c>
 800053e:	f1a8 0802 	sub.w	r8, r8, #2
 8000542:	4461      	add	r1, ip
 8000544:	e76f      	b.n	8000426 <__udivmoddi4+0x1b6>
 8000546:	3802      	subs	r0, #2
 8000548:	4462      	add	r2, ip
 800054a:	e7cb      	b.n	80004e4 <__udivmoddi4+0x274>
 800054c:	3802      	subs	r0, #2
 800054e:	4461      	add	r1, ip
 8000550:	e77d      	b.n	800044e <__udivmoddi4+0x1de>
 8000552:	3e02      	subs	r6, #2
 8000554:	4461      	add	r1, ip
 8000556:	e7d9      	b.n	800050c <__udivmoddi4+0x29c>
 8000558:	462e      	mov	r6, r5
 800055a:	e6d6      	b.n	800030a <__udivmoddi4+0x9a>

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000560:	b480      	push	{r7}
 8000562:	b085      	sub	sp, #20
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800056a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800056c:	4907      	ldr	r1, [pc, #28]	; (800058c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	4313      	orrs	r3, r2
 8000572:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000574:	4b05      	ldr	r3, [pc, #20]	; (800058c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000576:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4013      	ands	r3, r2
 800057c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800057e:	68fb      	ldr	r3, [r7, #12]
}
 8000580:	bf00      	nop
 8000582:	3714      	adds	r7, #20
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr
 800058c:	40021000 	.word	0x40021000

08000590 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8000598:	4b08      	ldr	r3, [pc, #32]	; (80005bc <LL_APB1_GRP2_EnableClock+0x2c>)
 800059a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800059c:	4907      	ldr	r1, [pc, #28]	; (80005bc <LL_APB1_GRP2_EnableClock+0x2c>)
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 80005a4:	4b05      	ldr	r3, [pc, #20]	; (80005bc <LL_APB1_GRP2_EnableClock+0x2c>)
 80005a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4013      	ands	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80005ae:	68fb      	ldr	r3, [r7, #12]
}
 80005b0:	bf00      	nop
 80005b2:	3714      	adds	r7, #20
 80005b4:	46bd      	mov	sp, r7
 80005b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ba:	4770      	bx	lr
 80005bc:	40021000 	.word	0x40021000

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f002 fc57 	bl	8002e76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f83e 	bl	8000648 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005cc:	f000 f8a2 	bl	8000714 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005d0:	f000 fcee 	bl	8000fb0 <MX_GPIO_Init>
  MX_ADC1_Init();
 80005d4:	f000 f8ce 	bl	8000774 <MX_ADC1_Init>
  MX_CRC_Init();
 80005d8:	f000 f942 	bl	8000860 <MX_CRC_Init>
  MX_FMC_Init();
 80005dc:	f000 fc7e 	bl	8000edc <MX_FMC_Init>
  MX_I2C1_Init();
 80005e0:	f000 f960 	bl	80008a4 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80005e4:	f000 f9b2 	bl	800094c <MX_LPUART1_UART_Init>
  MX_USART1_UART_Init();
 80005e8:	f000 f9fe 	bl	80009e8 <MX_USART1_UART_Init>
  MX_OCTOSPI1_Init();
 80005ec:	f000 fa48 	bl	8000a80 <MX_OCTOSPI1_Init>
  MX_SAI1_Init();
 80005f0:	f000 fa84 	bl	8000afc <MX_SAI1_Init>
  MX_SPI1_Init();
 80005f4:	f000 fae8 	bl	8000bc8 <MX_SPI1_Init>
  MX_TIM4_Init();
 80005f8:	f000 fb22 	bl	8000c40 <MX_TIM4_Init>
  MX_TIM16_Init();
 80005fc:	f000 fb70 	bl	8000ce0 <MX_TIM16_Init>
  MX_TIM17_Init();
 8000600:	f000 fb94 	bl	8000d2c <MX_TIM17_Init>
  MX_UCPD1_Init();
 8000604:	f000 fc0c 	bl	8000e20 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 8000608:	f000 fc40 	bl	8000e8c <MX_USB_PCD_Init>
  MX_ICACHE_Init();
 800060c:	f000 f98a 	bl	8000924 <MX_ICACHE_Init>
  BSP_LCD_Init(0, LCD_ORIENTATION_PORTRAIT);
 8000610:	2100      	movs	r1, #0
 8000612:	2000      	movs	r0, #0
 8000614:	f001 fc8f 	bl	8001f36 <BSP_LCD_Init>
  MX_TouchGFX_Init();
 8000618:	f00d f937 	bl	800d88a <MX_TouchGFX_Init>
  /* Call PreOsInit function */
  MX_TouchGFX_PreOSInit();
 800061c:	f00d f92e 	bl	800d87c <MX_TouchGFX_PreOSInit>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000620:	f00a f8a6 	bl	800a770 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000624:	4a05      	ldr	r2, [pc, #20]	; (800063c <main+0x7c>)
 8000626:	2100      	movs	r1, #0
 8000628:	4805      	ldr	r0, [pc, #20]	; (8000640 <main+0x80>)
 800062a:	f00a f8eb 	bl	800a804 <osThreadNew>
 800062e:	4603      	mov	r3, r0
 8000630:	4a04      	ldr	r2, [pc, #16]	; (8000644 <main+0x84>)
 8000632:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000634:	f00a f8c0 	bl	800a7b8 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000638:	e7fe      	b.n	8000638 <main+0x78>
 800063a:	bf00      	nop
 800063c:	080236e4 	.word	0x080236e4
 8000640:	08001291 	.word	0x08001291
 8000644:	2001cb00 	.word	0x2001cb00

08000648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b098      	sub	sp, #96	; 0x60
 800064c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064e:	f107 0318 	add.w	r3, r7, #24
 8000652:	2248      	movs	r2, #72	; 0x48
 8000654:	2100      	movs	r1, #0
 8000656:	4618      	mov	r0, r3
 8000658:	f021 fbe5 	bl	8021e26 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 800066a:	2000      	movs	r0, #0
 800066c:	f004 fae4 	bl	8004c38 <HAL_PWREx_ControlVoltageScaling>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000676:	f000 fe25 	bl	80012c4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800067a:	f004 fabf 	bl	8004bfc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800067e:	4b24      	ldr	r3, [pc, #144]	; (8000710 <SystemClock_Config+0xc8>)
 8000680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000684:	4a22      	ldr	r2, [pc, #136]	; (8000710 <SystemClock_Config+0xc8>)
 8000686:	f023 0318 	bic.w	r3, r3, #24
 800068a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 800068e:	2316      	movs	r3, #22
 8000690:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000692:	2381      	movs	r3, #129	; 0x81
 8000694:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000696:	f44f 7380 	mov.w	r3, #256	; 0x100
 800069a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800069c:	2340      	movs	r3, #64	; 0x40
 800069e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006a4:	2300      	movs	r3, #0
 80006a6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80006a8:	23b0      	movs	r3, #176	; 0xb0
 80006aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ac:	2302      	movs	r3, #2
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006b0:	2301      	movs	r3, #1
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 12;
 80006b4:	230c      	movs	r3, #12
 80006b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 80006b8:	2337      	movs	r3, #55	; 0x37
 80006ba:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006bc:	2307      	movs	r3, #7
 80006be:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006c0:	2302      	movs	r3, #2
 80006c2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006c4:	2302      	movs	r3, #2
 80006c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c8:	f107 0318 	add.w	r3, r7, #24
 80006cc:	4618      	mov	r0, r3
 80006ce:	f004 fb43 	bl	8004d58 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006d8:	f000 fdf4 	bl	80012c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2303      	movs	r3, #3
 80006e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006f0:	1d3b      	adds	r3, r7, #4
 80006f2:	2105      	movs	r1, #5
 80006f4:	4618      	mov	r0, r3
 80006f6:	f005 f805 	bl	8005704 <HAL_RCC_ClockConfig>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000700:	f000 fde0 	bl	80012c4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000704:	f006 fe3a 	bl	800737c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000708:	bf00      	nop
 800070a:	3760      	adds	r7, #96	; 0x60
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	40021000 	.word	0x40021000

08000714 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b0a6      	sub	sp, #152	; 0x98
 8000718:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800071a:	1d3b      	adds	r3, r7, #4
 800071c:	2294      	movs	r2, #148	; 0x94
 800071e:	2100      	movs	r1, #0
 8000720:	4618      	mov	r0, r3
 8000722:	f021 fb80 	bl	8021e26 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SAI1;
 8000726:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 800072a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 800072c:	2300      	movs	r3, #0
 800072e:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000730:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000734:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_HSI;
 8000738:	2302      	movs	r3, #2
 800073a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 4;
 800073c:	2304      	movs	r3, #4
 800073e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 48;
 8000740:	2330      	movs	r3, #48	; 0x30
 8000742:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 8000744:	2311      	movs	r3, #17
 8000746:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000748:	2302      	movs	r3, #2
 800074a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800074c:	2302      	movs	r3, #2
 800074e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8000750:	4b07      	ldr	r3, [pc, #28]	; (8000770 <PeriphCommonClock_Config+0x5c>)
 8000752:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000754:	1d3b      	adds	r3, r7, #4
 8000756:	4618      	mov	r0, r3
 8000758:	f005 faea 	bl	8005d30 <HAL_RCCEx_PeriphCLKConfig>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8000762:	f000 fdaf 	bl	80012c4 <Error_Handler>
  }
}
 8000766:	bf00      	nop
 8000768:	3798      	adds	r7, #152	; 0x98
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	01010000 	.word	0x01010000

08000774 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08a      	sub	sp, #40	; 0x28
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000786:	1d3b      	adds	r3, r7, #4
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
 8000794:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000796:	4b2f      	ldr	r3, [pc, #188]	; (8000854 <MX_ADC1_Init+0xe0>)
 8000798:	4a2f      	ldr	r2, [pc, #188]	; (8000858 <MX_ADC1_Init+0xe4>)
 800079a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800079c:	4b2d      	ldr	r3, [pc, #180]	; (8000854 <MX_ADC1_Init+0xe0>)
 800079e:	2200      	movs	r2, #0
 80007a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007a2:	4b2c      	ldr	r3, [pc, #176]	; (8000854 <MX_ADC1_Init+0xe0>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a8:	4b2a      	ldr	r3, [pc, #168]	; (8000854 <MX_ADC1_Init+0xe0>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80007ae:	4b29      	ldr	r3, [pc, #164]	; (8000854 <MX_ADC1_Init+0xe0>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007b4:	4b27      	ldr	r3, [pc, #156]	; (8000854 <MX_ADC1_Init+0xe0>)
 80007b6:	2204      	movs	r2, #4
 80007b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007ba:	4b26      	ldr	r3, [pc, #152]	; (8000854 <MX_ADC1_Init+0xe0>)
 80007bc:	2200      	movs	r2, #0
 80007be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80007c0:	4b24      	ldr	r3, [pc, #144]	; (8000854 <MX_ADC1_Init+0xe0>)
 80007c2:	2200      	movs	r2, #0
 80007c4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 80007c6:	4b23      	ldr	r3, [pc, #140]	; (8000854 <MX_ADC1_Init+0xe0>)
 80007c8:	2201      	movs	r2, #1
 80007ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007cc:	4b21      	ldr	r3, [pc, #132]	; (8000854 <MX_ADC1_Init+0xe0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007d4:	4b1f      	ldr	r3, [pc, #124]	; (8000854 <MX_ADC1_Init+0xe0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_ADC1_Init+0xe0>)
 80007dc:	2200      	movs	r2, #0
 80007de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007e0:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <MX_ADC1_Init+0xe0>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_ADC1_Init+0xe0>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <MX_ADC1_Init+0xe0>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007f6:	4817      	ldr	r0, [pc, #92]	; (8000854 <MX_ADC1_Init+0xe0>)
 80007f8:	f002 fd3c 	bl	8003274 <HAL_ADC_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000802:	f000 fd5f 	bl	80012c4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000806:	2300      	movs	r3, #0
 8000808:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800080a:	f107 031c 	add.w	r3, r7, #28
 800080e:	4619      	mov	r1, r3
 8000810:	4810      	ldr	r0, [pc, #64]	; (8000854 <MX_ADC1_Init+0xe0>)
 8000812:	f003 fa8b 	bl	8003d2c <HAL_ADCEx_MultiModeConfigChannel>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800081c:	f000 fd52 	bl	80012c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000820:	4b0e      	ldr	r3, [pc, #56]	; (800085c <MX_ADC1_Init+0xe8>)
 8000822:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000824:	2306      	movs	r3, #6
 8000826:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000828:	2300      	movs	r3, #0
 800082a:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800082c:	237f      	movs	r3, #127	; 0x7f
 800082e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000830:	2304      	movs	r3, #4
 8000832:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000838:	1d3b      	adds	r3, r7, #4
 800083a:	4619      	mov	r1, r3
 800083c:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_ADC1_Init+0xe0>)
 800083e:	f002 fe65 	bl	800350c <HAL_ADC_ConfigChannel>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 8000848:	f000 fd3c 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	3728      	adds	r7, #40	; 0x28
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	2001c374 	.word	0x2001c374
 8000858:	42028000 	.word	0x42028000
 800085c:	25b00200 	.word	0x25b00200

08000860 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000864:	4b0d      	ldr	r3, [pc, #52]	; (800089c <MX_CRC_Init+0x3c>)
 8000866:	4a0e      	ldr	r2, [pc, #56]	; (80008a0 <MX_CRC_Init+0x40>)
 8000868:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_CRC_Init+0x3c>)
 800086c:	2200      	movs	r2, #0
 800086e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000870:	4b0a      	ldr	r3, [pc, #40]	; (800089c <MX_CRC_Init+0x3c>)
 8000872:	2200      	movs	r2, #0
 8000874:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_CRC_Init+0x3c>)
 8000878:	2200      	movs	r2, #0
 800087a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800087c:	4b07      	ldr	r3, [pc, #28]	; (800089c <MX_CRC_Init+0x3c>)
 800087e:	2200      	movs	r2, #0
 8000880:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_CRC_Init+0x3c>)
 8000884:	2201      	movs	r2, #1
 8000886:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000888:	4804      	ldr	r0, [pc, #16]	; (800089c <MX_CRC_Init+0x3c>)
 800088a:	f003 fbd3 	bl	8004034 <HAL_CRC_Init>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000894:	f000 fd16 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000898:	bf00      	nop
 800089a:	bd80      	pop	{r7, pc}
 800089c:	2001c3dc 	.word	0x2001c3dc
 80008a0:	40023000 	.word	0x40023000

080008a4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a8:	4b1b      	ldr	r3, [pc, #108]	; (8000918 <MX_I2C1_Init+0x74>)
 80008aa:	4a1c      	ldr	r2, [pc, #112]	; (800091c <MX_I2C1_Init+0x78>)
 80008ac:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40505681;
 80008ae:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <MX_I2C1_Init+0x74>)
 80008b0:	4a1b      	ldr	r2, [pc, #108]	; (8000920 <MX_I2C1_Init+0x7c>)
 80008b2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008b4:	4b18      	ldr	r3, [pc, #96]	; (8000918 <MX_I2C1_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ba:	4b17      	ldr	r3, [pc, #92]	; (8000918 <MX_I2C1_Init+0x74>)
 80008bc:	2201      	movs	r2, #1
 80008be:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c0:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_I2C1_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008c6:	4b14      	ldr	r3, [pc, #80]	; (8000918 <MX_I2C1_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008cc:	4b12      	ldr	r3, [pc, #72]	; (8000918 <MX_I2C1_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d2:	4b11      	ldr	r3, [pc, #68]	; (8000918 <MX_I2C1_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_I2C1_Init+0x74>)
 80008da:	2200      	movs	r2, #0
 80008dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008de:	480e      	ldr	r0, [pc, #56]	; (8000918 <MX_I2C1_Init+0x74>)
 80008e0:	f003 fe32 	bl	8004548 <HAL_I2C_Init>
 80008e4:	4603      	mov	r3, r0
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d001      	beq.n	80008ee <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008ea:	f000 fceb 	bl	80012c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ee:	2100      	movs	r1, #0
 80008f0:	4809      	ldr	r0, [pc, #36]	; (8000918 <MX_I2C1_Init+0x74>)
 80008f2:	f003 feb8 	bl	8004666 <HAL_I2CEx_ConfigAnalogFilter>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008fc:	f000 fce2 	bl	80012c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000900:	2100      	movs	r1, #0
 8000902:	4805      	ldr	r0, [pc, #20]	; (8000918 <MX_I2C1_Init+0x74>)
 8000904:	f003 fefa 	bl	80046fc <HAL_I2CEx_ConfigDigitalFilter>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800090e:	f000 fcd9 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	2001c400 	.word	0x2001c400
 800091c:	40005400 	.word	0x40005400
 8000920:	40505681 	.word	0x40505681

08000924 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000928:	2000      	movs	r0, #0
 800092a:	f003 ff33 	bl	8004794 <HAL_ICACHE_ConfigAssociativityMode>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000934:	f000 fcc6 	bl	80012c4 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000938:	f003 ff4c 	bl	80047d4 <HAL_ICACHE_Enable>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000942:	f000 fcbf 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000950:	4b22      	ldr	r3, [pc, #136]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 8000952:	4a23      	ldr	r2, [pc, #140]	; (80009e0 <MX_LPUART1_UART_Init+0x94>)
 8000954:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 8000956:	4b21      	ldr	r3, [pc, #132]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 8000958:	4a22      	ldr	r2, [pc, #136]	; (80009e4 <MX_LPUART1_UART_Init+0x98>)
 800095a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800095c:	4b1f      	ldr	r3, [pc, #124]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000962:	4b1e      	ldr	r3, [pc, #120]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000968:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800096e:	4b1b      	ldr	r3, [pc, #108]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 8000970:	220c      	movs	r2, #12
 8000972:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000974:	4b19      	ldr	r3, [pc, #100]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000980:	4b16      	ldr	r3, [pc, #88]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 8000988:	2200      	movs	r2, #0
 800098a:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800098c:	4b13      	ldr	r3, [pc, #76]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 800098e:	2200      	movs	r2, #0
 8000990:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000992:	4812      	ldr	r0, [pc, #72]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 8000994:	f008 fcec 	bl	8009370 <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_LPUART1_UART_Init+0x56>
  {
    Error_Handler();
 800099e:	f000 fc91 	bl	80012c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a2:	2100      	movs	r1, #0
 80009a4:	480d      	ldr	r0, [pc, #52]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 80009a6:	f009 fa85 	bl	8009eb4 <HAL_UARTEx_SetTxFifoThreshold>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_LPUART1_UART_Init+0x68>
  {
    Error_Handler();
 80009b0:	f000 fc88 	bl	80012c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b4:	2100      	movs	r1, #0
 80009b6:	4809      	ldr	r0, [pc, #36]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 80009b8:	f009 faba 	bl	8009f30 <HAL_UARTEx_SetRxFifoThreshold>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <MX_LPUART1_UART_Init+0x7a>
  {
    Error_Handler();
 80009c2:	f000 fc7f 	bl	80012c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80009c6:	4805      	ldr	r0, [pc, #20]	; (80009dc <MX_LPUART1_UART_Init+0x90>)
 80009c8:	f009 fa3b 	bl	8009e42 <HAL_UARTEx_DisableFifoMode>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <MX_LPUART1_UART_Init+0x8a>
  {
    Error_Handler();
 80009d2:	f000 fc77 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	2001c454 	.word	0x2001c454
 80009e0:	40008000 	.word	0x40008000
 80009e4:	00033324 	.word	0x00033324

080009e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009ec:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 80009ee:	4a23      	ldr	r2, [pc, #140]	; (8000a7c <MX_USART1_UART_Init+0x94>)
 80009f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009f2:	4b21      	ldr	r3, [pc, #132]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 80009f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009fa:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a00:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a06:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a0c:	4b1a      	ldr	r3, [pc, #104]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a0e:	220c      	movs	r2, #12
 8000a10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a12:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a1e:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a2a:	4b13      	ldr	r3, [pc, #76]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a30:	4811      	ldr	r0, [pc, #68]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a32:	f008 fc9d 	bl	8009370 <HAL_UART_Init>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a3c:	f000 fc42 	bl	80012c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a40:	2100      	movs	r1, #0
 8000a42:	480d      	ldr	r0, [pc, #52]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a44:	f009 fa36 	bl	8009eb4 <HAL_UARTEx_SetTxFifoThreshold>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a4e:	f000 fc39 	bl	80012c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a52:	2100      	movs	r1, #0
 8000a54:	4808      	ldr	r0, [pc, #32]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a56:	f009 fa6b 	bl	8009f30 <HAL_UARTEx_SetRxFifoThreshold>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a60:	f000 fc30 	bl	80012c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_USART1_UART_Init+0x90>)
 8000a66:	f009 f9ec 	bl	8009e42 <HAL_UARTEx_DisableFifoMode>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a70:	f000 fc28 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	2001c4e8 	.word	0x2001c4e8
 8000a7c:	40013800 	.word	0x40013800

08000a80 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8000a84:	4b1b      	ldr	r3, [pc, #108]	; (8000af4 <MX_OCTOSPI1_Init+0x74>)
 8000a86:	4a1c      	ldr	r2, [pc, #112]	; (8000af8 <MX_OCTOSPI1_Init+0x78>)
 8000a88:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8000a8a:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <MX_OCTOSPI1_Init+0x74>)
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8000a90:	4b18      	ldr	r3, [pc, #96]	; (8000af4 <MX_OCTOSPI1_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 8000a96:	4b17      	ldr	r3, [pc, #92]	; (8000af4 <MX_OCTOSPI1_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <MX_OCTOSPI1_Init+0x74>)
 8000a9e:	2220      	movs	r2, #32
 8000aa0:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8000aa2:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <MX_OCTOSPI1_Init+0x74>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <MX_OCTOSPI1_Init+0x74>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_OCTOSPI1_Init+0x74>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 8000ab4:	4b0f      	ldr	r3, [pc, #60]	; (8000af4 <MX_OCTOSPI1_Init+0x74>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8000aba:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_OCTOSPI1_Init+0x74>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8000ac0:	4b0c      	ldr	r3, [pc, #48]	; (8000af4 <MX_OCTOSPI1_Init+0x74>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8000ac6:	4b0b      	ldr	r3, [pc, #44]	; (8000af4 <MX_OCTOSPI1_Init+0x74>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8000acc:	4b09      	ldr	r3, [pc, #36]	; (8000af4 <MX_OCTOSPI1_Init+0x74>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8000ad2:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <MX_OCTOSPI1_Init+0x74>)
 8000ad4:	2208      	movs	r2, #8
 8000ad6:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.Refresh = 0;
 8000ad8:	4b06      	ldr	r3, [pc, #24]	; (8000af4 <MX_OCTOSPI1_Init+0x74>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8000ade:	4805      	ldr	r0, [pc, #20]	; (8000af4 <MX_OCTOSPI1_Init+0x74>)
 8000ae0:	f003 fe88 	bl	80047f4 <HAL_OSPI_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_OCTOSPI1_Init+0x6e>
  {
    Error_Handler();
 8000aea:	f000 fbeb 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	2001c57c 	.word	0x2001c57c
 8000af8:	44021000 	.word	0x44021000

08000afc <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000b00:	4b2e      	ldr	r3, [pc, #184]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000b02:	4a2f      	ldr	r2, [pc, #188]	; (8000bc0 <MX_SAI1_Init+0xc4>)
 8000b04:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 8000b06:	4b2d      	ldr	r3, [pc, #180]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000b0c:	4b2b      	ldr	r3, [pc, #172]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 8000b12:	4b2a      	ldr	r3, [pc, #168]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000b14:	2240      	movs	r2, #64	; 0x40
 8000b16:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000b18:	4b28      	ldr	r3, [pc, #160]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000b1e:	4b27      	ldr	r3, [pc, #156]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 8000b24:	4b25      	ldr	r3, [pc, #148]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000b2a:	4b24      	ldr	r3, [pc, #144]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000b30:	4b22      	ldr	r3, [pc, #136]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000b36:	4b21      	ldr	r3, [pc, #132]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000b3c:	4b1f      	ldr	r3, [pc, #124]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000b3e:	4a21      	ldr	r2, [pc, #132]	; (8000bc4 <MX_SAI1_Init+0xc8>)
 8000b40:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000b42:	4b1e      	ldr	r3, [pc, #120]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000b48:	4b1c      	ldr	r3, [pc, #112]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000b4e:	4b1b      	ldr	r3, [pc, #108]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000b54:	4b19      	ldr	r3, [pc, #100]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 8000b5a:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 8000b62:	4b16      	ldr	r3, [pc, #88]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000b64:	2201      	movs	r2, #1
 8000b66:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 8000b68:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000b6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b6e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000b72:	2208      	movs	r2, #8
 8000b74:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000b78:	2201      	movs	r2, #1
 8000b7a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000b7c:	4b0f      	ldr	r3, [pc, #60]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000b82:	4b0e      	ldr	r3, [pc, #56]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8000b88:	4b0c      	ldr	r3, [pc, #48]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000b8e:	4b0b      	ldr	r3, [pc, #44]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000b94:	4b09      	ldr	r3, [pc, #36]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 8000b9a:	4b08      	ldr	r3, [pc, #32]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 8000ba6:	4805      	ldr	r0, [pc, #20]	; (8000bbc <MX_SAI1_Init+0xc0>)
 8000ba8:	f006 ff3e 	bl	8007a28 <HAL_SAI_Init>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <MX_SAI1_Init+0xba>
  {
    Error_Handler();
 8000bb2:	f000 fb87 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	2001c5d4 	.word	0x2001c5d4
 8000bc0:	40015404 	.word	0x40015404
 8000bc4:	0002ee00 	.word	0x0002ee00

08000bc8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000bcc:	4b1a      	ldr	r3, [pc, #104]	; (8000c38 <MX_SPI1_Init+0x70>)
 8000bce:	4a1b      	ldr	r2, [pc, #108]	; (8000c3c <MX_SPI1_Init+0x74>)
 8000bd0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bd2:	4b19      	ldr	r3, [pc, #100]	; (8000c38 <MX_SPI1_Init+0x70>)
 8000bd4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bd8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000bda:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <MX_SPI1_Init+0x70>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000be0:	4b15      	ldr	r3, [pc, #84]	; (8000c38 <MX_SPI1_Init+0x70>)
 8000be2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000be6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000be8:	4b13      	ldr	r3, [pc, #76]	; (8000c38 <MX_SPI1_Init+0x70>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000bee:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <MX_SPI1_Init+0x70>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8000bf4:	4b10      	ldr	r3, [pc, #64]	; (8000c38 <MX_SPI1_Init+0x70>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000bfa:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <MX_SPI1_Init+0x70>)
 8000bfc:	2210      	movs	r2, #16
 8000bfe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c00:	4b0d      	ldr	r3, [pc, #52]	; (8000c38 <MX_SPI1_Init+0x70>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c06:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <MX_SPI1_Init+0x70>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <MX_SPI1_Init+0x70>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <MX_SPI1_Init+0x70>)
 8000c14:	2207      	movs	r2, #7
 8000c16:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c18:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <MX_SPI1_Init+0x70>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <MX_SPI1_Init+0x70>)
 8000c20:	2208      	movs	r2, #8
 8000c22:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c24:	4804      	ldr	r0, [pc, #16]	; (8000c38 <MX_SPI1_Init+0x70>)
 8000c26:	f007 f929 	bl	8007e7c <HAL_SPI_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 8000c30:	f000 fb48 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	2001c66c 	.word	0x2001c66c
 8000c3c:	40013000 	.word	0x40013000

08000c40 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c46:	f107 030c 	add.w	r3, r7, #12
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
 8000c54:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c56:	463b      	mov	r3, r7
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000c60:	4b1d      	ldr	r3, [pc, #116]	; (8000cd8 <MX_TIM4_Init+0x98>)
 8000c62:	4a1e      	ldr	r2, [pc, #120]	; (8000cdc <MX_TIM4_Init+0x9c>)
 8000c64:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000c66:	4b1c      	ldr	r3, [pc, #112]	; (8000cd8 <MX_TIM4_Init+0x98>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c6c:	4b1a      	ldr	r3, [pc, #104]	; (8000cd8 <MX_TIM4_Init+0x98>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000c72:	4b19      	ldr	r3, [pc, #100]	; (8000cd8 <MX_TIM4_Init+0x98>)
 8000c74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c78:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7a:	4b17      	ldr	r3, [pc, #92]	; (8000cd8 <MX_TIM4_Init+0x98>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c80:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <MX_TIM4_Init+0x98>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000c86:	4814      	ldr	r0, [pc, #80]	; (8000cd8 <MX_TIM4_Init+0x98>)
 8000c88:	f007 f9e3 	bl	8008052 <HAL_TIM_Base_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8000c92:	f000 fb17 	bl	80012c4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000c96:	2307      	movs	r3, #7
 8000c98:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000c9a:	2310      	movs	r3, #16
 8000c9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 8000c9e:	f107 030c 	add.w	r3, r7, #12
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	480c      	ldr	r0, [pc, #48]	; (8000cd8 <MX_TIM4_Init+0x98>)
 8000ca6:	f007 fd2f 	bl	8008708 <HAL_TIM_SlaveConfigSynchro>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 8000cb0:	f000 fb08 	bl	80012c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000cbc:	463b      	mov	r3, r7
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <MX_TIM4_Init+0x98>)
 8000cc2:	f008 fa0f 	bl	80090e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000ccc:	f000 fafa 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000cd0:	bf00      	nop
 8000cd2:	3720      	adds	r7, #32
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	2001c6d0 	.word	0x2001c6d0
 8000cdc:	40000800 	.word	0x40000800

08000ce0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000ce4:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <MX_TIM16_Init+0x44>)
 8000ce6:	4a10      	ldr	r2, [pc, #64]	; (8000d28 <MX_TIM16_Init+0x48>)
 8000ce8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_TIM16_Init+0x44>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf0:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <MX_TIM16_Init+0x44>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000cf6:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <MX_TIM16_Init+0x44>)
 8000cf8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cfc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <MX_TIM16_Init+0x44>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <MX_TIM16_Init+0x44>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_TIM16_Init+0x44>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000d10:	4804      	ldr	r0, [pc, #16]	; (8000d24 <MX_TIM16_Init+0x44>)
 8000d12:	f007 f99e 	bl	8008052 <HAL_TIM_Base_Init>
 8000d16:	4603      	mov	r3, r0
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d001      	beq.n	8000d20 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000d1c:	f000 fad2 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	2001c71c 	.word	0x2001c71c
 8000d28:	40014400 	.word	0x40014400

08000d2c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b094      	sub	sp, #80	; 0x50
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d32:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
 8000d40:	611a      	str	r2, [r3, #16]
 8000d42:	615a      	str	r2, [r3, #20]
 8000d44:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d46:	463b      	mov	r3, r7
 8000d48:	2234      	movs	r2, #52	; 0x34
 8000d4a:	2100      	movs	r1, #0
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f021 f86a 	bl	8021e26 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000d52:	4b31      	ldr	r3, [pc, #196]	; (8000e18 <MX_TIM17_Init+0xec>)
 8000d54:	4a31      	ldr	r2, [pc, #196]	; (8000e1c <MX_TIM17_Init+0xf0>)
 8000d56:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000d58:	4b2f      	ldr	r3, [pc, #188]	; (8000e18 <MX_TIM17_Init+0xec>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5e:	4b2e      	ldr	r3, [pc, #184]	; (8000e18 <MX_TIM17_Init+0xec>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000d64:	4b2c      	ldr	r3, [pc, #176]	; (8000e18 <MX_TIM17_Init+0xec>)
 8000d66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d6a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d6c:	4b2a      	ldr	r3, [pc, #168]	; (8000e18 <MX_TIM17_Init+0xec>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000d72:	4b29      	ldr	r3, [pc, #164]	; (8000e18 <MX_TIM17_Init+0xec>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d78:	4b27      	ldr	r3, [pc, #156]	; (8000e18 <MX_TIM17_Init+0xec>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000d7e:	4826      	ldr	r0, [pc, #152]	; (8000e18 <MX_TIM17_Init+0xec>)
 8000d80:	f007 f967 	bl	8008052 <HAL_TIM_Base_Init>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d001      	beq.n	8000d8e <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000d8a:	f000 fa9b 	bl	80012c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000d8e:	4822      	ldr	r0, [pc, #136]	; (8000e18 <MX_TIM17_Init+0xec>)
 8000d90:	f007 fa26 	bl	80081e0 <HAL_TIM_PWM_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000d9a:	f000 fa93 	bl	80012c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d9e:	2360      	movs	r3, #96	; 0x60
 8000da0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000da2:	2300      	movs	r3, #0
 8000da4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000da6:	2300      	movs	r3, #0
 8000da8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000daa:	2300      	movs	r3, #0
 8000dac:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000db2:	2300      	movs	r3, #0
 8000db4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000db6:	2300      	movs	r3, #0
 8000db8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4815      	ldr	r0, [pc, #84]	; (8000e18 <MX_TIM17_Init+0xec>)
 8000dc4:	f007 fb8c 	bl	80084e0 <HAL_TIM_PWM_ConfigChannel>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000dce:	f000 fa79 	bl	80012c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dde:	2300      	movs	r3, #0
 8000de0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000de6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dea:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000df4:	463b      	mov	r3, r7
 8000df6:	4619      	mov	r1, r3
 8000df8:	4807      	ldr	r0, [pc, #28]	; (8000e18 <MX_TIM17_Init+0xec>)
 8000dfa:	f008 f9fb 	bl	80091f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000e04:	f000 fa5e 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000e08:	4803      	ldr	r0, [pc, #12]	; (8000e18 <MX_TIM17_Init+0xec>)
 8000e0a:	f000 fd35 	bl	8001878 <HAL_TIM_MspPostInit>

}
 8000e0e:	bf00      	nop
 8000e10:	3750      	adds	r7, #80	; 0x50
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}
 8000e16:	bf00      	nop
 8000e18:	2001c768 	.word	0x2001c768
 8000e1c:	40014800 	.word	0x40014800

08000e20 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e26:	463b      	mov	r3, r7
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
 8000e34:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8000e36:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8000e3a:	f7ff fba9 	bl	8000590 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f7ff fb8e 	bl	8000560 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000e44:	2002      	movs	r0, #2
 8000e46:	f7ff fb8b 	bl	8000560 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PA15 (JTDI)   ------> UCPD1_CC1
  PB15   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000e4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e4e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000e50:	2303      	movs	r3, #3
 8000e52:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e54:	2300      	movs	r3, #0
 8000e56:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	463b      	mov	r3, r7
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	4809      	ldr	r0, [pc, #36]	; (8000e84 <MX_UCPD1_Init+0x64>)
 8000e5e:	f009 fb9a 	bl	800a596 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8000e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e66:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000e68:	2303      	movs	r3, #3
 8000e6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e70:	463b      	mov	r3, r7
 8000e72:	4619      	mov	r1, r3
 8000e74:	4804      	ldr	r0, [pc, #16]	; (8000e88 <MX_UCPD1_Init+0x68>)
 8000e76:	f009 fb8e 	bl	800a596 <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	42020000 	.word	0x42020000
 8000e88:	42020400 	.word	0x42020400

08000e8c <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8000e90:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <MX_USB_PCD_Init+0x48>)
 8000e92:	4a11      	ldr	r2, [pc, #68]	; (8000ed8 <MX_USB_PCD_Init+0x4c>)
 8000e94:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8000e96:	4b0f      	ldr	r3, [pc, #60]	; (8000ed4 <MX_USB_PCD_Init+0x48>)
 8000e98:	2208      	movs	r2, #8
 8000e9a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8000e9c:	4b0d      	ldr	r3, [pc, #52]	; (8000ed4 <MX_USB_PCD_Init+0x48>)
 8000e9e:	2202      	movs	r2, #2
 8000ea0:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000ea2:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <MX_USB_PCD_Init+0x48>)
 8000ea4:	2202      	movs	r2, #2
 8000ea6:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <MX_USB_PCD_Init+0x48>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8000eae:	4b09      	ldr	r3, [pc, #36]	; (8000ed4 <MX_USB_PCD_Init+0x48>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <MX_USB_PCD_Init+0x48>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8000eba:	4b06      	ldr	r3, [pc, #24]	; (8000ed4 <MX_USB_PCD_Init+0x48>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8000ec0:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <MX_USB_PCD_Init+0x48>)
 8000ec2:	f003 fd97 	bl	80049f4 <HAL_PCD_Init>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d001      	beq.n	8000ed0 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8000ecc:	f000 f9fa 	bl	80012c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8000ed0:	bf00      	nop
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	2001c7b4 	.word	0x2001c7b4
 8000ed8:	4000d400 	.word	0x4000d400

08000edc <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	2220      	movs	r2, #32
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f020 ff9c 	bl	8021e26 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8000eee:	4b2d      	ldr	r3, [pc, #180]	; (8000fa4 <MX_FMC_Init+0xc8>)
 8000ef0:	4a2d      	ldr	r2, [pc, #180]	; (8000fa8 <MX_FMC_Init+0xcc>)
 8000ef2:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8000ef4:	4b2b      	ldr	r3, [pc, #172]	; (8000fa4 <MX_FMC_Init+0xc8>)
 8000ef6:	4a2d      	ldr	r2, [pc, #180]	; (8000fac <MX_FMC_Init+0xd0>)
 8000ef8:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8000efa:	4b2a      	ldr	r3, [pc, #168]	; (8000fa4 <MX_FMC_Init+0xc8>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8000f00:	4b28      	ldr	r3, [pc, #160]	; (8000fa4 <MX_FMC_Init+0xc8>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8000f06:	4b27      	ldr	r3, [pc, #156]	; (8000fa4 <MX_FMC_Init+0xc8>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000f0c:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <MX_FMC_Init+0xc8>)
 8000f0e:	2210      	movs	r2, #16
 8000f10:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8000f12:	4b24      	ldr	r3, [pc, #144]	; (8000fa4 <MX_FMC_Init+0xc8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8000f18:	4b22      	ldr	r3, [pc, #136]	; (8000fa4 <MX_FMC_Init+0xc8>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8000f1e:	4b21      	ldr	r3, [pc, #132]	; (8000fa4 <MX_FMC_Init+0xc8>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8000f24:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <MX_FMC_Init+0xc8>)
 8000f26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f2a:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8000f2c:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <MX_FMC_Init+0xc8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8000f32:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <MX_FMC_Init+0xc8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000f38:	4b1a      	ldr	r3, [pc, #104]	; (8000fa4 <MX_FMC_Init+0xc8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8000f3e:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <MX_FMC_Init+0xc8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8000f44:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <MX_FMC_Init+0xc8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8000f4a:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <MX_FMC_Init+0xc8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8000f50:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <MX_FMC_Init+0xc8>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <MX_FMC_Init+0xc8>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <MX_FMC_Init+0xc8>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 15;
 8000f64:	230f      	movs	r3, #15
 8000f66:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8000f68:	230f      	movs	r3, #15
 8000f6a:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8000f6c:	23ff      	movs	r3, #255	; 0xff
 8000f6e:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8000f70:	2300      	movs	r3, #0
 8000f72:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8000f74:	230f      	movs	r3, #15
 8000f76:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8000f78:	2310      	movs	r3, #16
 8000f7a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8000f7c:	2311      	movs	r3, #17
 8000f7e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8000f80:	2300      	movs	r3, #0
 8000f82:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8000f84:	463b      	mov	r3, r7
 8000f86:	2200      	movs	r2, #0
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4806      	ldr	r0, [pc, #24]	; (8000fa4 <MX_FMC_Init+0xc8>)
 8000f8c:	f007 f819 	bl	8007fc2 <HAL_SRAM_Init>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_FMC_Init+0xbe>
  {
    Error_Handler( );
 8000f96:	f000 f995 	bl	80012c4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000f9a:	bf00      	nop
 8000f9c:	3720      	adds	r7, #32
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	bd80      	pop	{r7, pc}
 8000fa2:	bf00      	nop
 8000fa4:	2001caa8 	.word	0x2001caa8
 8000fa8:	44020000 	.word	0x44020000
 8000fac:	44020104 	.word	0x44020104

08000fb0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08e      	sub	sp, #56	; 0x38
 8000fb4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]
 8000fc0:	609a      	str	r2, [r3, #8]
 8000fc2:	60da      	str	r2, [r3, #12]
 8000fc4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000fc6:	4baa      	ldr	r3, [pc, #680]	; (8001270 <MX_GPIO_Init+0x2c0>)
 8000fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fca:	4aa9      	ldr	r2, [pc, #676]	; (8001270 <MX_GPIO_Init+0x2c0>)
 8000fcc:	f043 0310 	orr.w	r3, r3, #16
 8000fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd2:	4ba7      	ldr	r3, [pc, #668]	; (8001270 <MX_GPIO_Init+0x2c0>)
 8000fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd6:	f003 0310 	and.w	r3, r3, #16
 8000fda:	623b      	str	r3, [r7, #32]
 8000fdc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	4ba4      	ldr	r3, [pc, #656]	; (8001270 <MX_GPIO_Init+0x2c0>)
 8000fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fe2:	4aa3      	ldr	r2, [pc, #652]	; (8001270 <MX_GPIO_Init+0x2c0>)
 8000fe4:	f043 0302 	orr.w	r3, r3, #2
 8000fe8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fea:	4ba1      	ldr	r3, [pc, #644]	; (8001270 <MX_GPIO_Init+0x2c0>)
 8000fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	61fb      	str	r3, [r7, #28]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ff6:	4b9e      	ldr	r3, [pc, #632]	; (8001270 <MX_GPIO_Init+0x2c0>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffa:	4a9d      	ldr	r2, [pc, #628]	; (8001270 <MX_GPIO_Init+0x2c0>)
 8000ffc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001000:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001002:	4b9b      	ldr	r3, [pc, #620]	; (8001270 <MX_GPIO_Init+0x2c0>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001006:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800100a:	61bb      	str	r3, [r7, #24]
 800100c:	69bb      	ldr	r3, [r7, #24]
  HAL_PWREx_EnableVddIO2();
 800100e:	f003 fe6f 	bl	8004cf0 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001012:	4b97      	ldr	r3, [pc, #604]	; (8001270 <MX_GPIO_Init+0x2c0>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	4a96      	ldr	r2, [pc, #600]	; (8001270 <MX_GPIO_Init+0x2c0>)
 8001018:	f043 0308 	orr.w	r3, r3, #8
 800101c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101e:	4b94      	ldr	r3, [pc, #592]	; (8001270 <MX_GPIO_Init+0x2c0>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	f003 0308 	and.w	r3, r3, #8
 8001026:	617b      	str	r3, [r7, #20]
 8001028:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800102a:	4b91      	ldr	r3, [pc, #580]	; (8001270 <MX_GPIO_Init+0x2c0>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102e:	4a90      	ldr	r2, [pc, #576]	; (8001270 <MX_GPIO_Init+0x2c0>)
 8001030:	f043 0304 	orr.w	r3, r3, #4
 8001034:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001036:	4b8e      	ldr	r3, [pc, #568]	; (8001270 <MX_GPIO_Init+0x2c0>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800103a:	f003 0304 	and.w	r3, r3, #4
 800103e:	613b      	str	r3, [r7, #16]
 8001040:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	4b8b      	ldr	r3, [pc, #556]	; (8001270 <MX_GPIO_Init+0x2c0>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001046:	4a8a      	ldr	r2, [pc, #552]	; (8001270 <MX_GPIO_Init+0x2c0>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800104e:	4b88      	ldr	r3, [pc, #544]	; (8001270 <MX_GPIO_Init+0x2c0>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
 8001058:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800105a:	4b85      	ldr	r3, [pc, #532]	; (8001270 <MX_GPIO_Init+0x2c0>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	4a84      	ldr	r2, [pc, #528]	; (8001270 <MX_GPIO_Init+0x2c0>)
 8001060:	f043 0320 	orr.w	r3, r3, #32
 8001064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001066:	4b82      	ldr	r3, [pc, #520]	; (8001270 <MX_GPIO_Init+0x2c0>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	f003 0320 	and.w	r3, r3, #32
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001072:	4b7f      	ldr	r3, [pc, #508]	; (8001270 <MX_GPIO_Init+0x2c0>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	4a7e      	ldr	r2, [pc, #504]	; (8001270 <MX_GPIO_Init+0x2c0>)
 8001078:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800107c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800107e:	4b7c      	ldr	r3, [pc, #496]	; (8001270 <MX_GPIO_Init+0x2c0>)
 8001080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001082:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001086:	607b      	str	r3, [r7, #4]
 8001088:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LED_GREEN_Pin|BLE_RSTN_Pin|AUDIO_RESETN_Pin, GPIO_PIN_RESET);
 800108a:	2200      	movs	r2, #0
 800108c:	f241 1102 	movw	r1, #4354	; 0x1102
 8001090:	4878      	ldr	r0, [pc, #480]	; (8001274 <MX_GPIO_Init+0x2c4>)
 8001092:	f003 fa41 	bl	8004518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_RESET);
 8001096:	2200      	movs	r2, #0
 8001098:	2108      	movs	r1, #8
 800109a:	4877      	ldr	r0, [pc, #476]	; (8001278 <MX_GPIO_Init+0x2c8>)
 800109c:	f003 fa3c 	bl	8004518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(UCPD_DBn_GPIO_Port, UCPD_DBn_Pin, GPIO_PIN_RESET);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2120      	movs	r1, #32
 80010a4:	4875      	ldr	r0, [pc, #468]	; (800127c <MX_GPIO_Init+0x2cc>)
 80010a6:	f003 fa37 	bl	8004518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_TE_GPIO_Port, LCD_TE_Pin, GPIO_PIN_RESET);
 80010aa:	2200      	movs	r2, #0
 80010ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010b0:	4873      	ldr	r0, [pc, #460]	; (8001280 <MX_GPIO_Init+0x2d0>)
 80010b2:	f003 fa31 	bl	8004518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_PWR_ON_GPIO_Port, LCD_PWR_ON_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2101      	movs	r1, #1
 80010ba:	4872      	ldr	r0, [pc, #456]	; (8001284 <MX_GPIO_Init+0x2d4>)
 80010bc:	f003 fa2c 	bl	8004518 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LCD_RST_Pin|STMOD_SEL_12_Pin|STMOD_SEL_34_Pin|CTP_RST_Pin, GPIO_PIN_RESET);
 80010c0:	2200      	movs	r2, #0
 80010c2:	f44f 4158 	mov.w	r1, #55296	; 0xd800
 80010c6:	4870      	ldr	r0, [pc, #448]	; (8001288 <MX_GPIO_Init+0x2d8>)
 80010c8:	f003 fa26 	bl	8004518 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_GREEN_Pin BLE_RSTN_Pin AUDIO_RESETN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|BLE_RSTN_Pin|AUDIO_RESETN_Pin;
 80010cc:	f241 1302 	movw	r3, #4354	; 0x1102
 80010d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e2:	4619      	mov	r1, r3
 80010e4:	4863      	ldr	r0, [pc, #396]	; (8001274 <MX_GPIO_Init+0x2c4>)
 80010e6:	f003 f897 	bl	8004218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80010ea:	2304      	movs	r3, #4
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010f6:	2303      	movs	r3, #3
 80010f8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80010fa:	230c      	movs	r3, #12
 80010fc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001102:	4619      	mov	r1, r3
 8001104:	485c      	ldr	r0, [pc, #368]	; (8001278 <MX_GPIO_Init+0x2c8>)
 8001106:	f003 f887 	bl	8004218 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC11 PC12 PC10 PC9
                           PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9
 800110a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800110e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001110:	2302      	movs	r3, #2
 8001112:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001114:	2300      	movs	r3, #0
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001118:	2303      	movs	r3, #3
 800111a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800111c:	230c      	movs	r3, #12
 800111e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001124:	4619      	mov	r1, r3
 8001126:	4859      	ldr	r0, [pc, #356]	; (800128c <MX_GPIO_Init+0x2dc>)
 8001128:	f003 f876 	bl	8004218 <HAL_GPIO_Init>

  /*Configure GPIO pin : USER_BUTTON_Pin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 800112c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001132:	2300      	movs	r3, #0
 8001134:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800113a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800113e:	4619      	mov	r1, r3
 8001140:	4852      	ldr	r0, [pc, #328]	; (800128c <MX_GPIO_Init+0x2dc>)
 8001142:	f003 f869 	bl	8004218 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_RED_Pin;
 8001146:	2308      	movs	r3, #8
 8001148:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800114a:	2301      	movs	r3, #1
 800114c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114e:	2300      	movs	r3, #0
 8001150:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001152:	2300      	movs	r3, #0
 8001154:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LED_RED_GPIO_Port, &GPIO_InitStruct);
 8001156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115a:	4619      	mov	r1, r3
 800115c:	4846      	ldr	r0, [pc, #280]	; (8001278 <MX_GPIO_Init+0x2c8>)
 800115e:	f003 f85b 	bl	8004218 <HAL_GPIO_Init>

  /*Configure GPIO pins : GYRO_ACC_INT_Pin SDIO_DETECT_Pin CTP_INT_Pin */
  GPIO_InitStruct.Pin = GYRO_ACC_INT_Pin|SDIO_DETECT_Pin|CTP_INT_Pin;
 8001162:	230e      	movs	r3, #14
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001166:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800116a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001174:	4619      	mov	r1, r3
 8001176:	4844      	ldr	r0, [pc, #272]	; (8001288 <MX_GPIO_Init+0x2d8>)
 8001178:	f003 f84e 	bl	8004218 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_DBn_Pin */
  GPIO_InitStruct.Pin = UCPD_DBn_Pin;
 800117c:	2320      	movs	r3, #32
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001180:	2301      	movs	r3, #1
 8001182:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001184:	2300      	movs	r3, #0
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001188:	2300      	movs	r3, #0
 800118a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(UCPD_DBn_GPIO_Port, &GPIO_InitStruct);
 800118c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001190:	4619      	mov	r1, r3
 8001192:	483a      	ldr	r0, [pc, #232]	; (800127c <MX_GPIO_Init+0x2cc>)
 8001194:	f003 f840 	bl	8004218 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TE_Pin */
  GPIO_InitStruct.Pin = LCD_TE_Pin;
 8001198:	f44f 7380 	mov.w	r3, #256	; 0x100
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119e:	2301      	movs	r3, #1
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a6:	2300      	movs	r3, #0
 80011a8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_TE_GPIO_Port, &GPIO_InitStruct);
 80011aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ae:	4619      	mov	r1, r3
 80011b0:	4833      	ldr	r0, [pc, #204]	; (8001280 <MX_GPIO_Init+0x2d0>)
 80011b2:	f003 f831 	bl	8004218 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_PWR_ON_Pin */
  GPIO_InitStruct.Pin = LCD_PWR_ON_Pin;
 80011b6:	2301      	movs	r3, #1
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ba:	2301      	movs	r3, #1
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_PWR_ON_GPIO_Port, &GPIO_InitStruct);
 80011c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ca:	4619      	mov	r1, r3
 80011cc:	482d      	ldr	r0, [pc, #180]	; (8001284 <MX_GPIO_Init+0x2d4>)
 80011ce:	f003 f823 	bl	8004218 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLE_INT_Pin */
  GPIO_InitStruct.Pin = BLE_INT_Pin;
 80011d2:	2340      	movs	r3, #64	; 0x40
 80011d4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011d6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011dc:	2300      	movs	r3, #0
 80011de:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLE_INT_GPIO_Port, &GPIO_InitStruct);
 80011e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011e4:	4619      	mov	r1, r3
 80011e6:	4823      	ldr	r0, [pc, #140]	; (8001274 <MX_GPIO_Init+0x2c4>)
 80011e8:	f003 f816 	bl	8004218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80011ec:	2380      	movs	r3, #128	; 0x80
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f0:	2302      	movs	r3, #2
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80011fc:	2306      	movs	r3, #6
 80011fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001204:	4619      	mov	r1, r3
 8001206:	481b      	ldr	r0, [pc, #108]	; (8001274 <MX_GPIO_Init+0x2c4>)
 8001208:	f003 f806 	bl	8004218 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin STMOD_SEL_12_Pin STMOD_SEL_34_Pin CTP_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|STMOD_SEL_12_Pin|STMOD_SEL_34_Pin|CTP_RST_Pin;
 800120c:	f44f 4358 	mov.w	r3, #55296	; 0xd800
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001212:	2301      	movs	r3, #1
 8001214:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001216:	2300      	movs	r3, #0
 8001218:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121a:	2300      	movs	r3, #0
 800121c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800121e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001222:	4619      	mov	r1, r3
 8001224:	4818      	ldr	r0, [pc, #96]	; (8001288 <MX_GPIO_Init+0x2d8>)
 8001226:	f002 fff7 	bl	8004218 <HAL_GPIO_Init>

  /*Configure GPIO pin : UCPD_FLT_Pin */
  GPIO_InitStruct.Pin = UCPD_FLT_Pin;
 800122a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001230:	2300      	movs	r3, #0
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(UCPD_FLT_GPIO_Port, &GPIO_InitStruct);
 8001238:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123c:	4619      	mov	r1, r3
 800123e:	480f      	ldr	r0, [pc, #60]	; (800127c <MX_GPIO_Init+0x2cc>)
 8001240:	f002 ffea 	bl	8004218 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001244:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124a:	2302      	movs	r3, #2
 800124c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124e:	2300      	movs	r3, #0
 8001250:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001252:	2300      	movs	r3, #0
 8001254:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8001256:	2306      	movs	r3, #6
 8001258:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800125e:	4619      	mov	r1, r3
 8001260:	4806      	ldr	r0, [pc, #24]	; (800127c <MX_GPIO_Init+0x2cc>)
 8001262:	f002 ffd9 	bl	8004218 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001266:	bf00      	nop
 8001268:	3738      	adds	r7, #56	; 0x38
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000
 8001274:	42021800 	.word	0x42021800
 8001278:	42020c00 	.word	0x42020c00
 800127c:	42020400 	.word	0x42020400
 8001280:	42020000 	.word	0x42020000
 8001284:	42021c00 	.word	0x42021c00
 8001288:	42021400 	.word	0x42021400
 800128c:	42020800 	.word	0x42020800

08001290 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001298:	2001      	movs	r0, #1
 800129a:	f009 fb45 	bl	800a928 <osDelay>
 800129e:	e7fb      	b.n	8001298 <StartDefaultTask+0x8>

080012a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d101      	bne.n	80012b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80012b2:	f001 fdfb 	bl	8002eac <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40012c00 	.word	0x40012c00

080012c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c8:	b672      	cpsid	i
}
 80012ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012cc:	e7fe      	b.n	80012cc <Error_Handler+0x8>
	...

080012d0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012d6:	4b11      	ldr	r3, [pc, #68]	; (800131c <HAL_MspInit+0x4c>)
 80012d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012da:	4a10      	ldr	r2, [pc, #64]	; (800131c <HAL_MspInit+0x4c>)
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	6613      	str	r3, [r2, #96]	; 0x60
 80012e2:	4b0e      	ldr	r3, [pc, #56]	; (800131c <HAL_MspInit+0x4c>)
 80012e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	607b      	str	r3, [r7, #4]
 80012ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ee:	4b0b      	ldr	r3, [pc, #44]	; (800131c <HAL_MspInit+0x4c>)
 80012f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f2:	4a0a      	ldr	r2, [pc, #40]	; (800131c <HAL_MspInit+0x4c>)
 80012f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f8:	6593      	str	r3, [r2, #88]	; 0x58
 80012fa:	4b08      	ldr	r3, [pc, #32]	; (800131c <HAL_MspInit+0x4c>)
 80012fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 7, 0);
 8001306:	2200      	movs	r2, #0
 8001308:	2107      	movs	r1, #7
 800130a:	f06f 0001 	mvn.w	r0, #1
 800130e:	f002 fe69 	bl	8003fe4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40021000 	.word	0x40021000

08001320 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a15      	ldr	r2, [pc, #84]	; (8001394 <HAL_ADC_MspInit+0x74>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d123      	bne.n	800138a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_ADC_MspInit+0x78>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	4a14      	ldr	r2, [pc, #80]	; (8001398 <HAL_ADC_MspInit+0x78>)
 8001348:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800134c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134e:	4b12      	ldr	r3, [pc, #72]	; (8001398 <HAL_ADC_MspInit+0x78>)
 8001350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001352:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <HAL_ADC_MspInit+0x78>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	4a0e      	ldr	r2, [pc, #56]	; (8001398 <HAL_ADC_MspInit+0x78>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001366:	4b0c      	ldr	r3, [pc, #48]	; (8001398 <HAL_ADC_MspInit+0x78>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8001372:	2310      	movs	r3, #16
 8001374:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001376:	2303      	movs	r3, #3
 8001378:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <HAL_ADC_MspInit+0x7c>)
 8001386:	f002 ff47 	bl	8004218 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	; 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	42028000 	.word	0x42028000
 8001398:	40021000 	.word	0x40021000
 800139c:	42020000 	.word	0x42020000

080013a0 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b085      	sub	sp, #20
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <HAL_CRC_MspInit+0x38>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d10b      	bne.n	80013ca <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80013b2:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <HAL_CRC_MspInit+0x3c>)
 80013b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013b6:	4a09      	ldr	r2, [pc, #36]	; (80013dc <HAL_CRC_MspInit+0x3c>)
 80013b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013bc:	6493      	str	r3, [r2, #72]	; 0x48
 80013be:	4b07      	ldr	r3, [pc, #28]	; (80013dc <HAL_CRC_MspInit+0x3c>)
 80013c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80013ca:	bf00      	nop
 80013cc:	3714      	adds	r7, #20
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40023000 	.word	0x40023000
 80013dc:	40021000 	.word	0x40021000

080013e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b0ae      	sub	sp, #184	; 0xb8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013e8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
 80013f0:	605a      	str	r2, [r3, #4]
 80013f2:	609a      	str	r2, [r3, #8]
 80013f4:	60da      	str	r2, [r3, #12]
 80013f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	2294      	movs	r2, #148	; 0x94
 80013fe:	2100      	movs	r1, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f020 fd10 	bl	8021e26 <memset>
  if(hi2c->Instance==I2C1)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4a21      	ldr	r2, [pc, #132]	; (8001490 <HAL_I2C_MspInit+0xb0>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d13a      	bne.n	8001486 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001410:	2340      	movs	r3, #64	; 0x40
 8001412:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001414:	2300      	movs	r3, #0
 8001416:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001418:	f107 0310 	add.w	r3, r7, #16
 800141c:	4618      	mov	r0, r3
 800141e:	f004 fc87 	bl	8005d30 <HAL_RCCEx_PeriphCLKConfig>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001428:	f7ff ff4c 	bl	80012c4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800142c:	4b19      	ldr	r3, [pc, #100]	; (8001494 <HAL_I2C_MspInit+0xb4>)
 800142e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001430:	4a18      	ldr	r2, [pc, #96]	; (8001494 <HAL_I2C_MspInit+0xb4>)
 8001432:	f043 0302 	orr.w	r3, r3, #2
 8001436:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001438:	4b16      	ldr	r3, [pc, #88]	; (8001494 <HAL_I2C_MspInit+0xb4>)
 800143a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800143c:	f003 0302 	and.w	r3, r3, #2
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001444:	23c0      	movs	r3, #192	; 0xc0
 8001446:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800144a:	2312      	movs	r3, #18
 800144c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001450:	2301      	movs	r3, #1
 8001452:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800145c:	2304      	movs	r3, #4
 800145e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001462:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001466:	4619      	mov	r1, r3
 8001468:	480b      	ldr	r0, [pc, #44]	; (8001498 <HAL_I2C_MspInit+0xb8>)
 800146a:	f002 fed5 	bl	8004218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800146e:	4b09      	ldr	r3, [pc, #36]	; (8001494 <HAL_I2C_MspInit+0xb4>)
 8001470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001472:	4a08      	ldr	r2, [pc, #32]	; (8001494 <HAL_I2C_MspInit+0xb4>)
 8001474:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001478:	6593      	str	r3, [r2, #88]	; 0x58
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_I2C_MspInit+0xb4>)
 800147c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800147e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001482:	60bb      	str	r3, [r7, #8]
 8001484:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001486:	bf00      	nop
 8001488:	37b8      	adds	r7, #184	; 0xb8
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	40005400 	.word	0x40005400
 8001494:	40021000 	.word	0x40021000
 8001498:	42020400 	.word	0x42020400

0800149c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b0b0      	sub	sp, #192	; 0xc0
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	605a      	str	r2, [r3, #4]
 80014ae:	609a      	str	r2, [r3, #8]
 80014b0:	60da      	str	r2, [r3, #12]
 80014b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014b4:	f107 0318 	add.w	r3, r7, #24
 80014b8:	2294      	movs	r2, #148	; 0x94
 80014ba:	2100      	movs	r1, #0
 80014bc:	4618      	mov	r0, r3
 80014be:	f020 fcb2 	bl	8021e26 <memset>
  if(huart->Instance==LPUART1)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a42      	ldr	r2, [pc, #264]	; (80015d0 <HAL_UART_MspInit+0x134>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d13c      	bne.n	8001546 <HAL_UART_MspInit+0xaa>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80014cc:	2320      	movs	r3, #32
 80014ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80014d0:	2300      	movs	r3, #0
 80014d2:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014d4:	f107 0318 	add.w	r3, r7, #24
 80014d8:	4618      	mov	r0, r3
 80014da:	f004 fc29 	bl	8005d30 <HAL_RCCEx_PeriphCLKConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014e4:	f7ff feee 	bl	80012c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80014e8:	4b3a      	ldr	r3, [pc, #232]	; (80015d4 <HAL_UART_MspInit+0x138>)
 80014ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ec:	4a39      	ldr	r2, [pc, #228]	; (80015d4 <HAL_UART_MspInit+0x138>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	65d3      	str	r3, [r2, #92]	; 0x5c
 80014f4:	4b37      	ldr	r3, [pc, #220]	; (80015d4 <HAL_UART_MspInit+0x138>)
 80014f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001500:	4b34      	ldr	r3, [pc, #208]	; (80015d4 <HAL_UART_MspInit+0x138>)
 8001502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001504:	4a33      	ldr	r2, [pc, #204]	; (80015d4 <HAL_UART_MspInit+0x138>)
 8001506:	f043 0302 	orr.w	r3, r3, #2
 800150a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800150c:	4b31      	ldr	r3, [pc, #196]	; (80015d4 <HAL_UART_MspInit+0x138>)
 800150e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001518:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800151c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152c:	2300      	movs	r3, #0
 800152e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001532:	2308      	movs	r3, #8
 8001534:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001538:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800153c:	4619      	mov	r1, r3
 800153e:	4826      	ldr	r0, [pc, #152]	; (80015d8 <HAL_UART_MspInit+0x13c>)
 8001540:	f002 fe6a 	bl	8004218 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001544:	e040      	b.n	80015c8 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART1)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a24      	ldr	r2, [pc, #144]	; (80015dc <HAL_UART_MspInit+0x140>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d13b      	bne.n	80015c8 <HAL_UART_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001550:	2301      	movs	r3, #1
 8001552:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001554:	2300      	movs	r3, #0
 8001556:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001558:	f107 0318 	add.w	r3, r7, #24
 800155c:	4618      	mov	r0, r3
 800155e:	f004 fbe7 	bl	8005d30 <HAL_RCCEx_PeriphCLKConfig>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <HAL_UART_MspInit+0xd0>
      Error_Handler();
 8001568:	f7ff feac 	bl	80012c4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800156c:	4b19      	ldr	r3, [pc, #100]	; (80015d4 <HAL_UART_MspInit+0x138>)
 800156e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001570:	4a18      	ldr	r2, [pc, #96]	; (80015d4 <HAL_UART_MspInit+0x138>)
 8001572:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001576:	6613      	str	r3, [r2, #96]	; 0x60
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <HAL_UART_MspInit+0x138>)
 800157a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001580:	60fb      	str	r3, [r7, #12]
 8001582:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001584:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <HAL_UART_MspInit+0x138>)
 8001586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001588:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <HAL_UART_MspInit+0x138>)
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001590:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_UART_MspInit+0x138>)
 8001592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 800159c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a4:	2302      	movs	r3, #2
 80015a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015b6:	2307      	movs	r3, #7
 80015b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015bc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015c0:	4619      	mov	r1, r3
 80015c2:	4807      	ldr	r0, [pc, #28]	; (80015e0 <HAL_UART_MspInit+0x144>)
 80015c4:	f002 fe28 	bl	8004218 <HAL_GPIO_Init>
}
 80015c8:	bf00      	nop
 80015ca:	37c0      	adds	r7, #192	; 0xc0
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	40008000 	.word	0x40008000
 80015d4:	40021000 	.word	0x40021000
 80015d8:	42020400 	.word	0x42020400
 80015dc:	40013800 	.word	0x40013800
 80015e0:	42020000 	.word	0x42020000

080015e4 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b0b0      	sub	sp, #192	; 0xc0
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ec:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015fc:	f107 0318 	add.w	r3, r7, #24
 8001600:	2294      	movs	r2, #148	; 0x94
 8001602:	2100      	movs	r1, #0
 8001604:	4618      	mov	r0, r3
 8001606:	f020 fc0e 	bl	8021e26 <memset>
  if(hospi->Instance==OCTOSPI1)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a4e      	ldr	r2, [pc, #312]	; (8001748 <HAL_OSPI_MspInit+0x164>)
 8001610:	4293      	cmp	r3, r2
 8001612:	f040 8094 	bne.w	800173e <HAL_OSPI_MspInit+0x15a>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8001616:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800161a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800161c:	2300      	movs	r3, #0
 800161e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001622:	f107 0318 	add.w	r3, r7, #24
 8001626:	4618      	mov	r0, r3
 8001628:	f004 fb82 	bl	8005d30 <HAL_RCCEx_PeriphCLKConfig>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_OSPI_MspInit+0x52>
    {
      Error_Handler();
 8001632:	f7ff fe47 	bl	80012c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8001636:	4b45      	ldr	r3, [pc, #276]	; (800174c <HAL_OSPI_MspInit+0x168>)
 8001638:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800163a:	4a44      	ldr	r2, [pc, #272]	; (800174c <HAL_OSPI_MspInit+0x168>)
 800163c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001640:	6513      	str	r3, [r2, #80]	; 0x50
 8001642:	4b42      	ldr	r3, [pc, #264]	; (800174c <HAL_OSPI_MspInit+0x168>)
 8001644:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001646:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800164e:	4b3f      	ldr	r3, [pc, #252]	; (800174c <HAL_OSPI_MspInit+0x168>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001652:	4a3e      	ldr	r2, [pc, #248]	; (800174c <HAL_OSPI_MspInit+0x168>)
 8001654:	f043 0304 	orr.w	r3, r3, #4
 8001658:	64d3      	str	r3, [r2, #76]	; 0x4c
 800165a:	4b3c      	ldr	r3, [pc, #240]	; (800174c <HAL_OSPI_MspInit+0x168>)
 800165c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800165e:	f003 0304 	and.w	r3, r3, #4
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001666:	4b39      	ldr	r3, [pc, #228]	; (800174c <HAL_OSPI_MspInit+0x168>)
 8001668:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800166a:	4a38      	ldr	r2, [pc, #224]	; (800174c <HAL_OSPI_MspInit+0x168>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001672:	4b36      	ldr	r3, [pc, #216]	; (800174c <HAL_OSPI_MspInit+0x168>)
 8001674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800167e:	4b33      	ldr	r3, [pc, #204]	; (800174c <HAL_OSPI_MspInit+0x168>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	4a32      	ldr	r2, [pc, #200]	; (800174c <HAL_OSPI_MspInit+0x168>)
 8001684:	f043 0302 	orr.w	r3, r3, #2
 8001688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168a:	4b30      	ldr	r3, [pc, #192]	; (800174c <HAL_OSPI_MspInit+0x168>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	60bb      	str	r3, [r7, #8]
 8001694:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> OCTOSPI1_CLK
    PA6     ------> OCTOSPI1_IO3
    PB1     ------> OCTOSPI1_IO0
    PB0     ------> OCTOSPI1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_1;
 8001696:	230e      	movs	r3, #14
 8001698:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169c:	2302      	movs	r3, #2
 800169e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a8:	2303      	movs	r3, #3
 80016aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80016ae:	230a      	movs	r3, #10
 80016b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016b4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016b8:	4619      	mov	r1, r3
 80016ba:	4825      	ldr	r0, [pc, #148]	; (8001750 <HAL_OSPI_MspInit+0x16c>)
 80016bc:	f002 fdac 	bl	8004218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80016c0:	2301      	movs	r3, #1
 80016c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c6:	2302      	movs	r3, #2
 80016c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d2:	2303      	movs	r3, #3
 80016d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 80016d8:	2303      	movs	r3, #3
 80016da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016de:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80016e2:	4619      	mov	r1, r3
 80016e4:	481a      	ldr	r0, [pc, #104]	; (8001750 <HAL_OSPI_MspInit+0x16c>)
 80016e6:	f002 fd97 	bl	8004218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_6;
 80016ea:	23cc      	movs	r3, #204	; 0xcc
 80016ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f0:	2302      	movs	r3, #2
 80016f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f6:	2300      	movs	r3, #0
 80016f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016fc:	2303      	movs	r3, #3
 80016fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8001702:	230a      	movs	r3, #10
 8001704:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800170c:	4619      	mov	r1, r3
 800170e:	4811      	ldr	r0, [pc, #68]	; (8001754 <HAL_OSPI_MspInit+0x170>)
 8001710:	f002 fd82 	bl	8004218 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8001714:	2307      	movs	r3, #7
 8001716:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800171a:	2302      	movs	r3, #2
 800171c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001720:	2300      	movs	r3, #0
 8001722:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001726:	2303      	movs	r3, #3
 8001728:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 800172c:	230a      	movs	r3, #10
 800172e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001732:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001736:	4619      	mov	r1, r3
 8001738:	4807      	ldr	r0, [pc, #28]	; (8001758 <HAL_OSPI_MspInit+0x174>)
 800173a:	f002 fd6d 	bl	8004218 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 800173e:	bf00      	nop
 8001740:	37c0      	adds	r7, #192	; 0xc0
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	44021000 	.word	0x44021000
 800174c:	40021000 	.word	0x40021000
 8001750:	42020800 	.word	0x42020800
 8001754:	42020000 	.word	0x42020000
 8001758:	42020400 	.word	0x42020400

0800175c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b08a      	sub	sp, #40	; 0x28
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001764:	f107 0314 	add.w	r3, r7, #20
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a18      	ldr	r2, [pc, #96]	; (80017dc <HAL_SPI_MspInit+0x80>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d129      	bne.n	80017d2 <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800177e:	4b18      	ldr	r3, [pc, #96]	; (80017e0 <HAL_SPI_MspInit+0x84>)
 8001780:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001782:	4a17      	ldr	r2, [pc, #92]	; (80017e0 <HAL_SPI_MspInit+0x84>)
 8001784:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001788:	6613      	str	r3, [r2, #96]	; 0x60
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_SPI_MspInit+0x84>)
 800178c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800178e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001792:	613b      	str	r3, [r7, #16]
 8001794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001796:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_SPI_MspInit+0x84>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179a:	4a11      	ldr	r2, [pc, #68]	; (80017e0 <HAL_SPI_MspInit+0x84>)
 800179c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80017a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017a2:	4b0f      	ldr	r3, [pc, #60]	; (80017e0 <HAL_SPI_MspInit+0x84>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017aa:	60fb      	str	r3, [r7, #12]
 80017ac:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 80017ae:	f003 fa9f 	bl	8004cf0 <HAL_PWREx_EnableVddIO2>
    PG4     ------> SPI1_MOSI
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG5     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3|BLE_CSN_Pin;
 80017b2:	233c      	movs	r3, #60	; 0x3c
 80017b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017c2:	2305      	movs	r3, #5
 80017c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017c6:	f107 0314 	add.w	r3, r7, #20
 80017ca:	4619      	mov	r1, r3
 80017cc:	4805      	ldr	r0, [pc, #20]	; (80017e4 <HAL_SPI_MspInit+0x88>)
 80017ce:	f002 fd23 	bl	8004218 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80017d2:	bf00      	nop
 80017d4:	3728      	adds	r7, #40	; 0x28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40013000 	.word	0x40013000
 80017e0:	40021000 	.word	0x40021000
 80017e4:	42021800 	.word	0x42021800

080017e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80017e8:	b480      	push	{r7}
 80017ea:	b087      	sub	sp, #28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a1c      	ldr	r2, [pc, #112]	; (8001868 <HAL_TIM_Base_MspInit+0x80>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d10c      	bne.n	8001814 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017fa:	4b1c      	ldr	r3, [pc, #112]	; (800186c <HAL_TIM_Base_MspInit+0x84>)
 80017fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017fe:	4a1b      	ldr	r2, [pc, #108]	; (800186c <HAL_TIM_Base_MspInit+0x84>)
 8001800:	f043 0304 	orr.w	r3, r3, #4
 8001804:	6593      	str	r3, [r2, #88]	; 0x58
 8001806:	4b19      	ldr	r3, [pc, #100]	; (800186c <HAL_TIM_Base_MspInit+0x84>)
 8001808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180a:	f003 0304 	and.w	r3, r3, #4
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001812:	e022      	b.n	800185a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM16)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a15      	ldr	r2, [pc, #84]	; (8001870 <HAL_TIM_Base_MspInit+0x88>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d10c      	bne.n	8001838 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800181e:	4b13      	ldr	r3, [pc, #76]	; (800186c <HAL_TIM_Base_MspInit+0x84>)
 8001820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001822:	4a12      	ldr	r2, [pc, #72]	; (800186c <HAL_TIM_Base_MspInit+0x84>)
 8001824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001828:	6613      	str	r3, [r2, #96]	; 0x60
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <HAL_TIM_Base_MspInit+0x84>)
 800182c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	613b      	str	r3, [r7, #16]
 8001834:	693b      	ldr	r3, [r7, #16]
}
 8001836:	e010      	b.n	800185a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM17)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0d      	ldr	r2, [pc, #52]	; (8001874 <HAL_TIM_Base_MspInit+0x8c>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d10b      	bne.n	800185a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001842:	4b0a      	ldr	r3, [pc, #40]	; (800186c <HAL_TIM_Base_MspInit+0x84>)
 8001844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001846:	4a09      	ldr	r2, [pc, #36]	; (800186c <HAL_TIM_Base_MspInit+0x84>)
 8001848:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800184c:	6613      	str	r3, [r2, #96]	; 0x60
 800184e:	4b07      	ldr	r3, [pc, #28]	; (800186c <HAL_TIM_Base_MspInit+0x84>)
 8001850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001852:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
}
 800185a:	bf00      	nop
 800185c:	371c      	adds	r7, #28
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40000800 	.word	0x40000800
 800186c:	40021000 	.word	0x40021000
 8001870:	40014400 	.word	0x40014400
 8001874:	40014800 	.word	0x40014800

08001878 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 030c 	add.w	r3, r7, #12
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM17)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a11      	ldr	r2, [pc, #68]	; (80018dc <HAL_TIM_MspPostInit+0x64>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d11b      	bne.n	80018d2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM17_MspPostInit 0 */

  /* USER CODE END TIM17_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800189a:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <HAL_TIM_MspPostInit+0x68>)
 800189c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189e:	4a10      	ldr	r2, [pc, #64]	; (80018e0 <HAL_TIM_MspPostInit+0x68>)
 80018a0:	f043 0310 	orr.w	r3, r3, #16
 80018a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <HAL_TIM_MspPostInit+0x68>)
 80018a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018aa:	f003 0310 	and.w	r3, r3, #16
 80018ae:	60bb      	str	r3, [r7, #8]
 80018b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM17 GPIO Configuration
    PE1     ------> TIM17_CH1
    */
    GPIO_InitStruct.Pin = LCD_BL_PWM_Pin;
 80018b2:	2302      	movs	r3, #2
 80018b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b6:	2302      	movs	r3, #2
 80018b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018be:	2300      	movs	r3, #0
 80018c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 80018c2:	230e      	movs	r3, #14
 80018c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LCD_BL_PWM_GPIO_Port, &GPIO_InitStruct);
 80018c6:	f107 030c 	add.w	r3, r7, #12
 80018ca:	4619      	mov	r1, r3
 80018cc:	4805      	ldr	r0, [pc, #20]	; (80018e4 <HAL_TIM_MspPostInit+0x6c>)
 80018ce:	f002 fca3 	bl	8004218 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80018d2:	bf00      	nop
 80018d4:	3720      	adds	r7, #32
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	40014800 	.word	0x40014800
 80018e0:	40021000 	.word	0x40021000
 80018e4:	42021000 	.word	0x42021000

080018e8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b0ae      	sub	sp, #184	; 0xb8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001900:	f107 0310 	add.w	r3, r7, #16
 8001904:	2294      	movs	r2, #148	; 0x94
 8001906:	2100      	movs	r1, #0
 8001908:	4618      	mov	r0, r3
 800190a:	f020 fa8c 	bl	8021e26 <memset>
  if(hpcd->Instance==USB)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a23      	ldr	r2, [pc, #140]	; (80019a0 <HAL_PCD_MspInit+0xb8>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d13e      	bne.n	8001996 <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8001918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800191c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 800191e:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8001922:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001926:	f107 0310 	add.w	r3, r7, #16
 800192a:	4618      	mov	r0, r3
 800192c:	f004 fa00 	bl	8005d30 <HAL_RCCEx_PeriphCLKConfig>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 8001936:	f7ff fcc5 	bl	80012c4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193a:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <HAL_PCD_MspInit+0xbc>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	4a19      	ldr	r2, [pc, #100]	; (80019a4 <HAL_PCD_MspInit+0xbc>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001946:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <HAL_PCD_MspInit+0xbc>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA12     ------> USB_DP
    PA11     ------> USB_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8001952:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001956:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001966:	2300      	movs	r3, #0
 8001968:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 800196c:	230a      	movs	r3, #10
 800196e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001972:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001976:	4619      	mov	r1, r3
 8001978:	480b      	ldr	r0, [pc, #44]	; (80019a8 <HAL_PCD_MspInit+0xc0>)
 800197a:	f002 fc4d 	bl	8004218 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800197e:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <HAL_PCD_MspInit+0xbc>)
 8001980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001982:	4a08      	ldr	r2, [pc, #32]	; (80019a4 <HAL_PCD_MspInit+0xbc>)
 8001984:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001988:	65d3      	str	r3, [r2, #92]	; 0x5c
 800198a:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <HAL_PCD_MspInit+0xbc>)
 800198c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800198e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001992:	60bb      	str	r3, [r7, #8]
 8001994:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 8001996:	bf00      	nop
 8001998:	37b8      	adds	r7, #184	; 0xb8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	4000d400 	.word	0x4000d400
 80019a4:	40021000 	.word	0x40021000
 80019a8:	42020000 	.word	0x42020000

080019ac <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b086      	sub	sp, #24
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80019b2:	1d3b      	adds	r3, r7, #4
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
 80019be:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80019c0:	4b23      	ldr	r3, [pc, #140]	; (8001a50 <HAL_FMC_MspInit+0xa4>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d13e      	bne.n	8001a46 <HAL_FMC_MspInit+0x9a>
    return;
  }
  FMC_Initialized = 1;
 80019c8:	4b21      	ldr	r3, [pc, #132]	; (8001a50 <HAL_FMC_MspInit+0xa4>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80019ce:	4b21      	ldr	r3, [pc, #132]	; (8001a54 <HAL_FMC_MspInit+0xa8>)
 80019d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019d2:	4a20      	ldr	r2, [pc, #128]	; (8001a54 <HAL_FMC_MspInit+0xa8>)
 80019d4:	f043 0301 	orr.w	r3, r3, #1
 80019d8:	6513      	str	r3, [r2, #80]	; 0x50
 80019da:	4b1e      	ldr	r3, [pc, #120]	; (8001a54 <HAL_FMC_MspInit+0xa8>)
 80019dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	683b      	ldr	r3, [r7, #0]
  PE13   ------> FMC_DA10
  PE13   ------> FMC_D10
  PD10   ------> FMC_DA15
  PD10   ------> FMC_D15
  */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1|GPIO_PIN_0
 80019e6:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80019ea:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ec:	2302      	movs	r3, #2
 80019ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f0:	2300      	movs	r3, #0
 80019f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f4:	2303      	movs	r3, #3
 80019f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019f8:	230c      	movs	r3, #12
 80019fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	4619      	mov	r1, r3
 8001a00:	4815      	ldr	r0, [pc, #84]	; (8001a58 <HAL_FMC_MspInit+0xac>)
 8001a02:	f002 fc09 	bl	8004218 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a06:	2301      	movs	r3, #1
 8001a08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0a:	2302      	movs	r3, #2
 8001a0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a12:	2303      	movs	r3, #3
 8001a14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a16:	230c      	movs	r3, #12
 8001a18:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a1a:	1d3b      	adds	r3, r7, #4
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	480f      	ldr	r0, [pc, #60]	; (8001a5c <HAL_FMC_MspInit+0xb0>)
 8001a20:	f002 fbfa 	bl	8004218 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_7
 8001a24:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001a28:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_9
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2a:	2302      	movs	r3, #2
 8001a2c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a32:	2303      	movs	r3, #3
 8001a34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001a36:	230c      	movs	r3, #12
 8001a38:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4808      	ldr	r0, [pc, #32]	; (8001a60 <HAL_FMC_MspInit+0xb4>)
 8001a40:	f002 fbea 	bl	8004218 <HAL_GPIO_Init>
 8001a44:	e000      	b.n	8001a48 <HAL_FMC_MspInit+0x9c>
    return;
 8001a46:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	2001cb04 	.word	0x2001cb04
 8001a54:	40021000 	.word	0x40021000
 8001a58:	42020c00 	.word	0x42020c00
 8001a5c:	42021400 	.word	0x42021400
 8001a60:	42021000 	.word	0x42021000

08001a64 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001a6c:	f7ff ff9e 	bl	80019ac <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001a70:	bf00      	nop
 8001a72:	3708      	adds	r7, #8
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a15      	ldr	r2, [pc, #84]	; (8001adc <HAL_SAI_MspInit+0x64>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d124      	bne.n	8001ad4 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <HAL_SAI_MspInit+0x68>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d10b      	bne.n	8001aaa <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001a92:	4b14      	ldr	r3, [pc, #80]	; (8001ae4 <HAL_SAI_MspInit+0x6c>)
 8001a94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a96:	4a13      	ldr	r2, [pc, #76]	; (8001ae4 <HAL_SAI_MspInit+0x6c>)
 8001a98:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a9c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a9e:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <HAL_SAI_MspInit+0x6c>)
 8001aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
    }
    SAI1_client ++;
 8001aaa:	4b0d      	ldr	r3, [pc, #52]	; (8001ae0 <HAL_SAI_MspInit+0x68>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	4a0b      	ldr	r2, [pc, #44]	; (8001ae0 <HAL_SAI_MspInit+0x68>)
 8001ab2:	6013      	str	r3, [r2, #0]
    PE3     ------> SAI1_SD_B
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_2
 8001ab4:	237c      	movs	r3, #124	; 0x7c
 8001ab6:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001ac4:	230d      	movs	r3, #13
 8001ac6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ac8:	f107 030c 	add.w	r3, r7, #12
 8001acc:	4619      	mov	r1, r3
 8001ace:	4806      	ldr	r0, [pc, #24]	; (8001ae8 <HAL_SAI_MspInit+0x70>)
 8001ad0:	f002 fba2 	bl	8004218 <HAL_GPIO_Init>

    }
}
 8001ad4:	bf00      	nop
 8001ad6:	3720      	adds	r7, #32
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40015404 	.word	0x40015404
 8001ae0:	2001cb08 	.word	0x2001cb08
 8001ae4:	40021000 	.word	0x40021000
 8001ae8:	42021000 	.word	0x42021000

08001aec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b08c      	sub	sp, #48	; 0x30
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_IRQn, TickPriority ,0);
 8001afc:	2200      	movs	r2, #0
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	202a      	movs	r0, #42	; 0x2a
 8001b02:	f002 fa6f 	bl	8003fe4 <HAL_NVIC_SetPriority>

  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8001b06:	202a      	movs	r0, #42	; 0x2a
 8001b08:	f002 fa86 	bl	8004018 <HAL_NVIC_EnableIRQ>

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001b0c:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <HAL_InitTick+0x9c>)
 8001b0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b10:	4a1d      	ldr	r2, [pc, #116]	; (8001b88 <HAL_InitTick+0x9c>)
 8001b12:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001b16:	6613      	str	r3, [r2, #96]	; 0x60
 8001b18:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <HAL_InitTick+0x9c>)
 8001b1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b20:	60fb      	str	r3, [r7, #12]
 8001b22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b24:	f107 0210 	add.w	r2, r7, #16
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	4611      	mov	r1, r2
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f003 fffa 	bl	8005b28 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001b34:	f003 ffe4 	bl	8005b00 <HAL_RCC_GetPCLK2Freq>
 8001b38:	62f8      	str	r0, [r7, #44]	; 0x2c

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b3c:	4a13      	ldr	r2, [pc, #76]	; (8001b8c <HAL_InitTick+0xa0>)
 8001b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b42:	0c9b      	lsrs	r3, r3, #18
 8001b44:	3b01      	subs	r3, #1
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <HAL_InitTick+0xa4>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <HAL_InitTick+0xa8>)
 8001b4c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <HAL_InitTick+0xa4>)
 8001b50:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001b54:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001b56:	4a0e      	ldr	r2, [pc, #56]	; (8001b90 <HAL_InitTick+0xa4>)
 8001b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b5a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_InitTick+0xa4>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <HAL_InitTick+0xa4>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 8001b68:	4809      	ldr	r0, [pc, #36]	; (8001b90 <HAL_InitTick+0xa4>)
 8001b6a:	f006 fa72 	bl	8008052 <HAL_TIM_Base_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d104      	bne.n	8001b7e <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 8001b74:	4806      	ldr	r0, [pc, #24]	; (8001b90 <HAL_InitTick+0xa4>)
 8001b76:	f006 fac3 	bl	8008100 <HAL_TIM_Base_Start_IT>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	e000      	b.n	8001b80 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3730      	adds	r7, #48	; 0x30
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	431bde83 	.word	0x431bde83
 8001b90:	2001cb0c 	.word	0x2001cb0c
 8001b94:	40012c00 	.word	0x40012c00

08001b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b9c:	e7fe      	b.n	8001b9c <NMI_Handler+0x4>

08001b9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b9e:	b480      	push	{r7}
 8001ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ba2:	e7fe      	b.n	8001ba2 <HardFault_Handler+0x4>

08001ba4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ba8:	e7fe      	b.n	8001ba8 <MemManage_Handler+0x4>

08001baa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001baa:	b480      	push	{r7}
 8001bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bae:	e7fe      	b.n	8001bae <BusFault_Handler+0x4>

08001bb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bb4:	e7fe      	b.n	8001bb4 <UsageFault_Handler+0x4>

08001bb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001bc8:	4802      	ldr	r0, [pc, #8]	; (8001bd4 <TIM1_UP_IRQHandler+0x10>)
 8001bca:	f006 fb6a 	bl	80082a2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8001bce:	bf00      	nop
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	2001cb0c 	.word	0x2001cb0c

08001bd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
  return 1;
 8001bdc:	2301      	movs	r3, #1
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr

08001be8 <_kill>:

int _kill(int pid, int sig)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bf2:	f01f ffc5 	bl	8021b80 <__errno>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2216      	movs	r2, #22
 8001bfa:	601a      	str	r2, [r3, #0]
  return -1;
 8001bfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	3708      	adds	r7, #8
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}

08001c08 <_exit>:

void _exit (int status)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b082      	sub	sp, #8
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c10:	f04f 31ff 	mov.w	r1, #4294967295
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff ffe7 	bl	8001be8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c1a:	e7fe      	b.n	8001c1a <_exit+0x12>

08001c1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	e00a      	b.n	8001c44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c2e:	e000      	b.n	8001c32 <_read+0x16>
 8001c30:	bf00      	nop
 8001c32:	4601      	mov	r1, r0
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	1c5a      	adds	r2, r3, #1
 8001c38:	60ba      	str	r2, [r7, #8]
 8001c3a:	b2ca      	uxtb	r2, r1
 8001c3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	3301      	adds	r3, #1
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	dbf0      	blt.n	8001c2e <_read+0x12>
  }

  return len;
 8001c4c:	687b      	ldr	r3, [r7, #4]
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3718      	adds	r7, #24
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b086      	sub	sp, #24
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	60f8      	str	r0, [r7, #12]
 8001c5e:	60b9      	str	r1, [r7, #8]
 8001c60:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
 8001c66:	e009      	b.n	8001c7c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	1c5a      	adds	r2, r3, #1
 8001c6c:	60ba      	str	r2, [r7, #8]
 8001c6e:	781b      	ldrb	r3, [r3, #0]
 8001c70:	4618      	mov	r0, r3
 8001c72:	e000      	b.n	8001c76 <_write+0x20>
 8001c74:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	617b      	str	r3, [r7, #20]
 8001c7c:	697a      	ldr	r2, [r7, #20]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	dbf1      	blt.n	8001c68 <_write+0x12>
  }
  return len;
 8001c84:	687b      	ldr	r3, [r7, #4]
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <_close>:

int _close(int file)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
 8001cae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cb6:	605a      	str	r2, [r3, #4]
  return 0;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr

08001cc6 <_isatty>:

int _isatty(int file)
{
 8001cc6:	b480      	push	{r7}
 8001cc8:	b083      	sub	sp, #12
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cce:	2301      	movs	r3, #1
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	60b9      	str	r1, [r7, #8]
 8001ce6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3714      	adds	r7, #20
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
	...

08001cf8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d00:	4a14      	ldr	r2, [pc, #80]	; (8001d54 <_sbrk+0x5c>)
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <_sbrk+0x60>)
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d0c:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <_sbrk+0x64>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <_sbrk+0x64>)
 8001d16:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <_sbrk+0x68>)
 8001d18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <_sbrk+0x64>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	693a      	ldr	r2, [r7, #16]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d207      	bcs.n	8001d38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d28:	f01f ff2a 	bl	8021b80 <__errno>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	220c      	movs	r2, #12
 8001d30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d32:	f04f 33ff 	mov.w	r3, #4294967295
 8001d36:	e009      	b.n	8001d4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d38:	4b08      	ldr	r3, [pc, #32]	; (8001d5c <_sbrk+0x64>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d3e:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <_sbrk+0x64>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4413      	add	r3, r2
 8001d46:	4a05      	ldr	r2, [pc, #20]	; (8001d5c <_sbrk+0x64>)
 8001d48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d4a:	68fb      	ldr	r3, [r7, #12]
}
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	3718      	adds	r7, #24
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	20030000 	.word	0x20030000
 8001d58:	00000400 	.word	0x00000400
 8001d5c:	2001cb58 	.word	0x2001cb58
 8001d60:	20020130 	.word	0x20020130

08001d64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <SystemInit+0x20>)
 8001d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d6e:	4a05      	ldr	r2, [pc, #20]	; (8001d84 <SystemInit+0x20>)
 8001d70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001d78:	bf00      	nop
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	e000ed00 	.word	0xe000ed00

08001d88 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8001d8e:	4b4f      	ldr	r3, [pc, #316]	; (8001ecc <SystemCoreClockUpdate+0x144>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d107      	bne.n	8001daa <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8001d9a:	4b4c      	ldr	r3, [pc, #304]	; (8001ecc <SystemCoreClockUpdate+0x144>)
 8001d9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001da0:	0a1b      	lsrs	r3, r3, #8
 8001da2:	f003 030f 	and.w	r3, r3, #15
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	e005      	b.n	8001db6 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8001daa:	4b48      	ldr	r3, [pc, #288]	; (8001ecc <SystemCoreClockUpdate+0x144>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	091b      	lsrs	r3, r3, #4
 8001db0:	f003 030f 	and.w	r3, r3, #15
 8001db4:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8001db6:	4a46      	ldr	r2, [pc, #280]	; (8001ed0 <SystemCoreClockUpdate+0x148>)
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dbe:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001dc0:	4b42      	ldr	r3, [pc, #264]	; (8001ecc <SystemCoreClockUpdate+0x144>)
 8001dc2:	689b      	ldr	r3, [r3, #8]
 8001dc4:	f003 030c 	and.w	r3, r3, #12
 8001dc8:	2b0c      	cmp	r3, #12
 8001dca:	d866      	bhi.n	8001e9a <SystemCoreClockUpdate+0x112>
 8001dcc:	a201      	add	r2, pc, #4	; (adr r2, 8001dd4 <SystemCoreClockUpdate+0x4c>)
 8001dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dd2:	bf00      	nop
 8001dd4:	08001e09 	.word	0x08001e09
 8001dd8:	08001e9b 	.word	0x08001e9b
 8001ddc:	08001e9b 	.word	0x08001e9b
 8001de0:	08001e9b 	.word	0x08001e9b
 8001de4:	08001e11 	.word	0x08001e11
 8001de8:	08001e9b 	.word	0x08001e9b
 8001dec:	08001e9b 	.word	0x08001e9b
 8001df0:	08001e9b 	.word	0x08001e9b
 8001df4:	08001e19 	.word	0x08001e19
 8001df8:	08001e9b 	.word	0x08001e9b
 8001dfc:	08001e9b 	.word	0x08001e9b
 8001e00:	08001e9b 	.word	0x08001e9b
 8001e04:	08001e21 	.word	0x08001e21
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8001e08:	4a32      	ldr	r2, [pc, #200]	; (8001ed4 <SystemCoreClockUpdate+0x14c>)
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	6013      	str	r3, [r2, #0]
      break;
 8001e0e:	e048      	b.n	8001ea2 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8001e10:	4b30      	ldr	r3, [pc, #192]	; (8001ed4 <SystemCoreClockUpdate+0x14c>)
 8001e12:	4a31      	ldr	r2, [pc, #196]	; (8001ed8 <SystemCoreClockUpdate+0x150>)
 8001e14:	601a      	str	r2, [r3, #0]
      break;
 8001e16:	e044      	b.n	8001ea2 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8001e18:	4b2e      	ldr	r3, [pc, #184]	; (8001ed4 <SystemCoreClockUpdate+0x14c>)
 8001e1a:	4a30      	ldr	r2, [pc, #192]	; (8001edc <SystemCoreClockUpdate+0x154>)
 8001e1c:	601a      	str	r2, [r3, #0]
      break;
 8001e1e:	e040      	b.n	8001ea2 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001e20:	4b2a      	ldr	r3, [pc, #168]	; (8001ecc <SystemCoreClockUpdate+0x144>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8001e2a:	4b28      	ldr	r3, [pc, #160]	; (8001ecc <SystemCoreClockUpdate+0x144>)
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	091b      	lsrs	r3, r3, #4
 8001e30:	f003 030f 	and.w	r3, r3, #15
 8001e34:	3301      	adds	r3, #1
 8001e36:	60bb      	str	r3, [r7, #8]
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2b02      	cmp	r3, #2
 8001e3c:	d003      	beq.n	8001e46 <SystemCoreClockUpdate+0xbe>
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2b03      	cmp	r3, #3
 8001e42:	d006      	beq.n	8001e52 <SystemCoreClockUpdate+0xca>
 8001e44:	e00b      	b.n	8001e5e <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8001e46:	4a24      	ldr	r2, [pc, #144]	; (8001ed8 <SystemCoreClockUpdate+0x150>)
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4e:	613b      	str	r3, [r7, #16]
          break;
 8001e50:	e00b      	b.n	8001e6a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8001e52:	4a22      	ldr	r2, [pc, #136]	; (8001edc <SystemCoreClockUpdate+0x154>)
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e5a:	613b      	str	r3, [r7, #16]
          break;
 8001e5c:	e005      	b.n	8001e6a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e66:	613b      	str	r3, [r7, #16]
          break;
 8001e68:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8001e6a:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <SystemCoreClockUpdate+0x144>)
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	0a1b      	lsrs	r3, r3, #8
 8001e70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	fb02 f303 	mul.w	r3, r2, r3
 8001e7a:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8001e7c:	4b13      	ldr	r3, [pc, #76]	; (8001ecc <SystemCoreClockUpdate+0x144>)
 8001e7e:	68db      	ldr	r3, [r3, #12]
 8001e80:	0e5b      	lsrs	r3, r3, #25
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	3301      	adds	r3, #1
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e94:	4a0f      	ldr	r2, [pc, #60]	; (8001ed4 <SystemCoreClockUpdate+0x14c>)
 8001e96:	6013      	str	r3, [r2, #0]
      break;
 8001e98:	e003      	b.n	8001ea2 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8001e9a:	4a0e      	ldr	r2, [pc, #56]	; (8001ed4 <SystemCoreClockUpdate+0x14c>)
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	6013      	str	r3, [r2, #0]
      break;
 8001ea0:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8001ea2:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <SystemCoreClockUpdate+0x144>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	4a0c      	ldr	r2, [pc, #48]	; (8001ee0 <SystemCoreClockUpdate+0x158>)
 8001eae:	5cd3      	ldrb	r3, [r2, r3]
 8001eb0:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8001eb2:	4b08      	ldr	r3, [pc, #32]	; (8001ed4 <SystemCoreClockUpdate+0x14c>)
 8001eb4:	681a      	ldr	r2, [r3, #0]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001ebc:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <SystemCoreClockUpdate+0x14c>)
 8001ebe:	6013      	str	r3, [r2, #0]
}
 8001ec0:	bf00      	nop
 8001ec2:	371c      	adds	r7, #28
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	08023720 	.word	0x08023720
 8001ed4:	20000004 	.word	0x20000004
 8001ed8:	00f42400 	.word	0x00f42400
 8001edc:	007a1200 	.word	0x007a1200
 8001ee0:	08023708 	.word	0x08023708

08001ee4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8001ee4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f1c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ee8:	f7ff ff3c 	bl	8001d64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001eec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001eee:	e003      	b.n	8001ef8 <LoopCopyDataInit>

08001ef0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ef0:	4b0b      	ldr	r3, [pc, #44]	; (8001f20 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ef2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ef4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001ef6:	3104      	adds	r1, #4

08001ef8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001ef8:	480a      	ldr	r0, [pc, #40]	; (8001f24 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001efa:	4b0b      	ldr	r3, [pc, #44]	; (8001f28 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001efc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001efe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001f00:	d3f6      	bcc.n	8001ef0 <CopyDataInit>
	ldr	r2, =_sbss
 8001f02:	4a0a      	ldr	r2, [pc, #40]	; (8001f2c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001f04:	e002      	b.n	8001f0c <LoopFillZerobss>

08001f06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001f06:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001f08:	f842 3b04 	str.w	r3, [r2], #4

08001f0c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001f0c:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <LoopForever+0x16>)
	cmp	r2, r3
 8001f0e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001f10:	d3f9      	bcc.n	8001f06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001f12:	f01f ff43 	bl	8021d9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001f16:	f7fe fb53 	bl	80005c0 <main>

08001f1a <LoopForever>:

LoopForever:
    b LoopForever
 8001f1a:	e7fe      	b.n	8001f1a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8001f1c:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8001f20:	080582dc 	.word	0x080582dc
	ldr	r0, =_sdata
 8001f24:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001f28:	20000158 	.word	0x20000158
	ldr	r2, =_sbss
 8001f2c:	2001c358 	.word	0x2001c358
	ldr	r3, = _ebss
 8001f30:	2002012c 	.word	0x2002012c

08001f34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f34:	e7fe      	b.n	8001f34 <ADC1_2_IRQHandler>

08001f36 <BSP_LCD_Init>:
  *          @arg @ref LCD_ORIENTATION_PORTRAIT_ROT180    Portrait rotated 180° orientation choice of LCD screen
  *          @arg @ref LCD_ORIENTATION_LANDSCAPE_ROT180   Landscape rotated 180° orientation choice of LCD screen
  * @retval int32_t:      BSP status.
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b084      	sub	sp, #16
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
 8001f3e:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8001f40:	f06f 030a 	mvn.w	r3, #10
 8001f44:	60fb      	str	r3, [r7, #12]

  if ((Instance >= LCD_INSTANCES_NBR ) || (Orientation > LCD_ORIENTATION_LANDSCAPE_ROT180))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d102      	bne.n	8001f52 <BSP_LCD_Init+0x1c>
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	2b03      	cmp	r3, #3
 8001f50:	d903      	bls.n	8001f5a <BSP_LCD_Init+0x24>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001f52:	f06f 0301 	mvn.w	r3, #1
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	e00e      	b.n	8001f78 <BSP_LCD_Init+0x42>
  }
  else
  {
    /* LCD OS Initialize */
    if(LCD_OS_Initialize(0) != LCD_OS_ERROR_NONE)
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f000 f9b8 	bl	80022d0 <LCD_OS_Initialize>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <BSP_LCD_Init+0x38>
    {
      ret = BSP_ERROR_NO_INIT;
 8001f66:	f04f 33ff 	mov.w	r3, #4294967295
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	e004      	b.n	8001f78 <BSP_LCD_Init+0x42>
    }
    else
    {
      /* Probe the LCD Component driver */
      ret = LCD_Probe(Instance, Orientation);
 8001f6e:	6839      	ldr	r1, [r7, #0]
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f807 	bl	8001f84 <LCD_Probe>
 8001f76:	60f8      	str	r0, [r7, #12]
    }
  }

  return ret;
 8001f78:	68fb      	ldr	r3, [r7, #12]
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
	...

08001f84 <LCD_Probe>:
  * @param  Instance:     LCD Instance.
  * @param  Orientation:  LCD Orientation
  * @retval int32_t:      BSP status.
  */
static int32_t LCD_Probe(uint32_t Instance, uint32_t Orientation)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b092      	sub	sp, #72	; 0x48
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	647b      	str	r3, [r7, #68]	; 0x44
  ST7789V_InitParams_t ST7789V_InitParams;
  uint32_t UserBaudRatePrescaler = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	613b      	str	r3, [r7, #16]
  uint32_t id = 0;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]

  /* Configure the lcd driver : map to LCD_IO function*/
  IOCtx.Init             = LCD_IO_Init;
 8001f9a:	4b43      	ldr	r3, [pc, #268]	; (80020a8 <LCD_Probe+0x124>)
 8001f9c:	4a43      	ldr	r2, [pc, #268]	; (80020ac <LCD_Probe+0x128>)
 8001f9e:	601a      	str	r2, [r3, #0]
  IOCtx.DeInit           = LCD_IO_DeInit;
 8001fa0:	4b41      	ldr	r3, [pc, #260]	; (80020a8 <LCD_Probe+0x124>)
 8001fa2:	4a43      	ldr	r2, [pc, #268]	; (80020b0 <LCD_Probe+0x12c>)
 8001fa4:	605a      	str	r2, [r3, #4]
  IOCtx.ReadReg          = LCD_IO_ReadReg;
 8001fa6:	4b40      	ldr	r3, [pc, #256]	; (80020a8 <LCD_Probe+0x124>)
 8001fa8:	4a42      	ldr	r2, [pc, #264]	; (80020b4 <LCD_Probe+0x130>)
 8001faa:	611a      	str	r2, [r3, #16]
  IOCtx.WriteReg         = LCD_IO_WriteReg;
 8001fac:	4b3e      	ldr	r3, [pc, #248]	; (80020a8 <LCD_Probe+0x124>)
 8001fae:	4a42      	ldr	r2, [pc, #264]	; (80020b8 <LCD_Probe+0x134>)
 8001fb0:	60da      	str	r2, [r3, #12]
  IOCtx.SendData         = LCD_IO_SendData;
 8001fb2:	4b3d      	ldr	r3, [pc, #244]	; (80020a8 <LCD_Probe+0x124>)
 8001fb4:	4a41      	ldr	r2, [pc, #260]	; (80020bc <LCD_Probe+0x138>)
 8001fb6:	615a      	str	r2, [r3, #20]
  IOCtx.SendDataDMA      = LCD_IO_SendDataDMA;
 8001fb8:	4b3b      	ldr	r3, [pc, #236]	; (80020a8 <LCD_Probe+0x124>)
 8001fba:	4a41      	ldr	r2, [pc, #260]	; (80020c0 <LCD_Probe+0x13c>)
 8001fbc:	619a      	str	r2, [r3, #24]
  IOCtx.RecvData         = LCD_IO_RecvData;
 8001fbe:	4b3a      	ldr	r3, [pc, #232]	; (80020a8 <LCD_Probe+0x124>)
 8001fc0:	4a40      	ldr	r2, [pc, #256]	; (80020c4 <LCD_Probe+0x140>)
 8001fc2:	61da      	str	r2, [r3, #28]
  IOCtx.RecvDataDMA      = LCD_IO_RecvDataDMA;
 8001fc4:	4b38      	ldr	r3, [pc, #224]	; (80020a8 <LCD_Probe+0x124>)
 8001fc6:	4a40      	ldr	r2, [pc, #256]	; (80020c8 <LCD_Probe+0x144>)
 8001fc8:	621a      	str	r2, [r3, #32]
  IOCtx.GetTick          = LCD_IO_GetTick;
 8001fca:	4b37      	ldr	r3, [pc, #220]	; (80020a8 <LCD_Probe+0x124>)
 8001fcc:	4a3f      	ldr	r2, [pc, #252]	; (80020cc <LCD_Probe+0x148>)
 8001fce:	625a      	str	r2, [r3, #36]	; 0x24
  IOCtx.Delay            = LCD_IO_Delay;
 8001fd0:	4b35      	ldr	r3, [pc, #212]	; (80020a8 <LCD_Probe+0x124>)
 8001fd2:	4a3f      	ldr	r2, [pc, #252]	; (80020d0 <LCD_Probe+0x14c>)
 8001fd4:	629a      	str	r2, [r3, #40]	; 0x28

  if(ST7789V_RegisterBusIO(&ObjCtx, &IOCtx) != ST7789V_OK)
 8001fd6:	4934      	ldr	r1, [pc, #208]	; (80020a8 <LCD_Probe+0x124>)
 8001fd8:	483e      	ldr	r0, [pc, #248]	; (80020d4 <LCD_Probe+0x150>)
 8001fda:	f000 f99f 	bl	800231c <ST7789V_RegisterBusIO>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d003      	beq.n	8001fec <LCD_Probe+0x68>
  {
    ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8001fe4:	f06f 0306 	mvn.w	r3, #6
 8001fe8:	647b      	str	r3, [r7, #68]	; 0x44
 8001fea:	e057      	b.n	800209c <LCD_Probe+0x118>
  }
  else
  {
    LcdCompObj = &ObjCtx;
 8001fec:	4b3a      	ldr	r3, [pc, #232]	; (80020d8 <LCD_Probe+0x154>)
 8001fee:	4a39      	ldr	r2, [pc, #228]	; (80020d4 <LCD_Probe+0x150>)
 8001ff0:	601a      	str	r2, [r3, #0]

    ret = LCD_SetupBaudRateForReadOperations(&UserBaudRatePrescaler);
 8001ff2:	f107 0310 	add.w	r3, r7, #16
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 f8c0 	bl	800217c <LCD_SetupBaudRateForReadOperations>
 8001ffc:	6478      	str	r0, [r7, #68]	; 0x44
    if(ret == BSP_ERROR_NONE)
 8001ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002000:	2b00      	cmp	r3, #0
 8002002:	d14b      	bne.n	800209c <LCD_Probe+0x118>
    {
      if((ST7789V_LCD_Driver.ReadID(LcdCompObj, &id) == ST7789V_OK) && (id == ST7789V_ID))
 8002004:	4b35      	ldr	r3, [pc, #212]	; (80020dc <LCD_Probe+0x158>)
 8002006:	689b      	ldr	r3, [r3, #8]
 8002008:	4a33      	ldr	r2, [pc, #204]	; (80020d8 <LCD_Probe+0x154>)
 800200a:	6812      	ldr	r2, [r2, #0]
 800200c:	f107 010c 	add.w	r1, r7, #12
 8002010:	4610      	mov	r0, r2
 8002012:	4798      	blx	r3
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d13b      	bne.n	8002092 <LCD_Probe+0x10e>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4a30      	ldr	r2, [pc, #192]	; (80020e0 <LCD_Probe+0x15c>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d137      	bne.n	8002092 <LCD_Probe+0x10e>
      {
        ret = LCD_SetupBaudRateForWriteOperations(UserBaudRatePrescaler);
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	4618      	mov	r0, r3
 8002026:	f000 f8b4 	bl	8002192 <LCD_SetupBaudRateForWriteOperations>
 800202a:	6478      	str	r0, [r7, #68]	; 0x44
        if(ret == BSP_ERROR_NONE)
 800202c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800202e:	2b00      	cmp	r3, #0
 8002030:	d133      	bne.n	800209a <LCD_Probe+0x116>
        {
          /* LCD Initialization */
          LcdDrv = (LCD_Drv_t *)&ST7789V_LCD_Driver;
 8002032:	4b2c      	ldr	r3, [pc, #176]	; (80020e4 <LCD_Probe+0x160>)
 8002034:	4a29      	ldr	r2, [pc, #164]	; (80020dc <LCD_Probe+0x158>)
 8002036:	601a      	str	r2, [r3, #0]

          ObjCtx.IsInitialized = 0;
 8002038:	4b26      	ldr	r3, [pc, #152]	; (80020d4 <LCD_Probe+0x150>)
 800203a:	2200      	movs	r2, #0
 800203c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          ST7789V_InitParams.Endian         = ST7789V_ENDIAN_LITTLE;
 8002040:	2301      	movs	r3, #1
 8002042:	753b      	strb	r3, [r7, #20]
          ST7789V_InitParams.SwapRB         = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	61bb      	str	r3, [r7, #24]
          ST7789V_InitParams.ColorCoding    = ST7789V_FORMAT_DEFAULT;
 8002048:	2355      	movs	r3, #85	; 0x55
 800204a:	61fb      	str	r3, [r7, #28]
          ST7789V_InitParams.Orientation    = Orientation;
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	623b      	str	r3, [r7, #32]
          ST7789V_InitParams.TEScanline     = 0;
 8002050:	2300      	movs	r3, #0
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
          ST7789V_InitParams.TEMode         = ST7789V_TE_DISABLED;
 8002054:	2300      	movs	r3, #0
 8002056:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
          ST7789V_InitParams.Timings.hsync  = ST7789V_HSYNC;
 800205a:	2309      	movs	r3, #9
 800205c:	62fb      	str	r3, [r7, #44]	; 0x2c
          ST7789V_InitParams.Timings.hbp    = ST7789V_HBP;
 800205e:	231d      	movs	r3, #29
 8002060:	633b      	str	r3, [r7, #48]	; 0x30
          ST7789V_InitParams.Timings.hfp    = ST7789V_HFP;
 8002062:	2302      	movs	r3, #2
 8002064:	637b      	str	r3, [r7, #52]	; 0x34
          ST7789V_InitParams.Timings.vsync  = ST7789V_VSYNC;
 8002066:	2301      	movs	r3, #1
 8002068:	63bb      	str	r3, [r7, #56]	; 0x38
          ST7789V_InitParams.Timings.vbp    = ST7789V_VBP;
 800206a:	2303      	movs	r3, #3
 800206c:	63fb      	str	r3, [r7, #60]	; 0x3c
          ST7789V_InitParams.Timings.vfp    = ST7789V_VFP;
 800206e:	2302      	movs	r3, #2
 8002070:	643b      	str	r3, [r7, #64]	; 0x40
          if(LcdDrv->Init(LcdCompObj, &ST7789V_InitParams) != ST7789V_OK)
 8002072:	4b1c      	ldr	r3, [pc, #112]	; (80020e4 <LCD_Probe+0x160>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a17      	ldr	r2, [pc, #92]	; (80020d8 <LCD_Probe+0x154>)
 800207a:	6812      	ldr	r2, [r2, #0]
 800207c:	f107 0114 	add.w	r1, r7, #20
 8002080:	4610      	mov	r0, r2
 8002082:	4798      	blx	r3
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d007      	beq.n	800209a <LCD_Probe+0x116>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800208a:	f06f 0304 	mvn.w	r3, #4
 800208e:	647b      	str	r3, [r7, #68]	; 0x44
        if(ret == BSP_ERROR_NONE)
 8002090:	e003      	b.n	800209a <LCD_Probe+0x116>
          }
        }
      }
      else
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8002092:	f06f 0306 	mvn.w	r3, #6
 8002096:	647b      	str	r3, [r7, #68]	; 0x44
 8002098:	e000      	b.n	800209c <LCD_Probe+0x118>
        if(ret == BSP_ERROR_NONE)
 800209a:	bf00      	nop
      }
    }
  }

  return ret;
 800209c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3748      	adds	r7, #72	; 0x48
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	2001cb64 	.word	0x2001cb64
 80020ac:	080021a9 	.word	0x080021a9
 80020b0:	080021d5 	.word	0x080021d5
 80020b4:	08002205 	.word	0x08002205
 80020b8:	080021e5 	.word	0x080021e5
 80020bc:	0800221f 	.word	0x0800221f
 80020c0:	08002259 	.word	0x08002259
 80020c4:	08002273 	.word	0x08002273
 80020c8:	080022b7 	.word	0x080022b7
 80020cc:	080020e9 	.word	0x080020e9
 80020d0:	080020ff 	.word	0x080020ff
 80020d4:	2001cb90 	.word	0x2001cb90
 80020d8:	2001cb5c 	.word	0x2001cb5c
 80020dc:	20000008 	.word	0x20000008
 80020e0:	00858552 	.word	0x00858552
 80020e4:	2001cb60 	.word	0x2001cb60

080020e8 <LCD_IO_GetTick>:
/**
  * @brief  Provide a tick value in millisecond.
  * @retval int32_t:  Tick value.
  */
static int32_t LCD_IO_GetTick(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
  uint32_t ret;
  ret = HAL_GetTick();
 80020ee:	f000 fef1 	bl	8002ed4 <HAL_GetTick>
 80020f2:	6078      	str	r0, [r7, #4]
  return (int32_t)ret;
 80020f4:	687b      	ldr	r3, [r7, #4]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3708      	adds	r7, #8
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <LCD_IO_Delay>:
  * @brief  LCD IO delay
  * @param  Delay:    Delay in ms
  * @retval int32_t:  Error status
  */
static int32_t LCD_IO_Delay(uint32_t Delay)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f000 fef0 	bl	8002eec <HAL_Delay>
  return BSP_ERROR_NONE;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}

08002116 <FMC_BANK1_WriteReg>:
/**
  * @brief  Writes register address.
  * @param  Reg: Register to be written
  */
__STATIC_INLINE void FMC_BANK1_WriteReg(uint8_t Reg)
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	4603      	mov	r3, r0
 800211e:	71fb      	strb	r3, [r7, #7]
    /* Write 16-bits Index, then write register */
    *(uint8_t *)(FMC_BANK1_REG) = Reg;
 8002120:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8002124:	79fb      	ldrb	r3, [r7, #7]
 8002126:	7013      	strb	r3, [r2, #0]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002128:	f3bf 8f4f 	dsb	sy
}
 800212c:	bf00      	nop
    __DSB();
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
	...

0800213c <FMC_BANK1_WriteData>:
/**
  * @brief  Writes register value.
  * @param  Data: Data to be written
  */
__STATIC_INLINE void FMC_BANK1_WriteData(uint16_t Data)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	4603      	mov	r3, r0
 8002144:	80fb      	strh	r3, [r7, #6]
    /* Write 16-bits Reg */
    *(uint8_t *)(FMC_BANK1_MEM) = Data;
 8002146:	4b06      	ldr	r3, [pc, #24]	; (8002160 <FMC_BANK1_WriteData+0x24>)
 8002148:	88fa      	ldrh	r2, [r7, #6]
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 800214e:	f3bf 8f4f 	dsb	sy
}
 8002152:	bf00      	nop
    __DSB();
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	60000002 	.word	0x60000002

08002164 <FMC_BANK1_ReadData>:
/**
  * @brief  Reads register value.
  * @retval Read value
  */
__STATIC_INLINE uint16_t FMC_BANK1_ReadData(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
    return *(uint8_t *)(FMC_BANK1_MEM);
 8002168:	4b03      	ldr	r3, [pc, #12]	; (8002178 <FMC_BANK1_ReadData+0x14>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	b29b      	uxth	r3, r3
}
 800216e:	4618      	mov	r0, r3
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr
 8002178:	60000002 	.word	0x60000002

0800217c <LCD_SetupBaudRateForReadOperations>:
  * @brief  Setup SPI Baud Rate for Read Operations
  * @param  UserBaudRatePrescaler User's Baud Rate
  * @retval BSP status
  */
static int32_t LCD_SetupBaudRateForReadOperations(uint32_t *UserBaudRatePrescaler)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(UserBaudRatePrescaler);

  return BSP_ERROR_NONE;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <LCD_SetupBaudRateForWriteOperations>:
  * @brief  Setup SPI Baud Rate for Write Operations
  * @param  UserBaudRatePrescaler User's Baud Rate
  * @retval BSP status
  */
static int32_t LCD_SetupBaudRateForWriteOperations(uint32_t UserBaudRatePrescaler)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(UserBaudRatePrescaler);

  return BSP_ERROR_NONE;
 800219a:	2300      	movs	r3, #0
}
 800219c:	4618      	mov	r0, r3
 800219e:	370c      	adds	r7, #12
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <LCD_IO_Init>:
/**
  * @brief  Initializes LCD low level.
  * @retval BSP status
  */
static int32_t LCD_IO_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LCD_IO_Init 1 */

  /* USER CODE END LCD_IO_Init 1 */

  LCD_RST_LOW();
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <LCD_IO_Init+0x28>)
 80021ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021b2:	629a      	str	r2, [r3, #40]	; 0x28
  LCD_IO_Delay(120);
 80021b4:	2078      	movs	r0, #120	; 0x78
 80021b6:	f7ff ffa2 	bl	80020fe <LCD_IO_Delay>
  LCD_RST_HIGH();
 80021ba:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <LCD_IO_Init+0x28>)
 80021bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80021c0:	619a      	str	r2, [r3, #24]
  LCD_IO_Delay(120);
 80021c2:	2078      	movs	r0, #120	; 0x78
 80021c4:	f7ff ff9b 	bl	80020fe <LCD_IO_Delay>

  /* USER CODE BEGIN LCD_IO_Init 2 */

  /* USER CODE END LCD_IO_Init 2 */

  return BSP_ERROR_NONE;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	42021400 	.word	0x42021400

080021d4 <LCD_IO_DeInit>:
/**
  * @brief  DeInitializes LCD low level
  * @retval BSP status
  */
static int32_t LCD_IO_DeInit(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LCD_IO_DeInit */

  return BSP_ERROR_NONE;
 80021d8:	2300      	movs	r3, #0

  /* USER CODE END LCD_IO_DeInit */
}
 80021da:	4618      	mov	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <LCD_IO_WriteReg>:
  * @param  Reg    Register to be written
  * @param  Length length of data be read from the LCD GRAM
  * @retval BSP status
  */
static int32_t LCD_IO_WriteReg(volatile uint8_t *Reg, uint32_t Length)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  /* There is only one register which is the command register */
  FMC_BANK1_WriteReg(*Reg);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff8e 	bl	8002116 <FMC_BANK1_WriteReg>

  return BSP_ERROR_NONE;
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3708      	adds	r7, #8
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <LCD_IO_ReadReg>:
  * @param  Reg    Register to be read
  * @param  Length length of data be read from the LCD GRAM
  * @retval BSP status
  */
static int32_t LCD_IO_ReadReg(volatile uint8_t *Reg, uint32_t Length)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN LCD_IO_ReadReg */

  return BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800220e:	f06f 030a 	mvn.w	r3, #10

  /* USER CODE END LCD_IO_ReadReg */
}
 8002212:	4618      	mov	r0, r3
 8002214:	370c      	adds	r7, #12
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <LCD_IO_SendData>:
  * @param  pData  pointer to data to write to LCD GRAM.
  * @param  Length length of data to write to LCD GRAM
  * @retval Error status
  */
static int32_t LCD_IO_SendData(uint8_t *pData, uint32_t Length)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b084      	sub	sp, #16
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	6039      	str	r1, [r7, #0]
  uint32_t  i;

  for (i = 0; i < (Length / 2); i+=2)
 8002228:	2300      	movs	r3, #0
 800222a:	60fb      	str	r3, [r7, #12]
 800222c:	e00a      	b.n	8002244 <LCD_IO_SendData+0x26>
  {
    FMC_BANK1_WriteData(pData[i]);
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4413      	add	r3, r2
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	b29b      	uxth	r3, r3
 8002238:	4618      	mov	r0, r3
 800223a:	f7ff ff7f 	bl	800213c <FMC_BANK1_WriteData>
  for (i = 0; i < (Length / 2); i+=2)
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	3302      	adds	r3, #2
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	085b      	lsrs	r3, r3, #1
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	429a      	cmp	r2, r3
 800224c:	d3ef      	bcc.n	800222e <LCD_IO_SendData+0x10>
  }

  return BSP_ERROR_NONE;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3710      	adds	r7, #16
 8002254:	46bd      	mov	sp, r7
 8002256:	bd80      	pop	{r7, pc}

08002258 <LCD_IO_SendDataDMA>:
  * @param  pData  pointer to data to write to LCD GRAM.
  * @param  Length length of data to write to LCD GRAM
  * @retval Error status
  */
static int32_t LCD_IO_SendDataDMA(uint8_t *pData, uint32_t Length)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
 8002260:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN LCD_IO_SendDataDMA */

  return BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8002262:	f06f 030a 	mvn.w	r3, #10

  /* USER CODE END LCD_IO_SendDataDMA */
}
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <LCD_IO_RecvData>:
  * @param  pData  pointer to data to read to from selected LCD GRAM.
  * @param  Length length of data to read from selected LCD GRAM
  * @retval Error status
  */
static int32_t LCD_IO_RecvData(uint8_t *pData, uint32_t Length)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b084      	sub	sp, #16
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	6039      	str	r1, [r7, #0]
  uint32_t  i;

  /* Write Register value */
  FMC_BANK1_WriteReg(*pData);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	781b      	ldrb	r3, [r3, #0]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff ff48 	bl	8002116 <FMC_BANK1_WriteReg>

  /* Read data */
  for (i = 0; i < Length; i++)
 8002286:	2300      	movs	r3, #0
 8002288:	60fb      	str	r3, [r7, #12]
 800228a:	e00b      	b.n	80022a4 <LCD_IO_RecvData+0x32>
  {
    pData[i] = FMC_BANK1_ReadData();
 800228c:	f7ff ff6a 	bl	8002164 <FMC_BANK1_ReadData>
 8002290:	4603      	mov	r3, r0
 8002292:	4619      	mov	r1, r3
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	4413      	add	r3, r2
 800229a:	b2ca      	uxtb	r2, r1
 800229c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < Length; i++)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	3301      	adds	r3, #1
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d3ef      	bcc.n	800228c <LCD_IO_RecvData+0x1a>
  }

  return BSP_ERROR_NONE;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3710      	adds	r7, #16
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}

080022b6 <LCD_IO_RecvDataDMA>:
  * @param  pData  pointer to data to read to from selected LCD GRAM.
  * @param  Length length of data to read from selected LCD GRAM
  * @retval Error status
  */
static int32_t LCD_IO_RecvDataDMA(uint8_t *pData, uint32_t Length)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN LCD_IO_RecvDataDMA */

  return BSP_ERROR_FEATURE_NOT_SUPPORTED;
 80022c0:	f06f 030a 	mvn.w	r3, #10

  /* USER CODE END LCD_IO_RecvDataDMA */
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ce:	4770      	bx	lr

080022d0 <LCD_OS_Initialize>:
  * @brief  Initialize the LCD OS ressources.
  * @param  Instance LCD Instance
  * @retval None
  */
uint8_t LCD_OS_Initialize(uint32_t Instance)
{
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  for(i = 0; i < LCD_INSTANCES_NBR; i++)
 80022d8:	2300      	movs	r3, #0
 80022da:	73fb      	strb	r3, [r7, #15]
 80022dc:	e014      	b.n	8002308 <LCD_OS_Initialize+0x38>
  {
    /* Create Binary Semaphore */
    LCD_OS_Sem[i] = osSemaphoreNew(1, 1, NULL);
 80022de:	7bfc      	ldrb	r4, [r7, #15]
 80022e0:	2200      	movs	r2, #0
 80022e2:	2101      	movs	r1, #1
 80022e4:	2001      	movs	r0, #1
 80022e6:	f008 fb3a 	bl	800a95e <osSemaphoreNew>
 80022ea:	4603      	mov	r3, r0
 80022ec:	4a0a      	ldr	r2, [pc, #40]	; (8002318 <LCD_OS_Initialize+0x48>)
 80022ee:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
    if(LCD_OS_Sem[i] == NULL)
 80022f2:	7bfb      	ldrb	r3, [r7, #15]
 80022f4:	4a08      	ldr	r2, [pc, #32]	; (8002318 <LCD_OS_Initialize+0x48>)
 80022f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d101      	bne.n	8002302 <LCD_OS_Initialize+0x32>
    {
      return LCD_OS_ERROR_INIT;
 80022fe:	2302      	movs	r3, #2
 8002300:	e006      	b.n	8002310 <LCD_OS_Initialize+0x40>
  for(i = 0; i < LCD_INSTANCES_NBR; i++)
 8002302:	7bfb      	ldrb	r3, [r7, #15]
 8002304:	3301      	adds	r3, #1
 8002306:	73fb      	strb	r3, [r7, #15]
 8002308:	7bfb      	ldrb	r3, [r7, #15]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d0e7      	beq.n	80022de <LCD_OS_Initialize+0xe>
    }
  }

  return LCD_OS_ERROR_NONE;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	bd90      	pop	{r4, r7, pc}
 8002318:	2001cbe4 	.word	0x2001cbe4

0800231c <ST7789V_RegisterBusIO>:
  * @param  pObj Component object pointer
  * @param  pIO  Component IO structure pointer
  * @retval Component status
  */
int32_t ST7789V_RegisterBusIO (ST7789V_Object_t *pObj, ST7789V_IO_t *pIO)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b084      	sub	sp, #16
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d103      	bne.n	8002334 <ST7789V_RegisterBusIO+0x18>
  {
    ret = ST7789V_ERROR;
 800232c:	f04f 33ff 	mov.w	r3, #4294967295
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	e048      	b.n	80023c6 <ST7789V_RegisterBusIO+0xaa>
  }
  else
  {
    pObj->IO.Init         = pIO->Init;
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit       = pIO->DeInit;
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	605a      	str	r2, [r3, #4]
    pObj->IO.Address      = pIO->Address;
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	891a      	ldrh	r2, [r3, #8]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg     = pIO->WriteReg;
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	68da      	ldr	r2, [r3, #12]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg      = pIO->ReadReg;
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	691a      	ldr	r2, [r3, #16]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	611a      	str	r2, [r3, #16]
    pObj->IO.SendData     = pIO->SendData;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	695a      	ldr	r2, [r3, #20]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	615a      	str	r2, [r3, #20]
    pObj->IO.SendDataDMA  = pIO->SendDataDMA;
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	699a      	ldr	r2, [r3, #24]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	619a      	str	r2, [r3, #24]
    pObj->IO.RecvData     = pIO->RecvData;
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	69da      	ldr	r2, [r3, #28]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	61da      	str	r2, [r3, #28]
    pObj->IO.RecvDataDMA  = pIO->RecvDataDMA;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	6a1a      	ldr	r2, [r3, #32]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	621a      	str	r2, [r3, #32]
    pObj->IO.GetTick      = pIO->GetTick;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	625a      	str	r2, [r3, #36]	; 0x24

    pObj->Ctx.ReadReg     = ST7789V_ReadRegWrap;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	4a12      	ldr	r2, [pc, #72]	; (80023d0 <ST7789V_RegisterBusIO+0xb4>)
 8002388:	631a      	str	r2, [r3, #48]	; 0x30
    pObj->Ctx.WriteReg    = ST7789V_WriteRegWrap;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4a11      	ldr	r2, [pc, #68]	; (80023d4 <ST7789V_RegisterBusIO+0xb8>)
 800238e:	62da      	str	r2, [r3, #44]	; 0x2c
    pObj->Ctx.SendData    = ST7789V_SendDataWrap;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a11      	ldr	r2, [pc, #68]	; (80023d8 <ST7789V_RegisterBusIO+0xbc>)
 8002394:	635a      	str	r2, [r3, #52]	; 0x34
    pObj->Ctx.SendDataDMA = ST7789V_SendDataDMAWrap;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a10      	ldr	r2, [pc, #64]	; (80023dc <ST7789V_RegisterBusIO+0xc0>)
 800239a:	639a      	str	r2, [r3, #56]	; 0x38
    pObj->Ctx.RecvData    = ST7789V_RecvDataWrap;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a10      	ldr	r2, [pc, #64]	; (80023e0 <ST7789V_RegisterBusIO+0xc4>)
 80023a0:	63da      	str	r2, [r3, #60]	; 0x3c
    pObj->Ctx.RecvDataDMA = ST7789V_RecvDataDMAWrap;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a0f      	ldr	r2, [pc, #60]	; (80023e4 <ST7789V_RegisterBusIO+0xc8>)
 80023a6:	641a      	str	r2, [r3, #64]	; 0x40
    pObj->Ctx.handle      = pObj;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	645a      	str	r2, [r3, #68]	; 0x44

    if(pObj->IO.Init != NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d004      	beq.n	80023c0 <ST7789V_RegisterBusIO+0xa4>
    {
      ret = pObj->IO.Init();
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4798      	blx	r3
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	e002      	b.n	80023c6 <ST7789V_RegisterBusIO+0xaa>
    }
    else
    {
      ret = ST7789V_ERROR;
 80023c0:	f04f 33ff 	mov.w	r3, #4294967295
 80023c4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80023c6:	68fb      	ldr	r3, [r7, #12]
}
 80023c8:	4618      	mov	r0, r3
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}
 80023d0:	08002cff 	.word	0x08002cff
 80023d4:	08002d23 	.word	0x08002d23
 80023d8:	08002d47 	.word	0x08002d47
 80023dc:	08002d6b 	.word	0x08002d6b
 80023e0:	08002d8f 	.word	0x08002d8f
 80023e4:	08002db3 	.word	0x08002db3

080023e8 <ST7789V_Init>:
  * @param  pObj Component object
  * @param  pInitParams Initialization Parameters
  * @retval Component status
  */
int32_t ST7789V_Init(ST7789V_Object_t *pObj, ST7789V_InitParams_t* pInitParams)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08a      	sub	sp, #40	; 0x28
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  int32_t ret = ST7789V_OK;
 80023f2:	2300      	movs	r3, #0
 80023f4:	61fb      	str	r3, [r7, #28]
  uint8_t __IO parameter[15];
  uint8_t __IO reg;
  uint8_t i;

  if((pObj == NULL) || (pInitParams->Orientation > ST7789V_ORIENTATION_LANDSCAPE_ROT180))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <ST7789V_Init+0x1c>
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	2b03      	cmp	r3, #3
 8002402:	d903      	bls.n	800240c <ST7789V_Init+0x24>
  {
    ret = ST7789V_ERROR;
 8002404:	f04f 33ff 	mov.w	r3, #4294967295
 8002408:	61fb      	str	r3, [r7, #28]
 800240a:	e2b9      	b.n	8002980 <ST7789V_Init+0x598>
  }
  else if (pObj->IsInitialized == 0)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002412:	2b00      	cmp	r3, #0
 8002414:	f040 82b4 	bne.w	8002980 <ST7789V_Init+0x598>
  {
    /* Sleep In Command */
    reg = ST7789V_SPLIN;
 8002418:	2310      	movs	r3, #16
 800241a:	72fb      	strb	r3, [r7, #11]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	332c      	adds	r3, #44	; 0x2c
 8002420:	f107 010b 	add.w	r1, r7, #11
 8002424:	2201      	movs	r2, #1
 8002426:	4618      	mov	r0, r3
 8002428:	f000 fcef 	bl	8002e0a <st7789v_write_reg>
 800242c:	4602      	mov	r2, r0
 800242e:	69fb      	ldr	r3, [r7, #28]
 8002430:	4413      	add	r3, r2
 8002432:	61fb      	str	r3, [r7, #28]
    /* Wait for 10ms */
    ST7789V_Delay(pObj, 10);
 8002434:	210a      	movs	r1, #10
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f000 fccd 	bl	8002dd6 <ST7789V_Delay>

    /* SW Reset Command */
    reg = ST7789V_SWRESET;
 800243c:	2301      	movs	r3, #1
 800243e:	72fb      	strb	r3, [r7, #11]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	332c      	adds	r3, #44	; 0x2c
 8002444:	f107 010b 	add.w	r1, r7, #11
 8002448:	2201      	movs	r2, #1
 800244a:	4618      	mov	r0, r3
 800244c:	f000 fcdd 	bl	8002e0a <st7789v_write_reg>
 8002450:	4602      	mov	r2, r0
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	4413      	add	r3, r2
 8002456:	61fb      	str	r3, [r7, #28]
    /* Wait for 200ms */
    ST7789V_Delay(pObj, 200);
 8002458:	21c8      	movs	r1, #200	; 0xc8
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 fcbb 	bl	8002dd6 <ST7789V_Delay>

    /* Sleep Out Command */
    reg = ST7789V_SLEEP_OUT;
 8002460:	2311      	movs	r3, #17
 8002462:	72fb      	strb	r3, [r7, #11]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	332c      	adds	r3, #44	; 0x2c
 8002468:	f107 010b 	add.w	r1, r7, #11
 800246c:	2201      	movs	r2, #1
 800246e:	4618      	mov	r0, r3
 8002470:	f000 fccb 	bl	8002e0a <st7789v_write_reg>
 8002474:	4602      	mov	r2, r0
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	4413      	add	r3, r2
 800247a:	61fb      	str	r3, [r7, #28]
    /* Wait for 120ms */
    ST7789V_Delay(pObj, 120);
 800247c:	2178      	movs	r1, #120	; 0x78
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 fca9 	bl	8002dd6 <ST7789V_Delay>

    /* Display Normal mode Command */
    reg = ST7789V_NORMAL_MODE_ON;
 8002484:	2313      	movs	r3, #19
 8002486:	72fb      	strb	r3, [r7, #11]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	332c      	adds	r3, #44	; 0x2c
 800248c:	f107 010b 	add.w	r1, r7, #11
 8002490:	2201      	movs	r2, #1
 8002492:	4618      	mov	r0, r3
 8002494:	f000 fcb9 	bl	8002e0a <st7789v_write_reg>
 8002498:	4602      	mov	r2, r0
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	4413      	add	r3, r2
 800249e:	61fb      	str	r3, [r7, #28]
    /* Wait for 100ms */
    ST7789V_Delay(pObj, 100);
 80024a0:	2164      	movs	r1, #100	; 0x64
 80024a2:	6878      	ldr	r0, [r7, #4]
 80024a4:	f000 fc97 	bl	8002dd6 <ST7789V_Delay>

    /* RAM Control Command */
    reg = ST7789V_RAM_CTRL;
 80024a8:	23b0      	movs	r3, #176	; 0xb0
 80024aa:	72fb      	strb	r3, [r7, #11]
    parameter[0] = 0x00;
 80024ac:	2300      	movs	r3, #0
 80024ae:	733b      	strb	r3, [r7, #12]
    if(pInitParams->Endian == ST7789V_ENDIAN_LITTLE)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d102      	bne.n	80024be <ST7789V_Init+0xd6>
    {
      parameter[1] = 0xF8;
 80024b8:	23f8      	movs	r3, #248	; 0xf8
 80024ba:	737b      	strb	r3, [r7, #13]
 80024bc:	e001      	b.n	80024c2 <ST7789V_Init+0xda>
    }
    else
    {
      parameter[1] = 0xF0;
 80024be:	23f0      	movs	r3, #240	; 0xf0
 80024c0:	737b      	strb	r3, [r7, #13]
    }
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	332c      	adds	r3, #44	; 0x2c
 80024c6:	f107 010b 	add.w	r1, r7, #11
 80024ca:	2201      	movs	r2, #1
 80024cc:	4618      	mov	r0, r3
 80024ce:	f000 fc9c 	bl	8002e0a <st7789v_write_reg>
 80024d2:	4602      	mov	r2, r0
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	4413      	add	r3, r2
 80024d8:	61fb      	str	r3, [r7, #28]
    ret += st7789v_send_data(&pObj->Ctx, (uint8_t *)parameter, 2);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	332c      	adds	r3, #44	; 0x2c
 80024de:	f107 010c 	add.w	r1, r7, #12
 80024e2:	2202      	movs	r2, #2
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 fca2 	bl	8002e2e <st7789v_send_data>
 80024ea:	4602      	mov	r2, r0
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	4413      	add	r3, r2
 80024f0:	61fb      	str	r3, [r7, #28]

    if(pInitParams->SwapRB)
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d032      	beq.n	8002560 <ST7789V_Init+0x178>
    {
      for(i = 0; i < 4; i++)
 80024fa:	2300      	movs	r3, #0
 80024fc:	76fb      	strb	r3, [r7, #27]
 80024fe:	e00c      	b.n	800251a <ST7789V_Init+0x132>
      {
        OrientationTab[i] |= 0x08;
 8002500:	7efb      	ldrb	r3, [r7, #27]
 8002502:	4a16      	ldr	r2, [pc, #88]	; (800255c <ST7789V_Init+0x174>)
 8002504:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002508:	7efb      	ldrb	r3, [r7, #27]
 800250a:	f042 0208 	orr.w	r2, r2, #8
 800250e:	4913      	ldr	r1, [pc, #76]	; (800255c <ST7789V_Init+0x174>)
 8002510:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      for(i = 0; i < 4; i++)
 8002514:	7efb      	ldrb	r3, [r7, #27]
 8002516:	3301      	adds	r3, #1
 8002518:	76fb      	strb	r3, [r7, #27]
 800251a:	7efb      	ldrb	r3, [r7, #27]
 800251c:	2b03      	cmp	r3, #3
 800251e:	d9ef      	bls.n	8002500 <ST7789V_Init+0x118>
      }

      /* LCM Control Command */
      reg = ST7789V_LCM_CTRL;
 8002520:	23c0      	movs	r3, #192	; 0xc0
 8002522:	72fb      	strb	r3, [r7, #11]
      parameter[0] = 0x0C;
 8002524:	230c      	movs	r3, #12
 8002526:	733b      	strb	r3, [r7, #12]
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	332c      	adds	r3, #44	; 0x2c
 800252c:	f107 010b 	add.w	r1, r7, #11
 8002530:	2201      	movs	r2, #1
 8002532:	4618      	mov	r0, r3
 8002534:	f000 fc69 	bl	8002e0a <st7789v_write_reg>
 8002538:	4602      	mov	r2, r0
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	4413      	add	r3, r2
 800253e:	61fb      	str	r3, [r7, #28]
      ret += st7789v_send_data(&pObj->Ctx, (uint8_t *)parameter, 1);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	332c      	adds	r3, #44	; 0x2c
 8002544:	f107 010c 	add.w	r1, r7, #12
 8002548:	2201      	movs	r2, #1
 800254a:	4618      	mov	r0, r3
 800254c:	f000 fc6f 	bl	8002e2e <st7789v_send_data>
 8002550:	4602      	mov	r2, r0
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	4413      	add	r3, r2
 8002556:	61fb      	str	r3, [r7, #28]
 8002558:	e002      	b.n	8002560 <ST7789V_Init+0x178>
 800255a:	bf00      	nop
 800255c:	20000058 	.word	0x20000058
    }

    /* Set Display Orientation */
    ret += ST7789V_SetOrientation(pObj, pInitParams->Orientation);
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	4619      	mov	r1, r3
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 fac2 	bl	8002af0 <ST7789V_SetOrientation>
 800256c:	4602      	mov	r2, r0
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	4413      	add	r3, r2
 8002572:	61fb      	str	r3, [r7, #28]

    /* Set Full Screen Display Window */
    ret += ST7789V_SetDisplayWindow(pObj, 0U, 0U, ST7789V_WIDTH, ST7789V_HEIGHT);
 8002574:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	23f0      	movs	r3, #240	; 0xf0
 800257c:	2200      	movs	r2, #0
 800257e:	2100      	movs	r1, #0
 8002580:	6878      	ldr	r0, [r7, #4]
 8002582:	f000 fb3d 	bl	8002c00 <ST7789V_SetDisplayWindow>
 8002586:	4602      	mov	r2, r0
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	4413      	add	r3, r2
 800258c:	61fb      	str	r3, [r7, #28]

    /* Set Pixel Format */
    reg = ST7789V_PIXEL_FORMAT;
 800258e:	233a      	movs	r3, #58	; 0x3a
 8002590:	72fb      	strb	r3, [r7, #11]
    parameter[0] = (uint8_t) pInitParams->ColorCoding;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	689b      	ldr	r3, [r3, #8]
 8002596:	b2db      	uxtb	r3, r3
 8002598:	733b      	strb	r3, [r7, #12]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	332c      	adds	r3, #44	; 0x2c
 800259e:	f107 010b 	add.w	r1, r7, #11
 80025a2:	2201      	movs	r2, #1
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 fc30 	bl	8002e0a <st7789v_write_reg>
 80025aa:	4602      	mov	r2, r0
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	4413      	add	r3, r2
 80025b0:	61fb      	str	r3, [r7, #28]
    ret += st7789v_send_data(&pObj->Ctx, (uint8_t *)parameter, 1);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	332c      	adds	r3, #44	; 0x2c
 80025b6:	f107 010c 	add.w	r1, r7, #12
 80025ba:	2201      	movs	r2, #1
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 fc36 	bl	8002e2e <st7789v_send_data>
 80025c2:	4602      	mov	r2, r0
 80025c4:	69fb      	ldr	r3, [r7, #28]
 80025c6:	4413      	add	r3, r2
 80025c8:	61fb      	str	r3, [r7, #28]

    /* Frame Rate Control in normal mode */
    reg = ST7789V_FRAME_RATE_CTRL2;
 80025ca:	23c6      	movs	r3, #198	; 0xc6
 80025cc:	72fb      	strb	r3, [r7, #11]
    parameter[0] = 0x0F; /* Default is 60 Hz */
 80025ce:	230f      	movs	r3, #15
 80025d0:	733b      	strb	r3, [r7, #12]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	332c      	adds	r3, #44	; 0x2c
 80025d6:	f107 010b 	add.w	r1, r7, #11
 80025da:	2201      	movs	r2, #1
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 fc14 	bl	8002e0a <st7789v_write_reg>
 80025e2:	4602      	mov	r2, r0
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	4413      	add	r3, r2
 80025e8:	61fb      	str	r3, [r7, #28]
    ret += st7789v_send_data(&pObj->Ctx, (uint8_t *)parameter, 1);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	332c      	adds	r3, #44	; 0x2c
 80025ee:	f107 010c 	add.w	r1, r7, #12
 80025f2:	2201      	movs	r2, #1
 80025f4:	4618      	mov	r0, r3
 80025f6:	f000 fc1a 	bl	8002e2e <st7789v_send_data>
 80025fa:	4602      	mov	r2, r0
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	4413      	add	r3, r2
 8002600:	61fb      	str	r3, [r7, #28]

    /* PORCH control setting */
    reg = ST7789V_PORCH_CTRL;
 8002602:	23b2      	movs	r3, #178	; 0xb2
 8002604:	72fb      	strb	r3, [r7, #11]
    parameter[0] = 0x0C;
 8002606:	230c      	movs	r3, #12
 8002608:	733b      	strb	r3, [r7, #12]
    parameter[1] = 0x0C;
 800260a:	230c      	movs	r3, #12
 800260c:	737b      	strb	r3, [r7, #13]
    parameter[2] = 0x00;
 800260e:	2300      	movs	r3, #0
 8002610:	73bb      	strb	r3, [r7, #14]
    parameter[3] = 0x33;
 8002612:	2333      	movs	r3, #51	; 0x33
 8002614:	73fb      	strb	r3, [r7, #15]
    parameter[4] = 0x33;
 8002616:	2333      	movs	r3, #51	; 0x33
 8002618:	743b      	strb	r3, [r7, #16]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	332c      	adds	r3, #44	; 0x2c
 800261e:	f107 010b 	add.w	r1, r7, #11
 8002622:	2201      	movs	r2, #1
 8002624:	4618      	mov	r0, r3
 8002626:	f000 fbf0 	bl	8002e0a <st7789v_write_reg>
 800262a:	4602      	mov	r2, r0
 800262c:	69fb      	ldr	r3, [r7, #28]
 800262e:	4413      	add	r3, r2
 8002630:	61fb      	str	r3, [r7, #28]
    ret += st7789v_send_data(&pObj->Ctx, (uint8_t *)parameter, 5);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	332c      	adds	r3, #44	; 0x2c
 8002636:	f107 010c 	add.w	r1, r7, #12
 800263a:	2205      	movs	r2, #5
 800263c:	4618      	mov	r0, r3
 800263e:	f000 fbf6 	bl	8002e2e <st7789v_send_data>
 8002642:	4602      	mov	r2, r0
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	4413      	add	r3, r2
 8002648:	61fb      	str	r3, [r7, #28]

    /* GATE control setting */
    reg = ST7789V_GATE_CTRL;
 800264a:	23b7      	movs	r3, #183	; 0xb7
 800264c:	72fb      	strb	r3, [r7, #11]
    parameter[0] = 0x35;
 800264e:	2335      	movs	r3, #53	; 0x35
 8002650:	733b      	strb	r3, [r7, #12]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	332c      	adds	r3, #44	; 0x2c
 8002656:	f107 010b 	add.w	r1, r7, #11
 800265a:	2201      	movs	r2, #1
 800265c:	4618      	mov	r0, r3
 800265e:	f000 fbd4 	bl	8002e0a <st7789v_write_reg>
 8002662:	4602      	mov	r2, r0
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	4413      	add	r3, r2
 8002668:	61fb      	str	r3, [r7, #28]
    ret += st7789v_send_data(&pObj->Ctx, (uint8_t *)parameter, 1);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	332c      	adds	r3, #44	; 0x2c
 800266e:	f107 010c 	add.w	r1, r7, #12
 8002672:	2201      	movs	r2, #1
 8002674:	4618      	mov	r0, r3
 8002676:	f000 fbda 	bl	8002e2e <st7789v_send_data>
 800267a:	4602      	mov	r2, r0
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	4413      	add	r3, r2
 8002680:	61fb      	str	r3, [r7, #28]

    /*--------------- ST7789H2 Power setting ---------------------------------*/
    /* VCOM setting */
    reg = ST7789V_VCOM_SET;
 8002682:	23bb      	movs	r3, #187	; 0xbb
 8002684:	72fb      	strb	r3, [r7, #11]
    parameter[0] = 0x1F;
 8002686:	231f      	movs	r3, #31
 8002688:	733b      	strb	r3, [r7, #12]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	332c      	adds	r3, #44	; 0x2c
 800268e:	f107 010b 	add.w	r1, r7, #11
 8002692:	2201      	movs	r2, #1
 8002694:	4618      	mov	r0, r3
 8002696:	f000 fbb8 	bl	8002e0a <st7789v_write_reg>
 800269a:	4602      	mov	r2, r0
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	4413      	add	r3, r2
 80026a0:	61fb      	str	r3, [r7, #28]
    ret += st7789v_send_data(&pObj->Ctx, (uint8_t *)parameter, 1);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	332c      	adds	r3, #44	; 0x2c
 80026a6:	f107 010c 	add.w	r1, r7, #12
 80026aa:	2201      	movs	r2, #1
 80026ac:	4618      	mov	r0, r3
 80026ae:	f000 fbbe 	bl	8002e2e <st7789v_send_data>
 80026b2:	4602      	mov	r2, r0
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	4413      	add	r3, r2
 80026b8:	61fb      	str	r3, [r7, #28]

    /* LCM Control setting */
    reg = ST7789V_LCM_CTRL;
 80026ba:	23c0      	movs	r3, #192	; 0xc0
 80026bc:	72fb      	strb	r3, [r7, #11]
    parameter[0] = 0x2C;
 80026be:	232c      	movs	r3, #44	; 0x2c
 80026c0:	733b      	strb	r3, [r7, #12]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	332c      	adds	r3, #44	; 0x2c
 80026c6:	f107 010b 	add.w	r1, r7, #11
 80026ca:	2201      	movs	r2, #1
 80026cc:	4618      	mov	r0, r3
 80026ce:	f000 fb9c 	bl	8002e0a <st7789v_write_reg>
 80026d2:	4602      	mov	r2, r0
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	4413      	add	r3, r2
 80026d8:	61fb      	str	r3, [r7, #28]
    ret += st7789v_send_data(&pObj->Ctx, (uint8_t *)parameter, 1);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	332c      	adds	r3, #44	; 0x2c
 80026de:	f107 010c 	add.w	r1, r7, #12
 80026e2:	2201      	movs	r2, #1
 80026e4:	4618      	mov	r0, r3
 80026e6:	f000 fba2 	bl	8002e2e <st7789v_send_data>
 80026ea:	4602      	mov	r2, r0
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	4413      	add	r3, r2
 80026f0:	61fb      	str	r3, [r7, #28]

    /* VDV and VRH Command Enable */
    reg = ST7789V_VDV_VRH_EN;
 80026f2:	23c2      	movs	r3, #194	; 0xc2
 80026f4:	72fb      	strb	r3, [r7, #11]
    parameter[0] = 0x01;
 80026f6:	2301      	movs	r3, #1
 80026f8:	733b      	strb	r3, [r7, #12]
    parameter[1] = 0xC3;
 80026fa:	23c3      	movs	r3, #195	; 0xc3
 80026fc:	737b      	strb	r3, [r7, #13]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	332c      	adds	r3, #44	; 0x2c
 8002702:	f107 010b 	add.w	r1, r7, #11
 8002706:	2201      	movs	r2, #1
 8002708:	4618      	mov	r0, r3
 800270a:	f000 fb7e 	bl	8002e0a <st7789v_write_reg>
 800270e:	4602      	mov	r2, r0
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	4413      	add	r3, r2
 8002714:	61fb      	str	r3, [r7, #28]
    ret += st7789v_send_data(&pObj->Ctx, (uint8_t *)parameter, 2);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	332c      	adds	r3, #44	; 0x2c
 800271a:	f107 010c 	add.w	r1, r7, #12
 800271e:	2202      	movs	r2, #2
 8002720:	4618      	mov	r0, r3
 8002722:	f000 fb84 	bl	8002e2e <st7789v_send_data>
 8002726:	4602      	mov	r2, r0
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	4413      	add	r3, r2
 800272c:	61fb      	str	r3, [r7, #28]

    /* VDV Set */
    reg = ST7789V_VDV_SET;
 800272e:	23c4      	movs	r3, #196	; 0xc4
 8002730:	72fb      	strb	r3, [r7, #11]
    parameter[0] = 0x20;
 8002732:	2320      	movs	r3, #32
 8002734:	733b      	strb	r3, [r7, #12]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	332c      	adds	r3, #44	; 0x2c
 800273a:	f107 010b 	add.w	r1, r7, #11
 800273e:	2201      	movs	r2, #1
 8002740:	4618      	mov	r0, r3
 8002742:	f000 fb62 	bl	8002e0a <st7789v_write_reg>
 8002746:	4602      	mov	r2, r0
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	4413      	add	r3, r2
 800274c:	61fb      	str	r3, [r7, #28]
    ret += st7789v_send_data(&pObj->Ctx, (uint8_t *)parameter, 1);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	332c      	adds	r3, #44	; 0x2c
 8002752:	f107 010c 	add.w	r1, r7, #12
 8002756:	2201      	movs	r2, #1
 8002758:	4618      	mov	r0, r3
 800275a:	f000 fb68 	bl	8002e2e <st7789v_send_data>
 800275e:	4602      	mov	r2, r0
 8002760:	69fb      	ldr	r3, [r7, #28]
 8002762:	4413      	add	r3, r2
 8002764:	61fb      	str	r3, [r7, #28]

    /* Power Control */
    reg = ST7789V_POWER_CTRL;
 8002766:	23d0      	movs	r3, #208	; 0xd0
 8002768:	72fb      	strb	r3, [r7, #11]
    parameter[0] = 0xA4;
 800276a:	23a4      	movs	r3, #164	; 0xa4
 800276c:	733b      	strb	r3, [r7, #12]
    parameter[1] = 0xA1;
 800276e:	23a1      	movs	r3, #161	; 0xa1
 8002770:	737b      	strb	r3, [r7, #13]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	332c      	adds	r3, #44	; 0x2c
 8002776:	f107 010b 	add.w	r1, r7, #11
 800277a:	2201      	movs	r2, #1
 800277c:	4618      	mov	r0, r3
 800277e:	f000 fb44 	bl	8002e0a <st7789v_write_reg>
 8002782:	4602      	mov	r2, r0
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	4413      	add	r3, r2
 8002788:	61fb      	str	r3, [r7, #28]
    ret += st7789v_send_data(&pObj->Ctx, (uint8_t *)parameter, 2);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	332c      	adds	r3, #44	; 0x2c
 800278e:	f107 010c 	add.w	r1, r7, #12
 8002792:	2202      	movs	r2, #2
 8002794:	4618      	mov	r0, r3
 8002796:	f000 fb4a 	bl	8002e2e <st7789v_send_data>
 800279a:	4602      	mov	r2, r0
 800279c:	69fb      	ldr	r3, [r7, #28]
 800279e:	4413      	add	r3, r2
 80027a0:	61fb      	str	r3, [r7, #28]

    /*--------------- ST7789H2 Gamma setting ---------------------------------*/
    /* Positive Voltage Gamma Control */
    reg = ST7789V_PV_GAMMA_CTRL;
 80027a2:	23e0      	movs	r3, #224	; 0xe0
 80027a4:	72fb      	strb	r3, [r7, #11]
    parameter[0]  = 0xD0;
 80027a6:	23d0      	movs	r3, #208	; 0xd0
 80027a8:	733b      	strb	r3, [r7, #12]
    parameter[1]  = 0x08;
 80027aa:	2308      	movs	r3, #8
 80027ac:	737b      	strb	r3, [r7, #13]
    parameter[2]  = 0x11;
 80027ae:	2311      	movs	r3, #17
 80027b0:	73bb      	strb	r3, [r7, #14]
    parameter[3]  = 0x08;
 80027b2:	2308      	movs	r3, #8
 80027b4:	73fb      	strb	r3, [r7, #15]
    parameter[4]  = 0x0C;
 80027b6:	230c      	movs	r3, #12
 80027b8:	743b      	strb	r3, [r7, #16]
    parameter[5]  = 0x15;
 80027ba:	2315      	movs	r3, #21
 80027bc:	747b      	strb	r3, [r7, #17]
    parameter[6]  = 0x39;
 80027be:	2339      	movs	r3, #57	; 0x39
 80027c0:	74bb      	strb	r3, [r7, #18]
    parameter[7]  = 0x33;
 80027c2:	2333      	movs	r3, #51	; 0x33
 80027c4:	74fb      	strb	r3, [r7, #19]
    parameter[8]  = 0x50;
 80027c6:	2350      	movs	r3, #80	; 0x50
 80027c8:	753b      	strb	r3, [r7, #20]
    parameter[9]  = 0x36;
 80027ca:	2336      	movs	r3, #54	; 0x36
 80027cc:	757b      	strb	r3, [r7, #21]
    parameter[10] = 0x13;
 80027ce:	2313      	movs	r3, #19
 80027d0:	75bb      	strb	r3, [r7, #22]
    parameter[11] = 0x14;
 80027d2:	2314      	movs	r3, #20
 80027d4:	75fb      	strb	r3, [r7, #23]
    parameter[12] = 0x29;
 80027d6:	2329      	movs	r3, #41	; 0x29
 80027d8:	763b      	strb	r3, [r7, #24]
    parameter[13] = 0x2D;
 80027da:	232d      	movs	r3, #45	; 0x2d
 80027dc:	767b      	strb	r3, [r7, #25]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	332c      	adds	r3, #44	; 0x2c
 80027e2:	f107 010b 	add.w	r1, r7, #11
 80027e6:	2201      	movs	r2, #1
 80027e8:	4618      	mov	r0, r3
 80027ea:	f000 fb0e 	bl	8002e0a <st7789v_write_reg>
 80027ee:	4602      	mov	r2, r0
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	4413      	add	r3, r2
 80027f4:	61fb      	str	r3, [r7, #28]
    ret += st7789v_send_data(&pObj->Ctx, (uint8_t *)parameter, 14);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	332c      	adds	r3, #44	; 0x2c
 80027fa:	f107 010c 	add.w	r1, r7, #12
 80027fe:	220e      	movs	r2, #14
 8002800:	4618      	mov	r0, r3
 8002802:	f000 fb14 	bl	8002e2e <st7789v_send_data>
 8002806:	4602      	mov	r2, r0
 8002808:	69fb      	ldr	r3, [r7, #28]
 800280a:	4413      	add	r3, r2
 800280c:	61fb      	str	r3, [r7, #28]

    /* Negative Voltage Gamma Control */
    reg = ST7789V_NV_GAMMA_CTRL;
 800280e:	23e1      	movs	r3, #225	; 0xe1
 8002810:	72fb      	strb	r3, [r7, #11]
    parameter[0]  = 0xD0;
 8002812:	23d0      	movs	r3, #208	; 0xd0
 8002814:	733b      	strb	r3, [r7, #12]
    parameter[1]  = 0x08;
 8002816:	2308      	movs	r3, #8
 8002818:	737b      	strb	r3, [r7, #13]
    parameter[2]  = 0x10;
 800281a:	2310      	movs	r3, #16
 800281c:	73bb      	strb	r3, [r7, #14]
    parameter[3]  = 0x08;
 800281e:	2308      	movs	r3, #8
 8002820:	73fb      	strb	r3, [r7, #15]
    parameter[4]  = 0x06;
 8002822:	2306      	movs	r3, #6
 8002824:	743b      	strb	r3, [r7, #16]
    parameter[5]  = 0x06;
 8002826:	2306      	movs	r3, #6
 8002828:	747b      	strb	r3, [r7, #17]
    parameter[6]  = 0x39;
 800282a:	2339      	movs	r3, #57	; 0x39
 800282c:	74bb      	strb	r3, [r7, #18]
    parameter[7]  = 0x44;
 800282e:	2344      	movs	r3, #68	; 0x44
 8002830:	74fb      	strb	r3, [r7, #19]
    parameter[8]  = 0x51;
 8002832:	2351      	movs	r3, #81	; 0x51
 8002834:	753b      	strb	r3, [r7, #20]
    parameter[9]  = 0x0B;
 8002836:	230b      	movs	r3, #11
 8002838:	757b      	strb	r3, [r7, #21]
    parameter[10] = 0x16;
 800283a:	2316      	movs	r3, #22
 800283c:	75bb      	strb	r3, [r7, #22]
    parameter[11] = 0x14;
 800283e:	2314      	movs	r3, #20
 8002840:	75fb      	strb	r3, [r7, #23]
    parameter[12] = 0x2F;
 8002842:	232f      	movs	r3, #47	; 0x2f
 8002844:	763b      	strb	r3, [r7, #24]
    parameter[13] = 0x31;
 8002846:	2331      	movs	r3, #49	; 0x31
 8002848:	767b      	strb	r3, [r7, #25]
    ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	332c      	adds	r3, #44	; 0x2c
 800284e:	f107 010b 	add.w	r1, r7, #11
 8002852:	2201      	movs	r2, #1
 8002854:	4618      	mov	r0, r3
 8002856:	f000 fad8 	bl	8002e0a <st7789v_write_reg>
 800285a:	4602      	mov	r2, r0
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	4413      	add	r3, r2
 8002860:	61fb      	str	r3, [r7, #28]
    ret += st7789v_send_data(&pObj->Ctx, (uint8_t *)parameter, 14);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	332c      	adds	r3, #44	; 0x2c
 8002866:	f107 010c 	add.w	r1, r7, #12
 800286a:	220e      	movs	r2, #14
 800286c:	4618      	mov	r0, r3
 800286e:	f000 fade 	bl	8002e2e <st7789v_send_data>
 8002872:	4602      	mov	r2, r0
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	4413      	add	r3, r2
 8002878:	61fb      	str	r3, [r7, #28]

    if(pInitParams->TEMode == ST7789V_TE_MODE_1)
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	7d1b      	ldrb	r3, [r3, #20]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d13c      	bne.n	80028fc <ST7789V_Init+0x514>
    {
      // Set TE scan line
      reg = ST7789V_SET_TEAR_SCANLINE;
 8002882:	2344      	movs	r3, #68	; 0x44
 8002884:	72fb      	strb	r3, [r7, #11]
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	332c      	adds	r3, #44	; 0x2c
 800288a:	f107 010b 	add.w	r1, r7, #11
 800288e:	2201      	movs	r2, #1
 8002890:	4618      	mov	r0, r3
 8002892:	f000 faba 	bl	8002e0a <st7789v_write_reg>
 8002896:	4602      	mov	r2, r0
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	4413      	add	r3, r2
 800289c:	61fb      	str	r3, [r7, #28]
      parameter[0] = (pInitParams->TEScanline & 0x100);
 800289e:	2300      	movs	r3, #0
 80028a0:	733b      	strb	r3, [r7, #12]
      parameter[1] = (pInitParams->TEScanline & 0x0FF);
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	737b      	strb	r3, [r7, #13]
      ret += st7789v_send_data(&pObj->Ctx, (uint8_t *)parameter, 2);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	332c      	adds	r3, #44	; 0x2c
 80028ae:	f107 010c 	add.w	r1, r7, #12
 80028b2:	2202      	movs	r2, #2
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 faba 	bl	8002e2e <st7789v_send_data>
 80028ba:	4602      	mov	r2, r0
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	4413      	add	r3, r2
 80028c0:	61fb      	str	r3, [r7, #28]

      reg = ST7789V_TEON;
 80028c2:	2335      	movs	r3, #53	; 0x35
 80028c4:	72fb      	strb	r3, [r7, #11]
      parameter[0] = 0x00; /* VSYNC Only */
 80028c6:	2300      	movs	r3, #0
 80028c8:	733b      	strb	r3, [r7, #12]
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	332c      	adds	r3, #44	; 0x2c
 80028ce:	f107 010b 	add.w	r1, r7, #11
 80028d2:	2201      	movs	r2, #1
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 fa98 	bl	8002e0a <st7789v_write_reg>
 80028da:	4602      	mov	r2, r0
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	4413      	add	r3, r2
 80028e0:	61fb      	str	r3, [r7, #28]
      ret += st7789v_send_data(&pObj->Ctx, (uint8_t *)parameter, 1);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	332c      	adds	r3, #44	; 0x2c
 80028e6:	f107 010c 	add.w	r1, r7, #12
 80028ea:	2201      	movs	r2, #1
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 fa9e 	bl	8002e2e <st7789v_send_data>
 80028f2:	4602      	mov	r2, r0
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	4413      	add	r3, r2
 80028f8:	61fb      	str	r3, [r7, #28]
 80028fa:	e03d      	b.n	8002978 <ST7789V_Init+0x590>
    }
    else if(pInitParams->TEMode == ST7789V_TE_MODE_2)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	7d1b      	ldrb	r3, [r3, #20]
 8002900:	2b02      	cmp	r3, #2
 8002902:	d139      	bne.n	8002978 <ST7789V_Init+0x590>
    {
      // Reset TE scan line
      reg = ST7789V_SET_TEAR_SCANLINE;
 8002904:	2344      	movs	r3, #68	; 0x44
 8002906:	72fb      	strb	r3, [r7, #11]
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	332c      	adds	r3, #44	; 0x2c
 800290c:	f107 010b 	add.w	r1, r7, #11
 8002910:	2201      	movs	r2, #1
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fa79 	bl	8002e0a <st7789v_write_reg>
 8002918:	4602      	mov	r2, r0
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	4413      	add	r3, r2
 800291e:	61fb      	str	r3, [r7, #28]
      parameter[0] = 0;
 8002920:	2300      	movs	r3, #0
 8002922:	733b      	strb	r3, [r7, #12]
      parameter[1] = 0;
 8002924:	2300      	movs	r3, #0
 8002926:	737b      	strb	r3, [r7, #13]
      ret += st7789v_send_data(&pObj->Ctx, (uint8_t *)parameter, 2);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	332c      	adds	r3, #44	; 0x2c
 800292c:	f107 010c 	add.w	r1, r7, #12
 8002930:	2202      	movs	r2, #2
 8002932:	4618      	mov	r0, r3
 8002934:	f000 fa7b 	bl	8002e2e <st7789v_send_data>
 8002938:	4602      	mov	r2, r0
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	4413      	add	r3, r2
 800293e:	61fb      	str	r3, [r7, #28]

      // Enable TE
      reg = ST7789V_TEON;
 8002940:	2335      	movs	r3, #53	; 0x35
 8002942:	72fb      	strb	r3, [r7, #11]
      parameter[0] = 0x01; /* VSYNC + HSYNC */
 8002944:	2301      	movs	r3, #1
 8002946:	733b      	strb	r3, [r7, #12]
      ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	332c      	adds	r3, #44	; 0x2c
 800294c:	f107 010b 	add.w	r1, r7, #11
 8002950:	2201      	movs	r2, #1
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fa59 	bl	8002e0a <st7789v_write_reg>
 8002958:	4602      	mov	r2, r0
 800295a:	69fb      	ldr	r3, [r7, #28]
 800295c:	4413      	add	r3, r2
 800295e:	61fb      	str	r3, [r7, #28]
      ret += st7789v_send_data(&pObj->Ctx, (uint8_t *)parameter, 1);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	332c      	adds	r3, #44	; 0x2c
 8002964:	f107 010c 	add.w	r1, r7, #12
 8002968:	2201      	movs	r2, #1
 800296a:	4618      	mov	r0, r3
 800296c:	f000 fa5f 	bl	8002e2e <st7789v_send_data>
 8002970:	4602      	mov	r2, r0
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	4413      	add	r3, r2
 8002976:	61fb      	str	r3, [r7, #28]
    }

    pObj->IsInitialized = 1U;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2201      	movs	r2, #1
 800297c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  }

  if(ret != ST7789V_OK)
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d002      	beq.n	800298c <ST7789V_Init+0x5a4>
  {
    ret = ST7789V_ERROR;
 8002986:	f04f 33ff 	mov.w	r3, #4294967295
 800298a:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 800298c:	69fb      	ldr	r3, [r7, #28]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3720      	adds	r7, #32
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop

08002998 <ST7789V_DeInit>:
  * @brief  De-Initialize the st7789v LCD Component.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t ST7789V_DeInit(ST7789V_Object_t *pObj)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  return pObj->IO.DeInit();
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	4798      	blx	r3
 80029a6:	4603      	mov	r3, r0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <ST7789V_ReadID>:
  * @param  pObj Component object
  * @param  Id Component ID
  * @retval The component status
  */
int32_t ST7789V_ReadID(ST7789V_Object_t *pObj, uint32_t *Id)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b084      	sub	sp, #16
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t __IO data[4] = {ST7789V_READ_DISPLAY_ID, 0, 0, 0 };
 80029ba:	2304      	movs	r3, #4
 80029bc:	60bb      	str	r3, [r7, #8]

  if(st7789v_recv_data(&pObj->Ctx, (uint8_t *)data, 4) != ST7789V_OK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	332c      	adds	r3, #44	; 0x2c
 80029c2:	f107 0108 	add.w	r1, r7, #8
 80029c6:	2204      	movs	r2, #4
 80029c8:	4618      	mov	r0, r3
 80029ca:	f000 fa42 	bl	8002e52 <st7789v_recv_data>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d003      	beq.n	80029dc <ST7789V_ReadID+0x2c>
  {
    ret = ST7789V_ERROR;
 80029d4:	f04f 33ff 	mov.w	r3, #4294967295
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	e05b      	b.n	8002a94 <ST7789V_ReadID+0xe4>
    if((SCB->CCR) & (uint32_t)SCB_CCR_DC_Msk)
    {
      SCB_CleanInvalidateDCache();
    }
#endif
    *Id = ((*(uint8_t *)&data[1] << 16) | (*(uint8_t *)&data[2] << 8) | *(uint8_t *)&data[3]);
 80029dc:	f107 0308 	add.w	r3, r7, #8
 80029e0:	3301      	adds	r3, #1
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	041a      	lsls	r2, r3, #16
 80029e6:	f107 0308 	add.w	r3, r7, #8
 80029ea:	3302      	adds	r3, #2
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	021b      	lsls	r3, r3, #8
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f107 0208 	add.w	r2, r7, #8
 80029f6:	3203      	adds	r2, #3
 80029f8:	7812      	ldrb	r2, [r2, #0]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	461a      	mov	r2, r3
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	601a      	str	r2, [r3, #0]
    if(*Id != ST7789V_ID)
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a26      	ldr	r2, [pc, #152]	; (8002aa0 <ST7789V_ReadID+0xf0>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d041      	beq.n	8002a90 <ST7789V_ReadID+0xe0>
    {
      data[0] <<= 1;
 8002a0c:	7a3b      	ldrb	r3, [r7, #8]
 8002a0e:	b2db      	uxtb	r3, r3
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	723b      	strb	r3, [r7, #8]
      if(data[1] & 0x80)
 8002a16:	7a7b      	ldrb	r3, [r7, #9]
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	b25b      	sxtb	r3, r3
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	da05      	bge.n	8002a2c <ST7789V_ReadID+0x7c>
        data[0] |= 1;
 8002a20:	7a3b      	ldrb	r3, [r7, #8]
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	723b      	strb	r3, [r7, #8]
      data[1] <<= 1;
 8002a2c:	7a7b      	ldrb	r3, [r7, #9]
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	727b      	strb	r3, [r7, #9]
      if(data[2] & 0x80)
 8002a36:	7abb      	ldrb	r3, [r7, #10]
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	b25b      	sxtb	r3, r3
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	da05      	bge.n	8002a4c <ST7789V_ReadID+0x9c>
        data[1] |= 1;
 8002a40:	7a7b      	ldrb	r3, [r7, #9]
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	f043 0301 	orr.w	r3, r3, #1
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	727b      	strb	r3, [r7, #9]
      data[2] <<= 1;
 8002a4c:	7abb      	ldrb	r3, [r7, #10]
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	72bb      	strb	r3, [r7, #10]
      if(data[3] & 0x80)
 8002a56:	7afb      	ldrb	r3, [r7, #11]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	b25b      	sxtb	r3, r3
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	da05      	bge.n	8002a6c <ST7789V_ReadID+0xbc>
        data[2] |= 1;
 8002a60:	7abb      	ldrb	r3, [r7, #10]
 8002a62:	b2db      	uxtb	r3, r3
 8002a64:	f043 0301 	orr.w	r3, r3, #1
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	72bb      	strb	r3, [r7, #10]

      *Id = ((*(uint8_t *)&data[0] << 16) | (*(uint8_t *)&data[1] << 8) | *(uint8_t *)&data[2]);
 8002a6c:	f107 0308 	add.w	r3, r7, #8
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	041a      	lsls	r2, r3, #16
 8002a74:	f107 0308 	add.w	r3, r7, #8
 8002a78:	3301      	adds	r3, #1
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	021b      	lsls	r3, r3, #8
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	f107 0208 	add.w	r2, r7, #8
 8002a84:	3202      	adds	r2, #2
 8002a86:	7812      	ldrb	r2, [r2, #0]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	601a      	str	r2, [r3, #0]
    }
    ret = ST7789V_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002a94:	68fb      	ldr	r3, [r7, #12]
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	00858552 	.word	0x00858552

08002aa4 <ST7789V_DisplayOn>:
  * @brief  Enables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7789V_DisplayOn(ST7789V_Object_t *pObj)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  uint8_t __IO reg = ST7789V_DISPLAY_ON;
 8002aac:	2329      	movs	r3, #41	; 0x29
 8002aae:	73fb      	strb	r3, [r7, #15]

  return st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	332c      	adds	r3, #44	; 0x2c
 8002ab4:	f107 010f 	add.w	r1, r7, #15
 8002ab8:	2201      	movs	r2, #1
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 f9a5 	bl	8002e0a <st7789v_write_reg>
 8002ac0:	4603      	mov	r3, r0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <ST7789V_DisplayOff>:
  * @brief  Disables the Display.
  * @param  pObj Component object
  * @retval The component status
  */
int32_t ST7789V_DisplayOff(ST7789V_Object_t *pObj)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b084      	sub	sp, #16
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
  uint8_t __IO reg = ST7789V_DISPLAY_OFF;
 8002ad2:	2328      	movs	r3, #40	; 0x28
 8002ad4:	73fb      	strb	r3, [r7, #15]

  return st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	332c      	adds	r3, #44	; 0x2c
 8002ada:	f107 010f 	add.w	r1, r7, #15
 8002ade:	2201      	movs	r2, #1
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f000 f992 	bl	8002e0a <st7789v_write_reg>
 8002ae6:	4603      	mov	r3, r0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <ST7789V_SetOrientation>:
  * @param  Orientation ST7789V_ORIENTATION_PORTRAIT, ST7789V_ORIENTATION_PORTRAIT_ROT180
  *                     ST7789V_ORIENTATION_LANDSCAPE or ST7789V_ORIENTATION_LANDSCAPE_ROT180
  * @retval The component status
  */
int32_t ST7789V_SetOrientation(ST7789V_Object_t *pObj, uint32_t Orientation)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t __IO reg;
  uint8_t __IO parameter;

  parameter = (uint8_t)OrientationTab[Orientation];
 8002afa:	4a24      	ldr	r2, [pc, #144]	; (8002b8c <ST7789V_SetOrientation+0x9c>)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	72bb      	strb	r3, [r7, #10]
  reg = ST7789V_MAC;
 8002b06:	2336      	movs	r3, #54	; 0x36
 8002b08:	72fb      	strb	r3, [r7, #11]
  ret = st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	332c      	adds	r3, #44	; 0x2c
 8002b0e:	f107 010b 	add.w	r1, r7, #11
 8002b12:	2201      	movs	r2, #1
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 f978 	bl	8002e0a <st7789v_write_reg>
 8002b1a:	60f8      	str	r0, [r7, #12]
  ret += st7789v_send_data(&pObj->Ctx, (uint8_t *)&parameter, 1);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	332c      	adds	r3, #44	; 0x2c
 8002b20:	f107 010a 	add.w	r1, r7, #10
 8002b24:	2201      	movs	r2, #1
 8002b26:	4618      	mov	r0, r3
 8002b28:	f000 f981 	bl	8002e2e <st7789v_send_data>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	4413      	add	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]

  if(ret == ST7789V_OK)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d11f      	bne.n	8002b7a <ST7789V_SetOrientation+0x8a>
  {
    ST7789VCtx.Orientation = Orientation;
 8002b3a:	4a15      	ldr	r2, [pc, #84]	; (8002b90 <ST7789V_SetOrientation+0xa0>)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	6093      	str	r3, [r2, #8]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	3b02      	subs	r3, #2

    switch (Orientation)
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d807      	bhi.n	8002b58 <ST7789V_SetOrientation+0x68>
    {
      case ST7789V_ORIENTATION_LANDSCAPE:
      case ST7789V_ORIENTATION_LANDSCAPE_ROT180:
        ST7789VCtx.Width  = ST7789V_HEIGHT;
 8002b48:	4b11      	ldr	r3, [pc, #68]	; (8002b90 <ST7789V_SetOrientation+0xa0>)
 8002b4a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b4e:	601a      	str	r2, [r3, #0]
        ST7789VCtx.Height = ST7789V_WIDTH;
 8002b50:	4b0f      	ldr	r3, [pc, #60]	; (8002b90 <ST7789V_SetOrientation+0xa0>)
 8002b52:	22f0      	movs	r2, #240	; 0xf0
 8002b54:	605a      	str	r2, [r3, #4]
      break;
 8002b56:	e007      	b.n	8002b68 <ST7789V_SetOrientation+0x78>
      default:
      case ST7789V_ORIENTATION_PORTRAIT_ROT180:
      case ST7789V_ORIENTATION_PORTRAIT:
        ST7789VCtx.Width  = ST7789V_WIDTH;
 8002b58:	4b0d      	ldr	r3, [pc, #52]	; (8002b90 <ST7789V_SetOrientation+0xa0>)
 8002b5a:	22f0      	movs	r2, #240	; 0xf0
 8002b5c:	601a      	str	r2, [r3, #0]
        ST7789VCtx.Height = ST7789V_HEIGHT;
 8002b5e:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <ST7789V_SetOrientation+0xa0>)
 8002b60:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002b64:	605a      	str	r2, [r3, #4]
      break;
 8002b66:	bf00      	nop
    }

    pObj->XSize = ST7789VCtx.Width;
 8002b68:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <ST7789V_SetOrientation+0xa0>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	64da      	str	r2, [r3, #76]	; 0x4c
    pObj->YSize = ST7789VCtx.Height;
 8002b70:	4b07      	ldr	r3, [pc, #28]	; (8002b90 <ST7789V_SetOrientation+0xa0>)
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	651a      	str	r2, [r3, #80]	; 0x50
 8002b78:	e002      	b.n	8002b80 <ST7789V_SetOrientation+0x90>
  }
  else
  {
    ret = ST7789V_ERROR;
 8002b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002b7e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8002b80:	68fb      	ldr	r3, [r7, #12]
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000058 	.word	0x20000058
 8002b90:	2001cbe8 	.word	0x2001cbe8

08002b94 <ST7789V_GetOrientation>:
  * @param  pObj Component object
  * @param  Orientation pointer to the LCD orientation
  * @retval The component status
  */
int32_t ST7789V_GetOrientation(ST7789V_Object_t *pObj, uint32_t *Orientation)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *Orientation = ST7789VCtx.Orientation;
 8002b9e:	4b05      	ldr	r3, [pc, #20]	; (8002bb4 <ST7789V_GetOrientation+0x20>)
 8002ba0:	689a      	ldr	r2, [r3, #8]
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	601a      	str	r2, [r3, #0]

  return ST7789V_OK;
 8002ba6:	2300      	movs	r3, #0
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	370c      	adds	r7, #12
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr
 8002bb4:	2001cbe8 	.word	0x2001cbe8

08002bb8 <ST7789V_GetXSize>:
  * @brief  Get the LCD pixel Width.
  * @param  pObj Component object
  * @retval The Lcd Pixel Width
  */
int32_t ST7789V_GetXSize(ST7789V_Object_t *pObj, uint32_t *XSize)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *XSize = ST7789VCtx.Width;
 8002bc2:	4b05      	ldr	r3, [pc, #20]	; (8002bd8 <ST7789V_GetXSize+0x20>)
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	601a      	str	r2, [r3, #0]

  return ST7789V_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	370c      	adds	r7, #12
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	2001cbe8 	.word	0x2001cbe8

08002bdc <ST7789V_GetYSize>:
  * @brief  Get the LCD pixel Height.
  * @param  pObj Component object
  * @retval The Lcd Pixel Height
  */
int32_t ST7789V_GetYSize(ST7789V_Object_t *pObj, uint32_t *YSize)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
 8002be4:	6039      	str	r1, [r7, #0]
  (void)pObj;

  *YSize = ST7789VCtx.Height;
 8002be6:	4b05      	ldr	r3, [pc, #20]	; (8002bfc <ST7789V_GetYSize+0x20>)
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	601a      	str	r2, [r3, #0]

  return ST7789V_OK;
 8002bee:	2300      	movs	r3, #0
}
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr
 8002bfc:	2001cbe8 	.word	0x2001cbe8

08002c00 <ST7789V_SetDisplayWindow>:
  * @param  Height display window height.
  * @param  Width  display window width.
  * @retval Component status
  */
int32_t ST7789V_SetDisplayWindow(ST7789V_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	60b9      	str	r1, [r7, #8]
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	603b      	str	r3, [r7, #0]
  int32_t ret;
  uint8_t __IO parameter[4];
  uint8_t __IO reg = ST7789V_CASET;
 8002c0e:	232a      	movs	r3, #42	; 0x2a
 8002c10:	75fb      	strb	r3, [r7, #23]

  /* Column addr set, 4 args, no delay: XSTART = Xpos, XEND = (Xpos + Width - 1) */
  ret = st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	332c      	adds	r3, #44	; 0x2c
 8002c16:	f107 0117 	add.w	r1, r7, #23
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 f8f4 	bl	8002e0a <st7789v_write_reg>
 8002c22:	61f8      	str	r0, [r7, #28]
  parameter [0] = (uint8_t)(Xpos >> 8U);
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	0a1b      	lsrs	r3, r3, #8
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	763b      	strb	r3, [r7, #24]
  parameter [1] = (uint8_t)(Xpos & 0xFFU);
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	767b      	strb	r3, [r7, #25]
  parameter [2] = (uint8_t)((Xpos + Width - 1U) >> 8U);
 8002c32:	68ba      	ldr	r2, [r7, #8]
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	4413      	add	r3, r2
 8002c38:	3b01      	subs	r3, #1
 8002c3a:	0a1b      	lsrs	r3, r3, #8
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	76bb      	strb	r3, [r7, #26]
  parameter [3] = (uint8_t)((Xpos + Width - 1U) & 0xFFU);
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	b2db      	uxtb	r3, r3
 8002c48:	4413      	add	r3, r2
 8002c4a:	b2db      	uxtb	r3, r3
 8002c4c:	3b01      	subs	r3, #1
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	76fb      	strb	r3, [r7, #27]
  ret += st7789v_send_data(&pObj->Ctx, (uint8_t *)parameter, 4);
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	332c      	adds	r3, #44	; 0x2c
 8002c56:	f107 0118 	add.w	r1, r7, #24
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f000 f8e6 	bl	8002e2e <st7789v_send_data>
 8002c62:	4602      	mov	r2, r0
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	4413      	add	r3, r2
 8002c68:	61fb      	str	r3, [r7, #28]

  /* Row addr set, 4 args, no delay: YSTART = Ypos, YEND = (Ypos + Height - 1) */
  reg = ST7789V_RASET;
 8002c6a:	232b      	movs	r3, #43	; 0x2b
 8002c6c:	75fb      	strb	r3, [r7, #23]
  ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	332c      	adds	r3, #44	; 0x2c
 8002c72:	f107 0117 	add.w	r1, r7, #23
 8002c76:	2201      	movs	r2, #1
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 f8c6 	bl	8002e0a <st7789v_write_reg>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	4413      	add	r3, r2
 8002c84:	61fb      	str	r3, [r7, #28]
  parameter [0] = (uint8_t)(Ypos >> 8U);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	0a1b      	lsrs	r3, r3, #8
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	763b      	strb	r3, [r7, #24]
  parameter [1] = (uint8_t)(Ypos & 0xFFU);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	767b      	strb	r3, [r7, #25]
  parameter [2] = (uint8_t)((Ypos + Height - 1U) >> 8U);
 8002c94:	687a      	ldr	r2, [r7, #4]
 8002c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c98:	4413      	add	r3, r2
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	0a1b      	lsrs	r3, r3, #8
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	76bb      	strb	r3, [r7, #26]
  parameter [3] = (uint8_t)((Ypos + Height - 1U) & 0xFFU);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	b2da      	uxtb	r2, r3
 8002ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	4413      	add	r3, r2
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	b2db      	uxtb	r3, r3
 8002cb2:	76fb      	strb	r3, [r7, #27]
  ret += st7789v_send_data(&pObj->Ctx, (uint8_t *)parameter, 4);
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	332c      	adds	r3, #44	; 0x2c
 8002cb8:	f107 0118 	add.w	r1, r7, #24
 8002cbc:	2204      	movs	r2, #4
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f000 f8b5 	bl	8002e2e <st7789v_send_data>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	4413      	add	r3, r2
 8002cca:	61fb      	str	r3, [r7, #28]

  reg = ST7789V_GRAM;
 8002ccc:	232c      	movs	r3, #44	; 0x2c
 8002cce:	75fb      	strb	r3, [r7, #23]
  ret += st7789v_write_reg(&pObj->Ctx, &reg, 1);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	332c      	adds	r3, #44	; 0x2c
 8002cd4:	f107 0117 	add.w	r1, r7, #23
 8002cd8:	2201      	movs	r2, #1
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 f895 	bl	8002e0a <st7789v_write_reg>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	61fb      	str	r3, [r7, #28]

  if(ret != ST7789V_OK)
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d002      	beq.n	8002cf4 <ST7789V_SetDisplayWindow+0xf4>
  {
    ret = ST7789V_ERROR;
 8002cee:	f04f 33ff 	mov.w	r3, #4294967295
 8002cf2:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 8002cf4:	69fb      	ldr	r3, [r7, #28]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3720      	adds	r7, #32
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <ST7789V_ReadRegWrap>:
  * @param  Reg  The target register address to write
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7789V_ReadRegWrap(void *Handle, volatile uint8_t* Reg, uint32_t Length)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b086      	sub	sp, #24
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	607a      	str	r2, [r7, #4]
  ST7789V_Object_t *pObj = (ST7789V_Object_t *)Handle;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(Reg, Length);
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	68b8      	ldr	r0, [r7, #8]
 8002d16:	4798      	blx	r3
 8002d18:	4603      	mov	r3, r0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <ST7789V_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval Component error status
  */
static int32_t ST7789V_WriteRegWrap(void *Handle, volatile uint8_t* Reg, uint32_t Length)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b086      	sub	sp, #24
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	60f8      	str	r0, [r7, #12]
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
  ST7789V_Object_t *pObj = (ST7789V_Object_t *)Handle;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(Reg, Length);
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	68b8      	ldr	r0, [r7, #8]
 8002d3a:	4798      	blx	r3
 8002d3c:	4603      	mov	r3, r0
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <ST7789V_SendDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7789V_SendDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b086      	sub	sp, #24
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	60f8      	str	r0, [r7, #12]
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	607a      	str	r2, [r7, #4]
  ST7789V_Object_t *pObj = (ST7789V_Object_t *)Handle;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	617b      	str	r3, [r7, #20]

  return pObj->IO.SendData(pData, Length);
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	68b8      	ldr	r0, [r7, #8]
 8002d5e:	4798      	blx	r3
 8002d60:	4603      	mov	r3, r0
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}

08002d6a <ST7789V_SendDataDMAWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7789V_SendDataDMAWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8002d6a:	b580      	push	{r7, lr}
 8002d6c:	b086      	sub	sp, #24
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	60f8      	str	r0, [r7, #12]
 8002d72:	60b9      	str	r1, [r7, #8]
 8002d74:	607a      	str	r2, [r7, #4]
  ST7789V_Object_t *pObj = (ST7789V_Object_t *)Handle;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	617b      	str	r3, [r7, #20]

  return pObj->IO.SendDataDMA(pData, Length);
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	699b      	ldr	r3, [r3, #24]
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	68b8      	ldr	r0, [r7, #8]
 8002d82:	4798      	blx	r3
 8002d84:	4603      	mov	r3, r0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3718      	adds	r7, #24
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <ST7789V_RecvDataWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7789V_RecvDataWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b086      	sub	sp, #24
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	607a      	str	r2, [r7, #4]
  ST7789V_Object_t *pObj = (ST7789V_Object_t *)Handle;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	617b      	str	r3, [r7, #20]

  return pObj->IO.RecvData(pData, Length);
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	68b8      	ldr	r0, [r7, #8]
 8002da6:	4798      	blx	r3
 8002da8:	4603      	mov	r3, r0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <ST7789V_RecvDataDMAWrap>:
  * @param  handle  Component object handle
  * @param  pData  The target register value to be written
  * @retval Component error status
  */
static int32_t ST7789V_RecvDataDMAWrap(void *Handle, uint8_t *pData, uint32_t Length)
{
 8002db2:	b580      	push	{r7, lr}
 8002db4:	b086      	sub	sp, #24
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	60f8      	str	r0, [r7, #12]
 8002dba:	60b9      	str	r1, [r7, #8]
 8002dbc:	607a      	str	r2, [r7, #4]
  ST7789V_Object_t *pObj = (ST7789V_Object_t *)Handle;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	617b      	str	r3, [r7, #20]

  return pObj->IO.RecvDataDMA(pData, Length);
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	6879      	ldr	r1, [r7, #4]
 8002dc8:	68b8      	ldr	r0, [r7, #8]
 8002dca:	4798      	blx	r3
 8002dcc:	4603      	mov	r3, r0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}

08002dd6 <ST7789V_Delay>:
  * @brief  ST7789V delay
  * @param  Delay  Delay in ms
  * @retval Component error status
  */
static int32_t ST7789V_Delay(ST7789V_Object_t *pObj, uint32_t Delay)
{
 8002dd6:	b580      	push	{r7, lr}
 8002dd8:	b084      	sub	sp, #16
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
 8002dde:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	4798      	blx	r3
 8002de6:	4603      	mov	r3, r0
 8002de8:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8002dea:	bf00      	nop
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	4798      	blx	r3
 8002df2:	4603      	mov	r3, r0
 8002df4:	461a      	mov	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	683a      	ldr	r2, [r7, #0]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d8f5      	bhi.n	8002dec <ST7789V_Delay+0x16>
  {
  }
  return ST7789V_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}

08002e0a <st7789v_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write  
  * @retval Component status
  */
int32_t st7789v_write_reg(st7789v_ctx_t *ctx, volatile uint8_t* reg, uint32_t length)
{
 8002e0a:	b580      	push	{r7, lr}
 8002e0c:	b084      	sub	sp, #16
 8002e0e:	af00      	add	r7, sp, #0
 8002e10:	60f8      	str	r0, [r7, #12]
 8002e12:	60b9      	str	r1, [r7, #8]
 8002e14:	607a      	str	r2, [r7, #4]
  return ctx->WriteReg(ctx->handle, reg, length);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	6990      	ldr	r0, [r2, #24]
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	68b9      	ldr	r1, [r7, #8]
 8002e22:	4798      	blx	r3
 8002e24:	4603      	mov	r3, r0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3710      	adds	r7, #16
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <st7789v_send_data>:
  * @param  pdata  data to write
  * @param  Length Length of data to write
  * @retval Component status
  */
int32_t st7789v_send_data(st7789v_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b084      	sub	sp, #16
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
  return ctx->SendData(ctx->handle, pdata, length);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	6990      	ldr	r0, [r2, #24]
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68b9      	ldr	r1, [r7, #8]
 8002e46:	4798      	blx	r3
 8002e48:	4603      	mov	r3, r0
}
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	3710      	adds	r7, #16
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <st7789v_recv_data>:
  * @param  pdata  data to read
  * @param  Length Length of data to read
  * @retval Component status
  */
int32_t st7789v_recv_data(st7789v_ctx_t *ctx, uint8_t *pdata, uint32_t length)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b084      	sub	sp, #16
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
  return ctx->RecvData(ctx->handle, pdata, length);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	68fa      	ldr	r2, [r7, #12]
 8002e64:	6990      	ldr	r0, [r2, #24]
 8002e66:	687a      	ldr	r2, [r7, #4]
 8002e68:	68b9      	ldr	r1, [r7, #8]
 8002e6a:	4798      	blx	r3
 8002e6c:	4603      	mov	r3, r0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3710      	adds	r7, #16
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002e80:	2004      	movs	r0, #4
 8002e82:	f001 f8a4 	bl	8003fce <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8002e86:	f7fe ff7f 	bl	8001d88 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e8a:	2007      	movs	r0, #7
 8002e8c:	f7fe fe2e 	bl	8001aec <HAL_InitTick>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d002      	beq.n	8002e9c <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	71fb      	strb	r3, [r7, #7]
 8002e9a:	e001      	b.n	8002ea0 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002e9c:	f7fe fa18 	bl	80012d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ea0:	79fb      	ldrb	r3, [r7, #7]
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	3708      	adds	r7, #8
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}
	...

08002eac <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eac:	b480      	push	{r7}
 8002eae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <HAL_IncTick+0x20>)
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_IncTick+0x24>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4413      	add	r3, r2
 8002ebc:	4a04      	ldr	r2, [pc, #16]	; (8002ed0 <HAL_IncTick+0x24>)
 8002ebe:	6013      	str	r3, [r2, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	2000006c 	.word	0x2000006c
 8002ed0:	2001cbf4 	.word	0x2001cbf4

08002ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8002ed8:	4b03      	ldr	r3, [pc, #12]	; (8002ee8 <HAL_GetTick+0x14>)
 8002eda:	681b      	ldr	r3, [r3, #0]
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee4:	4770      	bx	lr
 8002ee6:	bf00      	nop
 8002ee8:	2001cbf4 	.word	0x2001cbf4

08002eec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ef4:	f7ff ffee 	bl	8002ed4 <HAL_GetTick>
 8002ef8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f04:	d005      	beq.n	8002f12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002f06:	4b0a      	ldr	r3, [pc, #40]	; (8002f30 <HAL_Delay+0x44>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	4413      	add	r3, r2
 8002f10:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f12:	bf00      	nop
 8002f14:	f7ff ffde 	bl	8002ed4 <HAL_GetTick>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d8f7      	bhi.n	8002f14 <HAL_Delay+0x28>
  {
  }
}
 8002f24:	bf00      	nop
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	2000006c 	.word	0x2000006c

08002f34 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	431a      	orrs	r2, r3
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	609a      	str	r2, [r3, #8]
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
 8002f62:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	431a      	orrs	r2, r3
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	609a      	str	r2, [r3, #8]
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b083      	sub	sp, #12
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
 8002fa8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	3360      	adds	r3, #96	; 0x60
 8002fae:	461a      	mov	r2, r3
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	4413      	add	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	4b08      	ldr	r3, [pc, #32]	; (8002fe0 <LL_ADC_SetOffset+0x44>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002fc6:	683a      	ldr	r2, [r7, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002fd4:	bf00      	nop
 8002fd6:	371c      	adds	r7, #28
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr
 8002fe0:	03fff000 	.word	0x03fff000

08002fe4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]
 8002fec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	3360      	adds	r3, #96	; 0x60
 8002ff2:	461a      	mov	r2, r3
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	4413      	add	r3, r2
 8002ffa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003004:	4618      	mov	r0, r3
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003010:	b480      	push	{r7}
 8003012:	b087      	sub	sp, #28
 8003014:	af00      	add	r7, sp, #0
 8003016:	60f8      	str	r0, [r7, #12]
 8003018:	60b9      	str	r1, [r7, #8]
 800301a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	3360      	adds	r3, #96	; 0x60
 8003020:	461a      	mov	r2, r3
 8003022:	68bb      	ldr	r3, [r7, #8]
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	4413      	add	r3, r2
 8003028:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	431a      	orrs	r2, r3
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800303a:	bf00      	nop
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr

08003046 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8003046:	b480      	push	{r7}
 8003048:	b083      	sub	sp, #12
 800304a:	af00      	add	r7, sp, #0
 800304c:	6078      	str	r0, [r7, #4]
 800304e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	695b      	ldr	r3, [r3, #20]
 8003054:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	431a      	orrs	r2, r3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	615a      	str	r2, [r3, #20]
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800306c:	b480      	push	{r7}
 800306e:	b087      	sub	sp, #28
 8003070:	af00      	add	r7, sp, #0
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	3330      	adds	r3, #48	; 0x30
 800307c:	461a      	mov	r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	0a1b      	lsrs	r3, r3, #8
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	f003 030c 	and.w	r3, r3, #12
 8003088:	4413      	add	r3, r2
 800308a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800308c:	697b      	ldr	r3, [r7, #20]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	f003 031f 	and.w	r3, r3, #31
 8003096:	211f      	movs	r1, #31
 8003098:	fa01 f303 	lsl.w	r3, r1, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	401a      	ands	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	0e9b      	lsrs	r3, r3, #26
 80030a4:	f003 011f 	and.w	r1, r3, #31
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	f003 031f 	and.w	r3, r3, #31
 80030ae:	fa01 f303 	lsl.w	r3, r1, r3
 80030b2:	431a      	orrs	r2, r3
 80030b4:	697b      	ldr	r3, [r7, #20]
 80030b6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80030b8:	bf00      	nop
 80030ba:	371c      	adds	r7, #28
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b087      	sub	sp, #28
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	3314      	adds	r3, #20
 80030d4:	461a      	mov	r2, r3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	0e5b      	lsrs	r3, r3, #25
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	f003 0304 	and.w	r3, r3, #4
 80030e0:	4413      	add	r3, r2
 80030e2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	0d1b      	lsrs	r3, r3, #20
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	2107      	movs	r1, #7
 80030f2:	fa01 f303 	lsl.w	r3, r1, r3
 80030f6:	43db      	mvns	r3, r3
 80030f8:	401a      	ands	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	0d1b      	lsrs	r3, r3, #20
 80030fe:	f003 031f 	and.w	r3, r3, #31
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	fa01 f303 	lsl.w	r3, r1, r3
 8003108:	431a      	orrs	r2, r3
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800310e:	bf00      	nop
 8003110:	371c      	adds	r7, #28
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
	...

0800311c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800311c:	b480      	push	{r7}
 800311e:	b085      	sub	sp, #20
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003134:	43db      	mvns	r3, r3
 8003136:	401a      	ands	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	f003 0318 	and.w	r3, r3, #24
 800313e:	4908      	ldr	r1, [pc, #32]	; (8003160 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003140:	40d9      	lsrs	r1, r3
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	400b      	ands	r3, r1
 8003146:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800314a:	431a      	orrs	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003152:	bf00      	nop
 8003154:	3714      	adds	r7, #20
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	0007ffff 	.word	0x0007ffff

08003164 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003174:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6093      	str	r3, [r2, #8]
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	689b      	ldr	r3, [r3, #8]
 8003194:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800319c:	d101      	bne.n	80031a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800319e:	2301      	movs	r3, #1
 80031a0:	e000      	b.n	80031a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr

080031b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b083      	sub	sp, #12
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80031c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80031c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031ec:	d101      	bne.n	80031f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	f003 0301 	and.w	r3, r3, #1
 8003210:	2b01      	cmp	r3, #1
 8003212:	d101      	bne.n	8003218 <LL_ADC_IsEnabled+0x18>
 8003214:	2301      	movs	r3, #1
 8003216:	e000      	b.n	800321a <LL_ADC_IsEnabled+0x1a>
 8003218:	2300      	movs	r3, #0
}
 800321a:	4618      	mov	r0, r3
 800321c:	370c      	adds	r7, #12
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr

08003226 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8003226:	b480      	push	{r7}
 8003228:	b083      	sub	sp, #12
 800322a:	af00      	add	r7, sp, #0
 800322c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 0304 	and.w	r3, r3, #4
 8003236:	2b04      	cmp	r3, #4
 8003238:	d101      	bne.n	800323e <LL_ADC_REG_IsConversionOngoing+0x18>
 800323a:	2301      	movs	r3, #1
 800323c:	e000      	b.n	8003240 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	370c      	adds	r7, #12
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr

0800324c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b08      	cmp	r3, #8
 800325e:	d101      	bne.n	8003264 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003274:	b590      	push	{r4, r7, lr}
 8003276:	b089      	sub	sp, #36	; 0x24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800327c:	2300      	movs	r3, #0
 800327e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003280:	2300      	movs	r3, #0
 8003282:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e12e      	b.n	80034ec <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003298:	2b00      	cmp	r3, #0
 800329a:	d109      	bne.n	80032b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800329c:	6878      	ldr	r0, [r7, #4]
 800329e:	f7fe f83f 	bl	8001320 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2200      	movs	r2, #0
 80032a6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff ff67 	bl	8003188 <LL_ADC_IsDeepPowerDownEnabled>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d004      	beq.n	80032ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f7ff ff4d 	bl	8003164 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff ff82 	bl	80031d8 <LL_ADC_IsInternalRegulatorEnabled>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d115      	bne.n	8003306 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7ff ff66 	bl	80031b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032e4:	4b83      	ldr	r3, [pc, #524]	; (80034f4 <HAL_ADC_Init+0x280>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	099b      	lsrs	r3, r3, #6
 80032ea:	4a83      	ldr	r2, [pc, #524]	; (80034f8 <HAL_ADC_Init+0x284>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	099b      	lsrs	r3, r3, #6
 80032f2:	3301      	adds	r3, #1
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80032f8:	e002      	b.n	8003300 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	3b01      	subs	r3, #1
 80032fe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f9      	bne.n	80032fa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f7ff ff64 	bl	80031d8 <LL_ADC_IsInternalRegulatorEnabled>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d10d      	bne.n	8003332 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800331a:	f043 0210 	orr.w	r2, r3, #16
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003326:	f043 0201 	orr.w	r2, r3, #1
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f7ff ff75 	bl	8003226 <LL_ADC_REG_IsConversionOngoing>
 800333c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003342:	f003 0310 	and.w	r3, r3, #16
 8003346:	2b00      	cmp	r3, #0
 8003348:	f040 80c7 	bne.w	80034da <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	2b00      	cmp	r3, #0
 8003350:	f040 80c3 	bne.w	80034da <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003358:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800335c:	f043 0202 	orr.w	r2, r3, #2
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff ff49 	bl	8003200 <LL_ADC_IsEnabled>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d110      	bne.n	8003396 <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003374:	4861      	ldr	r0, [pc, #388]	; (80034fc <HAL_ADC_Init+0x288>)
 8003376:	f7ff ff43 	bl	8003200 <LL_ADC_IsEnabled>
 800337a:	4604      	mov	r4, r0
 800337c:	4860      	ldr	r0, [pc, #384]	; (8003500 <HAL_ADC_Init+0x28c>)
 800337e:	f7ff ff3f 	bl	8003200 <LL_ADC_IsEnabled>
 8003382:	4603      	mov	r3, r0
 8003384:	4323      	orrs	r3, r4
 8003386:	2b00      	cmp	r3, #0
 8003388:	d105      	bne.n	8003396 <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	4619      	mov	r1, r3
 8003390:	485c      	ldr	r0, [pc, #368]	; (8003504 <HAL_ADC_Init+0x290>)
 8003392:	f7ff fdcf 	bl	8002f34 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	7e5b      	ldrb	r3, [r3, #25]
 800339a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033a0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80033a6:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80033ac:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033b4:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d106      	bne.n	80033d2 <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	3b01      	subs	r3, #1
 80033ca:	045b      	lsls	r3, r3, #17
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d009      	beq.n	80033ee <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033de:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e6:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	68da      	ldr	r2, [r3, #12]
 80033f4:	4b44      	ldr	r3, [pc, #272]	; (8003508 <HAL_ADC_Init+0x294>)
 80033f6:	4013      	ands	r3, r2
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	69b9      	ldr	r1, [r7, #24]
 80033fe:	430b      	orrs	r3, r1
 8003400:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	4618      	mov	r0, r3
 8003408:	f7ff ff20 	bl	800324c <LL_ADC_INJ_IsConversionOngoing>
 800340c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d140      	bne.n	8003496 <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003414:	693b      	ldr	r3, [r7, #16]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d13d      	bne.n	8003496 <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	7e1b      	ldrb	r3, [r3, #24]
 8003422:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8003424:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800342c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800342e:	4313      	orrs	r3, r2
 8003430:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800343c:	f023 0306 	bic.w	r3, r3, #6
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6812      	ldr	r2, [r2, #0]
 8003444:	69b9      	ldr	r1, [r7, #24]
 8003446:	430b      	orrs	r3, r1
 8003448:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003450:	2b01      	cmp	r3, #1
 8003452:	d118      	bne.n	8003486 <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800345e:	f023 0304 	bic.w	r3, r3, #4
 8003462:	687a      	ldr	r2, [r7, #4]
 8003464:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800346a:	4311      	orrs	r1, r2
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003470:	4311      	orrs	r1, r2
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003476:	430a      	orrs	r2, r1
 8003478:	431a      	orrs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f042 0201 	orr.w	r2, r2, #1
 8003482:	611a      	str	r2, [r3, #16]
 8003484:	e007      	b.n	8003496 <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	691a      	ldr	r2, [r3, #16]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f022 0201 	bic.w	r2, r2, #1
 8003494:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d10c      	bne.n	80034b8 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	f023 010f 	bic.w	r1, r3, #15
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	1e5a      	subs	r2, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	430a      	orrs	r2, r1
 80034b4:	631a      	str	r2, [r3, #48]	; 0x30
 80034b6:	e007      	b.n	80034c8 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 020f 	bic.w	r2, r2, #15
 80034c6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034cc:	f023 0303 	bic.w	r3, r3, #3
 80034d0:	f043 0201 	orr.w	r2, r3, #1
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	659a      	str	r2, [r3, #88]	; 0x58
 80034d8:	e007      	b.n	80034ea <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034de:	f043 0210 	orr.w	r2, r3, #16
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80034ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	3724      	adds	r7, #36	; 0x24
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd90      	pop	{r4, r7, pc}
 80034f4:	20000004 	.word	0x20000004
 80034f8:	053e2d63 	.word	0x053e2d63
 80034fc:	42028000 	.word	0x42028000
 8003500:	42028100 	.word	0x42028100
 8003504:	42028300 	.word	0x42028300
 8003508:	fff0c007 	.word	0xfff0c007

0800350c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 800350c:	b590      	push	{r4, r7, lr}
 800350e:	b0b7      	sub	sp, #220	; 0xdc
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003516:	2300      	movs	r3, #0
 8003518:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800351c:	2300      	movs	r3, #0
 800351e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003526:	2b01      	cmp	r3, #1
 8003528:	d101      	bne.n	800352e <HAL_ADC_ConfigChannel+0x22>
 800352a:	2302      	movs	r3, #2
 800352c:	e3c1      	b.n	8003cb2 <HAL_ADC_ConfigChannel+0x7a6>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2201      	movs	r2, #1
 8003532:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4618      	mov	r0, r3
 800353c:	f7ff fe73 	bl	8003226 <LL_ADC_REG_IsConversionOngoing>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	f040 83a6 	bne.w	8003c94 <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6818      	ldr	r0, [r3, #0]
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	6859      	ldr	r1, [r3, #4]
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	461a      	mov	r2, r3
 8003556:	f7ff fd89 	bl	800306c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f7ff fe61 	bl	8003226 <LL_ADC_REG_IsConversionOngoing>
 8003564:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f7ff fe6d 	bl	800324c <LL_ADC_INJ_IsConversionOngoing>
 8003572:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003576:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800357a:	2b00      	cmp	r3, #0
 800357c:	f040 81c1 	bne.w	8003902 <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003580:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003584:	2b00      	cmp	r3, #0
 8003586:	f040 81bc 	bne.w	8003902 <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003592:	d10f      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6818      	ldr	r0, [r3, #0]
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2200      	movs	r2, #0
 800359e:	4619      	mov	r1, r3
 80035a0:	f7ff fd90 	bl	80030c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80035ac:	4618      	mov	r0, r3
 80035ae:	f7ff fd4a 	bl	8003046 <LL_ADC_SetSamplingTimeCommonConfig>
 80035b2:	e00e      	b.n	80035d2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6818      	ldr	r0, [r3, #0]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	6819      	ldr	r1, [r3, #0]
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	461a      	mov	r2, r3
 80035c2:	f7ff fd7f 	bl	80030c4 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2100      	movs	r1, #0
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff fd3a 	bl	8003046 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	695a      	ldr	r2, [r3, #20]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	08db      	lsrs	r3, r3, #3
 80035de:	f003 0303 	and.w	r3, r3, #3
 80035e2:	005b      	lsls	r3, r3, #1
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	691b      	ldr	r3, [r3, #16]
 80035f0:	2b04      	cmp	r3, #4
 80035f2:	d00a      	beq.n	800360a <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6818      	ldr	r0, [r3, #0]
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	6919      	ldr	r1, [r3, #16]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003604:	f7ff fcca 	bl	8002f9c <LL_ADC_SetOffset>
 8003608:	e17b      	b.n	8003902 <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2100      	movs	r1, #0
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff fce7 	bl	8002fe4 <LL_ADC_GetOffsetChannel>
 8003616:	4603      	mov	r3, r0
 8003618:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800361c:	2b00      	cmp	r3, #0
 800361e:	d10a      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x12a>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2100      	movs	r1, #0
 8003626:	4618      	mov	r0, r3
 8003628:	f7ff fcdc 	bl	8002fe4 <LL_ADC_GetOffsetChannel>
 800362c:	4603      	mov	r3, r0
 800362e:	0e9b      	lsrs	r3, r3, #26
 8003630:	f003 021f 	and.w	r2, r3, #31
 8003634:	e01e      	b.n	8003674 <HAL_ADC_ConfigChannel+0x168>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2100      	movs	r1, #0
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff fcd1 	bl	8002fe4 <LL_ADC_GetOffsetChannel>
 8003642:	4603      	mov	r3, r0
 8003644:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003648:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800364c:	fa93 f3a3 	rbit	r3, r3
 8003650:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003654:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003658:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800365c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d101      	bne.n	8003668 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8003664:	2320      	movs	r3, #32
 8003666:	e004      	b.n	8003672 <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8003668:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800366c:	fab3 f383 	clz	r3, r3
 8003670:	b2db      	uxtb	r3, r3
 8003672:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800367c:	2b00      	cmp	r3, #0
 800367e:	d105      	bne.n	800368c <HAL_ADC_ConfigChannel+0x180>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	0e9b      	lsrs	r3, r3, #26
 8003686:	f003 031f 	and.w	r3, r3, #31
 800368a:	e018      	b.n	80036be <HAL_ADC_ConfigChannel+0x1b2>
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003694:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003698:	fa93 f3a3 	rbit	r3, r3
 800369c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80036a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80036a8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 80036b0:	2320      	movs	r3, #32
 80036b2:	e004      	b.n	80036be <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 80036b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036b8:	fab3 f383 	clz	r3, r3
 80036bc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036be:	429a      	cmp	r2, r3
 80036c0:	d106      	bne.n	80036d0 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2200      	movs	r2, #0
 80036c8:	2100      	movs	r1, #0
 80036ca:	4618      	mov	r0, r3
 80036cc:	f7ff fca0 	bl	8003010 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2101      	movs	r1, #1
 80036d6:	4618      	mov	r0, r3
 80036d8:	f7ff fc84 	bl	8002fe4 <LL_ADC_GetOffsetChannel>
 80036dc:	4603      	mov	r3, r0
 80036de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10a      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x1f0>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2101      	movs	r1, #1
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff fc79 	bl	8002fe4 <LL_ADC_GetOffsetChannel>
 80036f2:	4603      	mov	r3, r0
 80036f4:	0e9b      	lsrs	r3, r3, #26
 80036f6:	f003 021f 	and.w	r2, r3, #31
 80036fa:	e01e      	b.n	800373a <HAL_ADC_ConfigChannel+0x22e>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2101      	movs	r1, #1
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff fc6e 	bl	8002fe4 <LL_ADC_GetOffsetChannel>
 8003708:	4603      	mov	r3, r0
 800370a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003712:	fa93 f3a3 	rbit	r3, r3
 8003716:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800371a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800371e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003722:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 800372a:	2320      	movs	r3, #32
 800372c:	e004      	b.n	8003738 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 800372e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003732:	fab3 f383 	clz	r3, r3
 8003736:	b2db      	uxtb	r3, r3
 8003738:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003742:	2b00      	cmp	r3, #0
 8003744:	d105      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x246>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	0e9b      	lsrs	r3, r3, #26
 800374c:	f003 031f 	and.w	r3, r3, #31
 8003750:	e018      	b.n	8003784 <HAL_ADC_ConfigChannel+0x278>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800375a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800375e:	fa93 f3a3 	rbit	r3, r3
 8003762:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003766:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800376a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800376e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8003776:	2320      	movs	r3, #32
 8003778:	e004      	b.n	8003784 <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 800377a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800377e:	fab3 f383 	clz	r3, r3
 8003782:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003784:	429a      	cmp	r2, r3
 8003786:	d106      	bne.n	8003796 <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2200      	movs	r2, #0
 800378e:	2101      	movs	r1, #1
 8003790:	4618      	mov	r0, r3
 8003792:	f7ff fc3d 	bl	8003010 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	2102      	movs	r1, #2
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff fc21 	bl	8002fe4 <LL_ADC_GetOffsetChannel>
 80037a2:	4603      	mov	r3, r0
 80037a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10a      	bne.n	80037c2 <HAL_ADC_ConfigChannel+0x2b6>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2102      	movs	r1, #2
 80037b2:	4618      	mov	r0, r3
 80037b4:	f7ff fc16 	bl	8002fe4 <LL_ADC_GetOffsetChannel>
 80037b8:	4603      	mov	r3, r0
 80037ba:	0e9b      	lsrs	r3, r3, #26
 80037bc:	f003 021f 	and.w	r2, r3, #31
 80037c0:	e01e      	b.n	8003800 <HAL_ADC_ConfigChannel+0x2f4>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2102      	movs	r1, #2
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7ff fc0b 	bl	8002fe4 <LL_ADC_GetOffsetChannel>
 80037ce:	4603      	mov	r3, r0
 80037d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037d8:	fa93 f3a3 	rbit	r3, r3
 80037dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80037e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80037e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80037e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 80037f0:	2320      	movs	r3, #32
 80037f2:	e004      	b.n	80037fe <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 80037f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80037f8:	fab3 f383 	clz	r3, r3
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003808:	2b00      	cmp	r3, #0
 800380a:	d105      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x30c>
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	0e9b      	lsrs	r3, r3, #26
 8003812:	f003 031f 	and.w	r3, r3, #31
 8003816:	e016      	b.n	8003846 <HAL_ADC_ConfigChannel+0x33a>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003820:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003824:	fa93 f3a3 	rbit	r3, r3
 8003828:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800382a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800382c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003830:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8003838:	2320      	movs	r3, #32
 800383a:	e004      	b.n	8003846 <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 800383c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003840:	fab3 f383 	clz	r3, r3
 8003844:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003846:	429a      	cmp	r2, r3
 8003848:	d106      	bne.n	8003858 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2200      	movs	r2, #0
 8003850:	2102      	movs	r1, #2
 8003852:	4618      	mov	r0, r3
 8003854:	f7ff fbdc 	bl	8003010 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2103      	movs	r1, #3
 800385e:	4618      	mov	r0, r3
 8003860:	f7ff fbc0 	bl	8002fe4 <LL_ADC_GetOffsetChannel>
 8003864:	4603      	mov	r3, r0
 8003866:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10a      	bne.n	8003884 <HAL_ADC_ConfigChannel+0x378>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	2103      	movs	r1, #3
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff fbb5 	bl	8002fe4 <LL_ADC_GetOffsetChannel>
 800387a:	4603      	mov	r3, r0
 800387c:	0e9b      	lsrs	r3, r3, #26
 800387e:	f003 021f 	and.w	r2, r3, #31
 8003882:	e017      	b.n	80038b4 <HAL_ADC_ConfigChannel+0x3a8>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	2103      	movs	r1, #3
 800388a:	4618      	mov	r0, r3
 800388c:	f7ff fbaa 	bl	8002fe4 <LL_ADC_GetOffsetChannel>
 8003890:	4603      	mov	r3, r0
 8003892:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003896:	fa93 f3a3 	rbit	r3, r3
 800389a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800389c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800389e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80038a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d101      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 80038a6:	2320      	movs	r3, #32
 80038a8:	e003      	b.n	80038b2 <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 80038aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038ac:	fab3 f383 	clz	r3, r3
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d105      	bne.n	80038cc <HAL_ADC_ConfigChannel+0x3c0>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	0e9b      	lsrs	r3, r3, #26
 80038c6:	f003 031f 	and.w	r3, r3, #31
 80038ca:	e011      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x3e4>
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038d4:	fa93 f3a3 	rbit	r3, r3
 80038d8:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80038da:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038dc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80038de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d101      	bne.n	80038e8 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 80038e4:	2320      	movs	r3, #32
 80038e6:	e003      	b.n	80038f0 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 80038e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ea:	fab3 f383 	clz	r3, r3
 80038ee:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d106      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2200      	movs	r2, #0
 80038fa:	2103      	movs	r1, #3
 80038fc:	4618      	mov	r0, r3
 80038fe:	f7ff fb87 	bl	8003010 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4618      	mov	r0, r3
 8003908:	f7ff fc7a 	bl	8003200 <LL_ADC_IsEnabled>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	f040 81c9 	bne.w	8003ca6 <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6818      	ldr	r0, [r3, #0]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	6819      	ldr	r1, [r3, #0]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	68db      	ldr	r3, [r3, #12]
 8003920:	461a      	mov	r2, r3
 8003922:	f7ff fbfb 	bl	800311c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	4a8f      	ldr	r2, [pc, #572]	; (8003b68 <HAL_ADC_ConfigChannel+0x65c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	f040 8131 	bne.w	8003b94 <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10b      	bne.n	800395a <HAL_ADC_ConfigChannel+0x44e>
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	0e9b      	lsrs	r3, r3, #26
 8003948:	3301      	adds	r3, #1
 800394a:	f003 031f 	and.w	r3, r3, #31
 800394e:	2b09      	cmp	r3, #9
 8003950:	bf94      	ite	ls
 8003952:	2301      	movls	r3, #1
 8003954:	2300      	movhi	r3, #0
 8003956:	b2db      	uxtb	r3, r3
 8003958:	e019      	b.n	800398e <HAL_ADC_ConfigChannel+0x482>
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003960:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003962:	fa93 f3a3 	rbit	r3, r3
 8003966:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003968:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800396a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800396c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 8003972:	2320      	movs	r3, #32
 8003974:	e003      	b.n	800397e <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 8003976:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003978:	fab3 f383 	clz	r3, r3
 800397c:	b2db      	uxtb	r3, r3
 800397e:	3301      	adds	r3, #1
 8003980:	f003 031f 	and.w	r3, r3, #31
 8003984:	2b09      	cmp	r3, #9
 8003986:	bf94      	ite	ls
 8003988:	2301      	movls	r3, #1
 800398a:	2300      	movhi	r3, #0
 800398c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800398e:	2b00      	cmp	r3, #0
 8003990:	d079      	beq.n	8003a86 <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800399a:	2b00      	cmp	r3, #0
 800399c:	d107      	bne.n	80039ae <HAL_ADC_ConfigChannel+0x4a2>
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	0e9b      	lsrs	r3, r3, #26
 80039a4:	3301      	adds	r3, #1
 80039a6:	069b      	lsls	r3, r3, #26
 80039a8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039ac:	e015      	b.n	80039da <HAL_ADC_ConfigChannel+0x4ce>
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039b6:	fa93 f3a3 	rbit	r3, r3
 80039ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80039bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039be:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80039c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d101      	bne.n	80039ca <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80039c6:	2320      	movs	r3, #32
 80039c8:	e003      	b.n	80039d2 <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80039ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039cc:	fab3 f383 	clz	r3, r3
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	3301      	adds	r3, #1
 80039d4:	069b      	lsls	r3, r3, #26
 80039d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d109      	bne.n	80039fa <HAL_ADC_ConfigChannel+0x4ee>
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	0e9b      	lsrs	r3, r3, #26
 80039ec:	3301      	adds	r3, #1
 80039ee:	f003 031f 	and.w	r3, r3, #31
 80039f2:	2101      	movs	r1, #1
 80039f4:	fa01 f303 	lsl.w	r3, r1, r3
 80039f8:	e017      	b.n	8003a2a <HAL_ADC_ConfigChannel+0x51e>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a02:	fa93 f3a3 	rbit	r3, r3
 8003a06:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a0a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003a0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 8003a12:	2320      	movs	r3, #32
 8003a14:	e003      	b.n	8003a1e <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 8003a16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a18:	fab3 f383 	clz	r3, r3
 8003a1c:	b2db      	uxtb	r3, r3
 8003a1e:	3301      	adds	r3, #1
 8003a20:	f003 031f 	and.w	r3, r3, #31
 8003a24:	2101      	movs	r1, #1
 8003a26:	fa01 f303 	lsl.w	r3, r1, r3
 8003a2a:	ea42 0103 	orr.w	r1, r2, r3
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d10a      	bne.n	8003a50 <HAL_ADC_ConfigChannel+0x544>
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	0e9b      	lsrs	r3, r3, #26
 8003a40:	3301      	adds	r3, #1
 8003a42:	f003 021f 	and.w	r2, r3, #31
 8003a46:	4613      	mov	r3, r2
 8003a48:	005b      	lsls	r3, r3, #1
 8003a4a:	4413      	add	r3, r2
 8003a4c:	051b      	lsls	r3, r3, #20
 8003a4e:	e018      	b.n	8003a82 <HAL_ADC_ConfigChannel+0x576>
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a58:	fa93 f3a3 	rbit	r3, r3
 8003a5c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a60:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003a68:	2320      	movs	r3, #32
 8003a6a:	e003      	b.n	8003a74 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8003a6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a6e:	fab3 f383 	clz	r3, r3
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	3301      	adds	r3, #1
 8003a76:	f003 021f 	and.w	r2, r3, #31
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	4413      	add	r3, r2
 8003a80:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a82:	430b      	orrs	r3, r1
 8003a84:	e081      	b.n	8003b8a <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d107      	bne.n	8003aa2 <HAL_ADC_ConfigChannel+0x596>
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	0e9b      	lsrs	r3, r3, #26
 8003a98:	3301      	adds	r3, #1
 8003a9a:	069b      	lsls	r3, r3, #26
 8003a9c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003aa0:	e015      	b.n	8003ace <HAL_ADC_ConfigChannel+0x5c2>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aaa:	fa93 f3a3 	rbit	r3, r3
 8003aae:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003ab0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab2:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 8003aba:	2320      	movs	r3, #32
 8003abc:	e003      	b.n	8003ac6 <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 8003abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac0:	fab3 f383 	clz	r3, r3
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	3301      	adds	r3, #1
 8003ac8:	069b      	lsls	r3, r3, #26
 8003aca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d109      	bne.n	8003aee <HAL_ADC_ConfigChannel+0x5e2>
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	0e9b      	lsrs	r3, r3, #26
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	f003 031f 	and.w	r3, r3, #31
 8003ae6:	2101      	movs	r1, #1
 8003ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8003aec:	e017      	b.n	8003b1e <HAL_ADC_ConfigChannel+0x612>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003af4:	6a3b      	ldr	r3, [r7, #32]
 8003af6:	fa93 f3a3 	rbit	r3, r3
 8003afa:	61fb      	str	r3, [r7, #28]
  return result;
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d101      	bne.n	8003b0a <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 8003b06:	2320      	movs	r3, #32
 8003b08:	e003      	b.n	8003b12 <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	fab3 f383 	clz	r3, r3
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	3301      	adds	r3, #1
 8003b14:	f003 031f 	and.w	r3, r3, #31
 8003b18:	2101      	movs	r1, #1
 8003b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003b1e:	ea42 0103 	orr.w	r1, r2, r3
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d10d      	bne.n	8003b4a <HAL_ADC_ConfigChannel+0x63e>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	0e9b      	lsrs	r3, r3, #26
 8003b34:	3301      	adds	r3, #1
 8003b36:	f003 021f 	and.w	r2, r3, #31
 8003b3a:	4613      	mov	r3, r2
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	4413      	add	r3, r2
 8003b40:	3b1e      	subs	r3, #30
 8003b42:	051b      	lsls	r3, r3, #20
 8003b44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b48:	e01e      	b.n	8003b88 <HAL_ADC_ConfigChannel+0x67c>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	fa93 f3a3 	rbit	r3, r3
 8003b56:	613b      	str	r3, [r7, #16]
  return result;
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d104      	bne.n	8003b6c <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 8003b62:	2320      	movs	r3, #32
 8003b64:	e006      	b.n	8003b74 <HAL_ADC_ConfigChannel+0x668>
 8003b66:	bf00      	nop
 8003b68:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	fab3 f383 	clz	r3, r3
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	3301      	adds	r3, #1
 8003b76:	f003 021f 	and.w	r2, r3, #31
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	005b      	lsls	r3, r3, #1
 8003b7e:	4413      	add	r3, r2
 8003b80:	3b1e      	subs	r3, #30
 8003b82:	051b      	lsls	r3, r3, #20
 8003b84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b88:	430b      	orrs	r3, r1
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	6892      	ldr	r2, [r2, #8]
 8003b8e:	4619      	mov	r1, r3
 8003b90:	f7ff fa98 	bl	80030c4 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	4b48      	ldr	r3, [pc, #288]	; (8003cbc <HAL_ADC_ConfigChannel+0x7b0>)
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 8082 	beq.w	8003ca6 <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003ba2:	4847      	ldr	r0, [pc, #284]	; (8003cc0 <HAL_ADC_ConfigChannel+0x7b4>)
 8003ba4:	f7ff f9ec 	bl	8002f80 <LL_ADC_GetCommonPathInternalCh>
 8003ba8:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003bac:	4845      	ldr	r0, [pc, #276]	; (8003cc4 <HAL_ADC_ConfigChannel+0x7b8>)
 8003bae:	f7ff fb27 	bl	8003200 <LL_ADC_IsEnabled>
 8003bb2:	4604      	mov	r4, r0
 8003bb4:	4844      	ldr	r0, [pc, #272]	; (8003cc8 <HAL_ADC_ConfigChannel+0x7bc>)
 8003bb6:	f7ff fb23 	bl	8003200 <LL_ADC_IsEnabled>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	4323      	orrs	r3, r4
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d15e      	bne.n	8003c80 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a41      	ldr	r2, [pc, #260]	; (8003ccc <HAL_ADC_ConfigChannel+0x7c0>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d127      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003bcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d121      	bne.n	8003c1c <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a39      	ldr	r2, [pc, #228]	; (8003cc4 <HAL_ADC_ConfigChannel+0x7b8>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d161      	bne.n	8003ca6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003be2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003be6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bea:	4619      	mov	r1, r3
 8003bec:	4834      	ldr	r0, [pc, #208]	; (8003cc0 <HAL_ADC_ConfigChannel+0x7b4>)
 8003bee:	f7ff f9b4 	bl	8002f5a <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bf2:	4b37      	ldr	r3, [pc, #220]	; (8003cd0 <HAL_ADC_ConfigChannel+0x7c4>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	099b      	lsrs	r3, r3, #6
 8003bf8:	4a36      	ldr	r2, [pc, #216]	; (8003cd4 <HAL_ADC_ConfigChannel+0x7c8>)
 8003bfa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bfe:	099b      	lsrs	r3, r3, #6
 8003c00:	1c5a      	adds	r2, r3, #1
 8003c02:	4613      	mov	r3, r2
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	4413      	add	r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 8003c0a:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003c0c:	e002      	b.n	8003c14 <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	3b01      	subs	r3, #1
 8003c12:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d1f9      	bne.n	8003c0e <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c1a:	e044      	b.n	8003ca6 <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a2d      	ldr	r2, [pc, #180]	; (8003cd8 <HAL_ADC_ConfigChannel+0x7cc>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d113      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c26:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10d      	bne.n	8003c4e <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a23      	ldr	r2, [pc, #140]	; (8003cc4 <HAL_ADC_ConfigChannel+0x7b8>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d134      	bne.n	8003ca6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c3c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c44:	4619      	mov	r1, r3
 8003c46:	481e      	ldr	r0, [pc, #120]	; (8003cc0 <HAL_ADC_ConfigChannel+0x7b4>)
 8003c48:	f7ff f987 	bl	8002f5a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c4c:	e02b      	b.n	8003ca6 <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a22      	ldr	r2, [pc, #136]	; (8003cdc <HAL_ADC_ConfigChannel+0x7d0>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d126      	bne.n	8003ca6 <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c58:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d120      	bne.n	8003ca6 <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a16      	ldr	r2, [pc, #88]	; (8003cc4 <HAL_ADC_ConfigChannel+0x7b8>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d11b      	bne.n	8003ca6 <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c6e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c76:	4619      	mov	r1, r3
 8003c78:	4811      	ldr	r0, [pc, #68]	; (8003cc0 <HAL_ADC_ConfigChannel+0x7b4>)
 8003c7a:	f7ff f96e 	bl	8002f5a <LL_ADC_SetCommonPathInternalCh>
 8003c7e:	e012      	b.n	8003ca6 <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c84:	f043 0220 	orr.w	r2, r3, #32
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003c92:	e008      	b.n	8003ca6 <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c98:	f043 0220 	orr.w	r2, r3, #32
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003cae:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	37dc      	adds	r7, #220	; 0xdc
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd90      	pop	{r4, r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	80080000 	.word	0x80080000
 8003cc0:	42028300 	.word	0x42028300
 8003cc4:	42028000 	.word	0x42028000
 8003cc8:	42028100 	.word	0x42028100
 8003ccc:	c7520000 	.word	0xc7520000
 8003cd0:	20000004 	.word	0x20000004
 8003cd4:	053e2d63 	.word	0x053e2d63
 8003cd8:	cb840000 	.word	0xcb840000
 8003cdc:	80000001 	.word	0x80000001

08003ce0 <LL_ADC_IsEnabled>:
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	689b      	ldr	r3, [r3, #8]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <LL_ADC_IsEnabled+0x18>
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	e000      	b.n	8003cfa <LL_ADC_IsEnabled+0x1a>
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr

08003d06 <LL_ADC_REG_IsConversionOngoing>:
{
 8003d06:	b480      	push	{r7}
 8003d08:	b083      	sub	sp, #12
 8003d0a:	af00      	add	r7, sp, #0
 8003d0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	f003 0304 	and.w	r3, r3, #4
 8003d16:	2b04      	cmp	r3, #4
 8003d18:	d101      	bne.n	8003d1e <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	e000      	b.n	8003d20 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8003d2c:	b590      	push	{r4, r7, lr}
 8003d2e:	b0a1      	sub	sp, #132	; 0x84
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
 8003d34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003d42:	2b01      	cmp	r3, #1
 8003d44:	d101      	bne.n	8003d4a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d46:	2302      	movs	r3, #2
 8003d48:	e089      	b.n	8003e5e <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8003d52:	2300      	movs	r3, #0
 8003d54:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003d56:	2300      	movs	r3, #0
 8003d58:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a42      	ldr	r2, [pc, #264]	; (8003e68 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d102      	bne.n	8003d6a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d64:	4b41      	ldr	r3, [pc, #260]	; (8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	e001      	b.n	8003d6e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10b      	bne.n	8003d8c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d78:	f043 0220 	orr.w	r2, r3, #32
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e068      	b.n	8003e5e <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff ffb9 	bl	8003d06 <LL_ADC_REG_IsConversionOngoing>
 8003d94:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff ffb3 	bl	8003d06 <LL_ADC_REG_IsConversionOngoing>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d14a      	bne.n	8003e3c <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8003da6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d147      	bne.n	8003e3c <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003dac:	4b30      	ldr	r3, [pc, #192]	; (8003e70 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8003dae:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d027      	beq.n	8003e08 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003db8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	6859      	ldr	r1, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003dca:	035b      	lsls	r3, r3, #13
 8003dcc:	430b      	orrs	r3, r1
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dd2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003dd4:	4824      	ldr	r0, [pc, #144]	; (8003e68 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003dd6:	f7ff ff83 	bl	8003ce0 <LL_ADC_IsEnabled>
 8003dda:	4604      	mov	r4, r0
 8003ddc:	4823      	ldr	r0, [pc, #140]	; (8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003dde:	f7ff ff7f 	bl	8003ce0 <LL_ADC_IsEnabled>
 8003de2:	4603      	mov	r3, r0
 8003de4:	4323      	orrs	r3, r4
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d132      	bne.n	8003e50 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003dea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003df2:	f023 030f 	bic.w	r3, r3, #15
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	6811      	ldr	r1, [r2, #0]
 8003dfa:	683a      	ldr	r2, [r7, #0]
 8003dfc:	6892      	ldr	r2, [r2, #8]
 8003dfe:	430a      	orrs	r2, r1
 8003e00:	431a      	orrs	r2, r3
 8003e02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e04:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e06:	e023      	b.n	8003e50 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003e08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e12:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e14:	4814      	ldr	r0, [pc, #80]	; (8003e68 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8003e16:	f7ff ff63 	bl	8003ce0 <LL_ADC_IsEnabled>
 8003e1a:	4604      	mov	r4, r0
 8003e1c:	4813      	ldr	r0, [pc, #76]	; (8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003e1e:	f7ff ff5f 	bl	8003ce0 <LL_ADC_IsEnabled>
 8003e22:	4603      	mov	r3, r0
 8003e24:	4323      	orrs	r3, r4
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d112      	bne.n	8003e50 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e32:	f023 030f 	bic.w	r3, r3, #15
 8003e36:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003e38:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e3a:	e009      	b.n	8003e50 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e40:	f043 0220 	orr.w	r2, r3, #32
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003e4e:	e000      	b.n	8003e52 <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003e50:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8003e5a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3784      	adds	r7, #132	; 0x84
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd90      	pop	{r4, r7, pc}
 8003e66:	bf00      	nop
 8003e68:	42028000 	.word	0x42028000
 8003e6c:	42028100 	.word	0x42028100
 8003e70:	42028300 	.word	0x42028300

08003e74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f003 0307 	and.w	r3, r3, #7
 8003e82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e84:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003e90:	4013      	ands	r3, r2
 8003e92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ea4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ea6:	4a04      	ldr	r2, [pc, #16]	; (8003eb8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	60d3      	str	r3, [r2, #12]
}
 8003eac:	bf00      	nop
 8003eae:	3714      	adds	r7, #20
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr
 8003eb8:	e000ed00 	.word	0xe000ed00

08003ebc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ec0:	4b04      	ldr	r3, [pc, #16]	; (8003ed4 <__NVIC_GetPriorityGrouping+0x18>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	0a1b      	lsrs	r3, r3, #8
 8003ec6:	f003 0307 	and.w	r3, r3, #7
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr
 8003ed4:	e000ed00 	.word	0xe000ed00

08003ed8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	4603      	mov	r3, r0
 8003ee0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	db0b      	blt.n	8003f02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eea:	79fb      	ldrb	r3, [r7, #7]
 8003eec:	f003 021f 	and.w	r2, r3, #31
 8003ef0:	4907      	ldr	r1, [pc, #28]	; (8003f10 <__NVIC_EnableIRQ+0x38>)
 8003ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef6:	095b      	lsrs	r3, r3, #5
 8003ef8:	2001      	movs	r0, #1
 8003efa:	fa00 f202 	lsl.w	r2, r0, r2
 8003efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003f02:	bf00      	nop
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
 8003f0e:	bf00      	nop
 8003f10:	e000e100 	.word	0xe000e100

08003f14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	4603      	mov	r3, r0
 8003f1c:	6039      	str	r1, [r7, #0]
 8003f1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	db0a      	blt.n	8003f3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	b2da      	uxtb	r2, r3
 8003f2c:	490c      	ldr	r1, [pc, #48]	; (8003f60 <__NVIC_SetPriority+0x4c>)
 8003f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f32:	0152      	lsls	r2, r2, #5
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	440b      	add	r3, r1
 8003f38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f3c:	e00a      	b.n	8003f54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	b2da      	uxtb	r2, r3
 8003f42:	4908      	ldr	r1, [pc, #32]	; (8003f64 <__NVIC_SetPriority+0x50>)
 8003f44:	79fb      	ldrb	r3, [r7, #7]
 8003f46:	f003 030f 	and.w	r3, r3, #15
 8003f4a:	3b04      	subs	r3, #4
 8003f4c:	0152      	lsls	r2, r2, #5
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	440b      	add	r3, r1
 8003f52:	761a      	strb	r2, [r3, #24]
}
 8003f54:	bf00      	nop
 8003f56:	370c      	adds	r7, #12
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	e000e100 	.word	0xe000e100
 8003f64:	e000ed00 	.word	0xe000ed00

08003f68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b089      	sub	sp, #36	; 0x24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	f003 0307 	and.w	r3, r3, #7
 8003f7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f1c3 0307 	rsb	r3, r3, #7
 8003f82:	2b03      	cmp	r3, #3
 8003f84:	bf28      	it	cs
 8003f86:	2303      	movcs	r3, #3
 8003f88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	3303      	adds	r3, #3
 8003f8e:	2b06      	cmp	r3, #6
 8003f90:	d902      	bls.n	8003f98 <NVIC_EncodePriority+0x30>
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	3b04      	subs	r3, #4
 8003f96:	e000      	b.n	8003f9a <NVIC_EncodePriority+0x32>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa6:	43da      	mvns	r2, r3
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	401a      	ands	r2, r3
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003fb4:	697b      	ldr	r3, [r7, #20]
 8003fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003fba:	43d9      	mvns	r1, r3
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fc0:	4313      	orrs	r3, r2
         );
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3724      	adds	r7, #36	; 0x24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr

08003fce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b082      	sub	sp, #8
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff ff4c 	bl	8003e74 <__NVIC_SetPriorityGrouping>
}
 8003fdc:	bf00      	nop
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b086      	sub	sp, #24
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	4603      	mov	r3, r0
 8003fec:	60b9      	str	r1, [r7, #8]
 8003fee:	607a      	str	r2, [r7, #4]
 8003ff0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003ff2:	f7ff ff63 	bl	8003ebc <__NVIC_GetPriorityGrouping>
 8003ff6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	68b9      	ldr	r1, [r7, #8]
 8003ffc:	6978      	ldr	r0, [r7, #20]
 8003ffe:	f7ff ffb3 	bl	8003f68 <NVIC_EncodePriority>
 8004002:	4602      	mov	r2, r0
 8004004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004008:	4611      	mov	r1, r2
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff ff82 	bl	8003f14 <__NVIC_SetPriority>
}
 8004010:	bf00      	nop
 8004012:	3718      	adds	r7, #24
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004026:	4618      	mov	r0, r3
 8004028:	f7ff ff56 	bl	8003ed8 <__NVIC_EnableIRQ>
}
 800402c:	bf00      	nop
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b082      	sub	sp, #8
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e054      	b.n	80040f0 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	7f5b      	ldrb	r3, [r3, #29]
 800404a:	b2db      	uxtb	r3, r3
 800404c:	2b00      	cmp	r3, #0
 800404e:	d105      	bne.n	800405c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7fd f9a2 	bl	80013a0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2202      	movs	r2, #2
 8004060:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	791b      	ldrb	r3, [r3, #4]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10c      	bne.n	8004084 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a22      	ldr	r2, [pc, #136]	; (80040f8 <HAL_CRC_Init+0xc4>)
 8004070:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f022 0218 	bic.w	r2, r2, #24
 8004080:	609a      	str	r2, [r3, #8]
 8004082:	e00c      	b.n	800409e <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6899      	ldr	r1, [r3, #8]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	461a      	mov	r2, r3
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f834 	bl	80040fc <HAL_CRCEx_Polynomial_Set>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e028      	b.n	80040f0 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	795b      	ldrb	r3, [r3, #5]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d105      	bne.n	80040b2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f04f 32ff 	mov.w	r2, #4294967295
 80040ae:	611a      	str	r2, [r3, #16]
 80040b0:	e004      	b.n	80040bc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	687a      	ldr	r2, [r7, #4]
 80040b8:	6912      	ldr	r2, [r2, #16]
 80040ba:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695a      	ldr	r2, [r3, #20]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	430a      	orrs	r2, r1
 80040d0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	699a      	ldr	r2, [r3, #24]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	430a      	orrs	r2, r1
 80040e6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	04c11db7 	.word	0x04c11db7

080040fc <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80040fc:	b480      	push	{r7}
 80040fe:	b087      	sub	sp, #28
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800410c:	231f      	movs	r3, #31
 800410e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	f003 0301 	and.w	r3, r3, #1
 8004116:	2b00      	cmp	r3, #0
 8004118:	d102      	bne.n	8004120 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	75fb      	strb	r3, [r7, #23]
 800411e:	e063      	b.n	80041e8 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8004120:	bf00      	nop
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1e5a      	subs	r2, r3, #1
 8004126:	613a      	str	r2, [r7, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d009      	beq.n	8004140 <HAL_CRCEx_Polynomial_Set+0x44>
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	f003 031f 	and.w	r3, r3, #31
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	fa22 f303 	lsr.w	r3, r2, r3
 8004138:	f003 0301 	and.w	r3, r3, #1
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0f0      	beq.n	8004122 <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b18      	cmp	r3, #24
 8004144:	d846      	bhi.n	80041d4 <HAL_CRCEx_Polynomial_Set+0xd8>
 8004146:	a201      	add	r2, pc, #4	; (adr r2, 800414c <HAL_CRCEx_Polynomial_Set+0x50>)
 8004148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414c:	080041db 	.word	0x080041db
 8004150:	080041d5 	.word	0x080041d5
 8004154:	080041d5 	.word	0x080041d5
 8004158:	080041d5 	.word	0x080041d5
 800415c:	080041d5 	.word	0x080041d5
 8004160:	080041d5 	.word	0x080041d5
 8004164:	080041d5 	.word	0x080041d5
 8004168:	080041d5 	.word	0x080041d5
 800416c:	080041c9 	.word	0x080041c9
 8004170:	080041d5 	.word	0x080041d5
 8004174:	080041d5 	.word	0x080041d5
 8004178:	080041d5 	.word	0x080041d5
 800417c:	080041d5 	.word	0x080041d5
 8004180:	080041d5 	.word	0x080041d5
 8004184:	080041d5 	.word	0x080041d5
 8004188:	080041d5 	.word	0x080041d5
 800418c:	080041bd 	.word	0x080041bd
 8004190:	080041d5 	.word	0x080041d5
 8004194:	080041d5 	.word	0x080041d5
 8004198:	080041d5 	.word	0x080041d5
 800419c:	080041d5 	.word	0x080041d5
 80041a0:	080041d5 	.word	0x080041d5
 80041a4:	080041d5 	.word	0x080041d5
 80041a8:	080041d5 	.word	0x080041d5
 80041ac:	080041b1 	.word	0x080041b1
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	2b06      	cmp	r3, #6
 80041b4:	d913      	bls.n	80041de <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80041ba:	e010      	b.n	80041de <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	2b07      	cmp	r3, #7
 80041c0:	d90f      	bls.n	80041e2 <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80041c6:	e00c      	b.n	80041e2 <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	2b0f      	cmp	r3, #15
 80041cc:	d90b      	bls.n	80041e6 <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80041d2:	e008      	b.n	80041e6 <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	75fb      	strb	r3, [r7, #23]
        break;
 80041d8:	e006      	b.n	80041e8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80041da:	bf00      	nop
 80041dc:	e004      	b.n	80041e8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80041de:	bf00      	nop
 80041e0:	e002      	b.n	80041e8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80041e2:	bf00      	nop
 80041e4:	e000      	b.n	80041e8 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80041e6:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 80041e8:	7dfb      	ldrb	r3, [r7, #23]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d10d      	bne.n	800420a <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	68ba      	ldr	r2, [r7, #8]
 80041f4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f023 0118 	bic.w	r1, r3, #24
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	430a      	orrs	r2, r1
 8004208:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800420a:	7dfb      	ldrb	r3, [r7, #23]
}
 800420c:	4618      	mov	r0, r3
 800420e:	371c      	adds	r7, #28
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004218:	b480      	push	{r7}
 800421a:	b087      	sub	sp, #28
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8004222:	2300      	movs	r3, #0
 8004224:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004226:	e158      	b.n	80044da <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	2101      	movs	r1, #1
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	fa01 f303 	lsl.w	r3, r1, r3
 8004234:	4013      	ands	r3, r2
 8004236:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b00      	cmp	r3, #0
 800423c:	f000 814a 	beq.w	80044d4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	f003 0303 	and.w	r3, r3, #3
 8004248:	2b01      	cmp	r3, #1
 800424a:	d005      	beq.n	8004258 <HAL_GPIO_Init+0x40>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f003 0303 	and.w	r3, r3, #3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d130      	bne.n	80042ba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	005b      	lsls	r3, r3, #1
 8004262:	2203      	movs	r2, #3
 8004264:	fa02 f303 	lsl.w	r3, r2, r3
 8004268:	43db      	mvns	r3, r3
 800426a:	693a      	ldr	r2, [r7, #16]
 800426c:	4013      	ands	r3, r2
 800426e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	005b      	lsls	r3, r3, #1
 8004278:	fa02 f303 	lsl.w	r3, r2, r3
 800427c:	693a      	ldr	r2, [r7, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800428e:	2201      	movs	r2, #1
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	43db      	mvns	r3, r3
 8004298:	693a      	ldr	r2, [r7, #16]
 800429a:	4013      	ands	r3, r2
 800429c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	091b      	lsrs	r3, r3, #4
 80042a4:	f003 0201 	and.w	r2, r3, #1
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	fa02 f303 	lsl.w	r3, r2, r3
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	693a      	ldr	r2, [r7, #16]
 80042b8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f003 0303 	and.w	r3, r3, #3
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	d017      	beq.n	80042f6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	68db      	ldr	r3, [r3, #12]
 80042ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	005b      	lsls	r3, r3, #1
 80042d0:	2203      	movs	r2, #3
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	43db      	mvns	r3, r3
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4013      	ands	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	689a      	ldr	r2, [r3, #8]
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d123      	bne.n	800434a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	08da      	lsrs	r2, r3, #3
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	3208      	adds	r2, #8
 800430a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800430e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	220f      	movs	r2, #15
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43db      	mvns	r3, r3
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4013      	ands	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	691a      	ldr	r2, [r3, #16]
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f003 0307 	and.w	r3, r3, #7
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	fa02 f303 	lsl.w	r3, r2, r3
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	08da      	lsrs	r2, r3, #3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	3208      	adds	r2, #8
 8004344:	6939      	ldr	r1, [r7, #16]
 8004346:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	2203      	movs	r2, #3
 8004356:	fa02 f303 	lsl.w	r3, r2, r3
 800435a:	43db      	mvns	r3, r3
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	4013      	ands	r3, r2
 8004360:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f003 0203 	and.w	r2, r3, #3
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	005b      	lsls	r3, r3, #1
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	4313      	orrs	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004386:	2b00      	cmp	r3, #0
 8004388:	f000 80a4 	beq.w	80044d4 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 800438c:	4a5a      	ldr	r2, [pc, #360]	; (80044f8 <HAL_GPIO_Init+0x2e0>)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	089b      	lsrs	r3, r3, #2
 8004392:	3318      	adds	r3, #24
 8004394:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004398:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	f003 0303 	and.w	r3, r3, #3
 80043a0:	00db      	lsls	r3, r3, #3
 80043a2:	220f      	movs	r2, #15
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	43db      	mvns	r3, r3
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	4013      	ands	r3, r2
 80043ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a52      	ldr	r2, [pc, #328]	; (80044fc <HAL_GPIO_Init+0x2e4>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d025      	beq.n	8004404 <HAL_GPIO_Init+0x1ec>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a51      	ldr	r2, [pc, #324]	; (8004500 <HAL_GPIO_Init+0x2e8>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d01f      	beq.n	8004400 <HAL_GPIO_Init+0x1e8>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a50      	ldr	r2, [pc, #320]	; (8004504 <HAL_GPIO_Init+0x2ec>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d019      	beq.n	80043fc <HAL_GPIO_Init+0x1e4>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a4f      	ldr	r2, [pc, #316]	; (8004508 <HAL_GPIO_Init+0x2f0>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d013      	beq.n	80043f8 <HAL_GPIO_Init+0x1e0>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a4e      	ldr	r2, [pc, #312]	; (800450c <HAL_GPIO_Init+0x2f4>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d00d      	beq.n	80043f4 <HAL_GPIO_Init+0x1dc>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a4d      	ldr	r2, [pc, #308]	; (8004510 <HAL_GPIO_Init+0x2f8>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d007      	beq.n	80043f0 <HAL_GPIO_Init+0x1d8>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a4c      	ldr	r2, [pc, #304]	; (8004514 <HAL_GPIO_Init+0x2fc>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d101      	bne.n	80043ec <HAL_GPIO_Init+0x1d4>
 80043e8:	2306      	movs	r3, #6
 80043ea:	e00c      	b.n	8004406 <HAL_GPIO_Init+0x1ee>
 80043ec:	2307      	movs	r3, #7
 80043ee:	e00a      	b.n	8004406 <HAL_GPIO_Init+0x1ee>
 80043f0:	2305      	movs	r3, #5
 80043f2:	e008      	b.n	8004406 <HAL_GPIO_Init+0x1ee>
 80043f4:	2304      	movs	r3, #4
 80043f6:	e006      	b.n	8004406 <HAL_GPIO_Init+0x1ee>
 80043f8:	2303      	movs	r3, #3
 80043fa:	e004      	b.n	8004406 <HAL_GPIO_Init+0x1ee>
 80043fc:	2302      	movs	r3, #2
 80043fe:	e002      	b.n	8004406 <HAL_GPIO_Init+0x1ee>
 8004400:	2301      	movs	r3, #1
 8004402:	e000      	b.n	8004406 <HAL_GPIO_Init+0x1ee>
 8004404:	2300      	movs	r3, #0
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	f002 0203 	and.w	r2, r2, #3
 800440c:	00d2      	lsls	r2, r2, #3
 800440e:	4093      	lsls	r3, r2
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8004416:	4938      	ldr	r1, [pc, #224]	; (80044f8 <HAL_GPIO_Init+0x2e0>)
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	089b      	lsrs	r3, r3, #2
 800441c:	3318      	adds	r3, #24
 800441e:	693a      	ldr	r2, [r7, #16]
 8004420:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004424:	4b34      	ldr	r3, [pc, #208]	; (80044f8 <HAL_GPIO_Init+0x2e0>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	43db      	mvns	r3, r3
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	4013      	ands	r3, r2
 8004432:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800443c:	2b00      	cmp	r3, #0
 800443e:	d003      	beq.n	8004448 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	4313      	orrs	r3, r2
 8004446:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004448:	4a2b      	ldr	r2, [pc, #172]	; (80044f8 <HAL_GPIO_Init+0x2e0>)
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800444e:	4b2a      	ldr	r3, [pc, #168]	; (80044f8 <HAL_GPIO_Init+0x2e0>)
 8004450:	685b      	ldr	r3, [r3, #4]
 8004452:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	43db      	mvns	r3, r3
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4013      	ands	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d003      	beq.n	8004472 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	4313      	orrs	r3, r2
 8004470:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004472:	4a21      	ldr	r2, [pc, #132]	; (80044f8 <HAL_GPIO_Init+0x2e0>)
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004478:	4b1f      	ldr	r3, [pc, #124]	; (80044f8 <HAL_GPIO_Init+0x2e0>)
 800447a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800447e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	43db      	mvns	r3, r3
 8004484:	693a      	ldr	r2, [r7, #16]
 8004486:	4013      	ands	r3, r2
 8004488:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4313      	orrs	r3, r2
 800449c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800449e:	4a16      	ldr	r2, [pc, #88]	; (80044f8 <HAL_GPIO_Init+0x2e0>)
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 80044a6:	4b14      	ldr	r3, [pc, #80]	; (80044f8 <HAL_GPIO_Init+0x2e0>)
 80044a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	43db      	mvns	r3, r3
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4013      	ands	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 80044c4:	693a      	ldr	r2, [r7, #16]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80044cc:	4a0a      	ldr	r2, [pc, #40]	; (80044f8 <HAL_GPIO_Init+0x2e0>)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	3301      	adds	r3, #1
 80044d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	fa22 f303 	lsr.w	r3, r2, r3
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f47f ae9f 	bne.w	8004228 <HAL_GPIO_Init+0x10>
  }
}
 80044ea:	bf00      	nop
 80044ec:	bf00      	nop
 80044ee:	371c      	adds	r7, #28
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	4002f400 	.word	0x4002f400
 80044fc:	42020000 	.word	0x42020000
 8004500:	42020400 	.word	0x42020400
 8004504:	42020800 	.word	0x42020800
 8004508:	42020c00 	.word	0x42020c00
 800450c:	42021000 	.word	0x42021000
 8004510:	42021400 	.word	0x42021400
 8004514:	42021800 	.word	0x42021800

08004518 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	460b      	mov	r3, r1
 8004522:	807b      	strh	r3, [r7, #2]
 8004524:	4613      	mov	r3, r2
 8004526:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004528:	787b      	ldrb	r3, [r7, #1]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800452e:	887a      	ldrh	r2, [r7, #2]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004534:	e002      	b.n	800453c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004536:	887a      	ldrh	r2, [r7, #2]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800453c:	bf00      	nop
 800453e:	370c      	adds	r7, #12
 8004540:	46bd      	mov	sp, r7
 8004542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004546:	4770      	bx	lr

08004548 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e081      	b.n	800465e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d106      	bne.n	8004574 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fc ff36 	bl	80013e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2224      	movs	r2, #36	; 0x24
 8004578:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681a      	ldr	r2, [r3, #0]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0201 	bic.w	r2, r2, #1
 800458a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004598:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689a      	ldr	r2, [r3, #8]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045a8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d107      	bne.n	80045c2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	689a      	ldr	r2, [r3, #8]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045be:	609a      	str	r2, [r3, #8]
 80045c0:	e006      	b.n	80045d0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689a      	ldr	r2, [r3, #8]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80045ce:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d104      	bne.n	80045e2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80045e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	6812      	ldr	r2, [r2, #0]
 80045ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80045f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	68da      	ldr	r2, [r3, #12]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004604:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	691a      	ldr	r2, [r3, #16]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	695b      	ldr	r3, [r3, #20]
 800460e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	430a      	orrs	r2, r1
 800461e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	69d9      	ldr	r1, [r3, #28]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a1a      	ldr	r2, [r3, #32]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	430a      	orrs	r2, r1
 800462e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0201 	orr.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2200      	movs	r2, #0
 8004644:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2220      	movs	r2, #32
 800464a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800465c:	2300      	movs	r3, #0
}
 800465e:	4618      	mov	r0, r3
 8004660:	3708      	adds	r7, #8
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004666:	b480      	push	{r7}
 8004668:	b083      	sub	sp, #12
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
 800466e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b20      	cmp	r3, #32
 800467a:	d138      	bne.n	80046ee <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004682:	2b01      	cmp	r3, #1
 8004684:	d101      	bne.n	800468a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004686:	2302      	movs	r3, #2
 8004688:	e032      	b.n	80046f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2224      	movs	r2, #36	; 0x24
 8004696:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f022 0201 	bic.w	r2, r2, #1
 80046a8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80046b8:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	6819      	ldr	r1, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	430a      	orrs	r2, r1
 80046c8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f042 0201 	orr.w	r2, r2, #1
 80046d8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2220      	movs	r2, #32
 80046de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046ea:	2300      	movs	r3, #0
 80046ec:	e000      	b.n	80046f0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80046ee:	2302      	movs	r3, #2
  }
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b085      	sub	sp, #20
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
 8004704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b20      	cmp	r3, #32
 8004710:	d139      	bne.n	8004786 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004718:	2b01      	cmp	r3, #1
 800471a:	d101      	bne.n	8004720 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800471c:	2302      	movs	r3, #2
 800471e:	e033      	b.n	8004788 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2201      	movs	r2, #1
 8004724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2224      	movs	r2, #36	; 0x24
 800472c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f022 0201 	bic.w	r2, r2, #1
 800473e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800474e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	021b      	lsls	r3, r3, #8
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f042 0201 	orr.w	r2, r2, #1
 8004770:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	e000      	b.n	8004788 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004786:	2302      	movs	r3, #2
  }
}
 8004788:	4618      	mov	r0, r3
 800478a:	3714      	adds	r7, #20
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8004794:	b480      	push	{r7}
 8004796:	b085      	sub	sp, #20
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800479c:	2300      	movs	r3, #0
 800479e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80047a0:	4b0b      	ldr	r3, [pc, #44]	; (80047d0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d002      	beq.n	80047b2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	73fb      	strb	r3, [r7, #15]
 80047b0:	e007      	b.n	80047c2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80047b2:	4b07      	ldr	r3, [pc, #28]	; (80047d0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f023 0204 	bic.w	r2, r3, #4
 80047ba:	4905      	ldr	r1, [pc, #20]	; (80047d0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4313      	orrs	r3, r2
 80047c0:	600b      	str	r3, [r1, #0]
  }

  return status;
 80047c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3714      	adds	r7, #20
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	40030400 	.word	0x40030400

080047d4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80047d8:	4b05      	ldr	r3, [pc, #20]	; (80047f0 <HAL_ICACHE_Enable+0x1c>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	4a04      	ldr	r2, [pc, #16]	; (80047f0 <HAL_ICACHE_Enable+0x1c>)
 80047de:	f043 0301 	orr.w	r3, r3, #1
 80047e2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80047e4:	2300      	movs	r3, #0
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr
 80047f0:	40030400 	.word	0x40030400

080047f4 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af02      	add	r7, sp, #8
 80047fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80047fc:	2300      	movs	r3, #0
 80047fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8004800:	f7fe fb68 	bl	8002ed4 <HAL_GetTick>
 8004804:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d102      	bne.n	8004812 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	73fb      	strb	r3, [r7, #15]
 8004810:	e0a2      	b.n	8004958 <HAL_OSPI_Init+0x164>
    assert_param(IS_OSPI_DHQC           (hospi->Init.DelayHoldQuarterCycle));
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481c:	2b00      	cmp	r3, #0
 800481e:	f040 809b 	bne.w	8004958 <HAL_OSPI_Init+0x164>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7fc fede 	bl	80015e4 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8004828:	f241 3188 	movw	r1, #5000	; 0x1388
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 f89b 	bl	8004968 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	4b4a      	ldr	r3, [pc, #296]	; (8004964 <HAL_OSPI_Init+0x170>)
 800483a:	4013      	ands	r3, r2
 800483c:	687a      	ldr	r2, [r7, #4]
 800483e:	68d1      	ldr	r1, [r2, #12]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6912      	ldr	r2, [r2, #16]
 8004844:	3a01      	subs	r2, #1
 8004846:	0412      	lsls	r2, r2, #16
 8004848:	4311      	orrs	r1, r2
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	6952      	ldr	r2, [r2, #20]
 800484e:	3a01      	subs	r2, #1
 8004850:	0212      	lsls	r2, r2, #8
 8004852:	4311      	orrs	r1, r2
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004858:	4311      	orrs	r1, r2
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	69d2      	ldr	r2, [r2, #28]
 800485e:	4311      	orrs	r1, r2
 8004860:	687a      	ldr	r2, [r7, #4]
 8004862:	6812      	ldr	r2, [r2, #0]
 8004864:	430b      	orrs	r3, r1
 8004866:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a1a      	ldr	r2, [r3, #32]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	430a      	orrs	r2, r1
 800487c:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	0412      	lsls	r2, r2, #16
 8004888:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	687a      	ldr	r2, [r7, #4]
 8004890:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004892:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	3b01      	subs	r3, #1
 80048a4:	021a      	lsls	r2, r3, #8
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	430a      	orrs	r2, r1
 80048ac:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b2:	9300      	str	r3, [sp, #0]
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2200      	movs	r2, #0
 80048b8:	2120      	movs	r1, #32
 80048ba:	6878      	ldr	r0, [r7, #4]
 80048bc:	f000 f863 	bl	8004986 <OSPI_WaitFlagStateUntilTimeout>
 80048c0:	4603      	mov	r3, r0
 80048c2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d146      	bne.n	8004958 <HAL_OSPI_Init+0x164>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d8:	1e5a      	subs	r2, r3, #1
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	430a      	orrs	r2, r1
 80048e0:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	430a      	orrs	r2, r1
 80048f6:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8004900:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490c:	431a      	orrs	r2, r3
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f042 0201 	orr.w	r2, r2, #1
 8004926:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	699b      	ldr	r3, [r3, #24]
 800492c:	2b02      	cmp	r3, #2
 800492e:	d107      	bne.n	8004940 <HAL_OSPI_Init+0x14c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	689a      	ldr	r2, [r3, #8]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f042 0202 	orr.w	r2, r2, #2
 800493e:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004948:	d103      	bne.n	8004952 <HAL_OSPI_Init+0x15e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	64da      	str	r2, [r3, #76]	; 0x4c
 8004950:	e002      	b.n	8004958 <HAL_OSPI_Init+0x164>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2202      	movs	r2, #2
 8004956:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
  }

  /* Return function status */
  return status;
 8004958:	7bfb      	ldrb	r3, [r7, #15]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3710      	adds	r7, #16
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}
 8004962:	bf00      	nop
 8004964:	f8e0f8f4 	.word	0xf8e0f8f4

08004968 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 8004978:	2300      	movs	r3, #0
}
 800497a:	4618      	mov	r0, r3
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b084      	sub	sp, #16
 800498a:	af00      	add	r7, sp, #0
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	60b9      	str	r1, [r7, #8]
 8004990:	603b      	str	r3, [r7, #0]
 8004992:	4613      	mov	r3, r2
 8004994:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8004996:	e01a      	b.n	80049ce <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499e:	d016      	beq.n	80049ce <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049a0:	f7fe fa98 	bl	8002ed4 <HAL_GetTick>
 80049a4:	4602      	mov	r2, r0
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	1ad3      	subs	r3, r2, r3
 80049aa:	69ba      	ldr	r2, [r7, #24]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d302      	bcc.n	80049b6 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80049b0:	69bb      	ldr	r3, [r7, #24]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d10b      	bne.n	80049ce <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049bc:	64da      	str	r2, [r3, #76]	; 0x4c
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049c2:	f043 0201 	orr.w	r2, r3, #1
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	651a      	str	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e00e      	b.n	80049ec <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	6a1a      	ldr	r2, [r3, #32]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	4013      	ands	r3, r2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	bf14      	ite	ne
 80049dc:	2301      	movne	r3, #1
 80049de:	2300      	moveq	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	461a      	mov	r2, r3
 80049e4:	79fb      	ldrb	r3, [r7, #7]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	d1d6      	bne.n	8004998 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049ea:	2300      	movs	r3, #0
}
 80049ec:	4618      	mov	r0, r3
 80049ee:	3710      	adds	r7, #16
 80049f0:	46bd      	mov	sp, r7
 80049f2:	bd80      	pop	{r7, pc}

080049f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80049f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049f6:	b08b      	sub	sp, #44	; 0x2c
 80049f8:	af06      	add	r7, sp, #24
 80049fa:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004a02:	2301      	movs	r3, #1
 8004a04:	e0cb      	b.n	8004b9e <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d106      	bne.n	8004a20 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f7fc ff64 	bl	80018e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2203      	movs	r2, #3
 8004a24:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f005 fe1f 	bl	800a670 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a32:	2300      	movs	r3, #0
 8004a34:	73fb      	strb	r3, [r7, #15]
 8004a36:	e040      	b.n	8004aba <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a38:	7bfb      	ldrb	r3, [r7, #15]
 8004a3a:	6879      	ldr	r1, [r7, #4]
 8004a3c:	1c5a      	adds	r2, r3, #1
 8004a3e:	4613      	mov	r3, r2
 8004a40:	009b      	lsls	r3, r3, #2
 8004a42:	4413      	add	r3, r2
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	440b      	add	r3, r1
 8004a48:	3301      	adds	r3, #1
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a4e:	7bfb      	ldrb	r3, [r7, #15]
 8004a50:	6879      	ldr	r1, [r7, #4]
 8004a52:	1c5a      	adds	r2, r3, #1
 8004a54:	4613      	mov	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	440b      	add	r3, r1
 8004a5e:	7bfa      	ldrb	r2, [r7, #15]
 8004a60:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
 8004a64:	6879      	ldr	r1, [r7, #4]
 8004a66:	1c5a      	adds	r2, r3, #1
 8004a68:	4613      	mov	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	00db      	lsls	r3, r3, #3
 8004a70:	440b      	add	r3, r1
 8004a72:	3303      	adds	r3, #3
 8004a74:	2200      	movs	r2, #0
 8004a76:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a78:	7bfa      	ldrb	r2, [r7, #15]
 8004a7a:	6879      	ldr	r1, [r7, #4]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	440b      	add	r3, r1
 8004a86:	3338      	adds	r3, #56	; 0x38
 8004a88:	2200      	movs	r2, #0
 8004a8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a8c:	7bfa      	ldrb	r2, [r7, #15]
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	4613      	mov	r3, r2
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	4413      	add	r3, r2
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	440b      	add	r3, r1
 8004a9a:	333c      	adds	r3, #60	; 0x3c
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004aa0:	7bfa      	ldrb	r2, [r7, #15]
 8004aa2:	6879      	ldr	r1, [r7, #4]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	440b      	add	r3, r1
 8004aae:	3340      	adds	r3, #64	; 0x40
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ab4:	7bfb      	ldrb	r3, [r7, #15]
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	73fb      	strb	r3, [r7, #15]
 8004aba:	7bfa      	ldrb	r2, [r7, #15]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	685b      	ldr	r3, [r3, #4]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d3b9      	bcc.n	8004a38 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	73fb      	strb	r3, [r7, #15]
 8004ac8:	e044      	b.n	8004b54 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004aca:	7bfa      	ldrb	r2, [r7, #15]
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	4613      	mov	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4413      	add	r3, r2
 8004ad4:	00db      	lsls	r3, r3, #3
 8004ad6:	440b      	add	r3, r1
 8004ad8:	f203 1369 	addw	r3, r3, #361	; 0x169
 8004adc:	2200      	movs	r2, #0
 8004ade:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004ae0:	7bfa      	ldrb	r2, [r7, #15]
 8004ae2:	6879      	ldr	r1, [r7, #4]
 8004ae4:	4613      	mov	r3, r2
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	4413      	add	r3, r2
 8004aea:	00db      	lsls	r3, r3, #3
 8004aec:	440b      	add	r3, r1
 8004aee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8004af2:	7bfa      	ldrb	r2, [r7, #15]
 8004af4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004af6:	7bfa      	ldrb	r2, [r7, #15]
 8004af8:	6879      	ldr	r1, [r7, #4]
 8004afa:	4613      	mov	r3, r2
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	440b      	add	r3, r1
 8004b04:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8004b08:	2200      	movs	r2, #0
 8004b0a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b0c:	7bfa      	ldrb	r2, [r7, #15]
 8004b0e:	6879      	ldr	r1, [r7, #4]
 8004b10:	4613      	mov	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	4413      	add	r3, r2
 8004b16:	00db      	lsls	r3, r3, #3
 8004b18:	440b      	add	r3, r1
 8004b1a:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8004b1e:	2200      	movs	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b22:	7bfa      	ldrb	r2, [r7, #15]
 8004b24:	6879      	ldr	r1, [r7, #4]
 8004b26:	4613      	mov	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	00db      	lsls	r3, r3, #3
 8004b2e:	440b      	add	r3, r1
 8004b30:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8004b34:	2200      	movs	r2, #0
 8004b36:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b38:	7bfa      	ldrb	r2, [r7, #15]
 8004b3a:	6879      	ldr	r1, [r7, #4]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	440b      	add	r3, r1
 8004b46:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b4e:	7bfb      	ldrb	r3, [r7, #15]
 8004b50:	3301      	adds	r3, #1
 8004b52:	73fb      	strb	r3, [r7, #15]
 8004b54:	7bfa      	ldrb	r2, [r7, #15]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d3b5      	bcc.n	8004aca <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	603b      	str	r3, [r7, #0]
 8004b64:	687e      	ldr	r6, [r7, #4]
 8004b66:	466d      	mov	r5, sp
 8004b68:	f106 0410 	add.w	r4, r6, #16
 8004b6c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004b6e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004b70:	6823      	ldr	r3, [r4, #0]
 8004b72:	602b      	str	r3, [r5, #0]
 8004b74:	1d33      	adds	r3, r6, #4
 8004b76:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b78:	6838      	ldr	r0, [r7, #0]
 8004b7a:	f005 fd94 	bl	800a6a6 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2201      	movs	r2, #1
 8004b8a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d102      	bne.n	8004b9c <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 f805 	bl	8004ba6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ba6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004ba6:	b480      	push	{r7}
 8004ba8:	b085      	sub	sp, #20
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2201      	movs	r2, #1
 8004bb8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	f043 0301 	orr.w	r3, r3, #1
 8004bd0:	b29a      	uxth	r2, r3
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	f043 0302 	orr.w	r3, r3, #2
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3714      	adds	r7, #20
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf8:	4770      	bx	lr
	...

08004bfc <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c00:	4b05      	ldr	r3, [pc, #20]	; (8004c18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a04      	ldr	r2, [pc, #16]	; (8004c18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c0a:	6013      	str	r3, [r2, #0]
}
 8004c0c:	bf00      	nop
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c14:	4770      	bx	lr
 8004c16:	bf00      	nop
 8004c18:	40007000 	.word	0x40007000

08004c1c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004c20:	4b04      	ldr	r3, [pc, #16]	; (8004c34 <HAL_PWREx_GetVoltageRange+0x18>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	40007000 	.word	0x40007000

08004c38 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8004c40:	4b27      	ldr	r3, [pc, #156]	; (8004ce0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c48:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 8004c4a:	f000 f861 	bl	8004d10 <HAL_PWREx_SMPS_GetEffectiveMode>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c54:	d101      	bne.n	8004c5a <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e03e      	b.n	8004cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 8004c5a:	4b21      	ldr	r3, [pc, #132]	; (8004ce0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c66:	d101      	bne.n	8004c6c <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e035      	b.n	8004cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8004c6c:	68ba      	ldr	r2, [r7, #8]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	429a      	cmp	r2, r3
 8004c72:	d101      	bne.n	8004c78 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8004c74:	2300      	movs	r3, #0
 8004c76:	e02f      	b.n	8004cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004c78:	4b19      	ldr	r3, [pc, #100]	; (8004ce0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004c80:	4917      	ldr	r1, [pc, #92]	; (8004ce0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8004c88:	4b16      	ldr	r3, [pc, #88]	; (8004ce4 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	095b      	lsrs	r3, r3, #5
 8004c8e:	4a16      	ldr	r2, [pc, #88]	; (8004ce8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8004c90:	fba2 2303 	umull	r2, r3, r2, r3
 8004c94:	09db      	lsrs	r3, r3, #7
 8004c96:	2232      	movs	r2, #50	; 0x32
 8004c98:	fb02 f303 	mul.w	r3, r2, r3
 8004c9c:	4a13      	ldr	r2, [pc, #76]	; (8004cec <HAL_PWREx_ControlVoltageScaling+0xb4>)
 8004c9e:	fba2 2303 	umull	r2, r3, r2, r3
 8004ca2:	08db      	lsrs	r3, r3, #3
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004ca8:	e002      	b.n	8004cb0 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	3b01      	subs	r3, #1
 8004cae:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004cb2:	695b      	ldr	r3, [r3, #20]
 8004cb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cbc:	d102      	bne.n	8004cc4 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1f2      	bne.n	8004caa <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004cc4:	4b06      	ldr	r3, [pc, #24]	; (8004ce0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004cc6:	695b      	ldr	r3, [r3, #20]
 8004cc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ccc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cd0:	d101      	bne.n	8004cd6 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e000      	b.n	8004cd8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40007000 	.word	0x40007000
 8004ce4:	20000004 	.word	0x20000004
 8004ce8:	0a7c5ac5 	.word	0x0a7c5ac5
 8004cec:	cccccccd 	.word	0xcccccccd

08004cf0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004cf4:	4b05      	ldr	r3, [pc, #20]	; (8004d0c <HAL_PWREx_EnableVddIO2+0x1c>)
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	4a04      	ldr	r2, [pc, #16]	; (8004d0c <HAL_PWREx_EnableVddIO2+0x1c>)
 8004cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004cfe:	6053      	str	r3, [r2, #4]
}
 8004d00:	bf00      	nop
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop
 8004d0c:	40007000 	.word	0x40007000

08004d10 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8004d16:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8004d26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d2a:	607b      	str	r3, [r7, #4]
 8004d2c:	e00a      	b.n	8004d44 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d103      	bne.n	8004d40 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8004d38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d3c:	607b      	str	r3, [r7, #4]
 8004d3e:	e001      	b.n	8004d44 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8004d40:	2300      	movs	r3, #0
 8004d42:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8004d44:	687b      	ldr	r3, [r7, #4]
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	40007000 	.word	0x40007000

08004d58 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b088      	sub	sp, #32
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d102      	bne.n	8004d6c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	f000 bcc2 	b.w	80056f0 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d6c:	4b99      	ldr	r3, [pc, #612]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	f003 030c 	and.w	r3, r3, #12
 8004d74:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d76:	4b97      	ldr	r3, [pc, #604]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0310 	and.w	r3, r3, #16
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	f000 80e9 	beq.w	8004f60 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d006      	beq.n	8004da2 <HAL_RCC_OscConfig+0x4a>
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	2b0c      	cmp	r3, #12
 8004d98:	f040 8083 	bne.w	8004ea2 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d17f      	bne.n	8004ea2 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004da2:	4b8c      	ldr	r3, [pc, #560]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d006      	beq.n	8004dbc <HAL_RCC_OscConfig+0x64>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	69db      	ldr	r3, [r3, #28]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d102      	bne.n	8004dbc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	f000 bc9a 	b.w	80056f0 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004dc0:	4b84      	ldr	r3, [pc, #528]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0308 	and.w	r3, r3, #8
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d004      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x7e>
 8004dcc:	4b81      	ldr	r3, [pc, #516]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004dd4:	e005      	b.n	8004de2 <HAL_RCC_OscConfig+0x8a>
 8004dd6:	4b7f      	ldr	r3, [pc, #508]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004dd8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ddc:	091b      	lsrs	r3, r3, #4
 8004dde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d224      	bcs.n	8004e30 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fece 	bl	8005b8c <RCC_SetFlashLatencyFromMSIRange>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	f000 bc7a 	b.w	80056f0 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004dfc:	4b75      	ldr	r3, [pc, #468]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a74      	ldr	r2, [pc, #464]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004e02:	f043 0308 	orr.w	r3, r3, #8
 8004e06:	6013      	str	r3, [r2, #0]
 8004e08:	4b72      	ldr	r3, [pc, #456]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e14:	496f      	ldr	r1, [pc, #444]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004e16:	4313      	orrs	r3, r2
 8004e18:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e1a:	4b6e      	ldr	r3, [pc, #440]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1b      	ldr	r3, [r3, #32]
 8004e26:	021b      	lsls	r3, r3, #8
 8004e28:	496a      	ldr	r1, [pc, #424]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	604b      	str	r3, [r1, #4]
 8004e2e:	e026      	b.n	8004e7e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e30:	4b68      	ldr	r3, [pc, #416]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a67      	ldr	r2, [pc, #412]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004e36:	f043 0308 	orr.w	r3, r3, #8
 8004e3a:	6013      	str	r3, [r2, #0]
 8004e3c:	4b65      	ldr	r3, [pc, #404]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e48:	4962      	ldr	r1, [pc, #392]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e4e:	4b61      	ldr	r3, [pc, #388]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	021b      	lsls	r3, r3, #8
 8004e5c:	495d      	ldr	r1, [pc, #372]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10a      	bne.n	8004e7e <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 fe8d 	bl	8005b8c <RCC_SetFlashLatencyFromMSIRange>
 8004e72:	4603      	mov	r3, r0
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d002      	beq.n	8004e7e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	f000 bc39 	b.w	80056f0 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8004e7e:	f000 fe17 	bl	8005ab0 <HAL_RCC_GetHCLKFreq>
 8004e82:	4603      	mov	r3, r0
 8004e84:	4a54      	ldr	r2, [pc, #336]	; (8004fd8 <HAL_RCC_OscConfig+0x280>)
 8004e86:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004e88:	4b54      	ldr	r3, [pc, #336]	; (8004fdc <HAL_RCC_OscConfig+0x284>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f7fc fe2d 	bl	8001aec <HAL_InitTick>
 8004e92:	4603      	mov	r3, r0
 8004e94:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8004e96:	7bfb      	ldrb	r3, [r7, #15]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d060      	beq.n	8004f5e <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
 8004e9e:	f000 bc27 	b.w	80056f0 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d039      	beq.n	8004f1e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004eaa:	4b4a      	ldr	r3, [pc, #296]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a49      	ldr	r2, [pc, #292]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004eb0:	f043 0301 	orr.w	r3, r3, #1
 8004eb4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004eb6:	f7fe f80d 	bl	8002ed4 <HAL_GetTick>
 8004eba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ebc:	e00f      	b.n	8004ede <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ebe:	f7fe f809 	bl	8002ed4 <HAL_GetTick>
 8004ec2:	4602      	mov	r2, r0
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	1ad3      	subs	r3, r2, r3
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d908      	bls.n	8004ede <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ecc:	4b41      	ldr	r3, [pc, #260]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d102      	bne.n	8004ede <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	f000 bc09 	b.w	80056f0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ede:	4b3d      	ldr	r3, [pc, #244]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0e9      	beq.n	8004ebe <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004eea:	4b3a      	ldr	r3, [pc, #232]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a39      	ldr	r2, [pc, #228]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004ef0:	f043 0308 	orr.w	r3, r3, #8
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	4b37      	ldr	r3, [pc, #220]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f02:	4934      	ldr	r1, [pc, #208]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004f08:	4b32      	ldr	r3, [pc, #200]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a1b      	ldr	r3, [r3, #32]
 8004f14:	021b      	lsls	r3, r3, #8
 8004f16:	492f      	ldr	r1, [pc, #188]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	604b      	str	r3, [r1, #4]
 8004f1c:	e020      	b.n	8004f60 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004f1e:	4b2d      	ldr	r3, [pc, #180]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a2c      	ldr	r2, [pc, #176]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004f24:	f023 0301 	bic.w	r3, r3, #1
 8004f28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004f2a:	f7fd ffd3 	bl	8002ed4 <HAL_GetTick>
 8004f2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f30:	e00e      	b.n	8004f50 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004f32:	f7fd ffcf 	bl	8002ed4 <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d907      	bls.n	8004f50 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f40:	4b24      	ldr	r3, [pc, #144]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d001      	beq.n	8004f50 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e3cf      	b.n	80056f0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004f50:	4b20      	ldr	r3, [pc, #128]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d1ea      	bne.n	8004f32 <HAL_RCC_OscConfig+0x1da>
 8004f5c:	e000      	b.n	8004f60 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004f5e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d07e      	beq.n	800506a <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	2b08      	cmp	r3, #8
 8004f70:	d005      	beq.n	8004f7e <HAL_RCC_OscConfig+0x226>
 8004f72:	69bb      	ldr	r3, [r7, #24]
 8004f74:	2b0c      	cmp	r3, #12
 8004f76:	d10e      	bne.n	8004f96 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	2b03      	cmp	r3, #3
 8004f7c:	d10b      	bne.n	8004f96 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f7e:	4b15      	ldr	r3, [pc, #84]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d06e      	beq.n	8005068 <HAL_RCC_OscConfig+0x310>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d16a      	bne.n	8005068 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e3ac      	b.n	80056f0 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f9e:	d106      	bne.n	8004fae <HAL_RCC_OscConfig+0x256>
 8004fa0:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a0b      	ldr	r2, [pc, #44]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004faa:	6013      	str	r3, [r2, #0]
 8004fac:	e024      	b.n	8004ff8 <HAL_RCC_OscConfig+0x2a0>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004fb6:	d113      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x288>
 8004fb8:	4b06      	ldr	r3, [pc, #24]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a05      	ldr	r2, [pc, #20]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004fbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004fc2:	6013      	str	r3, [r2, #0]
 8004fc4:	4b03      	ldr	r3, [pc, #12]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a02      	ldr	r2, [pc, #8]	; (8004fd4 <HAL_RCC_OscConfig+0x27c>)
 8004fca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	e012      	b.n	8004ff8 <HAL_RCC_OscConfig+0x2a0>
 8004fd2:	bf00      	nop
 8004fd4:	40021000 	.word	0x40021000
 8004fd8:	20000004 	.word	0x20000004
 8004fdc:	20000068 	.word	0x20000068
 8004fe0:	4b8b      	ldr	r3, [pc, #556]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a8a      	ldr	r2, [pc, #552]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 8004fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fea:	6013      	str	r3, [r2, #0]
 8004fec:	4b88      	ldr	r3, [pc, #544]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a87      	ldr	r2, [pc, #540]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 8004ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d019      	beq.n	8005034 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005000:	f7fd ff68 	bl	8002ed4 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005006:	e00e      	b.n	8005026 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005008:	f7fd ff64 	bl	8002ed4 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b64      	cmp	r3, #100	; 0x64
 8005014:	d907      	bls.n	8005026 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005016:	4b7e      	ldr	r3, [pc, #504]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d101      	bne.n	8005026 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8005022:	2303      	movs	r3, #3
 8005024:	e364      	b.n	80056f0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005026:	4b7a      	ldr	r3, [pc, #488]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0ea      	beq.n	8005008 <HAL_RCC_OscConfig+0x2b0>
 8005032:	e01a      	b.n	800506a <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005034:	f7fd ff4e 	bl	8002ed4 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800503a:	e00e      	b.n	800505a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800503c:	f7fd ff4a 	bl	8002ed4 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b64      	cmp	r3, #100	; 0x64
 8005048:	d907      	bls.n	800505a <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800504a:	4b71      	ldr	r3, [pc, #452]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005052:	2b00      	cmp	r3, #0
 8005054:	d001      	beq.n	800505a <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e34a      	b.n	80056f0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800505a:	4b6d      	ldr	r3, [pc, #436]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d1ea      	bne.n	800503c <HAL_RCC_OscConfig+0x2e4>
 8005066:	e000      	b.n	800506a <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d06c      	beq.n	8005150 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	2b04      	cmp	r3, #4
 800507a:	d005      	beq.n	8005088 <HAL_RCC_OscConfig+0x330>
 800507c:	69bb      	ldr	r3, [r7, #24]
 800507e:	2b0c      	cmp	r3, #12
 8005080:	d119      	bne.n	80050b6 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2b02      	cmp	r3, #2
 8005086:	d116      	bne.n	80050b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005088:	4b61      	ldr	r3, [pc, #388]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005090:	2b00      	cmp	r3, #0
 8005092:	d005      	beq.n	80050a0 <HAL_RCC_OscConfig+0x348>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d101      	bne.n	80050a0 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
 800509e:	e327      	b.n	80056f0 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a0:	4b5b      	ldr	r3, [pc, #364]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	061b      	lsls	r3, r3, #24
 80050ae:	4958      	ldr	r1, [pc, #352]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 80050b0:	4313      	orrs	r3, r2
 80050b2:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050b4:	e04c      	b.n	8005150 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	68db      	ldr	r3, [r3, #12]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d029      	beq.n	8005112 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050be:	4b54      	ldr	r3, [pc, #336]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a53      	ldr	r2, [pc, #332]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 80050c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ca:	f7fd ff03 	bl	8002ed4 <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050d0:	e00e      	b.n	80050f0 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050d2:	f7fd feff 	bl	8002ed4 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d907      	bls.n	80050f0 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050e0:	4b4b      	ldr	r3, [pc, #300]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e2ff      	b.n	80056f0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80050f0:	4b47      	ldr	r3, [pc, #284]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d0ea      	beq.n	80050d2 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050fc:	4b44      	ldr	r3, [pc, #272]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	691b      	ldr	r3, [r3, #16]
 8005108:	061b      	lsls	r3, r3, #24
 800510a:	4941      	ldr	r1, [pc, #260]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 800510c:	4313      	orrs	r3, r2
 800510e:	604b      	str	r3, [r1, #4]
 8005110:	e01e      	b.n	8005150 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005112:	4b3f      	ldr	r3, [pc, #252]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a3e      	ldr	r2, [pc, #248]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 8005118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800511c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800511e:	f7fd fed9 	bl	8002ed4 <HAL_GetTick>
 8005122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005124:	e00e      	b.n	8005144 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005126:	f7fd fed5 	bl	8002ed4 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d907      	bls.n	8005144 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005134:	4b36      	ldr	r3, [pc, #216]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800513c:	2b00      	cmp	r3, #0
 800513e:	d001      	beq.n	8005144 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e2d5      	b.n	80056f0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005144:	4b32      	ldr	r3, [pc, #200]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1ea      	bne.n	8005126 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0308 	and.w	r3, r3, #8
 8005158:	2b00      	cmp	r3, #0
 800515a:	d062      	beq.n	8005222 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	695b      	ldr	r3, [r3, #20]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d038      	beq.n	80051d6 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d108      	bne.n	800517e <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800516c:	4b28      	ldr	r3, [pc, #160]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 800516e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005172:	4a27      	ldr	r2, [pc, #156]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 8005174:	f023 0310 	bic.w	r3, r3, #16
 8005178:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800517c:	e007      	b.n	800518e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800517e:	4b24      	ldr	r3, [pc, #144]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 8005180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005184:	4a22      	ldr	r2, [pc, #136]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 8005186:	f043 0310 	orr.w	r3, r3, #16
 800518a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800518e:	4b20      	ldr	r3, [pc, #128]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 8005190:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005194:	4a1e      	ldr	r2, [pc, #120]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 8005196:	f043 0301 	orr.w	r3, r3, #1
 800519a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800519e:	f7fd fe99 	bl	8002ed4 <HAL_GetTick>
 80051a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051a4:	e00f      	b.n	80051c6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051a6:	f7fd fe95 	bl	8002ed4 <HAL_GetTick>
 80051aa:	4602      	mov	r2, r0
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	2b07      	cmp	r3, #7
 80051b2:	d908      	bls.n	80051c6 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051b4:	4b16      	ldr	r3, [pc, #88]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 80051b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80051c2:	2303      	movs	r3, #3
 80051c4:	e294      	b.n	80056f0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80051c6:	4b12      	ldr	r3, [pc, #72]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 80051c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051cc:	f003 0302 	and.w	r3, r3, #2
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d0e8      	beq.n	80051a6 <HAL_RCC_OscConfig+0x44e>
 80051d4:	e025      	b.n	8005222 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051d6:	4b0e      	ldr	r3, [pc, #56]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 80051d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80051dc:	4a0c      	ldr	r2, [pc, #48]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 80051de:	f023 0301 	bic.w	r3, r3, #1
 80051e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051e6:	f7fd fe75 	bl	8002ed4 <HAL_GetTick>
 80051ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051ec:	e012      	b.n	8005214 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051ee:	f7fd fe71 	bl	8002ed4 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	2b07      	cmp	r3, #7
 80051fa:	d90b      	bls.n	8005214 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80051fc:	4b04      	ldr	r3, [pc, #16]	; (8005210 <HAL_RCC_OscConfig+0x4b8>)
 80051fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d004      	beq.n	8005214 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e270      	b.n	80056f0 <HAL_RCC_OscConfig+0x998>
 800520e:	bf00      	nop
 8005210:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005214:	4ba8      	ldr	r3, [pc, #672]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 8005216:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800521a:	f003 0302 	and.w	r3, r3, #2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d1e5      	bne.n	80051ee <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0304 	and.w	r3, r3, #4
 800522a:	2b00      	cmp	r3, #0
 800522c:	f000 812d 	beq.w	800548a <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005230:	2300      	movs	r3, #0
 8005232:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005234:	4ba0      	ldr	r3, [pc, #640]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 8005236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005238:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10d      	bne.n	800525c <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005240:	4b9d      	ldr	r3, [pc, #628]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 8005242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005244:	4a9c      	ldr	r2, [pc, #624]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 8005246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800524a:	6593      	str	r3, [r2, #88]	; 0x58
 800524c:	4b9a      	ldr	r3, [pc, #616]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 800524e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005254:	60bb      	str	r3, [r7, #8]
 8005256:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005258:	2301      	movs	r3, #1
 800525a:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800525c:	4b97      	ldr	r3, [pc, #604]	; (80054bc <HAL_RCC_OscConfig+0x764>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005264:	2b00      	cmp	r3, #0
 8005266:	d11e      	bne.n	80052a6 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005268:	4b94      	ldr	r3, [pc, #592]	; (80054bc <HAL_RCC_OscConfig+0x764>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a93      	ldr	r2, [pc, #588]	; (80054bc <HAL_RCC_OscConfig+0x764>)
 800526e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005272:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005274:	f7fd fe2e 	bl	8002ed4 <HAL_GetTick>
 8005278:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800527a:	e00e      	b.n	800529a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800527c:	f7fd fe2a 	bl	8002ed4 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d907      	bls.n	800529a <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800528a:	4b8c      	ldr	r3, [pc, #560]	; (80054bc <HAL_RCC_OscConfig+0x764>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005296:	2303      	movs	r3, #3
 8005298:	e22a      	b.n	80056f0 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800529a:	4b88      	ldr	r3, [pc, #544]	; (80054bc <HAL_RCC_OscConfig+0x764>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d0ea      	beq.n	800527c <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d01f      	beq.n	80052f2 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f003 0304 	and.w	r3, r3, #4
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d010      	beq.n	80052e0 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80052be:	4b7e      	ldr	r3, [pc, #504]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 80052c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c4:	4a7c      	ldr	r2, [pc, #496]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 80052c6:	f043 0304 	orr.w	r3, r3, #4
 80052ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80052ce:	4b7a      	ldr	r3, [pc, #488]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 80052d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d4:	4a78      	ldr	r2, [pc, #480]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 80052d6:	f043 0301 	orr.w	r3, r3, #1
 80052da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052de:	e018      	b.n	8005312 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80052e0:	4b75      	ldr	r3, [pc, #468]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 80052e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e6:	4a74      	ldr	r2, [pc, #464]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 80052e8:	f043 0301 	orr.w	r3, r3, #1
 80052ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80052f0:	e00f      	b.n	8005312 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80052f2:	4b71      	ldr	r3, [pc, #452]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 80052f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f8:	4a6f      	ldr	r2, [pc, #444]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 80052fa:	f023 0301 	bic.w	r3, r3, #1
 80052fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005302:	4b6d      	ldr	r3, [pc, #436]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 8005304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005308:	4a6b      	ldr	r2, [pc, #428]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 800530a:	f023 0304 	bic.w	r3, r3, #4
 800530e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d068      	beq.n	80053ec <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800531a:	f7fd fddb 	bl	8002ed4 <HAL_GetTick>
 800531e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005320:	e011      	b.n	8005346 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005322:	f7fd fdd7 	bl	8002ed4 <HAL_GetTick>
 8005326:	4602      	mov	r2, r0
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	1ad3      	subs	r3, r2, r3
 800532c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005330:	4293      	cmp	r3, r2
 8005332:	d908      	bls.n	8005346 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005334:	4b60      	ldr	r3, [pc, #384]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 8005336:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800533a:	f003 0302 	and.w	r3, r3, #2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d101      	bne.n	8005346 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e1d4      	b.n	80056f0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005346:	4b5c      	ldr	r3, [pc, #368]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 8005348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0e6      	beq.n	8005322 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800535c:	2b00      	cmp	r3, #0
 800535e:	d022      	beq.n	80053a6 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005360:	4b55      	ldr	r3, [pc, #340]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 8005362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005366:	4a54      	ldr	r2, [pc, #336]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 8005368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800536c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005370:	e011      	b.n	8005396 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005372:	f7fd fdaf 	bl	8002ed4 <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005380:	4293      	cmp	r3, r2
 8005382:	d908      	bls.n	8005396 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005384:	4b4c      	ldr	r3, [pc, #304]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 8005386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e1ac      	b.n	80056f0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005396:	4b48      	ldr	r3, [pc, #288]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 8005398:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800539c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d0e6      	beq.n	8005372 <HAL_RCC_OscConfig+0x61a>
 80053a4:	e068      	b.n	8005478 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80053a6:	4b44      	ldr	r3, [pc, #272]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 80053a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ac:	4a42      	ldr	r2, [pc, #264]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 80053ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80053b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80053b6:	e011      	b.n	80053dc <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053b8:	f7fd fd8c 	bl	8002ed4 <HAL_GetTick>
 80053bc:	4602      	mov	r2, r0
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d908      	bls.n	80053dc <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80053ca:	4b3b      	ldr	r3, [pc, #236]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 80053cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d001      	beq.n	80053dc <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 80053d8:	2303      	movs	r3, #3
 80053da:	e189      	b.n	80056f0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80053dc:	4b36      	ldr	r3, [pc, #216]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 80053de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1e6      	bne.n	80053b8 <HAL_RCC_OscConfig+0x660>
 80053ea:	e045      	b.n	8005478 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ec:	f7fd fd72 	bl	8002ed4 <HAL_GetTick>
 80053f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80053f2:	e011      	b.n	8005418 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f4:	f7fd fd6e 	bl	8002ed4 <HAL_GetTick>
 80053f8:	4602      	mov	r2, r0
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	1ad3      	subs	r3, r2, r3
 80053fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005402:	4293      	cmp	r3, r2
 8005404:	d908      	bls.n	8005418 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005406:	4b2c      	ldr	r3, [pc, #176]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 8005408:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e16b      	b.n	80056f0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005418:	4b27      	ldr	r3, [pc, #156]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 800541a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541e:	f003 0302 	and.w	r3, r3, #2
 8005422:	2b00      	cmp	r3, #0
 8005424:	d1e6      	bne.n	80053f4 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005426:	4b24      	ldr	r3, [pc, #144]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 8005428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005430:	2b00      	cmp	r3, #0
 8005432:	d021      	beq.n	8005478 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005434:	4b20      	ldr	r3, [pc, #128]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 8005436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543a:	4a1f      	ldr	r2, [pc, #124]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 800543c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005440:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005444:	e011      	b.n	800546a <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005446:	f7fd fd45 	bl	8002ed4 <HAL_GetTick>
 800544a:	4602      	mov	r2, r0
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	1ad3      	subs	r3, r2, r3
 8005450:	f241 3288 	movw	r2, #5000	; 0x1388
 8005454:	4293      	cmp	r3, r2
 8005456:	d908      	bls.n	800546a <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005458:	4b17      	ldr	r3, [pc, #92]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 800545a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800545e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005462:	2b00      	cmp	r3, #0
 8005464:	d001      	beq.n	800546a <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e142      	b.n	80056f0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800546a:	4b13      	ldr	r3, [pc, #76]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 800546c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1e6      	bne.n	8005446 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005478:	7ffb      	ldrb	r3, [r7, #31]
 800547a:	2b01      	cmp	r3, #1
 800547c:	d105      	bne.n	800548a <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800547e:	4b0e      	ldr	r3, [pc, #56]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 8005480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005482:	4a0d      	ldr	r2, [pc, #52]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 8005484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005488:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0320 	and.w	r3, r3, #32
 8005492:	2b00      	cmp	r3, #0
 8005494:	d04f      	beq.n	8005536 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800549a:	2b00      	cmp	r3, #0
 800549c:	d028      	beq.n	80054f0 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800549e:	4b06      	ldr	r3, [pc, #24]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 80054a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054a4:	4a04      	ldr	r2, [pc, #16]	; (80054b8 <HAL_RCC_OscConfig+0x760>)
 80054a6:	f043 0301 	orr.w	r3, r3, #1
 80054aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ae:	f7fd fd11 	bl	8002ed4 <HAL_GetTick>
 80054b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054b4:	e014      	b.n	80054e0 <HAL_RCC_OscConfig+0x788>
 80054b6:	bf00      	nop
 80054b8:	40021000 	.word	0x40021000
 80054bc:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80054c0:	f7fd fd08 	bl	8002ed4 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	2b02      	cmp	r3, #2
 80054cc:	d908      	bls.n	80054e0 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054ce:	4b8a      	ldr	r3, [pc, #552]	; (80056f8 <HAL_RCC_OscConfig+0x9a0>)
 80054d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d101      	bne.n	80054e0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80054dc:	2303      	movs	r3, #3
 80054de:	e107      	b.n	80056f0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80054e0:	4b85      	ldr	r3, [pc, #532]	; (80056f8 <HAL_RCC_OscConfig+0x9a0>)
 80054e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d0e8      	beq.n	80054c0 <HAL_RCC_OscConfig+0x768>
 80054ee:	e022      	b.n	8005536 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80054f0:	4b81      	ldr	r3, [pc, #516]	; (80056f8 <HAL_RCC_OscConfig+0x9a0>)
 80054f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80054f6:	4a80      	ldr	r2, [pc, #512]	; (80056f8 <HAL_RCC_OscConfig+0x9a0>)
 80054f8:	f023 0301 	bic.w	r3, r3, #1
 80054fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005500:	f7fd fce8 	bl	8002ed4 <HAL_GetTick>
 8005504:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005506:	e00f      	b.n	8005528 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005508:	f7fd fce4 	bl	8002ed4 <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d908      	bls.n	8005528 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005516:	4b78      	ldr	r3, [pc, #480]	; (80056f8 <HAL_RCC_OscConfig+0x9a0>)
 8005518:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800551c:	f003 0302 	and.w	r3, r3, #2
 8005520:	2b00      	cmp	r3, #0
 8005522:	d001      	beq.n	8005528 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8005524:	2303      	movs	r3, #3
 8005526:	e0e3      	b.n	80056f0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005528:	4b73      	ldr	r3, [pc, #460]	; (80056f8 <HAL_RCC_OscConfig+0x9a0>)
 800552a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d1e8      	bne.n	8005508 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553a:	2b00      	cmp	r3, #0
 800553c:	f000 80d7 	beq.w	80056ee <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005540:	4b6d      	ldr	r3, [pc, #436]	; (80056f8 <HAL_RCC_OscConfig+0x9a0>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	f003 030c 	and.w	r3, r3, #12
 8005548:	2b0c      	cmp	r3, #12
 800554a:	f000 8091 	beq.w	8005670 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005552:	2b02      	cmp	r3, #2
 8005554:	d166      	bne.n	8005624 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005556:	4b68      	ldr	r3, [pc, #416]	; (80056f8 <HAL_RCC_OscConfig+0x9a0>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a67      	ldr	r2, [pc, #412]	; (80056f8 <HAL_RCC_OscConfig+0x9a0>)
 800555c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005562:	f7fd fcb7 	bl	8002ed4 <HAL_GetTick>
 8005566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005568:	e00e      	b.n	8005588 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800556a:	f7fd fcb3 	bl	8002ed4 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d907      	bls.n	8005588 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005578:	4b5f      	ldr	r3, [pc, #380]	; (80056f8 <HAL_RCC_OscConfig+0x9a0>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8005584:	2303      	movs	r3, #3
 8005586:	e0b3      	b.n	80056f0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005588:	4b5b      	ldr	r3, [pc, #364]	; (80056f8 <HAL_RCC_OscConfig+0x9a0>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d1ea      	bne.n	800556a <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005594:	4b58      	ldr	r3, [pc, #352]	; (80056f8 <HAL_RCC_OscConfig+0x9a0>)
 8005596:	68da      	ldr	r2, [r3, #12]
 8005598:	4b58      	ldr	r3, [pc, #352]	; (80056fc <HAL_RCC_OscConfig+0x9a4>)
 800559a:	4013      	ands	r3, r2
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80055a4:	3a01      	subs	r2, #1
 80055a6:	0112      	lsls	r2, r2, #4
 80055a8:	4311      	orrs	r1, r2
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055ae:	0212      	lsls	r2, r2, #8
 80055b0:	4311      	orrs	r1, r2
 80055b2:	687a      	ldr	r2, [r7, #4]
 80055b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80055b6:	0852      	lsrs	r2, r2, #1
 80055b8:	3a01      	subs	r2, #1
 80055ba:	0552      	lsls	r2, r2, #21
 80055bc:	4311      	orrs	r1, r2
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80055c2:	0852      	lsrs	r2, r2, #1
 80055c4:	3a01      	subs	r2, #1
 80055c6:	0652      	lsls	r2, r2, #25
 80055c8:	4311      	orrs	r1, r2
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80055ce:	06d2      	lsls	r2, r2, #27
 80055d0:	430a      	orrs	r2, r1
 80055d2:	4949      	ldr	r1, [pc, #292]	; (80056f8 <HAL_RCC_OscConfig+0x9a0>)
 80055d4:	4313      	orrs	r3, r2
 80055d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80055d8:	4b47      	ldr	r3, [pc, #284]	; (80056f8 <HAL_RCC_OscConfig+0x9a0>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a46      	ldr	r2, [pc, #280]	; (80056f8 <HAL_RCC_OscConfig+0x9a0>)
 80055de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80055e4:	4b44      	ldr	r3, [pc, #272]	; (80056f8 <HAL_RCC_OscConfig+0x9a0>)
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	4a43      	ldr	r2, [pc, #268]	; (80056f8 <HAL_RCC_OscConfig+0x9a0>)
 80055ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055f0:	f7fd fc70 	bl	8002ed4 <HAL_GetTick>
 80055f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80055f6:	e00e      	b.n	8005616 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80055f8:	f7fd fc6c 	bl	8002ed4 <HAL_GetTick>
 80055fc:	4602      	mov	r2, r0
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	1ad3      	subs	r3, r2, r3
 8005602:	2b02      	cmp	r3, #2
 8005604:	d907      	bls.n	8005616 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005606:	4b3c      	ldr	r3, [pc, #240]	; (80056f8 <HAL_RCC_OscConfig+0x9a0>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d101      	bne.n	8005616 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8005612:	2303      	movs	r3, #3
 8005614:	e06c      	b.n	80056f0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005616:	4b38      	ldr	r3, [pc, #224]	; (80056f8 <HAL_RCC_OscConfig+0x9a0>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d0ea      	beq.n	80055f8 <HAL_RCC_OscConfig+0x8a0>
 8005622:	e064      	b.n	80056ee <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005624:	4b34      	ldr	r3, [pc, #208]	; (80056f8 <HAL_RCC_OscConfig+0x9a0>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a33      	ldr	r2, [pc, #204]	; (80056f8 <HAL_RCC_OscConfig+0x9a0>)
 800562a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800562e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005630:	f7fd fc50 	bl	8002ed4 <HAL_GetTick>
 8005634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005636:	e00e      	b.n	8005656 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005638:	f7fd fc4c 	bl	8002ed4 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	2b02      	cmp	r3, #2
 8005644:	d907      	bls.n	8005656 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005646:	4b2c      	ldr	r3, [pc, #176]	; (80056f8 <HAL_RCC_OscConfig+0x9a0>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800564e:	2b00      	cmp	r3, #0
 8005650:	d001      	beq.n	8005656 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e04c      	b.n	80056f0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005656:	4b28      	ldr	r3, [pc, #160]	; (80056f8 <HAL_RCC_OscConfig+0x9a0>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1ea      	bne.n	8005638 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005662:	4b25      	ldr	r3, [pc, #148]	; (80056f8 <HAL_RCC_OscConfig+0x9a0>)
 8005664:	68da      	ldr	r2, [r3, #12]
 8005666:	4924      	ldr	r1, [pc, #144]	; (80056f8 <HAL_RCC_OscConfig+0x9a0>)
 8005668:	4b25      	ldr	r3, [pc, #148]	; (8005700 <HAL_RCC_OscConfig+0x9a8>)
 800566a:	4013      	ands	r3, r2
 800566c:	60cb      	str	r3, [r1, #12]
 800566e:	e03e      	b.n	80056ee <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005674:	2b01      	cmp	r3, #1
 8005676:	d101      	bne.n	800567c <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8005678:	2301      	movs	r3, #1
 800567a:	e039      	b.n	80056f0 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 800567c:	4b1e      	ldr	r3, [pc, #120]	; (80056f8 <HAL_RCC_OscConfig+0x9a0>)
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f003 0203 	and.w	r2, r3, #3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568c:	429a      	cmp	r2, r3
 800568e:	d12c      	bne.n	80056ea <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005690:	697b      	ldr	r3, [r7, #20]
 8005692:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800569a:	3b01      	subs	r3, #1
 800569c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800569e:	429a      	cmp	r2, r3
 80056a0:	d123      	bne.n	80056ea <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ac:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80056ae:	429a      	cmp	r2, r3
 80056b0:	d11b      	bne.n	80056ea <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056bc:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80056be:	429a      	cmp	r2, r3
 80056c0:	d113      	bne.n	80056ea <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056cc:	085b      	lsrs	r3, r3, #1
 80056ce:	3b01      	subs	r3, #1
 80056d0:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d109      	bne.n	80056ea <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e0:	085b      	lsrs	r3, r3, #1
 80056e2:	3b01      	subs	r3, #1
 80056e4:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d001      	beq.n	80056ee <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	e000      	b.n	80056f0 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3720      	adds	r7, #32
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	40021000 	.word	0x40021000
 80056fc:	019f800c 	.word	0x019f800c
 8005700:	feeefffc 	.word	0xfeeefffc

08005704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
 800570c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800570e:	2300      	movs	r3, #0
 8005710:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005718:	2301      	movs	r3, #1
 800571a:	e11c      	b.n	8005956 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800571c:	4b90      	ldr	r3, [pc, #576]	; (8005960 <HAL_RCC_ClockConfig+0x25c>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 030f 	and.w	r3, r3, #15
 8005724:	683a      	ldr	r2, [r7, #0]
 8005726:	429a      	cmp	r2, r3
 8005728:	d910      	bls.n	800574c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800572a:	4b8d      	ldr	r3, [pc, #564]	; (8005960 <HAL_RCC_ClockConfig+0x25c>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f023 020f 	bic.w	r2, r3, #15
 8005732:	498b      	ldr	r1, [pc, #556]	; (8005960 <HAL_RCC_ClockConfig+0x25c>)
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	4313      	orrs	r3, r2
 8005738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800573a:	4b89      	ldr	r3, [pc, #548]	; (8005960 <HAL_RCC_ClockConfig+0x25c>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 030f 	and.w	r3, r3, #15
 8005742:	683a      	ldr	r2, [r7, #0]
 8005744:	429a      	cmp	r2, r3
 8005746:	d001      	beq.n	800574c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e104      	b.n	8005956 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0302 	and.w	r3, r3, #2
 8005754:	2b00      	cmp	r3, #0
 8005756:	d010      	beq.n	800577a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	689a      	ldr	r2, [r3, #8]
 800575c:	4b81      	ldr	r3, [pc, #516]	; (8005964 <HAL_RCC_ClockConfig+0x260>)
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005764:	429a      	cmp	r2, r3
 8005766:	d908      	bls.n	800577a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005768:	4b7e      	ldr	r3, [pc, #504]	; (8005964 <HAL_RCC_ClockConfig+0x260>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	497b      	ldr	r1, [pc, #492]	; (8005964 <HAL_RCC_ClockConfig+0x260>)
 8005776:	4313      	orrs	r3, r2
 8005778:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 8085 	beq.w	8005892 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	2b03      	cmp	r3, #3
 800578e:	d11f      	bne.n	80057d0 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005790:	4b74      	ldr	r3, [pc, #464]	; (8005964 <HAL_RCC_ClockConfig+0x260>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e0da      	b.n	8005956 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80057a0:	f000 fa58 	bl	8005c54 <RCC_GetSysClockFreqFromPLLSource>
 80057a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	4a6f      	ldr	r2, [pc, #444]	; (8005968 <HAL_RCC_ClockConfig+0x264>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d947      	bls.n	800583e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80057ae:	4b6d      	ldr	r3, [pc, #436]	; (8005964 <HAL_RCC_ClockConfig+0x260>)
 80057b0:	689b      	ldr	r3, [r3, #8]
 80057b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d141      	bne.n	800583e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80057ba:	4b6a      	ldr	r3, [pc, #424]	; (8005964 <HAL_RCC_ClockConfig+0x260>)
 80057bc:	689b      	ldr	r3, [r3, #8]
 80057be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80057c2:	4a68      	ldr	r2, [pc, #416]	; (8005964 <HAL_RCC_ClockConfig+0x260>)
 80057c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80057c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80057ca:	2380      	movs	r3, #128	; 0x80
 80057cc:	617b      	str	r3, [r7, #20]
 80057ce:	e036      	b.n	800583e <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d107      	bne.n	80057e8 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80057d8:	4b62      	ldr	r3, [pc, #392]	; (8005964 <HAL_RCC_ClockConfig+0x260>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d115      	bne.n	8005810 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e0b6      	b.n	8005956 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	685b      	ldr	r3, [r3, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d107      	bne.n	8005800 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80057f0:	4b5c      	ldr	r3, [pc, #368]	; (8005964 <HAL_RCC_ClockConfig+0x260>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0302 	and.w	r3, r3, #2
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d109      	bne.n	8005810 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e0aa      	b.n	8005956 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005800:	4b58      	ldr	r3, [pc, #352]	; (8005964 <HAL_RCC_ClockConfig+0x260>)
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005808:	2b00      	cmp	r3, #0
 800580a:	d101      	bne.n	8005810 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e0a2      	b.n	8005956 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005810:	f000 f8b0 	bl	8005974 <HAL_RCC_GetSysClockFreq>
 8005814:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	4a53      	ldr	r2, [pc, #332]	; (8005968 <HAL_RCC_ClockConfig+0x264>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d90f      	bls.n	800583e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800581e:	4b51      	ldr	r3, [pc, #324]	; (8005964 <HAL_RCC_ClockConfig+0x260>)
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d109      	bne.n	800583e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800582a:	4b4e      	ldr	r3, [pc, #312]	; (8005964 <HAL_RCC_ClockConfig+0x260>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005832:	4a4c      	ldr	r2, [pc, #304]	; (8005964 <HAL_RCC_ClockConfig+0x260>)
 8005834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005838:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800583a:	2380      	movs	r3, #128	; 0x80
 800583c:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800583e:	4b49      	ldr	r3, [pc, #292]	; (8005964 <HAL_RCC_ClockConfig+0x260>)
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	f023 0203 	bic.w	r2, r3, #3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	4946      	ldr	r1, [pc, #280]	; (8005964 <HAL_RCC_ClockConfig+0x260>)
 800584c:	4313      	orrs	r3, r2
 800584e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005850:	f7fd fb40 	bl	8002ed4 <HAL_GetTick>
 8005854:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005856:	e013      	b.n	8005880 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005858:	f7fd fb3c 	bl	8002ed4 <HAL_GetTick>
 800585c:	4602      	mov	r2, r0
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	f241 3288 	movw	r2, #5000	; 0x1388
 8005866:	4293      	cmp	r3, r2
 8005868:	d90a      	bls.n	8005880 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800586a:	4b3e      	ldr	r3, [pc, #248]	; (8005964 <HAL_RCC_ClockConfig+0x260>)
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	f003 020c 	and.w	r2, r3, #12
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	429a      	cmp	r2, r3
 800587a:	d001      	beq.n	8005880 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e06a      	b.n	8005956 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005880:	4b38      	ldr	r3, [pc, #224]	; (8005964 <HAL_RCC_ClockConfig+0x260>)
 8005882:	689b      	ldr	r3, [r3, #8]
 8005884:	f003 020c 	and.w	r2, r3, #12
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	685b      	ldr	r3, [r3, #4]
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	429a      	cmp	r2, r3
 8005890:	d1e2      	bne.n	8005858 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	2b80      	cmp	r3, #128	; 0x80
 8005896:	d105      	bne.n	80058a4 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005898:	4b32      	ldr	r3, [pc, #200]	; (8005964 <HAL_RCC_ClockConfig+0x260>)
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	4a31      	ldr	r2, [pc, #196]	; (8005964 <HAL_RCC_ClockConfig+0x260>)
 800589e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058a2:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f003 0302 	and.w	r3, r3, #2
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d010      	beq.n	80058d2 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	689a      	ldr	r2, [r3, #8]
 80058b4:	4b2b      	ldr	r3, [pc, #172]	; (8005964 <HAL_RCC_ClockConfig+0x260>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80058bc:	429a      	cmp	r2, r3
 80058be:	d208      	bcs.n	80058d2 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058c0:	4b28      	ldr	r3, [pc, #160]	; (8005964 <HAL_RCC_ClockConfig+0x260>)
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	4925      	ldr	r1, [pc, #148]	; (8005964 <HAL_RCC_ClockConfig+0x260>)
 80058ce:	4313      	orrs	r3, r2
 80058d0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80058d2:	4b23      	ldr	r3, [pc, #140]	; (8005960 <HAL_RCC_ClockConfig+0x25c>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f003 030f 	and.w	r3, r3, #15
 80058da:	683a      	ldr	r2, [r7, #0]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d210      	bcs.n	8005902 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058e0:	4b1f      	ldr	r3, [pc, #124]	; (8005960 <HAL_RCC_ClockConfig+0x25c>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f023 020f 	bic.w	r2, r3, #15
 80058e8:	491d      	ldr	r1, [pc, #116]	; (8005960 <HAL_RCC_ClockConfig+0x25c>)
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058f0:	4b1b      	ldr	r3, [pc, #108]	; (8005960 <HAL_RCC_ClockConfig+0x25c>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 030f 	and.w	r3, r3, #15
 80058f8:	683a      	ldr	r2, [r7, #0]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d001      	beq.n	8005902 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e029      	b.n	8005956 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 0304 	and.w	r3, r3, #4
 800590a:	2b00      	cmp	r3, #0
 800590c:	d008      	beq.n	8005920 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800590e:	4b15      	ldr	r3, [pc, #84]	; (8005964 <HAL_RCC_ClockConfig+0x260>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	4912      	ldr	r1, [pc, #72]	; (8005964 <HAL_RCC_ClockConfig+0x260>)
 800591c:	4313      	orrs	r3, r2
 800591e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0308 	and.w	r3, r3, #8
 8005928:	2b00      	cmp	r3, #0
 800592a:	d009      	beq.n	8005940 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800592c:	4b0d      	ldr	r3, [pc, #52]	; (8005964 <HAL_RCC_ClockConfig+0x260>)
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	691b      	ldr	r3, [r3, #16]
 8005938:	00db      	lsls	r3, r3, #3
 800593a:	490a      	ldr	r1, [pc, #40]	; (8005964 <HAL_RCC_ClockConfig+0x260>)
 800593c:	4313      	orrs	r3, r2
 800593e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005940:	f000 f8b6 	bl	8005ab0 <HAL_RCC_GetHCLKFreq>
 8005944:	4603      	mov	r3, r0
 8005946:	4a09      	ldr	r2, [pc, #36]	; (800596c <HAL_RCC_ClockConfig+0x268>)
 8005948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800594a:	4b09      	ldr	r3, [pc, #36]	; (8005970 <HAL_RCC_ClockConfig+0x26c>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4618      	mov	r0, r3
 8005950:	f7fc f8cc 	bl	8001aec <HAL_InitTick>
 8005954:	4603      	mov	r3, r0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3718      	adds	r7, #24
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	40022000 	.word	0x40022000
 8005964:	40021000 	.word	0x40021000
 8005968:	04c4b400 	.word	0x04c4b400
 800596c:	20000004 	.word	0x20000004
 8005970:	20000068 	.word	0x20000068

08005974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005974:	b480      	push	{r7}
 8005976:	b089      	sub	sp, #36	; 0x24
 8005978:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800597a:	2300      	movs	r3, #0
 800597c:	61fb      	str	r3, [r7, #28]
 800597e:	2300      	movs	r3, #0
 8005980:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005982:	4b47      	ldr	r3, [pc, #284]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f003 030c 	and.w	r3, r3, #12
 800598a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800598c:	4b44      	ldr	r3, [pc, #272]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x12c>)
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f003 0303 	and.w	r3, r3, #3
 8005994:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d005      	beq.n	80059a8 <HAL_RCC_GetSysClockFreq+0x34>
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	2b0c      	cmp	r3, #12
 80059a0:	d121      	bne.n	80059e6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d11e      	bne.n	80059e6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80059a8:	4b3d      	ldr	r3, [pc, #244]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f003 0308 	and.w	r3, r3, #8
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d107      	bne.n	80059c4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80059b4:	4b3a      	ldr	r3, [pc, #232]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80059b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80059ba:	0a1b      	lsrs	r3, r3, #8
 80059bc:	f003 030f 	and.w	r3, r3, #15
 80059c0:	61fb      	str	r3, [r7, #28]
 80059c2:	e005      	b.n	80059d0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80059c4:	4b36      	ldr	r3, [pc, #216]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x12c>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	091b      	lsrs	r3, r3, #4
 80059ca:	f003 030f 	and.w	r3, r3, #15
 80059ce:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80059d0:	4a34      	ldr	r2, [pc, #208]	; (8005aa4 <HAL_RCC_GetSysClockFreq+0x130>)
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059d8:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10d      	bne.n	80059fc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80059e4:	e00a      	b.n	80059fc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	2b04      	cmp	r3, #4
 80059ea:	d102      	bne.n	80059f2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80059ec:	4b2e      	ldr	r3, [pc, #184]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x134>)
 80059ee:	61bb      	str	r3, [r7, #24]
 80059f0:	e004      	b.n	80059fc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	2b08      	cmp	r3, #8
 80059f6:	d101      	bne.n	80059fc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80059f8:	4b2c      	ldr	r3, [pc, #176]	; (8005aac <HAL_RCC_GetSysClockFreq+0x138>)
 80059fa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	2b0c      	cmp	r3, #12
 8005a00:	d146      	bne.n	8005a90 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005a02:	4b27      	ldr	r3, [pc, #156]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005a04:	68db      	ldr	r3, [r3, #12]
 8005a06:	f003 0303 	and.w	r3, r3, #3
 8005a0a:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005a0c:	4b24      	ldr	r3, [pc, #144]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005a0e:	68db      	ldr	r3, [r3, #12]
 8005a10:	091b      	lsrs	r3, r3, #4
 8005a12:	f003 030f 	and.w	r3, r3, #15
 8005a16:	3301      	adds	r3, #1
 8005a18:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	2b02      	cmp	r3, #2
 8005a1e:	d003      	beq.n	8005a28 <HAL_RCC_GetSysClockFreq+0xb4>
 8005a20:	68bb      	ldr	r3, [r7, #8]
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	d00d      	beq.n	8005a42 <HAL_RCC_GetSysClockFreq+0xce>
 8005a26:	e019      	b.n	8005a5c <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a28:	4a1f      	ldr	r2, [pc, #124]	; (8005aa8 <HAL_RCC_GetSysClockFreq+0x134>)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a30:	4a1b      	ldr	r2, [pc, #108]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005a32:	68d2      	ldr	r2, [r2, #12]
 8005a34:	0a12      	lsrs	r2, r2, #8
 8005a36:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a3a:	fb02 f303 	mul.w	r3, r2, r3
 8005a3e:	617b      	str	r3, [r7, #20]
        break;
 8005a40:	e019      	b.n	8005a76 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a42:	4a1a      	ldr	r2, [pc, #104]	; (8005aac <HAL_RCC_GetSysClockFreq+0x138>)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a4a:	4a15      	ldr	r2, [pc, #84]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005a4c:	68d2      	ldr	r2, [r2, #12]
 8005a4e:	0a12      	lsrs	r2, r2, #8
 8005a50:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a54:	fb02 f303 	mul.w	r3, r2, r3
 8005a58:	617b      	str	r3, [r7, #20]
        break;
 8005a5a:	e00c      	b.n	8005a76 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005a5c:	69fa      	ldr	r2, [r7, #28]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a64:	4a0e      	ldr	r2, [pc, #56]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005a66:	68d2      	ldr	r2, [r2, #12]
 8005a68:	0a12      	lsrs	r2, r2, #8
 8005a6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005a6e:	fb02 f303 	mul.w	r3, r2, r3
 8005a72:	617b      	str	r3, [r7, #20]
        break;
 8005a74:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005a76:	4b0a      	ldr	r3, [pc, #40]	; (8005aa0 <HAL_RCC_GetSysClockFreq+0x12c>)
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	0e5b      	lsrs	r3, r3, #25
 8005a7c:	f003 0303 	and.w	r3, r3, #3
 8005a80:	3301      	adds	r3, #1
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005a90:	69bb      	ldr	r3, [r7, #24]
}
 8005a92:	4618      	mov	r0, r3
 8005a94:	3724      	adds	r7, #36	; 0x24
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr
 8005a9e:	bf00      	nop
 8005aa0:	40021000 	.word	0x40021000
 8005aa4:	08023720 	.word	0x08023720
 8005aa8:	00f42400 	.word	0x00f42400
 8005aac:	007a1200 	.word	0x007a1200

08005ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8005ab4:	f7ff ff5e 	bl	8005974 <HAL_RCC_GetSysClockFreq>
 8005ab8:	4602      	mov	r2, r0
 8005aba:	4b05      	ldr	r3, [pc, #20]	; (8005ad0 <HAL_RCC_GetHCLKFreq+0x20>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	091b      	lsrs	r3, r3, #4
 8005ac0:	f003 030f 	and.w	r3, r3, #15
 8005ac4:	4903      	ldr	r1, [pc, #12]	; (8005ad4 <HAL_RCC_GetHCLKFreq+0x24>)
 8005ac6:	5ccb      	ldrb	r3, [r1, r3]
 8005ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	bd80      	pop	{r7, pc}
 8005ad0:	40021000 	.word	0x40021000
 8005ad4:	08023708 	.word	0x08023708

08005ad8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005adc:	f7ff ffe8 	bl	8005ab0 <HAL_RCC_GetHCLKFreq>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	4b05      	ldr	r3, [pc, #20]	; (8005af8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ae4:	689b      	ldr	r3, [r3, #8]
 8005ae6:	0a1b      	lsrs	r3, r3, #8
 8005ae8:	f003 0307 	and.w	r3, r3, #7
 8005aec:	4903      	ldr	r1, [pc, #12]	; (8005afc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005aee:	5ccb      	ldrb	r3, [r1, r3]
 8005af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	bd80      	pop	{r7, pc}
 8005af8:	40021000 	.word	0x40021000
 8005afc:	08023718 	.word	0x08023718

08005b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005b04:	f7ff ffd4 	bl	8005ab0 <HAL_RCC_GetHCLKFreq>
 8005b08:	4602      	mov	r2, r0
 8005b0a:	4b05      	ldr	r3, [pc, #20]	; (8005b20 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005b0c:	689b      	ldr	r3, [r3, #8]
 8005b0e:	0adb      	lsrs	r3, r3, #11
 8005b10:	f003 0307 	and.w	r3, r3, #7
 8005b14:	4903      	ldr	r1, [pc, #12]	; (8005b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b16:	5ccb      	ldrb	r3, [r1, r3]
 8005b18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	40021000 	.word	0x40021000
 8005b24:	08023718 	.word	0x08023718

08005b28 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	220f      	movs	r2, #15
 8005b36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005b38:	4b12      	ldr	r3, [pc, #72]	; (8005b84 <HAL_RCC_GetClockConfig+0x5c>)
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	f003 0203 	and.w	r2, r3, #3
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005b44:	4b0f      	ldr	r3, [pc, #60]	; (8005b84 <HAL_RCC_GetClockConfig+0x5c>)
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005b50:	4b0c      	ldr	r3, [pc, #48]	; (8005b84 <HAL_RCC_GetClockConfig+0x5c>)
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005b5c:	4b09      	ldr	r3, [pc, #36]	; (8005b84 <HAL_RCC_GetClockConfig+0x5c>)
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	08db      	lsrs	r3, r3, #3
 8005b62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005b6a:	4b07      	ldr	r3, [pc, #28]	; (8005b88 <HAL_RCC_GetClockConfig+0x60>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	f003 020f 	and.w	r2, r3, #15
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	601a      	str	r2, [r3, #0]
}
 8005b76:	bf00      	nop
 8005b78:	370c      	adds	r7, #12
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	40021000 	.word	0x40021000
 8005b88:	40022000 	.word	0x40022000

08005b8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b086      	sub	sp, #24
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005b94:	2300      	movs	r3, #0
 8005b96:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005b98:	4b2c      	ldr	r3, [pc, #176]	; (8005c4c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d003      	beq.n	8005bac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005ba4:	f7ff f83a 	bl	8004c1c <HAL_PWREx_GetVoltageRange>
 8005ba8:	6138      	str	r0, [r7, #16]
 8005baa:	e014      	b.n	8005bd6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005bac:	4b27      	ldr	r3, [pc, #156]	; (8005c4c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bb0:	4a26      	ldr	r2, [pc, #152]	; (8005c4c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005bb2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bb6:	6593      	str	r3, [r2, #88]	; 0x58
 8005bb8:	4b24      	ldr	r3, [pc, #144]	; (8005c4c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bc0:	60fb      	str	r3, [r7, #12]
 8005bc2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005bc4:	f7ff f82a 	bl	8004c1c <HAL_PWREx_GetVoltageRange>
 8005bc8:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005bca:	4b20      	ldr	r3, [pc, #128]	; (8005c4c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bce:	4a1f      	ldr	r2, [pc, #124]	; (8005c4c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8005bd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bd4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d003      	beq.n	8005be4 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8005bdc:	693b      	ldr	r3, [r7, #16]
 8005bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005be2:	d10b      	bne.n	8005bfc <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b80      	cmp	r3, #128	; 0x80
 8005be8:	d919      	bls.n	8005c1e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	2ba0      	cmp	r3, #160	; 0xa0
 8005bee:	d902      	bls.n	8005bf6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005bf0:	2302      	movs	r3, #2
 8005bf2:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005bf4:	e013      	b.n	8005c1e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8005bfa:	e010      	b.n	8005c1e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2b80      	cmp	r3, #128	; 0x80
 8005c00:	d902      	bls.n	8005c08 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005c02:	2303      	movs	r3, #3
 8005c04:	617b      	str	r3, [r7, #20]
 8005c06:	e00a      	b.n	8005c1e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b80      	cmp	r3, #128	; 0x80
 8005c0c:	d102      	bne.n	8005c14 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c0e:	2302      	movs	r3, #2
 8005c10:	617b      	str	r3, [r7, #20]
 8005c12:	e004      	b.n	8005c1e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2b70      	cmp	r3, #112	; 0x70
 8005c18:	d101      	bne.n	8005c1e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c1e:	4b0c      	ldr	r3, [pc, #48]	; (8005c50 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f023 020f 	bic.w	r2, r3, #15
 8005c26:	490a      	ldr	r1, [pc, #40]	; (8005c50 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005c2e:	4b08      	ldr	r3, [pc, #32]	; (8005c50 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f003 030f 	and.w	r3, r3, #15
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d001      	beq.n	8005c40 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e000      	b.n	8005c42 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8005c40:	2300      	movs	r3, #0
}
 8005c42:	4618      	mov	r0, r3
 8005c44:	3718      	adds	r7, #24
 8005c46:	46bd      	mov	sp, r7
 8005c48:	bd80      	pop	{r7, pc}
 8005c4a:	bf00      	nop
 8005c4c:	40021000 	.word	0x40021000
 8005c50:	40022000 	.word	0x40022000

08005c54 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c5a:	4b31      	ldr	r3, [pc, #196]	; (8005d20 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005c5c:	68db      	ldr	r3, [r3, #12]
 8005c5e:	f003 0303 	and.w	r3, r3, #3
 8005c62:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c64:	4b2e      	ldr	r3, [pc, #184]	; (8005d20 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	091b      	lsrs	r3, r3, #4
 8005c6a:	f003 030f 	and.w	r3, r3, #15
 8005c6e:	3301      	adds	r3, #1
 8005c70:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2b03      	cmp	r3, #3
 8005c76:	d015      	beq.n	8005ca4 <RCC_GetSysClockFreqFromPLLSource+0x50>
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2b03      	cmp	r3, #3
 8005c7c:	d839      	bhi.n	8005cf2 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d01c      	beq.n	8005cbe <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d133      	bne.n	8005cf2 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c8a:	4a26      	ldr	r2, [pc, #152]	; (8005d24 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c92:	4a23      	ldr	r2, [pc, #140]	; (8005d20 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005c94:	68d2      	ldr	r2, [r2, #12]
 8005c96:	0a12      	lsrs	r2, r2, #8
 8005c98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005c9c:	fb02 f303 	mul.w	r3, r2, r3
 8005ca0:	613b      	str	r3, [r7, #16]
      break;
 8005ca2:	e029      	b.n	8005cf8 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ca4:	4a20      	ldr	r2, [pc, #128]	; (8005d28 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cac:	4a1c      	ldr	r2, [pc, #112]	; (8005d20 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005cae:	68d2      	ldr	r2, [r2, #12]
 8005cb0:	0a12      	lsrs	r2, r2, #8
 8005cb2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005cb6:	fb02 f303 	mul.w	r3, r2, r3
 8005cba:	613b      	str	r3, [r7, #16]
      break;
 8005cbc:	e01c      	b.n	8005cf8 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005cbe:	4b18      	ldr	r3, [pc, #96]	; (8005d20 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0308 	and.w	r3, r3, #8
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d107      	bne.n	8005cda <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005cca:	4b15      	ldr	r3, [pc, #84]	; (8005d20 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005ccc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cd0:	0a1b      	lsrs	r3, r3, #8
 8005cd2:	f003 030f 	and.w	r3, r3, #15
 8005cd6:	617b      	str	r3, [r7, #20]
 8005cd8:	e005      	b.n	8005ce6 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005cda:	4b11      	ldr	r3, [pc, #68]	; (8005d20 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	091b      	lsrs	r3, r3, #4
 8005ce0:	f003 030f 	and.w	r3, r3, #15
 8005ce4:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 8005ce6:	4a11      	ldr	r2, [pc, #68]	; (8005d2c <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005cee:	613b      	str	r3, [r7, #16]
        break;
 8005cf0:	e002      	b.n	8005cf8 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	613b      	str	r3, [r7, #16]
      break;
 8005cf6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8005cf8:	4b09      	ldr	r3, [pc, #36]	; (8005d20 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	0e5b      	lsrs	r3, r3, #25
 8005cfe:	f003 0303 	and.w	r3, r3, #3
 8005d02:	3301      	adds	r3, #1
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d10:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8005d12:	683b      	ldr	r3, [r7, #0]
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	371c      	adds	r7, #28
 8005d18:	46bd      	mov	sp, r7
 8005d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1e:	4770      	bx	lr
 8005d20:	40021000 	.word	0x40021000
 8005d24:	00f42400 	.word	0x00f42400
 8005d28:	007a1200 	.word	0x007a1200
 8005d2c:	08023720 	.word	0x08023720

08005d30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b088      	sub	sp, #32
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d38:	2300      	movs	r3, #0
 8005d3a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d3c:	2300      	movs	r3, #0
 8005d3e:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d040      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d50:	2b80      	cmp	r3, #128	; 0x80
 8005d52:	d02a      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d54:	2b80      	cmp	r3, #128	; 0x80
 8005d56:	d825      	bhi.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d58:	2b60      	cmp	r3, #96	; 0x60
 8005d5a:	d026      	beq.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005d5c:	2b60      	cmp	r3, #96	; 0x60
 8005d5e:	d821      	bhi.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d60:	2b40      	cmp	r3, #64	; 0x40
 8005d62:	d006      	beq.n	8005d72 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005d64:	2b40      	cmp	r3, #64	; 0x40
 8005d66:	d81d      	bhi.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d009      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005d6c:	2b20      	cmp	r3, #32
 8005d6e:	d010      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005d70:	e018      	b.n	8005da4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005d72:	4b8f      	ldr	r3, [pc, #572]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	4a8e      	ldr	r2, [pc, #568]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005d78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d7c:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005d7e:	e015      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	3304      	adds	r3, #4
 8005d84:	2100      	movs	r1, #0
 8005d86:	4618      	mov	r0, r3
 8005d88:	f001 fb08 	bl	800739c <RCCEx_PLLSAI1_Config>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005d90:	e00c      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3320      	adds	r3, #32
 8005d96:	2100      	movs	r1, #0
 8005d98:	4618      	mov	r0, r3
 8005d9a:	f001 fbe5 	bl	8007568 <RCCEx_PLLSAI2_Config>
 8005d9e:	4603      	mov	r3, r0
 8005da0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005da2:	e003      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	77fb      	strb	r3, [r7, #31]
        break;
 8005da8:	e000      	b.n	8005dac <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 8005daa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dac:	7ffb      	ldrb	r3, [r7, #31]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10b      	bne.n	8005dca <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005db2:	4b7f      	ldr	r3, [pc, #508]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005db4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005db8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005dc0:	497b      	ldr	r1, [pc, #492]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005dc8:	e001      	b.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005dca:	7ffb      	ldrb	r3, [r7, #31]
 8005dcc:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d047      	beq.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de2:	d030      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005de4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005de8:	d82a      	bhi.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005dea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005dee:	d02a      	beq.n	8005e46 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005df0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005df4:	d824      	bhi.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005df6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005dfa:	d008      	beq.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e00:	d81e      	bhi.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e0a:	d010      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005e0c:	e018      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005e0e:	4b68      	ldr	r3, [pc, #416]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	4a67      	ldr	r2, [pc, #412]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e18:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005e1a:	e015      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3304      	adds	r3, #4
 8005e20:	2100      	movs	r1, #0
 8005e22:	4618      	mov	r0, r3
 8005e24:	f001 faba 	bl	800739c <RCCEx_PLLSAI1_Config>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005e2c:	e00c      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3320      	adds	r3, #32
 8005e32:	2100      	movs	r1, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f001 fb97 	bl	8007568 <RCCEx_PLLSAI2_Config>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005e3e:	e003      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	77fb      	strb	r3, [r7, #31]
        break;
 8005e44:	e000      	b.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8005e46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e48:	7ffb      	ldrb	r3, [r7, #31]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d10b      	bne.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005e4e:	4b58      	ldr	r3, [pc, #352]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005e54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e5c:	4954      	ldr	r1, [pc, #336]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005e64:	e001      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e66:	7ffb      	ldrb	r3, [r7, #31]
 8005e68:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f000 80ab 	beq.w	8005fce <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e7c:	4b4c      	ldr	r3, [pc, #304]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10d      	bne.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e88:	4b49      	ldr	r3, [pc, #292]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e8c:	4a48      	ldr	r2, [pc, #288]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e92:	6593      	str	r3, [r2, #88]	; 0x58
 8005e94:	4b46      	ldr	r3, [pc, #280]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e9c:	60fb      	str	r3, [r7, #12]
 8005e9e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005ea4:	4b43      	ldr	r3, [pc, #268]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a42      	ldr	r2, [pc, #264]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005eb0:	f7fd f810 	bl	8002ed4 <HAL_GetTick>
 8005eb4:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005eb6:	e00f      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005eb8:	f7fd f80c 	bl	8002ed4 <HAL_GetTick>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	1ad3      	subs	r3, r2, r3
 8005ec2:	2b02      	cmp	r3, #2
 8005ec4:	d908      	bls.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ec6:	4b3b      	ldr	r3, [pc, #236]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d109      	bne.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	77fb      	strb	r3, [r7, #31]
        }
        break;
 8005ed6:	e006      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ed8:	4b36      	ldr	r3, [pc, #216]	; (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d0e9      	beq.n	8005eb8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 8005ee4:	e000      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 8005ee6:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8005ee8:	7ffb      	ldrb	r3, [r7, #31]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d164      	bne.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005eee:	4b30      	ldr	r3, [pc, #192]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ef4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ef8:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01f      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d019      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f0c:	4b28      	ldr	r3, [pc, #160]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f16:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f18:	4b25      	ldr	r3, [pc, #148]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f1e:	4a24      	ldr	r2, [pc, #144]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f28:	4b21      	ldr	r3, [pc, #132]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f2e:	4a20      	ldr	r2, [pc, #128]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f38:	4a1d      	ldr	r2, [pc, #116]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d01f      	beq.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f4a:	f7fc ffc3 	bl	8002ed4 <HAL_GetTick>
 8005f4e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f50:	e012      	b.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f52:	f7fc ffbf 	bl	8002ed4 <HAL_GetTick>
 8005f56:	4602      	mov	r2, r0
 8005f58:	693b      	ldr	r3, [r7, #16]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d909      	bls.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f64:	4b12      	ldr	r3, [pc, #72]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10a      	bne.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8005f76:	e007      	b.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f78:	4b0d      	ldr	r3, [pc, #52]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d0e5      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8005f86:	e000      	b.n	8005f8a <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8005f88:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 8005f8a:	7ffb      	ldrb	r3, [r7, #31]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10c      	bne.n	8005faa <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f90:	4b07      	ldr	r3, [pc, #28]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f96:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fa0:	4903      	ldr	r1, [pc, #12]	; (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005fa8:	e008      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005faa:	7ffb      	ldrb	r3, [r7, #31]
 8005fac:	77bb      	strb	r3, [r7, #30]
 8005fae:	e005      	b.n	8005fbc <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8005fb0:	40021000 	.word	0x40021000
 8005fb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fb8:	7ffb      	ldrb	r3, [r7, #31]
 8005fba:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005fbc:	7dfb      	ldrb	r3, [r7, #23]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d105      	bne.n	8005fce <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fc2:	4b9c      	ldr	r3, [pc, #624]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fc6:	4a9b      	ldr	r2, [pc, #620]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fcc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0301 	and.w	r3, r3, #1
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d00a      	beq.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fda:	4b96      	ldr	r3, [pc, #600]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005fdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fe0:	f023 0203 	bic.w	r2, r3, #3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe8:	4992      	ldr	r1, [pc, #584]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005fea:	4313      	orrs	r3, r2
 8005fec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00a      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ffc:	4b8d      	ldr	r3, [pc, #564]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8005ffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006002:	f023 020c 	bic.w	r2, r3, #12
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600a:	498a      	ldr	r1, [pc, #552]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800600c:	4313      	orrs	r3, r2
 800600e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f003 0304 	and.w	r3, r3, #4
 800601a:	2b00      	cmp	r3, #0
 800601c:	d00a      	beq.n	8006034 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800601e:	4b85      	ldr	r3, [pc, #532]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006020:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006024:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800602c:	4981      	ldr	r1, [pc, #516]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800602e:	4313      	orrs	r3, r2
 8006030:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0308 	and.w	r3, r3, #8
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00a      	beq.n	8006056 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006040:	4b7c      	ldr	r3, [pc, #496]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006046:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800604e:	4979      	ldr	r1, [pc, #484]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006050:	4313      	orrs	r3, r2
 8006052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f003 0310 	and.w	r3, r3, #16
 800605e:	2b00      	cmp	r3, #0
 8006060:	d00a      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006062:	4b74      	ldr	r3, [pc, #464]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006068:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006070:	4970      	ldr	r1, [pc, #448]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006072:	4313      	orrs	r3, r2
 8006074:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f003 0320 	and.w	r3, r3, #32
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00a      	beq.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006084:	4b6b      	ldr	r3, [pc, #428]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006092:	4968      	ldr	r1, [pc, #416]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006094:	4313      	orrs	r3, r2
 8006096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d00a      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060a6:	4b63      	ldr	r3, [pc, #396]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80060a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b4:	495f      	ldr	r1, [pc, #380]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80060b6:	4313      	orrs	r3, r2
 80060b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00a      	beq.n	80060de <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80060c8:	4b5a      	ldr	r3, [pc, #360]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80060ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d6:	4957      	ldr	r1, [pc, #348]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80060d8:	4313      	orrs	r3, r2
 80060da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00a      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80060ea:	4b52      	ldr	r3, [pc, #328]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80060ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80060f8:	494e      	ldr	r1, [pc, #312]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d031      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006110:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006114:	d00e      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006116:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800611a:	d814      	bhi.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800611c:	2b00      	cmp	r3, #0
 800611e:	d015      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8006120:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006124:	d10f      	bne.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006126:	4b43      	ldr	r3, [pc, #268]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	4a42      	ldr	r2, [pc, #264]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800612c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006130:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006132:	e00c      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	3304      	adds	r3, #4
 8006138:	2100      	movs	r1, #0
 800613a:	4618      	mov	r0, r3
 800613c:	f001 f92e 	bl	800739c <RCCEx_PLLSAI1_Config>
 8006140:	4603      	mov	r3, r0
 8006142:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8006144:	e003      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	77fb      	strb	r3, [r7, #31]
        break;
 800614a:	e000      	b.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 800614c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800614e:	7ffb      	ldrb	r3, [r7, #31]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d10b      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006154:	4b37      	ldr	r3, [pc, #220]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800615a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006162:	4934      	ldr	r1, [pc, #208]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006164:	4313      	orrs	r3, r2
 8006166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800616a:	e001      	b.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800616c:	7ffb      	ldrb	r3, [r7, #31]
 800616e:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00a      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800617c:	4b2d      	ldr	r3, [pc, #180]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800617e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006182:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800618a:	492a      	ldr	r1, [pc, #168]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800618c:	4313      	orrs	r3, r2
 800618e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00a      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800619e:	4b25      	ldr	r3, [pc, #148]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80061a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ac:	4921      	ldr	r1, [pc, #132]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80061ae:	4313      	orrs	r3, r2
 80061b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00a      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80061c0:	4b1c      	ldr	r3, [pc, #112]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80061c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ce:	4919      	ldr	r1, [pc, #100]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80061d0:	4313      	orrs	r3, r2
 80061d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00a      	beq.n	80061f8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80061e2:	4b14      	ldr	r3, [pc, #80]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80061e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80061e8:	f023 0203 	bic.w	r2, r3, #3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061f0:	4910      	ldr	r1, [pc, #64]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80061f2:	4313      	orrs	r3, r2
 80061f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006200:	2b00      	cmp	r3, #0
 8006202:	d02b      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006204:	4b0b      	ldr	r3, [pc, #44]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800620a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006212:	4908      	ldr	r1, [pc, #32]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006214:	4313      	orrs	r3, r2
 8006216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800621e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006222:	d109      	bne.n	8006238 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006224:	4b03      	ldr	r3, [pc, #12]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8006226:	68db      	ldr	r3, [r3, #12]
 8006228:	4a02      	ldr	r2, [pc, #8]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800622a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800622e:	60d3      	str	r3, [r2, #12]
 8006230:	e014      	b.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8006232:	bf00      	nop
 8006234:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800623c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006240:	d10c      	bne.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	3304      	adds	r3, #4
 8006246:	2101      	movs	r1, #1
 8006248:	4618      	mov	r0, r3
 800624a:	f001 f8a7 	bl	800739c <RCCEx_PLLSAI1_Config>
 800624e:	4603      	mov	r3, r0
 8006250:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8006252:	7ffb      	ldrb	r3, [r7, #31]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d001      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8006258:	7ffb      	ldrb	r3, [r7, #31]
 800625a:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006264:	2b00      	cmp	r3, #0
 8006266:	d04a      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800626c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006270:	d108      	bne.n	8006284 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8006272:	4b70      	ldr	r3, [pc, #448]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006274:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006278:	4a6e      	ldr	r2, [pc, #440]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800627a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800627e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8006282:	e012      	b.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8006284:	4b6b      	ldr	r3, [pc, #428]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800628a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006292:	4968      	ldr	r1, [pc, #416]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006294:	4313      	orrs	r3, r2
 8006296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800629a:	4b66      	ldr	r3, [pc, #408]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800629c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80062a0:	4a64      	ldr	r2, [pc, #400]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80062a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80062a6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062ae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062b2:	d10d      	bne.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	3304      	adds	r3, #4
 80062b8:	2101      	movs	r1, #1
 80062ba:	4618      	mov	r0, r3
 80062bc:	f001 f86e 	bl	800739c <RCCEx_PLLSAI1_Config>
 80062c0:	4603      	mov	r3, r0
 80062c2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80062c4:	7ffb      	ldrb	r3, [r7, #31]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d019      	beq.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80062ca:	7ffb      	ldrb	r3, [r7, #31]
 80062cc:	77bb      	strb	r3, [r7, #30]
 80062ce:	e016      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062d8:	d106      	bne.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062da:	4b56      	ldr	r3, [pc, #344]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	4a55      	ldr	r2, [pc, #340]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80062e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062e4:	60d3      	str	r3, [r2, #12]
 80062e6:	e00a      	b.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80062f0:	d105      	bne.n	80062fe <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80062f2:	4b50      	ldr	r3, [pc, #320]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80062f4:	68db      	ldr	r3, [r3, #12]
 80062f6:	4a4f      	ldr	r2, [pc, #316]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80062f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062fc:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006306:	2b00      	cmp	r3, #0
 8006308:	d028      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800630a:	4b4a      	ldr	r3, [pc, #296]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800630c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006310:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006318:	4946      	ldr	r1, [pc, #280]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800631a:	4313      	orrs	r3, r2
 800631c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006324:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006328:	d106      	bne.n	8006338 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800632a:	4b42      	ldr	r3, [pc, #264]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	4a41      	ldr	r2, [pc, #260]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006330:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006334:	60d3      	str	r3, [r2, #12]
 8006336:	e011      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800633c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006340:	d10c      	bne.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	3304      	adds	r3, #4
 8006346:	2101      	movs	r1, #1
 8006348:	4618      	mov	r0, r3
 800634a:	f001 f827 	bl	800739c <RCCEx_PLLSAI1_Config>
 800634e:	4603      	mov	r3, r0
 8006350:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8006352:	7ffb      	ldrb	r3, [r7, #31]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d001      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8006358:	7ffb      	ldrb	r3, [r7, #31]
 800635a:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006364:	2b00      	cmp	r3, #0
 8006366:	d01e      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006368:	4b32      	ldr	r3, [pc, #200]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800636a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800636e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006378:	492e      	ldr	r1, [pc, #184]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800637a:	4313      	orrs	r3, r2
 800637c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006386:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800638a:	d10c      	bne.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	3304      	adds	r3, #4
 8006390:	2102      	movs	r1, #2
 8006392:	4618      	mov	r0, r3
 8006394:	f001 f802 	bl	800739c <RCCEx_PLLSAI1_Config>
 8006398:	4603      	mov	r3, r0
 800639a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 800639c:	7ffb      	ldrb	r3, [r7, #31]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d001      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 80063a2:	7ffb      	ldrb	r3, [r7, #31]
 80063a4:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00b      	beq.n	80063ca <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80063b2:	4b20      	ldr	r3, [pc, #128]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80063b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063b8:	f023 0204 	bic.w	r2, r3, #4
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80063c2:	491c      	ldr	r1, [pc, #112]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80063c4:	4313      	orrs	r3, r2
 80063c6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00b      	beq.n	80063ee <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80063d6:	4b17      	ldr	r3, [pc, #92]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80063d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80063dc:	f023 0218 	bic.w	r2, r3, #24
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063e6:	4913      	ldr	r1, [pc, #76]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80063e8:	4313      	orrs	r3, r2
 80063ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d017      	beq.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80063fa:	4b0e      	ldr	r3, [pc, #56]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80063fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006400:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800640a:	490a      	ldr	r1, [pc, #40]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800640c:	4313      	orrs	r3, r2
 800640e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006418:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800641c:	d105      	bne.n	800642a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800641e:	4b05      	ldr	r3, [pc, #20]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	4a04      	ldr	r2, [pc, #16]	; (8006434 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8006424:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006428:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 800642a:	7fbb      	ldrb	r3, [r7, #30]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3720      	adds	r7, #32
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	40021000 	.word	0x40021000

08006438 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  *            @arg @ref RCC_PERIPHCLK_FDCAN  FDCAN peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b088      	sub	sp, #32
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;   /* Default is 0 */
 8006440:	2300      	movs	r3, #0
 8006442:	61fb      	str	r3, [r7, #28]
  uint32_t pll_oscsource;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800644a:	d13e      	bne.n	80064ca <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800644c:	4b45      	ldr	r3, [pc, #276]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800644e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006456:	60fb      	str	r3, [r7, #12]

    switch (srcclk)
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800645e:	d028      	beq.n	80064b2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006466:	f200 8773 	bhi.w	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006470:	d005      	beq.n	800647e <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006478:	d00e      	beq.n	8006498 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 800647a:	f000 bf69 	b.w	8007350 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800647e:	4b39      	ldr	r3, [pc, #228]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8006480:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006484:	f003 0302 	and.w	r3, r3, #2
 8006488:	2b02      	cmp	r3, #2
 800648a:	f040 8763 	bne.w	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
          frequency = LSE_VALUE;
 800648e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006492:	61fb      	str	r3, [r7, #28]
        break;
 8006494:	f000 bf5e 	b.w	8007354 <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8006498:	4b32      	ldr	r3, [pc, #200]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800649a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b02      	cmp	r3, #2
 80064a4:	f040 8758 	bne.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
          frequency = LSI_VALUE;
 80064a8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80064ac:	61fb      	str	r3, [r7, #28]
        break;
 80064ae:	f000 bf53 	b.w	8007358 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80064b2:	4b2c      	ldr	r3, [pc, #176]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80064ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80064be:	f040 874d 	bne.w	800735c <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
          frequency = HSE_VALUE / 32U;
 80064c2:	4b29      	ldr	r3, [pc, #164]	; (8006568 <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
 80064c4:	61fb      	str	r3, [r7, #28]
        break;
 80064c6:	f000 bf49 	b.w	800735c <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80064ca:	4b26      	ldr	r3, [pc, #152]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	f003 0303 	and.w	r3, r3, #3
 80064d2:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch (pll_oscsource)
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	2b03      	cmp	r3, #3
 80064d8:	d036      	beq.n	8006548 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	2b03      	cmp	r3, #3
 80064de:	d84b      	bhi.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d003      	beq.n	80064ee <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d020      	beq.n	800652e <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80064ec:	e044      	b.n	8006578 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
    {
      case RCC_PLLSOURCE_MSI:   /* MSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80064ee:	4b1d      	ldr	r3, [pc, #116]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0302 	and.w	r3, r3, #2
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d116      	bne.n	8006528 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
        {
          /*MSI frequency range in HZ*/
          pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80064fa:	4b1a      	ldr	r3, [pc, #104]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0308 	and.w	r3, r3, #8
 8006502:	2b00      	cmp	r3, #0
 8006504:	d005      	beq.n	8006512 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8006506:	4b17      	ldr	r3, [pc, #92]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	091b      	lsrs	r3, r3, #4
 800650c:	f003 030f 	and.w	r3, r3, #15
 8006510:	e005      	b.n	800651e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8006512:	4b14      	ldr	r3, [pc, #80]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8006514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006518:	0a1b      	lsrs	r3, r3, #8
 800651a:	f003 030f 	and.w	r3, r3, #15
 800651e:	4a13      	ldr	r2, [pc, #76]	; (800656c <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
 8006520:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006524:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 8006526:	e02a      	b.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 8006528:	2300      	movs	r3, #0
 800652a:	61bb      	str	r3, [r7, #24]
        break;
 800652c:	e027      	b.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      case RCC_PLLSOURCE_HSI:   /* HSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800652e:	4b0d      	ldr	r3, [pc, #52]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006536:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800653a:	d102      	bne.n	8006542 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
        {
          pllvco = HSI_VALUE;
 800653c:	4b0c      	ldr	r3, [pc, #48]	; (8006570 <HAL_RCCEx_GetPeriphCLKFreq+0x138>)
 800653e:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 8006540:	e01d      	b.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 8006542:	2300      	movs	r3, #0
 8006544:	61bb      	str	r3, [r7, #24]
        break;
 8006546:	e01a      	b.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      case RCC_PLLSOURCE_HSE:   /* HSE ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006548:	4b06      	ldr	r3, [pc, #24]	; (8006564 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006550:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006554:	d102      	bne.n	800655c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          pllvco = HSE_VALUE;
 8006556:	4b07      	ldr	r3, [pc, #28]	; (8006574 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>)
 8006558:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 800655a:	e010      	b.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 800655c:	2300      	movs	r3, #0
 800655e:	61bb      	str	r3, [r7, #24]
        break;
 8006560:	e00d      	b.n	800657e <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8006562:	bf00      	nop
 8006564:	40021000 	.word	0x40021000
 8006568:	0003d090 	.word	0x0003d090
 800656c:	08023720 	.word	0x08023720
 8006570:	00f42400 	.word	0x00f42400
 8006574:	007a1200 	.word	0x007a1200
      default:
        /* No source */
        pllvco = 0U;
 8006578:	2300      	movs	r3, #0
 800657a:	61bb      	str	r3, [r7, #24]
        break;
 800657c:	bf00      	nop
    }

    switch (PeriphClk)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006584:	f000 8659 	beq.w	800723a <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800658e:	f200 86e7 	bhi.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006598:	f000 8605 	beq.w	80071a6 <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065a2:	f200 86dd 	bhi.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065ac:	f000 8468 	beq.w	8006e80 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065b6:	f200 86d3 	bhi.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065c0:	f000 8530 	beq.w	8007024 <HAL_RCCEx_GetPeriphCLKFreq+0xbec>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065ca:	f200 86c9 	bhi.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80065d4:	f000 8180 	beq.w	80068d8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80065de:	f200 86bf 	bhi.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065e8:	f000 80c2 	beq.w	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80065f2:	f200 86b5 	bhi.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065fc:	f000 842f 	beq.w	8006e5e <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006606:	f200 86ab 	bhi.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006610:	f000 83e7 	beq.w	8006de2 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800661a:	f200 86a1 	bhi.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006624:	f000 80a4 	beq.w	8006770 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800662e:	f200 8697 	bhi.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006638:	f000 8092 	beq.w	8006760 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006642:	f200 868d 	bhi.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800664c:	f000 8080 	beq.w	8006750 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006656:	f200 8683 	bhi.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006660:	f000 8553 	beq.w	800710a <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800666a:	f200 8679 	bhi.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006674:	f000 84ff 	beq.w	8007076 <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800667e:	f200 866f 	bhi.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006688:	f000 84a0 	beq.w	8006fcc <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006692:	f200 8665 	bhi.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2b80      	cmp	r3, #128	; 0x80
 800669a:	f000 846b 	beq.w	8006f74 <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2b80      	cmp	r3, #128	; 0x80
 80066a2:	f200 865d 	bhi.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2b20      	cmp	r3, #32
 80066aa:	d84b      	bhi.n	8006744 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	f000 8656 	beq.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	3b01      	subs	r3, #1
 80066b8:	2b1f      	cmp	r3, #31
 80066ba:	f200 8651 	bhi.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 80066be:	a201      	add	r2, pc, #4	; (adr r2, 80066c4 <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 80066c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066c4:	08006add 	.word	0x08006add
 80066c8:	08006b51 	.word	0x08006b51
 80066cc:	08007361 	.word	0x08007361
 80066d0:	08006be3 	.word	0x08006be3
 80066d4:	08007361 	.word	0x08007361
 80066d8:	08007361 	.word	0x08007361
 80066dc:	08007361 	.word	0x08007361
 80066e0:	08006c5b 	.word	0x08006c5b
 80066e4:	08007361 	.word	0x08007361
 80066e8:	08007361 	.word	0x08007361
 80066ec:	08007361 	.word	0x08007361
 80066f0:	08007361 	.word	0x08007361
 80066f4:	08007361 	.word	0x08007361
 80066f8:	08007361 	.word	0x08007361
 80066fc:	08007361 	.word	0x08007361
 8006700:	08006cdf 	.word	0x08006cdf
 8006704:	08007361 	.word	0x08007361
 8006708:	08007361 	.word	0x08007361
 800670c:	08007361 	.word	0x08007361
 8006710:	08007361 	.word	0x08007361
 8006714:	08007361 	.word	0x08007361
 8006718:	08007361 	.word	0x08007361
 800671c:	08007361 	.word	0x08007361
 8006720:	08007361 	.word	0x08007361
 8006724:	08007361 	.word	0x08007361
 8006728:	08007361 	.word	0x08007361
 800672c:	08007361 	.word	0x08007361
 8006730:	08007361 	.word	0x08007361
 8006734:	08007361 	.word	0x08007361
 8006738:	08007361 	.word	0x08007361
 800673c:	08007361 	.word	0x08007361
 8006740:	08006d61 	.word	0x08006d61
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b40      	cmp	r3, #64	; 0x40
 8006748:	f000 83e8 	beq.w	8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>

        break;

      default:
        /* Unexpected case, frequency default init at 0 */
        break;
 800674c:	f000 be08 	b.w	8007360 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006750:	69b9      	ldr	r1, [r7, #24]
 8006752:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006756:	f001 f867 	bl	8007828 <RCCEx_GetSAIxPeriphCLKFreq>
 800675a:	61f8      	str	r0, [r7, #28]
        break;
 800675c:	f000 be03 	b.w	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8006760:	69b9      	ldr	r1, [r7, #24]
 8006762:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8006766:	f001 f85f 	bl	8007828 <RCCEx_GetSAIxPeriphCLKFreq>
 800676a:	61f8      	str	r0, [r7, #28]
        break;
 800676c:	f000 bdfb 	b.w	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 8006770:	4b9c      	ldr	r3, [pc, #624]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8006772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006776:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800677a:	60fb      	str	r3, [r7, #12]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006782:	d015      	beq.n	80067b0 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800678a:	f200 8096 	bhi.w	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006794:	d02a      	beq.n	80067ec <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800679c:	f200 808d 	bhi.w	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d07f      	beq.n	80068a6 <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80067ac:	d04b      	beq.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 80067ae:	e084      	b.n	80068ba <HAL_RCCEx_GetPeriphCLKFreq+0x482>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80067b0:	4b8c      	ldr	r3, [pc, #560]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f003 0302 	and.w	r3, r3, #2
 80067b8:	2b02      	cmp	r3, #2
 80067ba:	f040 8081 	bne.w	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80067be:	4b89      	ldr	r3, [pc, #548]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0308 	and.w	r3, r3, #8
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d005      	beq.n	80067d6 <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 80067ca:	4b86      	ldr	r3, [pc, #536]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	091b      	lsrs	r3, r3, #4
 80067d0:	f003 030f 	and.w	r3, r3, #15
 80067d4:	e005      	b.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 80067d6:	4b83      	ldr	r3, [pc, #524]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80067d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80067dc:	0a1b      	lsrs	r3, r3, #8
 80067de:	f003 030f 	and.w	r3, r3, #15
 80067e2:	4a81      	ldr	r2, [pc, #516]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 80067e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80067e8:	61fb      	str	r3, [r7, #28]
            break;
 80067ea:	e069      	b.n	80068c0 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80067ec:	4b7d      	ldr	r3, [pc, #500]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067f8:	d165      	bne.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80067fa:	4b7a      	ldr	r3, [pc, #488]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006802:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006806:	d15e      	bne.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006808:	4b76      	ldr	r3, [pc, #472]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	091b      	lsrs	r3, r3, #4
 800680e:	f003 030f 	and.w	r3, r3, #15
 8006812:	3301      	adds	r3, #1
 8006814:	69ba      	ldr	r2, [r7, #24]
 8006816:	fbb2 f3f3 	udiv	r3, r2, r3
 800681a:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800681c:	4b71      	ldr	r3, [pc, #452]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800681e:	68db      	ldr	r3, [r3, #12]
 8006820:	0a1b      	lsrs	r3, r3, #8
 8006822:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006826:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8006828:	69bb      	ldr	r3, [r7, #24]
 800682a:	68ba      	ldr	r2, [r7, #8]
 800682c:	fb03 f202 	mul.w	r2, r3, r2
 8006830:	4b6c      	ldr	r3, [pc, #432]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	0d5b      	lsrs	r3, r3, #21
 8006836:	f003 0303 	and.w	r3, r3, #3
 800683a:	3301      	adds	r3, #1
 800683c:	005b      	lsls	r3, r3, #1
 800683e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006842:	61fb      	str	r3, [r7, #28]
            break;
 8006844:	e03f      	b.n	80068c6 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006846:	4b67      	ldr	r3, [pc, #412]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800684e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006852:	d13b      	bne.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x494>
              if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006854:	4b63      	ldr	r3, [pc, #396]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8006856:	691b      	ldr	r3, [r3, #16]
 8006858:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800685c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006860:	d134      	bne.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x494>
                pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8006862:	f000 ff2d 	bl	80076c0 <RCCEx_PLLSAI1_GetVCOFreq>
 8006866:	61b8      	str	r0, [r7, #24]
                pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006868:	4b5e      	ldr	r3, [pc, #376]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800686a:	691b      	ldr	r3, [r3, #16]
 800686c:	091b      	lsrs	r3, r3, #4
 800686e:	f003 030f 	and.w	r3, r3, #15
 8006872:	3301      	adds	r3, #1
 8006874:	69ba      	ldr	r2, [r7, #24]
 8006876:	fbb2 f3f3 	udiv	r3, r2, r3
 800687a:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800687c:	4b59      	ldr	r3, [pc, #356]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	0a1b      	lsrs	r3, r3, #8
 8006882:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006886:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 8006888:	69bb      	ldr	r3, [r7, #24]
 800688a:	68ba      	ldr	r2, [r7, #8]
 800688c:	fb03 f202 	mul.w	r2, r3, r2
 8006890:	4b54      	ldr	r3, [pc, #336]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8006892:	691b      	ldr	r3, [r3, #16]
 8006894:	0d5b      	lsrs	r3, r3, #21
 8006896:	f003 0303 	and.w	r3, r3, #3
 800689a:	3301      	adds	r3, #1
 800689c:	005b      	lsls	r3, r3, #1
 800689e:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a2:	61fb      	str	r3, [r7, #28]
            break;
 80068a4:	e012      	b.n	80068cc <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80068a6:	4b4f      	ldr	r3, [pc, #316]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80068a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d10e      	bne.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
              frequency = HSI48_VALUE;
 80068b4:	4b4d      	ldr	r3, [pc, #308]	; (80069ec <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 80068b6:	61fb      	str	r3, [r7, #28]
            break;
 80068b8:	e00b      	b.n	80068d2 <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
            break;
 80068ba:	bf00      	nop
 80068bc:	f000 bd53 	b.w	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80068c0:	bf00      	nop
 80068c2:	f000 bd50 	b.w	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80068c6:	bf00      	nop
 80068c8:	f000 bd4d 	b.w	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80068cc:	bf00      	nop
 80068ce:	f000 bd4a 	b.w	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80068d2:	bf00      	nop
        break;
 80068d4:	f000 bd47 	b.w	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        if (HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL)) /* PLLP ? */
 80068d8:	4b42      	ldr	r3, [pc, #264]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80068da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80068de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068e6:	d13d      	bne.n	8006964 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80068e8:	4b3e      	ldr	r3, [pc, #248]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80068f4:	f040 8536 	bne.w	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
            if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 80068f8:	4b3a      	ldr	r3, [pc, #232]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006900:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006904:	f040 852e 	bne.w	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006908:	4b36      	ldr	r3, [pc, #216]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	091b      	lsrs	r3, r3, #4
 800690e:	f003 030f 	and.w	r3, r3, #15
 8006912:	3301      	adds	r3, #1
 8006914:	69ba      	ldr	r2, [r7, #24]
 8006916:	fbb2 f3f3 	udiv	r3, r2, r3
 800691a:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 800691c:	4b31      	ldr	r3, [pc, #196]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	0a1b      	lsrs	r3, r3, #8
 8006922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006926:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8006928:	4b2e      	ldr	r3, [pc, #184]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	0edb      	lsrs	r3, r3, #27
 800692e:	f003 031f 	and.w	r3, r3, #31
 8006932:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d10a      	bne.n	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
                if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 800693a:	4b2a      	ldr	r3, [pc, #168]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006942:	2b00      	cmp	r3, #0
 8006944:	d002      	beq.n	800694c <HAL_RCCEx_GetPeriphCLKFreq+0x514>
                  pllp = 17U;
 8006946:	2311      	movs	r3, #17
 8006948:	617b      	str	r3, [r7, #20]
 800694a:	e001      	b.n	8006950 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
                  pllp = 7U;
 800694c:	2307      	movs	r3, #7
 800694e:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	68ba      	ldr	r2, [r7, #8]
 8006954:	fb03 f202 	mul.w	r2, r3, r2
 8006958:	697b      	ldr	r3, [r7, #20]
 800695a:	fbb2 f3f3 	udiv	r3, r2, r3
 800695e:	61fb      	str	r3, [r7, #28]
        break;
 8006960:	f000 bd00 	b.w	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
          srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 8006964:	4b1f      	ldr	r3, [pc, #124]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8006966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800696a:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800696e:	60fb      	str	r3, [r7, #12]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8006976:	d016      	beq.n	80069a6 <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800697e:	f200 809e 	bhi.w	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x686>
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006988:	d032      	beq.n	80069f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006990:	f200 8095 	bhi.w	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x686>
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 8087 	beq.w	8006aaa <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80069a2:	d052      	beq.n	8006a4a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
              break;
 80069a4:	e08b      	b.n	8006abe <HAL_RCCEx_GetPeriphCLKFreq+0x686>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80069a6:	4b0f      	ldr	r3, [pc, #60]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f003 0302 	and.w	r3, r3, #2
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	f040 8088 	bne.w	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
                frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80069b4:	4b0b      	ldr	r3, [pc, #44]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0308 	and.w	r3, r3, #8
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d005      	beq.n	80069cc <HAL_RCCEx_GetPeriphCLKFreq+0x594>
 80069c0:	4b08      	ldr	r3, [pc, #32]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	091b      	lsrs	r3, r3, #4
 80069c6:	f003 030f 	and.w	r3, r3, #15
 80069ca:	e005      	b.n	80069d8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 80069cc:	4b05      	ldr	r3, [pc, #20]	; (80069e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80069ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80069d2:	0a1b      	lsrs	r3, r3, #8
 80069d4:	f003 030f 	and.w	r3, r3, #15
 80069d8:	4a03      	ldr	r2, [pc, #12]	; (80069e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 80069da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80069de:	61fb      	str	r3, [r7, #28]
              break;
 80069e0:	e070      	b.n	8006ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80069e2:	bf00      	nop
 80069e4:	40021000 	.word	0x40021000
 80069e8:	08023720 	.word	0x08023720
 80069ec:	02dc6c00 	.word	0x02dc6c00
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 80069f0:	4baa      	ldr	r3, [pc, #680]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80069fc:	d165      	bne.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80069fe:	4ba7      	ldr	r3, [pc, #668]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a0a:	d15e      	bne.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8006a0c:	4ba3      	ldr	r3, [pc, #652]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	091b      	lsrs	r3, r3, #4
 8006a12:	f003 030f 	and.w	r3, r3, #15
 8006a16:	3301      	adds	r3, #1
 8006a18:	69ba      	ldr	r2, [r7, #24]
 8006a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a1e:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8006a20:	4b9e      	ldr	r3, [pc, #632]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	0a1b      	lsrs	r3, r3, #8
 8006a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a2a:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	fb03 f202 	mul.w	r2, r3, r2
 8006a34:	4b99      	ldr	r3, [pc, #612]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	0d5b      	lsrs	r3, r3, #21
 8006a3a:	f003 0303 	and.w	r3, r3, #3
 8006a3e:	3301      	adds	r3, #1
 8006a40:	005b      	lsls	r3, r3, #1
 8006a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a46:	61fb      	str	r3, [r7, #28]
              break;
 8006a48:	e03f      	b.n	8006aca <HAL_RCCEx_GetPeriphCLKFreq+0x692>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8006a4a:	4b94      	ldr	r3, [pc, #592]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a52:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006a56:	d13b      	bne.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
                if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8006a58:	4b90      	ldr	r3, [pc, #576]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006a5a:	691b      	ldr	r3, [r3, #16]
 8006a5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a64:	d134      	bne.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
                  pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8006a66:	f000 fe2b 	bl	80076c0 <RCCEx_PLLSAI1_GetVCOFreq>
 8006a6a:	61b8      	str	r0, [r7, #24]
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006a6c:	4b8b      	ldr	r3, [pc, #556]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006a6e:	691b      	ldr	r3, [r3, #16]
 8006a70:	091b      	lsrs	r3, r3, #4
 8006a72:	f003 030f 	and.w	r3, r3, #15
 8006a76:	3301      	adds	r3, #1
 8006a78:	69ba      	ldr	r2, [r7, #24]
 8006a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a7e:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006a80:	4b86      	ldr	r3, [pc, #536]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	0a1b      	lsrs	r3, r3, #8
 8006a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a8a:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 8006a8c:	69bb      	ldr	r3, [r7, #24]
 8006a8e:	68ba      	ldr	r2, [r7, #8]
 8006a90:	fb03 f202 	mul.w	r2, r3, r2
 8006a94:	4b81      	ldr	r3, [pc, #516]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006a96:	691b      	ldr	r3, [r3, #16]
 8006a98:	0d5b      	lsrs	r3, r3, #21
 8006a9a:	f003 0303 	and.w	r3, r3, #3
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa6:	61fb      	str	r3, [r7, #28]
              break;
 8006aa8:	e012      	b.n	8006ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
              if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8006aaa:	4b7c      	ldr	r3, [pc, #496]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006aac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d10e      	bne.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
                frequency = HSI48_VALUE;
 8006ab8:	4b79      	ldr	r3, [pc, #484]	; (8006ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x868>)
 8006aba:	61fb      	str	r3, [r7, #28]
              break;
 8006abc:	e00b      	b.n	8006ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
              break;
 8006abe:	bf00      	nop
 8006ac0:	f000 bc50 	b.w	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8006ac4:	bf00      	nop
 8006ac6:	f000 bc4d 	b.w	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8006aca:	bf00      	nop
 8006acc:	f000 bc4a 	b.w	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8006ad0:	bf00      	nop
 8006ad2:	f000 bc47 	b.w	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 8006ad6:	bf00      	nop
        break;
 8006ad8:	f000 bc44 	b.w	8007364 <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8006adc:	4b6f      	ldr	r3, [pc, #444]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae2:	f003 0303 	and.w	r3, r3, #3
 8006ae6:	60fb      	str	r3, [r7, #12]
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2b03      	cmp	r3, #3
 8006aec:	d827      	bhi.n	8006b3e <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 8006aee:	a201      	add	r2, pc, #4	; (adr r2, 8006af4 <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8006af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af4:	08006b05 	.word	0x08006b05
 8006af8:	08006b0d 	.word	0x08006b0d
 8006afc:	08006b15 	.word	0x08006b15
 8006b00:	08006b29 	.word	0x08006b29
            frequency = HAL_RCC_GetPCLK2Freq();
 8006b04:	f7fe fffc 	bl	8005b00 <HAL_RCC_GetPCLK2Freq>
 8006b08:	61f8      	str	r0, [r7, #28]
            break;
 8006b0a:	e01f      	b.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
            frequency = HAL_RCC_GetSysClockFreq();
 8006b0c:	f7fe ff32 	bl	8005974 <HAL_RCC_GetSysClockFreq>
 8006b10:	61f8      	str	r0, [r7, #28]
            break;
 8006b12:	e01b      	b.n	8006b4c <HAL_RCCEx_GetPeriphCLKFreq+0x714>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006b14:	4b61      	ldr	r3, [pc, #388]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006b20:	d110      	bne.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
              frequency = HSI_VALUE;
 8006b22:	4b60      	ldr	r3, [pc, #384]	; (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8006b24:	61fb      	str	r3, [r7, #28]
            break;
 8006b26:	e00d      	b.n	8006b44 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006b28:	4b5c      	ldr	r3, [pc, #368]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006b2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b2e:	f003 0302 	and.w	r3, r3, #2
 8006b32:	2b02      	cmp	r3, #2
 8006b34:	d109      	bne.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x712>
              frequency = LSE_VALUE;
 8006b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b3a:	61fb      	str	r3, [r7, #28]
            break;
 8006b3c:	e005      	b.n	8006b4a <HAL_RCCEx_GetPeriphCLKFreq+0x712>
            break;
 8006b3e:	bf00      	nop
 8006b40:	f000 bc11 	b.w	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006b44:	bf00      	nop
 8006b46:	f000 bc0e 	b.w	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006b4a:	bf00      	nop
        break;
 8006b4c:	f000 bc0b 	b.w	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8006b50:	4b52      	ldr	r3, [pc, #328]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b56:	f003 030c 	and.w	r3, r3, #12
 8006b5a:	60fb      	str	r3, [r7, #12]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2b0c      	cmp	r3, #12
 8006b60:	d839      	bhi.n	8006bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
 8006b62:	a201      	add	r2, pc, #4	; (adr r2, 8006b68 <HAL_RCCEx_GetPeriphCLKFreq+0x730>)
 8006b64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b68:	08006b9d 	.word	0x08006b9d
 8006b6c:	08006bd7 	.word	0x08006bd7
 8006b70:	08006bd7 	.word	0x08006bd7
 8006b74:	08006bd7 	.word	0x08006bd7
 8006b78:	08006ba5 	.word	0x08006ba5
 8006b7c:	08006bd7 	.word	0x08006bd7
 8006b80:	08006bd7 	.word	0x08006bd7
 8006b84:	08006bd7 	.word	0x08006bd7
 8006b88:	08006bad 	.word	0x08006bad
 8006b8c:	08006bd7 	.word	0x08006bd7
 8006b90:	08006bd7 	.word	0x08006bd7
 8006b94:	08006bd7 	.word	0x08006bd7
 8006b98:	08006bc1 	.word	0x08006bc1
            frequency = HAL_RCC_GetPCLK1Freq();
 8006b9c:	f7fe ff9c 	bl	8005ad8 <HAL_RCC_GetPCLK1Freq>
 8006ba0:	61f8      	str	r0, [r7, #28]
            break;
 8006ba2:	e01d      	b.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
            frequency = HAL_RCC_GetSysClockFreq();
 8006ba4:	f7fe fee6 	bl	8005974 <HAL_RCC_GetSysClockFreq>
 8006ba8:	61f8      	str	r0, [r7, #28]
            break;
 8006baa:	e019      	b.n	8006be0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006bac:	4b3b      	ldr	r3, [pc, #236]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bb8:	d10f      	bne.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
              frequency = HSI_VALUE;
 8006bba:	4b3a      	ldr	r3, [pc, #232]	; (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8006bbc:	61fb      	str	r3, [r7, #28]
            break;
 8006bbe:	e00c      	b.n	8006bda <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006bc0:	4b36      	ldr	r3, [pc, #216]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bc6:	f003 0302 	and.w	r3, r3, #2
 8006bca:	2b02      	cmp	r3, #2
 8006bcc:	d107      	bne.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
              frequency = LSE_VALUE;
 8006bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bd2:	61fb      	str	r3, [r7, #28]
            break;
 8006bd4:	e003      	b.n	8006bde <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
            break;
 8006bd6:	bf00      	nop
 8006bd8:	e3c5      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006bda:	bf00      	nop
 8006bdc:	e3c3      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006bde:	bf00      	nop
        break;
 8006be0:	e3c1      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8006be2:	4b2e      	ldr	r3, [pc, #184]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006be4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006bec:	60fb      	str	r3, [r7, #12]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2b30      	cmp	r3, #48	; 0x30
 8006bf2:	d021      	beq.n	8006c38 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	2b30      	cmp	r3, #48	; 0x30
 8006bf8:	d829      	bhi.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2b20      	cmp	r3, #32
 8006bfe:	d011      	beq.n	8006c24 <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b20      	cmp	r3, #32
 8006c04:	d823      	bhi.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d003      	beq.n	8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2b10      	cmp	r3, #16
 8006c10:	d004      	beq.n	8006c1c <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
            break;
 8006c12:	e01c      	b.n	8006c4e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006c14:	f7fe ff60 	bl	8005ad8 <HAL_RCC_GetPCLK1Freq>
 8006c18:	61f8      	str	r0, [r7, #28]
            break;
 8006c1a:	e01d      	b.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            frequency = HAL_RCC_GetSysClockFreq();
 8006c1c:	f7fe feaa 	bl	8005974 <HAL_RCC_GetSysClockFreq>
 8006c20:	61f8      	str	r0, [r7, #28]
            break;
 8006c22:	e019      	b.n	8006c58 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006c24:	4b1d      	ldr	r3, [pc, #116]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c30:	d10f      	bne.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
              frequency = HSI_VALUE;
 8006c32:	4b1c      	ldr	r3, [pc, #112]	; (8006ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 8006c34:	61fb      	str	r3, [r7, #28]
            break;
 8006c36:	e00c      	b.n	8006c52 <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006c38:	4b18      	ldr	r3, [pc, #96]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c3e:	f003 0302 	and.w	r3, r3, #2
 8006c42:	2b02      	cmp	r3, #2
 8006c44:	d107      	bne.n	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
              frequency = LSE_VALUE;
 8006c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c4a:	61fb      	str	r3, [r7, #28]
            break;
 8006c4c:	e003      	b.n	8006c56 <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
            break;
 8006c4e:	bf00      	nop
 8006c50:	e389      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006c52:	bf00      	nop
 8006c54:	e387      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006c56:	bf00      	nop
        break;
 8006c58:	e385      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8006c5a:	4b10      	ldr	r3, [pc, #64]	; (8006c9c <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8006c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006c64:	60fb      	str	r3, [r7, #12]
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	2bc0      	cmp	r3, #192	; 0xc0
 8006c6a:	d027      	beq.n	8006cbc <HAL_RCCEx_GetPeriphCLKFreq+0x884>
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2bc0      	cmp	r3, #192	; 0xc0
 8006c70:	d82f      	bhi.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2b80      	cmp	r3, #128	; 0x80
 8006c76:	d017      	beq.n	8006ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2b80      	cmp	r3, #128	; 0x80
 8006c7c:	d829      	bhi.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d003      	beq.n	8006c8c <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2b40      	cmp	r3, #64	; 0x40
 8006c88:	d004      	beq.n	8006c94 <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            break;
 8006c8a:	e022      	b.n	8006cd2 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006c8c:	f7fe ff24 	bl	8005ad8 <HAL_RCC_GetPCLK1Freq>
 8006c90:	61f8      	str	r0, [r7, #28]
            break;
 8006c92:	e023      	b.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            frequency = HAL_RCC_GetSysClockFreq();
 8006c94:	f7fe fe6e 	bl	8005974 <HAL_RCC_GetSysClockFreq>
 8006c98:	61f8      	str	r0, [r7, #28]
            break;
 8006c9a:	e01f      	b.n	8006cdc <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
 8006c9c:	40021000 	.word	0x40021000
 8006ca0:	02dc6c00 	.word	0x02dc6c00
 8006ca4:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006ca8:	4b99      	ldr	r3, [pc, #612]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb4:	d10f      	bne.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
              frequency = HSI_VALUE;
 8006cb6:	4b97      	ldr	r3, [pc, #604]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8006cb8:	61fb      	str	r3, [r7, #28]
            break;
 8006cba:	e00c      	b.n	8006cd6 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006cbc:	4b94      	ldr	r3, [pc, #592]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cc2:	f003 0302 	and.w	r3, r3, #2
 8006cc6:	2b02      	cmp	r3, #2
 8006cc8:	d107      	bne.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
              frequency = LSE_VALUE;
 8006cca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006cce:	61fb      	str	r3, [r7, #28]
            break;
 8006cd0:	e003      	b.n	8006cda <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
            break;
 8006cd2:	bf00      	nop
 8006cd4:	e347      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006cd6:	bf00      	nop
 8006cd8:	e345      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006cda:	bf00      	nop
        break;
 8006cdc:	e343      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8006cde:	4b8c      	ldr	r3, [pc, #560]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ce4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ce8:	60fb      	str	r3, [r7, #12]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cf0:	d025      	beq.n	8006d3e <HAL_RCCEx_GetPeriphCLKFreq+0x906>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cf8:	d82c      	bhi.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d00:	d013      	beq.n	8006d2a <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d08:	d824      	bhi.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d004      	beq.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d16:	d004      	beq.n	8006d22 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            break;
 8006d18:	e01c      	b.n	8006d54 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006d1a:	f7fe fedd 	bl	8005ad8 <HAL_RCC_GetPCLK1Freq>
 8006d1e:	61f8      	str	r0, [r7, #28]
            break;
 8006d20:	e01d      	b.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
            frequency = HAL_RCC_GetSysClockFreq();
 8006d22:	f7fe fe27 	bl	8005974 <HAL_RCC_GetSysClockFreq>
 8006d26:	61f8      	str	r0, [r7, #28]
            break;
 8006d28:	e019      	b.n	8006d5e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006d2a:	4b79      	ldr	r3, [pc, #484]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d36:	d10f      	bne.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
              frequency = HSI_VALUE;
 8006d38:	4b76      	ldr	r3, [pc, #472]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8006d3a:	61fb      	str	r3, [r7, #28]
            break;
 8006d3c:	e00c      	b.n	8006d58 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006d3e:	4b74      	ldr	r3, [pc, #464]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d44:	f003 0302 	and.w	r3, r3, #2
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d107      	bne.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
              frequency = LSE_VALUE;
 8006d4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d50:	61fb      	str	r3, [r7, #28]
            break;
 8006d52:	e003      	b.n	8006d5c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
            break;
 8006d54:	bf00      	nop
 8006d56:	e306      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006d58:	bf00      	nop
 8006d5a:	e304      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006d5c:	bf00      	nop
        break;
 8006d5e:	e302      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8006d60:	4b6b      	ldr	r3, [pc, #428]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d66:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d6a:	60fb      	str	r3, [r7, #12]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d72:	d025      	beq.n	8006dc0 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d7a:	d82c      	bhi.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d82:	d013      	beq.n	8006dac <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d8a:	d824      	bhi.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d004      	beq.n	8006d9c <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d98:	d004      	beq.n	8006da4 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
            break;
 8006d9a:	e01c      	b.n	8006dd6 <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006d9c:	f7fe fe9c 	bl	8005ad8 <HAL_RCC_GetPCLK1Freq>
 8006da0:	61f8      	str	r0, [r7, #28]
            break;
 8006da2:	e01d      	b.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>
            frequency = HAL_RCC_GetSysClockFreq();
 8006da4:	f7fe fde6 	bl	8005974 <HAL_RCC_GetSysClockFreq>
 8006da8:	61f8      	str	r0, [r7, #28]
            break;
 8006daa:	e019      	b.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006dac:	4b58      	ldr	r3, [pc, #352]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006db8:	d10f      	bne.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
              frequency = HSI_VALUE;
 8006dba:	4b56      	ldr	r3, [pc, #344]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8006dbc:	61fb      	str	r3, [r7, #28]
            break;
 8006dbe:	e00c      	b.n	8006dda <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8006dc0:	4b53      	ldr	r3, [pc, #332]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dc6:	f003 0302 	and.w	r3, r3, #2
 8006dca:	2b02      	cmp	r3, #2
 8006dcc:	d107      	bne.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
              frequency = LSE_VALUE;
 8006dce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dd2:	61fb      	str	r3, [r7, #28]
            break;
 8006dd4:	e003      	b.n	8006dde <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
            break;
 8006dd6:	bf00      	nop
 8006dd8:	e2c5      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006dda:	bf00      	nop
 8006ddc:	e2c3      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006dde:	bf00      	nop
        break;
 8006de0:	e2c1      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8006de2:	4b4b      	ldr	r3, [pc, #300]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006de8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006dec:	60fb      	str	r3, [r7, #12]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006df4:	d007      	beq.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006dfc:	d12b      	bne.n	8006e56 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
            frequency = HAL_RCC_GetSysClockFreq();
 8006dfe:	f7fe fdb9 	bl	8005974 <HAL_RCC_GetSysClockFreq>
 8006e02:	61f8      	str	r0, [r7, #28]
            break;
 8006e04:	e02a      	b.n	8006e5c <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 8006e06:	4b42      	ldr	r3, [pc, #264]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006e08:	691b      	ldr	r3, [r3, #16]
 8006e0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d023      	beq.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8006e12:	f000 fc55 	bl	80076c0 <RCCEx_PLLSAI1_GetVCOFreq>
 8006e16:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8006e18:	4b3d      	ldr	r3, [pc, #244]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006e1a:	691b      	ldr	r3, [r3, #16]
 8006e1c:	091b      	lsrs	r3, r3, #4
 8006e1e:	f003 030f 	and.w	r3, r3, #15
 8006e22:	3301      	adds	r3, #1
 8006e24:	69ba      	ldr	r2, [r7, #24]
 8006e26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e2a:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8006e2c:	4b38      	ldr	r3, [pc, #224]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006e2e:	691b      	ldr	r3, [r3, #16]
 8006e30:	0a1b      	lsrs	r3, r3, #8
 8006e32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e36:	60bb      	str	r3, [r7, #8]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U);
 8006e38:	69bb      	ldr	r3, [r7, #24]
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	fb03 f202 	mul.w	r2, r3, r2
 8006e40:	4b33      	ldr	r3, [pc, #204]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	0e5b      	lsrs	r3, r3, #25
 8006e46:	f003 0303 	and.w	r3, r3, #3
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	005b      	lsls	r3, r3, #1
 8006e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e52:	61fb      	str	r3, [r7, #28]
            break;
 8006e54:	e001      	b.n	8006e5a <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
            break;
 8006e56:	bf00      	nop
 8006e58:	e285      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006e5a:	bf00      	nop
        break;
 8006e5c:	e283      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8006e5e:	4b2c      	ldr	r3, [pc, #176]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006e60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e64:	f003 0304 	and.w	r3, r3, #4
 8006e68:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d103      	bne.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
          frequency = HAL_RCC_GetPCLK2Freq();
 8006e70:	f7fe fe46 	bl	8005b00 <HAL_RCC_GetPCLK2Freq>
 8006e74:	61f8      	str	r0, [r7, #28]
        break;
 8006e76:	e276      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
          frequency = HAL_RCC_GetSysClockFreq();
 8006e78:	f7fe fd7c 	bl	8005974 <HAL_RCC_GetSysClockFreq>
 8006e7c:	61f8      	str	r0, [r7, #28]
        break;
 8006e7e:	e272      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8006e80:	4b23      	ldr	r3, [pc, #140]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006e82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e86:	f003 0318 	and.w	r3, r3, #24
 8006e8a:	60fb      	str	r3, [r7, #12]
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2b10      	cmp	r3, #16
 8006e90:	d010      	beq.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2b10      	cmp	r3, #16
 8006e96:	d834      	bhi.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2b08      	cmp	r3, #8
 8006ea2:	d024      	beq.n	8006eee <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
            break;
 8006ea4:	e02d      	b.n	8006f02 <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
            frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8006ea6:	69b9      	ldr	r1, [r7, #24]
 8006ea8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8006eac:	f000 fcbc 	bl	8007828 <RCCEx_GetSAIxPeriphCLKFreq>
 8006eb0:	61f8      	str	r0, [r7, #28]
            break;
 8006eb2:	e02b      	b.n	8006f0c <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8006eb4:	4b16      	ldr	r3, [pc, #88]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f003 0302 	and.w	r3, r3, #2
 8006ebc:	2b02      	cmp	r3, #2
 8006ebe:	d122      	bne.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0xace>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8006ec0:	4b13      	ldr	r3, [pc, #76]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f003 0308 	and.w	r3, r3, #8
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d005      	beq.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
 8006ecc:	4b10      	ldr	r3, [pc, #64]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	091b      	lsrs	r3, r3, #4
 8006ed2:	f003 030f 	and.w	r3, r3, #15
 8006ed6:	e005      	b.n	8006ee4 <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
 8006ed8:	4b0d      	ldr	r3, [pc, #52]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006eda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ede:	0a1b      	lsrs	r3, r3, #8
 8006ee0:	f003 030f 	and.w	r3, r3, #15
 8006ee4:	4a0c      	ldr	r2, [pc, #48]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 8006ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eea:	61fb      	str	r3, [r7, #28]
            break;
 8006eec:	e00b      	b.n	8006f06 <HAL_RCCEx_GetPeriphCLKFreq+0xace>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006eee:	4b08      	ldr	r3, [pc, #32]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006efa:	d106      	bne.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
              frequency = HSI_VALUE;
 8006efc:	4b05      	ldr	r3, [pc, #20]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8006efe:	61fb      	str	r3, [r7, #28]
            break;
 8006f00:	e003      	b.n	8006f0a <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
            break;
 8006f02:	bf00      	nop
 8006f04:	e22f      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006f06:	bf00      	nop
 8006f08:	e22d      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006f0a:	bf00      	nop
        break;
 8006f0c:	e22b      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
 8006f0e:	bf00      	nop
 8006f10:	40021000 	.word	0x40021000
 8006f14:	00f42400 	.word	0x00f42400
 8006f18:	08023720 	.word	0x08023720
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8006f1c:	4b96      	ldr	r3, [pc, #600]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f22:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006f26:	60fb      	str	r3, [r7, #12]
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f2e:	d013      	beq.n	8006f58 <HAL_RCCEx_GetPeriphCLKFreq+0xb20>
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f36:	d819      	bhi.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d004      	beq.n	8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f44:	d004      	beq.n	8006f50 <HAL_RCCEx_GetPeriphCLKFreq+0xb18>
            break;
 8006f46:	e011      	b.n	8006f6c <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006f48:	f7fe fdc6 	bl	8005ad8 <HAL_RCC_GetPCLK1Freq>
 8006f4c:	61f8      	str	r0, [r7, #28]
            break;
 8006f4e:	e010      	b.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
            frequency = HAL_RCC_GetSysClockFreq();
 8006f50:	f7fe fd10 	bl	8005974 <HAL_RCC_GetSysClockFreq>
 8006f54:	61f8      	str	r0, [r7, #28]
            break;
 8006f56:	e00c      	b.n	8006f72 <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006f58:	4b87      	ldr	r3, [pc, #540]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f64:	d104      	bne.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
              frequency = HSI_VALUE;
 8006f66:	4b85      	ldr	r3, [pc, #532]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006f68:	61fb      	str	r3, [r7, #28]
            break;
 8006f6a:	e001      	b.n	8006f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
            break;
 8006f6c:	bf00      	nop
 8006f6e:	e1fa      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006f70:	bf00      	nop
        break;
 8006f72:	e1f8      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8006f74:	4b80      	ldr	r3, [pc, #512]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006f76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006f7e:	60fb      	str	r3, [r7, #12]
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f86:	d013      	beq.n	8006fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f8e:	d819      	bhi.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d004      	beq.n	8006fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006f9c:	d004      	beq.n	8006fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
            break;
 8006f9e:	e011      	b.n	8006fc4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006fa0:	f7fe fd9a 	bl	8005ad8 <HAL_RCC_GetPCLK1Freq>
 8006fa4:	61f8      	str	r0, [r7, #28]
            break;
 8006fa6:	e010      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
            frequency = HAL_RCC_GetSysClockFreq();
 8006fa8:	f7fe fce4 	bl	8005974 <HAL_RCC_GetSysClockFreq>
 8006fac:	61f8      	str	r0, [r7, #28]
            break;
 8006fae:	e00c      	b.n	8006fca <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8006fb0:	4b71      	ldr	r3, [pc, #452]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fbc:	d104      	bne.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
              frequency = HSI_VALUE;
 8006fbe:	4b6f      	ldr	r3, [pc, #444]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8006fc0:	61fb      	str	r3, [r7, #28]
            break;
 8006fc2:	e001      	b.n	8006fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
            break;
 8006fc4:	bf00      	nop
 8006fc6:	e1ce      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8006fc8:	bf00      	nop
        break;
 8006fca:	e1cc      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8006fcc:	4b6a      	ldr	r3, [pc, #424]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8006fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fd2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006fd6:	60fb      	str	r3, [r7, #12]
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fde:	d013      	beq.n	8007008 <HAL_RCCEx_GetPeriphCLKFreq+0xbd0>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006fe6:	d819      	bhi.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d004      	beq.n	8006ff8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ff4:	d004      	beq.n	8007000 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
            break;
 8006ff6:	e011      	b.n	800701c <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
            frequency = HAL_RCC_GetPCLK1Freq();
 8006ff8:	f7fe fd6e 	bl	8005ad8 <HAL_RCC_GetPCLK1Freq>
 8006ffc:	61f8      	str	r0, [r7, #28]
            break;
 8006ffe:	e010      	b.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
            frequency = HAL_RCC_GetSysClockFreq();
 8007000:	f7fe fcb8 	bl	8005974 <HAL_RCC_GetSysClockFreq>
 8007004:	61f8      	str	r0, [r7, #28]
            break;
 8007006:	e00c      	b.n	8007022 <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007008:	4b5b      	ldr	r3, [pc, #364]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007014:	d104      	bne.n	8007020 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
              frequency = HSI_VALUE;
 8007016:	4b59      	ldr	r3, [pc, #356]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007018:	61fb      	str	r3, [r7, #28]
            break;
 800701a:	e001      	b.n	8007020 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
            break;
 800701c:	bf00      	nop
 800701e:	e1a2      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8007020:	bf00      	nop
        break;
 8007022:	e1a0      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8007024:	4b54      	ldr	r3, [pc, #336]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007026:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800702a:	f003 0303 	and.w	r3, r3, #3
 800702e:	60fb      	str	r3, [r7, #12]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2b02      	cmp	r3, #2
 8007034:	d011      	beq.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2b02      	cmp	r3, #2
 800703a:	d818      	bhi.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d003      	beq.n	800704a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2b01      	cmp	r3, #1
 8007046:	d004      	beq.n	8007052 <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
            break;
 8007048:	e011      	b.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
            frequency = HAL_RCC_GetPCLK1Freq();
 800704a:	f7fe fd45 	bl	8005ad8 <HAL_RCC_GetPCLK1Freq>
 800704e:	61f8      	str	r0, [r7, #28]
            break;
 8007050:	e010      	b.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
            frequency = HAL_RCC_GetSysClockFreq();
 8007052:	f7fe fc8f 	bl	8005974 <HAL_RCC_GetSysClockFreq>
 8007056:	61f8      	str	r0, [r7, #28]
            break;
 8007058:	e00c      	b.n	8007074 <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800705a:	4b47      	ldr	r3, [pc, #284]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007066:	d104      	bne.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
              frequency = HSI_VALUE;
 8007068:	4b44      	ldr	r3, [pc, #272]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 800706a:	61fb      	str	r3, [r7, #28]
            break;
 800706c:	e001      	b.n	8007072 <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
            break;
 800706e:	bf00      	nop
 8007070:	e179      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8007072:	bf00      	nop
        break;
 8007074:	e177      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8007076:	4b40      	ldr	r3, [pc, #256]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800707c:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8007080:	60fb      	str	r3, [r7, #12]
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007088:	d02c      	beq.n	80070e4 <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8007090:	d833      	bhi.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007098:	d01a      	beq.n	80070d0 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80070a0:	d82b      	bhi.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d004      	beq.n	80070b2 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80070ae:	d004      	beq.n	80070ba <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
            break;
 80070b0:	e023      	b.n	80070fa <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
            frequency = HAL_RCC_GetPCLK1Freq();
 80070b2:	f7fe fd11 	bl	8005ad8 <HAL_RCC_GetPCLK1Freq>
 80070b6:	61f8      	str	r0, [r7, #28]
            break;
 80070b8:	e026      	b.n	8007108 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80070ba:	4b2f      	ldr	r3, [pc, #188]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80070bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070c0:	f003 0302 	and.w	r3, r3, #2
 80070c4:	2b02      	cmp	r3, #2
 80070c6:	d11a      	bne.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
              frequency = LSI_VALUE;
 80070c8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80070cc:	61fb      	str	r3, [r7, #28]
            break;
 80070ce:	e016      	b.n	80070fe <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80070d0:	4b29      	ldr	r3, [pc, #164]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80070d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80070dc:	d111      	bne.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
              frequency = HSI_VALUE;
 80070de:	4b27      	ldr	r3, [pc, #156]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80070e0:	61fb      	str	r3, [r7, #28]
            break;
 80070e2:	e00e      	b.n	8007102 <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80070e4:	4b24      	ldr	r3, [pc, #144]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80070e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ea:	f003 0302 	and.w	r3, r3, #2
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d109      	bne.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
              frequency = LSE_VALUE;
 80070f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070f6:	61fb      	str	r3, [r7, #28]
            break;
 80070f8:	e005      	b.n	8007106 <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
            break;
 80070fa:	bf00      	nop
 80070fc:	e133      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80070fe:	bf00      	nop
 8007100:	e131      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8007102:	bf00      	nop
 8007104:	e12f      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8007106:	bf00      	nop
        break;
 8007108:	e12d      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800710a:	4b1b      	ldr	r3, [pc, #108]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 800710c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007110:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8007114:	60fb      	str	r3, [r7, #12]
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800711c:	d030      	beq.n	8007180 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007124:	d837      	bhi.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800712c:	d01a      	beq.n	8007164 <HAL_RCCEx_GetPeriphCLKFreq+0xd2c>
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007134:	d82f      	bhi.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d004      	beq.n	8007146 <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007142:	d004      	beq.n	800714e <HAL_RCCEx_GetPeriphCLKFreq+0xd16>
            break;
 8007144:	e027      	b.n	8007196 <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
            frequency = HAL_RCC_GetPCLK1Freq();
 8007146:	f7fe fcc7 	bl	8005ad8 <HAL_RCC_GetPCLK1Freq>
 800714a:	61f8      	str	r0, [r7, #28]
            break;
 800714c:	e02a      	b.n	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800714e:	4b0a      	ldr	r3, [pc, #40]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007150:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007154:	f003 0302 	and.w	r3, r3, #2
 8007158:	2b02      	cmp	r3, #2
 800715a:	d11e      	bne.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
              frequency = LSI_VALUE;
 800715c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007160:	61fb      	str	r3, [r7, #28]
            break;
 8007162:	e01a      	b.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007164:	4b04      	ldr	r3, [pc, #16]	; (8007178 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800716c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007170:	d115      	bne.n	800719e <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
              frequency = HSI_VALUE;
 8007172:	4b02      	ldr	r3, [pc, #8]	; (800717c <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8007174:	61fb      	str	r3, [r7, #28]
            break;
 8007176:	e012      	b.n	800719e <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
 8007178:	40021000 	.word	0x40021000
 800717c:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007180:	4b7b      	ldr	r3, [pc, #492]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8007182:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007186:	f003 0302 	and.w	r3, r3, #2
 800718a:	2b02      	cmp	r3, #2
 800718c:	d109      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
              frequency = LSE_VALUE;
 800718e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007192:	61fb      	str	r3, [r7, #28]
            break;
 8007194:	e005      	b.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
            break;
 8007196:	bf00      	nop
 8007198:	e0e5      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800719a:	bf00      	nop
 800719c:	e0e3      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800719e:	bf00      	nop
 80071a0:	e0e1      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80071a2:	bf00      	nop
        break;
 80071a4:	e0df      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80071a6:	4b72      	ldr	r3, [pc, #456]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80071a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ac:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80071b0:	60fb      	str	r3, [r7, #12]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80071b8:	d02c      	beq.n	8007214 <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80071c0:	d833      	bhi.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071c8:	d01a      	beq.n	8007200 <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80071d0:	d82b      	bhi.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d004      	beq.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80071de:	d004      	beq.n	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
            break;
 80071e0:	e023      	b.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
            frequency = HAL_RCC_GetPCLK1Freq();
 80071e2:	f7fe fc79 	bl	8005ad8 <HAL_RCC_GetPCLK1Freq>
 80071e6:	61f8      	str	r0, [r7, #28]
            break;
 80071e8:	e026      	b.n	8007238 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80071ea:	4b61      	ldr	r3, [pc, #388]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80071ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80071f0:	f003 0302 	and.w	r3, r3, #2
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d11a      	bne.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
              frequency = LSI_VALUE;
 80071f8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80071fc:	61fb      	str	r3, [r7, #28]
            break;
 80071fe:	e016      	b.n	800722e <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007200:	4b5b      	ldr	r3, [pc, #364]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007208:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800720c:	d111      	bne.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
              frequency = HSI_VALUE;
 800720e:	4b59      	ldr	r3, [pc, #356]	; (8007374 <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>)
 8007210:	61fb      	str	r3, [r7, #28]
            break;
 8007212:	e00e      	b.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8007214:	4b56      	ldr	r3, [pc, #344]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8007216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800721a:	f003 0302 	and.w	r3, r3, #2
 800721e:	2b02      	cmp	r3, #2
 8007220:	d109      	bne.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
              frequency = LSE_VALUE;
 8007222:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007226:	61fb      	str	r3, [r7, #28]
            break;
 8007228:	e005      	b.n	8007236 <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
            break;
 800722a:	bf00      	nop
 800722c:	e09b      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800722e:	bf00      	nop
 8007230:	e099      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8007232:	bf00      	nop
 8007234:	e097      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8007236:	bf00      	nop
        break;
 8007238:	e095      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800723a:	4b4d      	ldr	r3, [pc, #308]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800723c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007240:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8007244:	60fb      	str	r3, [r7, #12]
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800724c:	d042      	beq.n	80072d4 <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007254:	d874      	bhi.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d004      	beq.n	8007266 <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007262:	d00a      	beq.n	800727a <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
            break;
 8007264:	e06c      	b.n	8007340 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007266:	4b42      	ldr	r3, [pc, #264]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800726e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007272:	d167      	bne.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
              frequency = HSE_VALUE;
 8007274:	4b40      	ldr	r3, [pc, #256]	; (8007378 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>)
 8007276:	61fb      	str	r3, [r7, #28]
            break;
 8007278:	e064      	b.n	8007344 <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800727a:	4b3d      	ldr	r3, [pc, #244]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007282:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007286:	d15f      	bne.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8007288:	4b39      	ldr	r3, [pc, #228]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007290:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007294:	d158      	bne.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8007296:	4b36      	ldr	r3, [pc, #216]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8007298:	68db      	ldr	r3, [r3, #12]
 800729a:	091b      	lsrs	r3, r3, #4
 800729c:	f003 030f 	and.w	r3, r3, #15
 80072a0:	3301      	adds	r3, #1
 80072a2:	69ba      	ldr	r2, [r7, #24]
 80072a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a8:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80072aa:	4b31      	ldr	r3, [pc, #196]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80072ac:	68db      	ldr	r3, [r3, #12]
 80072ae:	0a1b      	lsrs	r3, r3, #8
 80072b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072b4:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80072b6:	69bb      	ldr	r3, [r7, #24]
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	fb03 f202 	mul.w	r2, r3, r2
 80072be:	4b2c      	ldr	r3, [pc, #176]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80072c0:	68db      	ldr	r3, [r3, #12]
 80072c2:	0d5b      	lsrs	r3, r3, #21
 80072c4:	f003 0303 	and.w	r3, r3, #3
 80072c8:	3301      	adds	r3, #1
 80072ca:	005b      	lsls	r3, r3, #1
 80072cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80072d0:	61fb      	str	r3, [r7, #28]
            break;
 80072d2:	e039      	b.n	8007348 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 80072d4:	4b26      	ldr	r3, [pc, #152]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d035      	beq.n	800734c <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 80072e0:	f000 f9ee 	bl	80076c0 <RCCEx_PLLSAI1_GetVCOFreq>
 80072e4:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80072e6:	4b22      	ldr	r3, [pc, #136]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80072e8:	691b      	ldr	r3, [r3, #16]
 80072ea:	091b      	lsrs	r3, r3, #4
 80072ec:	f003 030f 	and.w	r3, r3, #15
 80072f0:	3301      	adds	r3, #1
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f8:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80072fa:	4b1d      	ldr	r3, [pc, #116]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	0a1b      	lsrs	r3, r3, #8
 8007300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007304:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8007306:	4b1a      	ldr	r3, [pc, #104]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8007308:	691b      	ldr	r3, [r3, #16]
 800730a:	0edb      	lsrs	r3, r3, #27
 800730c:	f003 031f 	and.w	r3, r3, #31
 8007310:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d10a      	bne.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
                if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8007318:	4b15      	ldr	r3, [pc, #84]	; (8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007320:	2b00      	cmp	r3, #0
 8007322:	d002      	beq.n	800732a <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
                  pllp = 17U;
 8007324:	2311      	movs	r3, #17
 8007326:	617b      	str	r3, [r7, #20]
 8007328:	e001      	b.n	800732e <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
                  pllp = 7U;
 800732a:	2307      	movs	r3, #7
 800732c:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	68ba      	ldr	r2, [r7, #8]
 8007332:	fb03 f202 	mul.w	r2, r3, r2
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	fbb2 f3f3 	udiv	r3, r2, r3
 800733c:	61fb      	str	r3, [r7, #28]
            break;
 800733e:	e005      	b.n	800734c <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
            break;
 8007340:	bf00      	nop
 8007342:	e010      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8007344:	bf00      	nop
 8007346:	e00e      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8007348:	bf00      	nop
 800734a:	e00c      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 800734c:	bf00      	nop
        break;
 800734e:	e00a      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8007350:	bf00      	nop
 8007352:	e008      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8007354:	bf00      	nop
 8007356:	e006      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8007358:	bf00      	nop
 800735a:	e004      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 800735c:	bf00      	nop
 800735e:	e002      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8007360:	bf00      	nop
 8007362:	e000      	b.n	8007366 <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8007364:	bf00      	nop
    }
  }

  return (frequency);
 8007366:	69fb      	ldr	r3, [r7, #28]
}
 8007368:	4618      	mov	r0, r3
 800736a:	3720      	adds	r7, #32
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}
 8007370:	40021000 	.word	0x40021000
 8007374:	00f42400 	.word	0x00f42400
 8007378:	007a1200 	.word	0x007a1200

0800737c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800737c:	b480      	push	{r7}
 800737e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007380:	4b05      	ldr	r3, [pc, #20]	; (8007398 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4a04      	ldr	r2, [pc, #16]	; (8007398 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007386:	f043 0304 	orr.w	r3, r3, #4
 800738a:	6013      	str	r3, [r2, #0]
}
 800738c:	bf00      	nop
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	40021000 	.word	0x40021000

0800739c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073a6:	2300      	movs	r3, #0
 80073a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2b03      	cmp	r3, #3
 80073b0:	d018      	beq.n	80073e4 <RCCEx_PLLSAI1_Config+0x48>
 80073b2:	2b03      	cmp	r3, #3
 80073b4:	d81f      	bhi.n	80073f6 <RCCEx_PLLSAI1_Config+0x5a>
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d002      	beq.n	80073c0 <RCCEx_PLLSAI1_Config+0x24>
 80073ba:	2b02      	cmp	r3, #2
 80073bc:	d009      	beq.n	80073d2 <RCCEx_PLLSAI1_Config+0x36>
 80073be:	e01a      	b.n	80073f6 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80073c0:	4b65      	ldr	r3, [pc, #404]	; (8007558 <RCCEx_PLLSAI1_Config+0x1bc>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f003 0302 	and.w	r3, r3, #2
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d117      	bne.n	80073fc <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073d0:	e014      	b.n	80073fc <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80073d2:	4b61      	ldr	r3, [pc, #388]	; (8007558 <RCCEx_PLLSAI1_Config+0x1bc>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d110      	bne.n	8007400 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073e2:	e00d      	b.n	8007400 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80073e4:	4b5c      	ldr	r3, [pc, #368]	; (8007558 <RCCEx_PLLSAI1_Config+0x1bc>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d109      	bne.n	8007404 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 80073f0:	2301      	movs	r3, #1
 80073f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80073f4:	e006      	b.n	8007404 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	73fb      	strb	r3, [r7, #15]
      break;
 80073fa:	e004      	b.n	8007406 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 80073fc:	bf00      	nop
 80073fe:	e002      	b.n	8007406 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8007400:	bf00      	nop
 8007402:	e000      	b.n	8007406 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8007404:	bf00      	nop
  }

  if (status == HAL_OK)
 8007406:	7bfb      	ldrb	r3, [r7, #15]
 8007408:	2b00      	cmp	r3, #0
 800740a:	f040 809f 	bne.w	800754c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800740e:	4b52      	ldr	r3, [pc, #328]	; (8007558 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a51      	ldr	r2, [pc, #324]	; (8007558 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007414:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007418:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800741a:	f7fb fd5b 	bl	8002ed4 <HAL_GetTick>
 800741e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007420:	e00f      	b.n	8007442 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007422:	f7fb fd57 	bl	8002ed4 <HAL_GetTick>
 8007426:	4602      	mov	r2, r0
 8007428:	68bb      	ldr	r3, [r7, #8]
 800742a:	1ad3      	subs	r3, r2, r3
 800742c:	2b02      	cmp	r3, #2
 800742e:	d908      	bls.n	8007442 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007430:	4b49      	ldr	r3, [pc, #292]	; (8007558 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007438:	2b00      	cmp	r3, #0
 800743a:	d009      	beq.n	8007450 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 800743c:	2303      	movs	r3, #3
 800743e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007440:	e006      	b.n	8007450 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007442:	4b45      	ldr	r3, [pc, #276]	; (8007558 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800744a:	2b00      	cmp	r3, #0
 800744c:	d1e9      	bne.n	8007422 <RCCEx_PLLSAI1_Config+0x86>
 800744e:	e000      	b.n	8007452 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8007450:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8007452:	7bfb      	ldrb	r3, [r7, #15]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d179      	bne.n	800754c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d116      	bne.n	800748c <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800745e:	4b3e      	ldr	r3, [pc, #248]	; (8007558 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007460:	691a      	ldr	r2, [r3, #16]
 8007462:	4b3e      	ldr	r3, [pc, #248]	; (800755c <RCCEx_PLLSAI1_Config+0x1c0>)
 8007464:	4013      	ands	r3, r2
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	6892      	ldr	r2, [r2, #8]
 800746a:	0211      	lsls	r1, r2, #8
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	68d2      	ldr	r2, [r2, #12]
 8007470:	06d2      	lsls	r2, r2, #27
 8007472:	4311      	orrs	r1, r2
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	6852      	ldr	r2, [r2, #4]
 8007478:	3a01      	subs	r2, #1
 800747a:	0112      	lsls	r2, r2, #4
 800747c:	4311      	orrs	r1, r2
 800747e:	687a      	ldr	r2, [r7, #4]
 8007480:	6812      	ldr	r2, [r2, #0]
 8007482:	430a      	orrs	r2, r1
 8007484:	4934      	ldr	r1, [pc, #208]	; (8007558 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007486:	4313      	orrs	r3, r2
 8007488:	610b      	str	r3, [r1, #16]
 800748a:	e033      	b.n	80074f4 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 800748c:	683b      	ldr	r3, [r7, #0]
 800748e:	2b01      	cmp	r3, #1
 8007490:	d118      	bne.n	80074c4 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007492:	4b31      	ldr	r3, [pc, #196]	; (8007558 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007494:	691a      	ldr	r2, [r3, #16]
 8007496:	4b32      	ldr	r3, [pc, #200]	; (8007560 <RCCEx_PLLSAI1_Config+0x1c4>)
 8007498:	4013      	ands	r3, r2
 800749a:	687a      	ldr	r2, [r7, #4]
 800749c:	6892      	ldr	r2, [r2, #8]
 800749e:	0211      	lsls	r1, r2, #8
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	6912      	ldr	r2, [r2, #16]
 80074a4:	0852      	lsrs	r2, r2, #1
 80074a6:	3a01      	subs	r2, #1
 80074a8:	0552      	lsls	r2, r2, #21
 80074aa:	4311      	orrs	r1, r2
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	6852      	ldr	r2, [r2, #4]
 80074b0:	3a01      	subs	r2, #1
 80074b2:	0112      	lsls	r2, r2, #4
 80074b4:	4311      	orrs	r1, r2
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	6812      	ldr	r2, [r2, #0]
 80074ba:	430a      	orrs	r2, r1
 80074bc:	4926      	ldr	r1, [pc, #152]	; (8007558 <RCCEx_PLLSAI1_Config+0x1bc>)
 80074be:	4313      	orrs	r3, r2
 80074c0:	610b      	str	r3, [r1, #16]
 80074c2:	e017      	b.n	80074f4 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80074c4:	4b24      	ldr	r3, [pc, #144]	; (8007558 <RCCEx_PLLSAI1_Config+0x1bc>)
 80074c6:	691a      	ldr	r2, [r3, #16]
 80074c8:	4b26      	ldr	r3, [pc, #152]	; (8007564 <RCCEx_PLLSAI1_Config+0x1c8>)
 80074ca:	4013      	ands	r3, r2
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	6892      	ldr	r2, [r2, #8]
 80074d0:	0211      	lsls	r1, r2, #8
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	6952      	ldr	r2, [r2, #20]
 80074d6:	0852      	lsrs	r2, r2, #1
 80074d8:	3a01      	subs	r2, #1
 80074da:	0652      	lsls	r2, r2, #25
 80074dc:	4311      	orrs	r1, r2
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	6852      	ldr	r2, [r2, #4]
 80074e2:	3a01      	subs	r2, #1
 80074e4:	0112      	lsls	r2, r2, #4
 80074e6:	4311      	orrs	r1, r2
 80074e8:	687a      	ldr	r2, [r7, #4]
 80074ea:	6812      	ldr	r2, [r2, #0]
 80074ec:	430a      	orrs	r2, r1
 80074ee:	491a      	ldr	r1, [pc, #104]	; (8007558 <RCCEx_PLLSAI1_Config+0x1bc>)
 80074f0:	4313      	orrs	r3, r2
 80074f2:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80074f4:	4b18      	ldr	r3, [pc, #96]	; (8007558 <RCCEx_PLLSAI1_Config+0x1bc>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a17      	ldr	r2, [pc, #92]	; (8007558 <RCCEx_PLLSAI1_Config+0x1bc>)
 80074fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80074fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007500:	f7fb fce8 	bl	8002ed4 <HAL_GetTick>
 8007504:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007506:	e00f      	b.n	8007528 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007508:	f7fb fce4 	bl	8002ed4 <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	2b02      	cmp	r3, #2
 8007514:	d908      	bls.n	8007528 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007516:	4b10      	ldr	r3, [pc, #64]	; (8007558 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d109      	bne.n	8007536 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8007522:	2303      	movs	r3, #3
 8007524:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8007526:	e006      	b.n	8007536 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007528:	4b0b      	ldr	r3, [pc, #44]	; (8007558 <RCCEx_PLLSAI1_Config+0x1bc>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d0e9      	beq.n	8007508 <RCCEx_PLLSAI1_Config+0x16c>
 8007534:	e000      	b.n	8007538 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8007536:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8007538:	7bfb      	ldrb	r3, [r7, #15]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d106      	bne.n	800754c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 800753e:	4b06      	ldr	r3, [pc, #24]	; (8007558 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007540:	691a      	ldr	r2, [r3, #16]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	4904      	ldr	r1, [pc, #16]	; (8007558 <RCCEx_PLLSAI1_Config+0x1bc>)
 8007548:	4313      	orrs	r3, r2
 800754a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800754c:	7bfb      	ldrb	r3, [r7, #15]
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}
 8007556:	bf00      	nop
 8007558:	40021000 	.word	0x40021000
 800755c:	07ff800c 	.word	0x07ff800c
 8007560:	ff9f800c 	.word	0xff9f800c
 8007564:	f9ff800c 	.word	0xf9ff800c

08007568 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b084      	sub	sp, #16
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007572:	2300      	movs	r3, #0
 8007574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2b03      	cmp	r3, #3
 800757c:	d018      	beq.n	80075b0 <RCCEx_PLLSAI2_Config+0x48>
 800757e:	2b03      	cmp	r3, #3
 8007580:	d81f      	bhi.n	80075c2 <RCCEx_PLLSAI2_Config+0x5a>
 8007582:	2b01      	cmp	r3, #1
 8007584:	d002      	beq.n	800758c <RCCEx_PLLSAI2_Config+0x24>
 8007586:	2b02      	cmp	r3, #2
 8007588:	d009      	beq.n	800759e <RCCEx_PLLSAI2_Config+0x36>
 800758a:	e01a      	b.n	80075c2 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800758c:	4b4a      	ldr	r3, [pc, #296]	; (80076b8 <RCCEx_PLLSAI2_Config+0x150>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f003 0302 	and.w	r3, r3, #2
 8007594:	2b00      	cmp	r3, #0
 8007596:	d117      	bne.n	80075c8 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8007598:	2301      	movs	r3, #1
 800759a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800759c:	e014      	b.n	80075c8 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800759e:	4b46      	ldr	r3, [pc, #280]	; (80076b8 <RCCEx_PLLSAI2_Config+0x150>)
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d110      	bne.n	80075cc <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 80075aa:	2301      	movs	r3, #1
 80075ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075ae:	e00d      	b.n	80075cc <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 80075b0:	4b41      	ldr	r3, [pc, #260]	; (80076b8 <RCCEx_PLLSAI2_Config+0x150>)
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d109      	bne.n	80075d0 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80075c0:	e006      	b.n	80075d0 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 80075c2:	2301      	movs	r3, #1
 80075c4:	73fb      	strb	r3, [r7, #15]
      break;
 80075c6:	e004      	b.n	80075d2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80075c8:	bf00      	nop
 80075ca:	e002      	b.n	80075d2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80075cc:	bf00      	nop
 80075ce:	e000      	b.n	80075d2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 80075d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80075d2:	7bfb      	ldrb	r3, [r7, #15]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d169      	bne.n	80076ac <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80075d8:	4b37      	ldr	r3, [pc, #220]	; (80076b8 <RCCEx_PLLSAI2_Config+0x150>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4a36      	ldr	r2, [pc, #216]	; (80076b8 <RCCEx_PLLSAI2_Config+0x150>)
 80075de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80075e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075e4:	f7fb fc76 	bl	8002ed4 <HAL_GetTick>
 80075e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80075ea:	e00f      	b.n	800760c <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80075ec:	f7fb fc72 	bl	8002ed4 <HAL_GetTick>
 80075f0:	4602      	mov	r2, r0
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	1ad3      	subs	r3, r2, r3
 80075f6:	2b02      	cmp	r3, #2
 80075f8:	d908      	bls.n	800760c <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80075fa:	4b2f      	ldr	r3, [pc, #188]	; (80076b8 <RCCEx_PLLSAI2_Config+0x150>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007602:	2b00      	cmp	r3, #0
 8007604:	d009      	beq.n	800761a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8007606:	2303      	movs	r3, #3
 8007608:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800760a:	e006      	b.n	800761a <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800760c:	4b2a      	ldr	r3, [pc, #168]	; (80076b8 <RCCEx_PLLSAI2_Config+0x150>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1e9      	bne.n	80075ec <RCCEx_PLLSAI2_Config+0x84>
 8007618:	e000      	b.n	800761c <RCCEx_PLLSAI2_Config+0xb4>
        break;
 800761a:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 800761c:	7bfb      	ldrb	r3, [r7, #15]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d144      	bne.n	80076ac <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d115      	bne.n	8007654 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007628:	4b23      	ldr	r3, [pc, #140]	; (80076b8 <RCCEx_PLLSAI2_Config+0x150>)
 800762a:	695a      	ldr	r2, [r3, #20]
 800762c:	4b23      	ldr	r3, [pc, #140]	; (80076bc <RCCEx_PLLSAI2_Config+0x154>)
 800762e:	4013      	ands	r3, r2
 8007630:	687a      	ldr	r2, [r7, #4]
 8007632:	6892      	ldr	r2, [r2, #8]
 8007634:	0211      	lsls	r1, r2, #8
 8007636:	687a      	ldr	r2, [r7, #4]
 8007638:	68d2      	ldr	r2, [r2, #12]
 800763a:	06d2      	lsls	r2, r2, #27
 800763c:	4311      	orrs	r1, r2
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	6852      	ldr	r2, [r2, #4]
 8007642:	3a01      	subs	r2, #1
 8007644:	0112      	lsls	r2, r2, #4
 8007646:	4311      	orrs	r1, r2
 8007648:	687a      	ldr	r2, [r7, #4]
 800764a:	6812      	ldr	r2, [r2, #0]
 800764c:	430a      	orrs	r2, r1
 800764e:	491a      	ldr	r1, [pc, #104]	; (80076b8 <RCCEx_PLLSAI2_Config+0x150>)
 8007650:	4313      	orrs	r3, r2
 8007652:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007654:	4b18      	ldr	r3, [pc, #96]	; (80076b8 <RCCEx_PLLSAI2_Config+0x150>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a17      	ldr	r2, [pc, #92]	; (80076b8 <RCCEx_PLLSAI2_Config+0x150>)
 800765a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800765e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007660:	f7fb fc38 	bl	8002ed4 <HAL_GetTick>
 8007664:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007666:	e00f      	b.n	8007688 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007668:	f7fb fc34 	bl	8002ed4 <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	2b02      	cmp	r3, #2
 8007674:	d908      	bls.n	8007688 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007676:	4b10      	ldr	r3, [pc, #64]	; (80076b8 <RCCEx_PLLSAI2_Config+0x150>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800767e:	2b00      	cmp	r3, #0
 8007680:	d109      	bne.n	8007696 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8007686:	e006      	b.n	8007696 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007688:	4b0b      	ldr	r3, [pc, #44]	; (80076b8 <RCCEx_PLLSAI2_Config+0x150>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007690:	2b00      	cmp	r3, #0
 8007692:	d0e9      	beq.n	8007668 <RCCEx_PLLSAI2_Config+0x100>
 8007694:	e000      	b.n	8007698 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8007696:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8007698:	7bfb      	ldrb	r3, [r7, #15]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d106      	bne.n	80076ac <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 800769e:	4b06      	ldr	r3, [pc, #24]	; (80076b8 <RCCEx_PLLSAI2_Config+0x150>)
 80076a0:	695a      	ldr	r2, [r3, #20]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	691b      	ldr	r3, [r3, #16]
 80076a6:	4904      	ldr	r1, [pc, #16]	; (80076b8 <RCCEx_PLLSAI2_Config+0x150>)
 80076a8:	4313      	orrs	r3, r2
 80076aa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80076ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop
 80076b8:	40021000 	.word	0x40021000
 80076bc:	07ff800c 	.word	0x07ff800c

080076c0 <RCCEx_PLLSAI1_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI1 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI1_GetVCOFreq(void)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 80076c6:	2300      	movs	r3, #0
 80076c8:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1SRC))
 80076ca:	4b26      	ldr	r3, [pc, #152]	; (8007764 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80076cc:	691b      	ldr	r3, [r3, #16]
 80076ce:	f003 0303 	and.w	r3, r3, #3
 80076d2:	2b03      	cmp	r3, #3
 80076d4:	d02d      	beq.n	8007732 <RCCEx_PLLSAI1_GetVCOFreq+0x72>
 80076d6:	2b03      	cmp	r3, #3
 80076d8:	d835      	bhi.n	8007746 <RCCEx_PLLSAI1_GetVCOFreq+0x86>
 80076da:	2b01      	cmp	r3, #1
 80076dc:	d002      	beq.n	80076e4 <RCCEx_PLLSAI1_GetVCOFreq+0x24>
 80076de:	2b02      	cmp	r3, #2
 80076e0:	d01d      	beq.n	800771e <RCCEx_PLLSAI1_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 80076e2:	e030      	b.n	8007746 <RCCEx_PLLSAI1_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80076e4:	4b1f      	ldr	r3, [pc, #124]	; (8007764 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80076e6:	681b      	ldr	r3, [r3, #0]
 80076e8:	f003 0302 	and.w	r3, r3, #2
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d12c      	bne.n	800774a <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80076f0:	4b1c      	ldr	r3, [pc, #112]	; (8007764 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 0308 	and.w	r3, r3, #8
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d005      	beq.n	8007708 <RCCEx_PLLSAI1_GetVCOFreq+0x48>
 80076fc:	4b19      	ldr	r3, [pc, #100]	; (8007764 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	091b      	lsrs	r3, r3, #4
 8007702:	f003 030f 	and.w	r3, r3, #15
 8007706:	e005      	b.n	8007714 <RCCEx_PLLSAI1_GetVCOFreq+0x54>
 8007708:	4b16      	ldr	r3, [pc, #88]	; (8007764 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 800770a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800770e:	0a1b      	lsrs	r3, r3, #8
 8007710:	f003 030f 	and.w	r3, r3, #15
 8007714:	4a14      	ldr	r2, [pc, #80]	; (8007768 <RCCEx_PLLSAI1_GetVCOFreq+0xa8>)
 8007716:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800771a:	607b      	str	r3, [r7, #4]
      break;
 800771c:	e015      	b.n	800774a <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800771e:	4b11      	ldr	r3, [pc, #68]	; (8007764 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800772a:	d110      	bne.n	800774e <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 800772c:	4b0f      	ldr	r3, [pc, #60]	; (800776c <RCCEx_PLLSAI1_GetVCOFreq+0xac>)
 800772e:	607b      	str	r3, [r7, #4]
      break;
 8007730:	e00d      	b.n	800774e <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8007732:	4b0c      	ldr	r3, [pc, #48]	; (8007764 <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800773a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800773e:	d108      	bne.n	8007752 <RCCEx_PLLSAI1_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 8007740:	4b0b      	ldr	r3, [pc, #44]	; (8007770 <RCCEx_PLLSAI1_GetVCOFreq+0xb0>)
 8007742:	607b      	str	r3, [r7, #4]
      break;
 8007744:	e005      	b.n	8007752 <RCCEx_PLLSAI1_GetVCOFreq+0x92>
      break;
 8007746:	bf00      	nop
 8007748:	e004      	b.n	8007754 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 800774a:	bf00      	nop
 800774c:	e002      	b.n	8007754 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 800774e:	bf00      	nop
 8007750:	e000      	b.n	8007754 <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 8007752:	bf00      	nop
  }

  return pllvco;
 8007754:	687b      	ldr	r3, [r7, #4]
}
 8007756:	4618      	mov	r0, r3
 8007758:	370c      	adds	r7, #12
 800775a:	46bd      	mov	sp, r7
 800775c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007760:	4770      	bx	lr
 8007762:	bf00      	nop
 8007764:	40021000 	.word	0x40021000
 8007768:	08023720 	.word	0x08023720
 800776c:	00f42400 	.word	0x00f42400
 8007770:	007a1200 	.word	0x007a1200

08007774 <RCCEx_PLLSAI2_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI2 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI2_GetVCOFreq(void)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 800777a:	2300      	movs	r3, #0
 800777c:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2SRC))
 800777e:	4b26      	ldr	r3, [pc, #152]	; (8007818 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8007780:	695b      	ldr	r3, [r3, #20]
 8007782:	f003 0303 	and.w	r3, r3, #3
 8007786:	2b03      	cmp	r3, #3
 8007788:	d02d      	beq.n	80077e6 <RCCEx_PLLSAI2_GetVCOFreq+0x72>
 800778a:	2b03      	cmp	r3, #3
 800778c:	d835      	bhi.n	80077fa <RCCEx_PLLSAI2_GetVCOFreq+0x86>
 800778e:	2b01      	cmp	r3, #1
 8007790:	d002      	beq.n	8007798 <RCCEx_PLLSAI2_GetVCOFreq+0x24>
 8007792:	2b02      	cmp	r3, #2
 8007794:	d01d      	beq.n	80077d2 <RCCEx_PLLSAI2_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 8007796:	e030      	b.n	80077fa <RCCEx_PLLSAI2_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8007798:	4b1f      	ldr	r3, [pc, #124]	; (8007818 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f003 0302 	and.w	r3, r3, #2
 80077a0:	2b02      	cmp	r3, #2
 80077a2:	d12c      	bne.n	80077fe <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80077a4:	4b1c      	ldr	r3, [pc, #112]	; (8007818 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0308 	and.w	r3, r3, #8
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d005      	beq.n	80077bc <RCCEx_PLLSAI2_GetVCOFreq+0x48>
 80077b0:	4b19      	ldr	r3, [pc, #100]	; (8007818 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	091b      	lsrs	r3, r3, #4
 80077b6:	f003 030f 	and.w	r3, r3, #15
 80077ba:	e005      	b.n	80077c8 <RCCEx_PLLSAI2_GetVCOFreq+0x54>
 80077bc:	4b16      	ldr	r3, [pc, #88]	; (8007818 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80077be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80077c2:	0a1b      	lsrs	r3, r3, #8
 80077c4:	f003 030f 	and.w	r3, r3, #15
 80077c8:	4a14      	ldr	r2, [pc, #80]	; (800781c <RCCEx_PLLSAI2_GetVCOFreq+0xa8>)
 80077ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80077ce:	607b      	str	r3, [r7, #4]
      break;
 80077d0:	e015      	b.n	80077fe <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80077d2:	4b11      	ldr	r3, [pc, #68]	; (8007818 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80077de:	d110      	bne.n	8007802 <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 80077e0:	4b0f      	ldr	r3, [pc, #60]	; (8007820 <RCCEx_PLLSAI2_GetVCOFreq+0xac>)
 80077e2:	607b      	str	r3, [r7, #4]
      break;
 80077e4:	e00d      	b.n	8007802 <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80077e6:	4b0c      	ldr	r3, [pc, #48]	; (8007818 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80077f2:	d108      	bne.n	8007806 <RCCEx_PLLSAI2_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 80077f4:	4b0b      	ldr	r3, [pc, #44]	; (8007824 <RCCEx_PLLSAI2_GetVCOFreq+0xb0>)
 80077f6:	607b      	str	r3, [r7, #4]
      break;
 80077f8:	e005      	b.n	8007806 <RCCEx_PLLSAI2_GetVCOFreq+0x92>
      break;
 80077fa:	bf00      	nop
 80077fc:	e004      	b.n	8007808 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 80077fe:	bf00      	nop
 8007800:	e002      	b.n	8007808 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 8007802:	bf00      	nop
 8007804:	e000      	b.n	8007808 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 8007806:	bf00      	nop
  }

  return pllvco;
 8007808:	687b      	ldr	r3, [r7, #4]
}
 800780a:	4618      	mov	r0, r3
 800780c:	370c      	adds	r7, #12
 800780e:	46bd      	mov	sp, r7
 8007810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007814:	4770      	bx	lr
 8007816:	bf00      	nop
 8007818:	40021000 	.word	0x40021000
 800781c:	08023720 	.word	0x08023720
 8007820:	00f42400 	.word	0x00f42400
 8007824:	007a1200 	.word	0x007a1200

08007828 <RCCEx_GetSAIxPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_SAI2  SAI2 peripheral clock
  * @param  InputFrequency pllvco frequency in Hz
  * @retval Frequency in Hz
  */
static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b088      	sub	sp, #32
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8007832:	2300      	movs	r3, #0
 8007834:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk, pllvco, plln, pllp;    /* no init needed */

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800783c:	d10c      	bne.n	8007858 <RCCEx_GetSAIxPeriphCLKFreq+0x30>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800783e:	4b78      	ldr	r3, [pc, #480]	; (8007a20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8007840:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007844:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8007848:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI1CLKSOURCE_PIN)
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	2b60      	cmp	r3, #96	; 0x60
 800784e:	d110      	bne.n	8007872 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8007850:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007854:	61fb      	str	r3, [r7, #28]
 8007856:	e00c      	b.n	8007872 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    }
    /* Else, PLL clock output to check below */
  }
  else /* RCC_PERIPHCLK_SAI2 */
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8007858:	4b71      	ldr	r3, [pc, #452]	; (8007a20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800785a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800785e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007862:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI2CLKSOURCE_PIN)
 8007864:	69bb      	ldr	r3, [r7, #24]
 8007866:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800786a:	d102      	bne.n	8007872 <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800786c:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007870:	61fb      	str	r3, [r7, #28]
    }
    /* Else, PLL clock output to check below */
  }

  if (frequency == 0U)
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	2b00      	cmp	r3, #0
 8007876:	f040 80cd 	bne.w	8007a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	613b      	str	r3, [r7, #16]

    if ((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800787e:	69bb      	ldr	r3, [r7, #24]
 8007880:	2b40      	cmp	r3, #64	; 0x40
 8007882:	d003      	beq.n	800788c <RCCEx_GetSAIxPeriphCLKFreq+0x64>
 8007884:	69bb      	ldr	r3, [r7, #24]
 8007886:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800788a:	d13b      	bne.n	8007904 <RCCEx_GetSAIxPeriphCLKFreq+0xdc>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 800788c:	4b64      	ldr	r3, [pc, #400]	; (8007a20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007894:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007898:	f040 80bb 	bne.w	8007a12 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 800789c:	4b60      	ldr	r3, [pc, #384]	; (8007a20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	f000 80b4 	beq.w	8007a12 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        {
          /* f(PLL Source) / PLLM */
          pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80078aa:	4b5d      	ldr	r3, [pc, #372]	; (8007a20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80078ac:	68db      	ldr	r3, [r3, #12]
 80078ae:	091b      	lsrs	r3, r3, #4
 80078b0:	f003 030f 	and.w	r3, r3, #15
 80078b4:	3301      	adds	r3, #1
 80078b6:	693a      	ldr	r2, [r7, #16]
 80078b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078bc:	613b      	str	r3, [r7, #16]
          /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80078be:	4b58      	ldr	r3, [pc, #352]	; (8007a20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	0a1b      	lsrs	r3, r3, #8
 80078c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078c8:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 80078ca:	4b55      	ldr	r3, [pc, #340]	; (8007a20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	0edb      	lsrs	r3, r3, #27
 80078d0:	f003 031f 	and.w	r3, r3, #31
 80078d4:	617b      	str	r3, [r7, #20]
          if (pllp == 0U)
 80078d6:	697b      	ldr	r3, [r7, #20]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10a      	bne.n	80078f2 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80078dc:	4b50      	ldr	r3, [pc, #320]	; (8007a20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80078de:	68db      	ldr	r3, [r3, #12]
 80078e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d002      	beq.n	80078ee <RCCEx_GetSAIxPeriphCLKFreq+0xc6>
            {
              pllp = 17U;
 80078e8:	2311      	movs	r3, #17
 80078ea:	617b      	str	r3, [r7, #20]
 80078ec:	e001      	b.n	80078f2 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
            }
            else
            {
              pllp = 7U;
 80078ee:	2307      	movs	r3, #7
 80078f0:	617b      	str	r3, [r7, #20]
            }
          }
          frequency = (pllvco * plln) / pllp;
 80078f2:	693b      	ldr	r3, [r7, #16]
 80078f4:	68fa      	ldr	r2, [r7, #12]
 80078f6:	fb03 f202 	mul.w	r2, r3, r2
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007900:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007902:	e086      	b.n	8007a12 <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        }
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	2b80      	cmp	r3, #128	; 0x80
 8007908:	d003      	beq.n	8007912 <RCCEx_GetSAIxPeriphCLKFreq+0xea>
 800790a:	69bb      	ldr	r3, [r7, #24]
 800790c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007910:	d109      	bne.n	8007926 <RCCEx_GetSAIxPeriphCLKFreq+0xfe>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007912:	4b43      	ldr	r3, [pc, #268]	; (8007a20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800791a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800791e:	d179      	bne.n	8007a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        frequency = HSI_VALUE;
 8007920:	4b40      	ldr	r3, [pc, #256]	; (8007a24 <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 8007922:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8007924:	e076      	b.n	8007a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if (srcclk == 0U) /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	2b00      	cmp	r3, #0
 800792a:	d135      	bne.n	8007998 <RCCEx_GetSAIxPeriphCLKFreq+0x170>
    {
      if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 800792c:	4b3c      	ldr	r3, [pc, #240]	; (8007a20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007934:	2b00      	cmp	r3, #0
 8007936:	d06d      	beq.n	8007a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI1 source) */
        pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8007938:	f7ff fec2 	bl	80076c0 <RCCEx_PLLSAI1_GetVCOFreq>
 800793c:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 800793e:	4b38      	ldr	r3, [pc, #224]	; (8007a20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8007940:	691b      	ldr	r3, [r3, #16]
 8007942:	091b      	lsrs	r3, r3, #4
 8007944:	f003 030f 	and.w	r3, r3, #15
 8007948:	3301      	adds	r3, #1
 800794a:	693a      	ldr	r2, [r7, #16]
 800794c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007950:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8007952:	4b33      	ldr	r3, [pc, #204]	; (8007a20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	0a1b      	lsrs	r3, r3, #8
 8007958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800795c:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 800795e:	4b30      	ldr	r3, [pc, #192]	; (8007a20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8007960:	691b      	ldr	r3, [r3, #16]
 8007962:	0edb      	lsrs	r3, r3, #27
 8007964:	f003 031f 	and.w	r3, r3, #31
 8007968:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d10a      	bne.n	8007986 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
        {
          if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8007970:	4b2b      	ldr	r3, [pc, #172]	; (8007a20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8007972:	691b      	ldr	r3, [r3, #16]
 8007974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007978:	2b00      	cmp	r3, #0
 800797a:	d002      	beq.n	8007982 <RCCEx_GetSAIxPeriphCLKFreq+0x15a>
          {
            pllp = 17U;
 800797c:	2311      	movs	r3, #17
 800797e:	617b      	str	r3, [r7, #20]
 8007980:	e001      	b.n	8007986 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
          }
          else
          {
            pllp = 7U;
 8007982:	2307      	movs	r3, #7
 8007984:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007986:	693b      	ldr	r3, [r7, #16]
 8007988:	68fa      	ldr	r2, [r7, #12]
 800798a:	fb03 f202 	mul.w	r2, r3, r2
 800798e:	697b      	ldr	r3, [r7, #20]
 8007990:	fbb2 f3f3 	udiv	r3, r2, r3
 8007994:	61fb      	str	r3, [r7, #28]
 8007996:	e03d      	b.n	8007a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	2b20      	cmp	r3, #32
 800799c:	d003      	beq.n	80079a6 <RCCEx_GetSAIxPeriphCLKFreq+0x17e>
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80079a4:	d136      	bne.n	8007a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 80079a6:	4b1e      	ldr	r3, [pc, #120]	; (8007a20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80079a8:	695b      	ldr	r3, [r3, #20]
 80079aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d030      	beq.n	8007a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI2 source) */
        pllvco = RCCEx_PLLSAI2_GetVCOFreq();
 80079b2:	f7ff fedf 	bl	8007774 <RCCEx_PLLSAI2_GetVCOFreq>
 80079b6:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80079b8:	4b19      	ldr	r3, [pc, #100]	; (8007a20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80079ba:	695b      	ldr	r3, [r3, #20]
 80079bc:	091b      	lsrs	r3, r3, #4
 80079be:	f003 030f 	and.w	r3, r3, #15
 80079c2:	3301      	adds	r3, #1
 80079c4:	693a      	ldr	r2, [r7, #16]
 80079c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80079ca:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80079cc:	4b14      	ldr	r3, [pc, #80]	; (8007a20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80079ce:	695b      	ldr	r3, [r3, #20]
 80079d0:	0a1b      	lsrs	r3, r3, #8
 80079d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079d6:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80079d8:	4b11      	ldr	r3, [pc, #68]	; (8007a20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80079da:	695b      	ldr	r3, [r3, #20]
 80079dc:	0edb      	lsrs	r3, r3, #27
 80079de:	f003 031f 	and.w	r3, r3, #31
 80079e2:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10a      	bne.n	8007a00 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80079ea:	4b0d      	ldr	r3, [pc, #52]	; (8007a20 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80079ec:	695b      	ldr	r3, [r3, #20]
 80079ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d002      	beq.n	80079fc <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 80079f6:	2311      	movs	r3, #17
 80079f8:	617b      	str	r3, [r7, #20]
 80079fa:	e001      	b.n	8007a00 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 80079fc:	2307      	movs	r3, #7
 80079fe:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	68fa      	ldr	r2, [r7, #12]
 8007a04:	fb03 f202 	mul.w	r2, r3, r2
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a0e:	61fb      	str	r3, [r7, #28]
 8007a10:	e000      	b.n	8007a14 <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8007a12:	bf00      	nop
    {
      /* No clock source, frequency default init at 0 */
    }
  }

  return frequency;
 8007a14:	69fb      	ldr	r3, [r7, #28]
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3720      	adds	r7, #32
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	40021000 	.word	0x40021000
 8007a24:	00f42400 	.word	0x00f42400

08007a28 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8007a28:	b580      	push	{r7, lr}
 8007a2a:	b08a      	sub	sp, #40	; 0x28
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8007a36:	2301      	movs	r3, #1
 8007a38:	e1da      	b.n	8007df0 <HAL_SAI_Init+0x3c8>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d10e      	bne.n	8007a62 <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a87      	ldr	r2, [pc, #540]	; (8007c68 <HAL_SAI_Init+0x240>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d107      	bne.n	8007a5e <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 8007a52:	2b01      	cmp	r3, #1
 8007a54:	d103      	bne.n	8007a5e <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d001      	beq.n	8007a62 <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8007a5e:	2301      	movs	r3, #1
 8007a60:	e1c6      	b.n	8007df0 <HAL_SAI_Init+0x3c8>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8007a68:	b2db      	uxtb	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d106      	bne.n	8007a7c <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2200      	movs	r2, #0
 8007a72:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	f7f9 fffe 	bl	8001a78 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 f9c3 	bl	8007e08 <SAI_Disable>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d001      	beq.n	8007a8c <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e1b1      	b.n	8007df0 <HAL_SAI_Init+0x3c8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2202      	movs	r2, #2
 8007a90:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	2b02      	cmp	r3, #2
 8007a9a:	d00c      	beq.n	8007ab6 <HAL_SAI_Init+0x8e>
 8007a9c:	2b02      	cmp	r3, #2
 8007a9e:	d80d      	bhi.n	8007abc <HAL_SAI_Init+0x94>
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d002      	beq.n	8007aaa <HAL_SAI_Init+0x82>
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d003      	beq.n	8007ab0 <HAL_SAI_Init+0x88>
 8007aa8:	e008      	b.n	8007abc <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007aae:	e008      	b.n	8007ac2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007ab0:	2310      	movs	r3, #16
 8007ab2:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007ab4:	e005      	b.n	8007ac2 <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007ab6:	2320      	movs	r3, #32
 8007ab8:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007aba:	e002      	b.n	8007ac2 <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 8007abc:	2300      	movs	r3, #0
 8007abe:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007ac0:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	2b03      	cmp	r3, #3
 8007ac8:	d81d      	bhi.n	8007b06 <HAL_SAI_Init+0xde>
 8007aca:	a201      	add	r2, pc, #4	; (adr r2, 8007ad0 <HAL_SAI_Init+0xa8>)
 8007acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ad0:	08007ae1 	.word	0x08007ae1
 8007ad4:	08007ae7 	.word	0x08007ae7
 8007ad8:	08007aef 	.word	0x08007aef
 8007adc:	08007af7 	.word	0x08007af7
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	61fb      	str	r3, [r7, #28]
      break;
 8007ae4:	e012      	b.n	8007b0c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8007ae6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007aea:	61fb      	str	r3, [r7, #28]
      break;
 8007aec:	e00e      	b.n	8007b0c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007aee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007af2:	61fb      	str	r3, [r7, #28]
      break;
 8007af4:	e00a      	b.n	8007b0c <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8007af6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007afa:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	f043 0301 	orr.w	r3, r3, #1
 8007b02:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 8007b04:	e002      	b.n	8007b0c <HAL_SAI_Init+0xe4>
    default :
      syncen_bits = 0;
 8007b06:	2300      	movs	r3, #0
 8007b08:	61fb      	str	r3, [r7, #28]
      break;
 8007b0a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a55      	ldr	r2, [pc, #340]	; (8007c68 <HAL_SAI_Init+0x240>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d004      	beq.n	8007b20 <HAL_SAI_Init+0xf8>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a54      	ldr	r2, [pc, #336]	; (8007c6c <HAL_SAI_Init+0x244>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d103      	bne.n	8007b28 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8007b20:	4a53      	ldr	r2, [pc, #332]	; (8007c70 <HAL_SAI_Init+0x248>)
 8007b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b24:	6013      	str	r3, [r2, #0]
 8007b26:	e002      	b.n	8007b2e <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007b28:	4a52      	ldr	r2, [pc, #328]	; (8007c74 <HAL_SAI_Init+0x24c>)
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2c:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6a1b      	ldr	r3, [r3, #32]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d07e      	beq.n	8007c34 <HAL_SAI_Init+0x20c>
  {
    uint32_t freq = 0;
 8007b36:	2300      	movs	r3, #0
 8007b38:	61bb      	str	r3, [r7, #24]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	4a4a      	ldr	r2, [pc, #296]	; (8007c68 <HAL_SAI_Init+0x240>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d004      	beq.n	8007b4e <HAL_SAI_Init+0x126>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a48      	ldr	r2, [pc, #288]	; (8007c6c <HAL_SAI_Init+0x244>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d104      	bne.n	8007b58 <HAL_SAI_Init+0x130>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007b4e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8007b52:	f7fe fc71 	bl	8006438 <HAL_RCCEx_GetPeriphCLKFreq>
 8007b56:	61b8      	str	r0, [r7, #24]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a46      	ldr	r2, [pc, #280]	; (8007c78 <HAL_SAI_Init+0x250>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d004      	beq.n	8007b6c <HAL_SAI_Init+0x144>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	4a45      	ldr	r2, [pc, #276]	; (8007c7c <HAL_SAI_Init+0x254>)
 8007b68:	4293      	cmp	r3, r2
 8007b6a:	d104      	bne.n	8007b76 <HAL_SAI_Init+0x14e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8007b6c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8007b70:	f7fe fc62 	bl	8006438 <HAL_RCCEx_GetPeriphCLKFreq>
 8007b74:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	699b      	ldr	r3, [r3, #24]
 8007b7a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007b7e:	d120      	bne.n	8007bc2 <HAL_SAI_Init+0x19a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b84:	2b04      	cmp	r3, #4
 8007b86:	d102      	bne.n	8007b8e <HAL_SAI_Init+0x166>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8007b88:	2340      	movs	r3, #64	; 0x40
 8007b8a:	613b      	str	r3, [r7, #16]
 8007b8c:	e00a      	b.n	8007ba4 <HAL_SAI_Init+0x17c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b92:	2b08      	cmp	r3, #8
 8007b94:	d103      	bne.n	8007b9e <HAL_SAI_Init+0x176>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8007b96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007b9a:	613b      	str	r3, [r7, #16]
 8007b9c:	e002      	b.n	8007ba4 <HAL_SAI_Init+0x17c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ba2:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8007ba4:	69ba      	ldr	r2, [r7, #24]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	005b      	lsls	r3, r3, #1
 8007bae:	4619      	mov	r1, r3
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a1b      	ldr	r3, [r3, #32]
 8007bb4:	693a      	ldr	r2, [r7, #16]
 8007bb6:	fb02 f303 	mul.w	r3, r2, r3
 8007bba:	fbb1 f3f3 	udiv	r3, r1, r3
 8007bbe:	617b      	str	r3, [r7, #20]
 8007bc0:	e017      	b.n	8007bf2 <HAL_SAI_Init+0x1ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007bca:	d101      	bne.n	8007bd0 <HAL_SAI_Init+0x1a8>
 8007bcc:	2302      	movs	r3, #2
 8007bce:	e000      	b.n	8007bd2 <HAL_SAI_Init+0x1aa>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8007bd4:	69ba      	ldr	r2, [r7, #24]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	005b      	lsls	r3, r3, #1
 8007bde:	4619      	mov	r1, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6a1b      	ldr	r3, [r3, #32]
 8007be4:	68fa      	ldr	r2, [r7, #12]
 8007be6:	fb02 f303 	mul.w	r3, r2, r3
 8007bea:	021b      	lsls	r3, r3, #8
 8007bec:	fbb1 f3f3 	udiv	r3, r1, r3
 8007bf0:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	4a22      	ldr	r2, [pc, #136]	; (8007c80 <HAL_SAI_Init+0x258>)
 8007bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8007bfa:	08da      	lsrs	r2, r3, #3
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8007c00:	6979      	ldr	r1, [r7, #20]
 8007c02:	4b1f      	ldr	r3, [pc, #124]	; (8007c80 <HAL_SAI_Init+0x258>)
 8007c04:	fba3 2301 	umull	r2, r3, r3, r1
 8007c08:	08da      	lsrs	r2, r3, #3
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	009b      	lsls	r3, r3, #2
 8007c0e:	4413      	add	r3, r2
 8007c10:	005b      	lsls	r3, r3, #1
 8007c12:	1aca      	subs	r2, r1, r3
 8007c14:	2a08      	cmp	r2, #8
 8007c16:	d904      	bls.n	8007c22 <HAL_SAI_Init+0x1fa>
    {
      hsai->Init.Mckdiv += 1U;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1c:	1c5a      	adds	r2, r3, #1
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c26:	2b04      	cmp	r3, #4
 8007c28:	d104      	bne.n	8007c34 <HAL_SAI_Init+0x20c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c2e:	085a      	lsrs	r2, r3, #1
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d003      	beq.n	8007c44 <HAL_SAI_Init+0x21c>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	685b      	ldr	r3, [r3, #4]
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d109      	bne.n	8007c58 <HAL_SAI_Init+0x230>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d101      	bne.n	8007c50 <HAL_SAI_Init+0x228>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	e001      	b.n	8007c54 <HAL_SAI_Init+0x22c>
 8007c50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c54:	623b      	str	r3, [r7, #32]
 8007c56:	e017      	b.n	8007c88 <HAL_SAI_Init+0x260>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c5c:	2b01      	cmp	r3, #1
 8007c5e:	d111      	bne.n	8007c84 <HAL_SAI_Init+0x25c>
 8007c60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c64:	e00f      	b.n	8007c86 <HAL_SAI_Init+0x25e>
 8007c66:	bf00      	nop
 8007c68:	40015404 	.word	0x40015404
 8007c6c:	40015424 	.word	0x40015424
 8007c70:	40015400 	.word	0x40015400
 8007c74:	40015800 	.word	0x40015800
 8007c78:	40015804 	.word	0x40015804
 8007c7c:	40015824 	.word	0x40015824
 8007c80:	cccccccd 	.word	0xcccccccd
 8007c84:	2300      	movs	r3, #0
 8007c86:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	6819      	ldr	r1, [r3, #0]
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	4b59      	ldr	r3, [pc, #356]	; (8007df8 <HAL_SAI_Init+0x3d0>)
 8007c94:	400b      	ands	r3, r1
 8007c96:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	6819      	ldr	r1, [r3, #0]
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	685a      	ldr	r2, [r3, #4]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ca6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007cac:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007cb2:	431a      	orrs	r2, r3
 8007cb4:	6a3b      	ldr	r3, [r7, #32]
 8007cb6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 8007cc0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	695b      	ldr	r3, [r3, #20]
 8007cc6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007ccc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd2:	051b      	lsls	r3, r3, #20
 8007cd4:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8007cda:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	691b      	ldr	r3, [r3, #16]
 8007ce0:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	430a      	orrs	r2, r1
 8007ce8:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	685b      	ldr	r3, [r3, #4]
 8007cf0:	687a      	ldr	r2, [r7, #4]
 8007cf2:	6812      	ldr	r2, [r2, #0]
 8007cf4:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007cf8:	f023 030f 	bic.w	r3, r3, #15
 8007cfc:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	6859      	ldr	r1, [r3, #4]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	69da      	ldr	r2, [r3, #28]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d0c:	431a      	orrs	r2, r3
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d12:	431a      	orrs	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	430a      	orrs	r2, r1
 8007d1a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	6899      	ldr	r1, [r3, #8]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	4b35      	ldr	r3, [pc, #212]	; (8007dfc <HAL_SAI_Init+0x3d4>)
 8007d28:	400b      	ands	r3, r1
 8007d2a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6899      	ldr	r1, [r3, #8]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d36:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007d3c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 8007d42:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8007d48:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d4e:	3b01      	subs	r3, #1
 8007d50:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8007d52:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	430a      	orrs	r2, r1
 8007d5a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	68d9      	ldr	r1, [r3, #12]
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681a      	ldr	r2, [r3, #0]
 8007d66:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007d6a:	400b      	ands	r3, r1
 8007d6c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	68d9      	ldr	r1, [r3, #12]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d7c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d82:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007d84:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d8a:	3b01      	subs	r3, #1
 8007d8c:	021b      	lsls	r3, r3, #8
 8007d8e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	430a      	orrs	r2, r1
 8007d96:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a18      	ldr	r2, [pc, #96]	; (8007e00 <HAL_SAI_Init+0x3d8>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d119      	bne.n	8007dd6 <HAL_SAI_Init+0x3ae>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 8007da2:	4b18      	ldr	r3, [pc, #96]	; (8007e04 <HAL_SAI_Init+0x3dc>)
 8007da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007da6:	4a17      	ldr	r2, [pc, #92]	; (8007e04 <HAL_SAI_Init+0x3dc>)
 8007da8:	f023 0301 	bic.w	r3, r3, #1
 8007dac:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007db4:	2b01      	cmp	r3, #1
 8007db6:	d10e      	bne.n	8007dd6 <HAL_SAI_Init+0x3ae>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dc0:	3b01      	subs	r3, #1
 8007dc2:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 8007dc4:	490f      	ldr	r1, [pc, #60]	; (8007e04 <HAL_SAI_Init+0x3dc>)
 8007dc6:	4313      	orrs	r3, r2
 8007dc8:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 8007dca:	4b0e      	ldr	r3, [pc, #56]	; (8007e04 <HAL_SAI_Init+0x3dc>)
 8007dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dce:	4a0d      	ldr	r2, [pc, #52]	; (8007e04 <HAL_SAI_Init+0x3dc>)
 8007dd0:	f043 0301 	orr.w	r3, r3, #1
 8007dd4:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3728      	adds	r7, #40	; 0x28
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}
 8007df8:	f005c010 	.word	0xf005c010
 8007dfc:	fff88000 	.word	0xfff88000
 8007e00:	40015404 	.word	0x40015404
 8007e04:	40015400 	.word	0x40015400

08007e08 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8007e10:	4b18      	ldr	r3, [pc, #96]	; (8007e74 <SAI_Disable+0x6c>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	4a18      	ldr	r2, [pc, #96]	; (8007e78 <SAI_Disable+0x70>)
 8007e16:	fba2 2303 	umull	r2, r3, r2, r3
 8007e1a:	0b1b      	lsrs	r3, r3, #12
 8007e1c:	009b      	lsls	r3, r3, #2
 8007e1e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007e32:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d10a      	bne.n	8007e50 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007e40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8007e4a:	2303      	movs	r3, #3
 8007e4c:	72fb      	strb	r3, [r7, #11]
      break;
 8007e4e:	e009      	b.n	8007e64 <SAI_Disable+0x5c>
    }
    count--;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	3b01      	subs	r3, #1
 8007e54:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d1e7      	bne.n	8007e34 <SAI_Disable+0x2c>

  return status;
 8007e64:	7afb      	ldrb	r3, [r7, #11]
}
 8007e66:	4618      	mov	r0, r3
 8007e68:	3714      	adds	r7, #20
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	20000004 	.word	0x20000004
 8007e78:	95cbec1b 	.word	0x95cbec1b

08007e7c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d101      	bne.n	8007e8e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e095      	b.n	8007fba <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d108      	bne.n	8007ea8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	685b      	ldr	r3, [r3, #4]
 8007e9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007e9e:	d009      	beq.n	8007eb4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	61da      	str	r2, [r3, #28]
 8007ea6:	e005      	b.n	8007eb4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d106      	bne.n	8007ed4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ece:	6878      	ldr	r0, [r7, #4]
 8007ed0:	f7f9 fc44 	bl	800175c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2202      	movs	r2, #2
 8007ed8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	681a      	ldr	r2, [r3, #0]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007eea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007ef4:	d902      	bls.n	8007efc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007ef6:	2300      	movs	r3, #0
 8007ef8:	60fb      	str	r3, [r7, #12]
 8007efa:	e002      	b.n	8007f02 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007efc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f00:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	68db      	ldr	r3, [r3, #12]
 8007f06:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8007f0a:	d007      	beq.n	8007f1c <HAL_SPI_Init+0xa0>
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	68db      	ldr	r3, [r3, #12]
 8007f10:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007f14:	d002      	beq.n	8007f1c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	2200      	movs	r2, #0
 8007f1a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007f2c:	431a      	orrs	r2, r3
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	f003 0302 	and.w	r3, r3, #2
 8007f36:	431a      	orrs	r2, r3
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	695b      	ldr	r3, [r3, #20]
 8007f3c:	f003 0301 	and.w	r3, r3, #1
 8007f40:	431a      	orrs	r2, r3
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	699b      	ldr	r3, [r3, #24]
 8007f46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f4a:	431a      	orrs	r2, r3
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	69db      	ldr	r3, [r3, #28]
 8007f50:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f54:	431a      	orrs	r2, r3
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6a1b      	ldr	r3, [r3, #32]
 8007f5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f5e:	ea42 0103 	orr.w	r1, r2, r3
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f66:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	430a      	orrs	r2, r1
 8007f70:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	699b      	ldr	r3, [r3, #24]
 8007f76:	0c1b      	lsrs	r3, r3, #16
 8007f78:	f003 0204 	and.w	r2, r3, #4
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f80:	f003 0310 	and.w	r3, r3, #16
 8007f84:	431a      	orrs	r2, r3
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f8a:	f003 0308 	and.w	r3, r3, #8
 8007f8e:	431a      	orrs	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8007f98:	ea42 0103 	orr.w	r1, r2, r3
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	430a      	orrs	r2, r1
 8007fa8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	2200      	movs	r2, #0
 8007fae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3710      	adds	r7, #16
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	60f8      	str	r0, [r7, #12]
 8007fca:	60b9      	str	r1, [r7, #8]
 8007fcc:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d101      	bne.n	8007fd8 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	e038      	b.n	800804a <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d106      	bne.n	8007ff2 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8007fec:	68f8      	ldr	r0, [r7, #12]
 8007fee:	f7f9 fd39 	bl	8001a64 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	681a      	ldr	r2, [r3, #0]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	3308      	adds	r3, #8
 8007ffa:	4619      	mov	r1, r3
 8007ffc:	4610      	mov	r0, r2
 8007ffe:	f002 f823 	bl	800a048 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	6818      	ldr	r0, [r3, #0]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	461a      	mov	r2, r3
 800800c:	68b9      	ldr	r1, [r7, #8]
 800800e:	f002 f8eb 	bl	800a1e8 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6858      	ldr	r0, [r3, #4]
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	689a      	ldr	r2, [r3, #8]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801e:	6879      	ldr	r1, [r7, #4]
 8008020:	f002 f934 	bl	800a28c <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	6892      	ldr	r2, [r2, #8]
 800802c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	68fa      	ldr	r2, [r7, #12]
 8008036:	6892      	ldr	r2, [r2, #8]
 8008038:	f041 0101 	orr.w	r1, r1, #1
 800803c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}

08008052 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008052:	b580      	push	{r7, lr}
 8008054:	b082      	sub	sp, #8
 8008056:	af00      	add	r7, sp, #0
 8008058:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d101      	bne.n	8008064 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008060:	2301      	movs	r3, #1
 8008062:	e049      	b.n	80080f8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800806a:	b2db      	uxtb	r3, r3
 800806c:	2b00      	cmp	r3, #0
 800806e:	d106      	bne.n	800807e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7f9 fbb5 	bl	80017e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2202      	movs	r2, #2
 8008082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681a      	ldr	r2, [r3, #0]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	3304      	adds	r3, #4
 800808e:	4619      	mov	r1, r3
 8008090:	4610      	mov	r0, r2
 8008092:	f000 fba3 	bl	80087dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2201      	movs	r2, #1
 80080a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2201      	movs	r2, #1
 80080aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2201      	movs	r2, #1
 80080ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2201      	movs	r2, #1
 80080c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2201      	movs	r2, #1
 80080ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2201      	movs	r2, #1
 80080da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2201      	movs	r2, #1
 80080ea:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2201      	movs	r2, #1
 80080f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80080f6:	2300      	movs	r3, #0
}
 80080f8:	4618      	mov	r0, r3
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008100:	b480      	push	{r7}
 8008102:	b085      	sub	sp, #20
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800810e:	b2db      	uxtb	r3, r3
 8008110:	2b01      	cmp	r3, #1
 8008112:	d001      	beq.n	8008118 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e04f      	b.n	80081b8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2202      	movs	r2, #2
 800811c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68da      	ldr	r2, [r3, #12]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f042 0201 	orr.w	r2, r2, #1
 800812e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a23      	ldr	r2, [pc, #140]	; (80081c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d01d      	beq.n	8008176 <HAL_TIM_Base_Start_IT+0x76>
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008142:	d018      	beq.n	8008176 <HAL_TIM_Base_Start_IT+0x76>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a1f      	ldr	r2, [pc, #124]	; (80081c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d013      	beq.n	8008176 <HAL_TIM_Base_Start_IT+0x76>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a1e      	ldr	r2, [pc, #120]	; (80081cc <HAL_TIM_Base_Start_IT+0xcc>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d00e      	beq.n	8008176 <HAL_TIM_Base_Start_IT+0x76>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a1c      	ldr	r2, [pc, #112]	; (80081d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d009      	beq.n	8008176 <HAL_TIM_Base_Start_IT+0x76>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a1b      	ldr	r2, [pc, #108]	; (80081d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d004      	beq.n	8008176 <HAL_TIM_Base_Start_IT+0x76>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	4a19      	ldr	r2, [pc, #100]	; (80081d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008172:	4293      	cmp	r3, r2
 8008174:	d115      	bne.n	80081a2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	689a      	ldr	r2, [r3, #8]
 800817c:	4b17      	ldr	r3, [pc, #92]	; (80081dc <HAL_TIM_Base_Start_IT+0xdc>)
 800817e:	4013      	ands	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	2b06      	cmp	r3, #6
 8008186:	d015      	beq.n	80081b4 <HAL_TIM_Base_Start_IT+0xb4>
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800818e:	d011      	beq.n	80081b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f042 0201 	orr.w	r2, r2, #1
 800819e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081a0:	e008      	b.n	80081b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f042 0201 	orr.w	r2, r2, #1
 80081b0:	601a      	str	r2, [r3, #0]
 80081b2:	e000      	b.n	80081b6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80081b6:	2300      	movs	r3, #0
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	3714      	adds	r7, #20
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr
 80081c4:	40012c00 	.word	0x40012c00
 80081c8:	40000400 	.word	0x40000400
 80081cc:	40000800 	.word	0x40000800
 80081d0:	40000c00 	.word	0x40000c00
 80081d4:	40013400 	.word	0x40013400
 80081d8:	40014000 	.word	0x40014000
 80081dc:	00010007 	.word	0x00010007

080081e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b082      	sub	sp, #8
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d101      	bne.n	80081f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80081ee:	2301      	movs	r3, #1
 80081f0:	e049      	b.n	8008286 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d106      	bne.n	800820c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f000 f841 	bl	800828e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2202      	movs	r2, #2
 8008210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681a      	ldr	r2, [r3, #0]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	3304      	adds	r3, #4
 800821c:	4619      	mov	r1, r3
 800821e:	4610      	mov	r0, r2
 8008220:	f000 fadc 	bl	80087dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2201      	movs	r2, #1
 8008228:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	2201      	movs	r2, #1
 8008230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2201      	movs	r2, #1
 8008238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2201      	movs	r2, #1
 8008240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2201      	movs	r2, #1
 8008248:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	2201      	movs	r2, #1
 8008250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2201      	movs	r2, #1
 8008258:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2201      	movs	r2, #1
 8008260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2201      	movs	r2, #1
 8008268:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	2201      	movs	r2, #1
 8008270:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	2201      	movs	r2, #1
 8008278:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008284:	2300      	movs	r3, #0
}
 8008286:	4618      	mov	r0, r3
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800828e:	b480      	push	{r7}
 8008290:	b083      	sub	sp, #12
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008296:	bf00      	nop
 8008298:	370c      	adds	r7, #12
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr

080082a2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b082      	sub	sp, #8
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	f003 0302 	and.w	r3, r3, #2
 80082b4:	2b02      	cmp	r3, #2
 80082b6:	d122      	bne.n	80082fe <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	f003 0302 	and.w	r3, r3, #2
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d11b      	bne.n	80082fe <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f06f 0202 	mvn.w	r2, #2
 80082ce:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	699b      	ldr	r3, [r3, #24]
 80082dc:	f003 0303 	and.w	r3, r3, #3
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d003      	beq.n	80082ec <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 fa5b 	bl	80087a0 <HAL_TIM_IC_CaptureCallback>
 80082ea:	e005      	b.n	80082f8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082ec:	6878      	ldr	r0, [r7, #4]
 80082ee:	f000 fa4d 	bl	800878c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f000 fa5e 	bl	80087b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	691b      	ldr	r3, [r3, #16]
 8008304:	f003 0304 	and.w	r3, r3, #4
 8008308:	2b04      	cmp	r3, #4
 800830a:	d122      	bne.n	8008352 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	68db      	ldr	r3, [r3, #12]
 8008312:	f003 0304 	and.w	r3, r3, #4
 8008316:	2b04      	cmp	r3, #4
 8008318:	d11b      	bne.n	8008352 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f06f 0204 	mvn.w	r2, #4
 8008322:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2202      	movs	r2, #2
 8008328:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	699b      	ldr	r3, [r3, #24]
 8008330:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008334:	2b00      	cmp	r3, #0
 8008336:	d003      	beq.n	8008340 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 fa31 	bl	80087a0 <HAL_TIM_IC_CaptureCallback>
 800833e:	e005      	b.n	800834c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fa23 	bl	800878c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fa34 	bl	80087b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	f003 0308 	and.w	r3, r3, #8
 800835c:	2b08      	cmp	r3, #8
 800835e:	d122      	bne.n	80083a6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	f003 0308 	and.w	r3, r3, #8
 800836a:	2b08      	cmp	r3, #8
 800836c:	d11b      	bne.n	80083a6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f06f 0208 	mvn.w	r2, #8
 8008376:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2204      	movs	r2, #4
 800837c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	69db      	ldr	r3, [r3, #28]
 8008384:	f003 0303 	and.w	r3, r3, #3
 8008388:	2b00      	cmp	r3, #0
 800838a:	d003      	beq.n	8008394 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 fa07 	bl	80087a0 <HAL_TIM_IC_CaptureCallback>
 8008392:	e005      	b.n	80083a0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f9f9 	bl	800878c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 fa0a 	bl	80087b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	691b      	ldr	r3, [r3, #16]
 80083ac:	f003 0310 	and.w	r3, r3, #16
 80083b0:	2b10      	cmp	r3, #16
 80083b2:	d122      	bne.n	80083fa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	68db      	ldr	r3, [r3, #12]
 80083ba:	f003 0310 	and.w	r3, r3, #16
 80083be:	2b10      	cmp	r3, #16
 80083c0:	d11b      	bne.n	80083fa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f06f 0210 	mvn.w	r2, #16
 80083ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2208      	movs	r2, #8
 80083d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	69db      	ldr	r3, [r3, #28]
 80083d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d003      	beq.n	80083e8 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f000 f9dd 	bl	80087a0 <HAL_TIM_IC_CaptureCallback>
 80083e6:	e005      	b.n	80083f4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f000 f9cf 	bl	800878c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083ee:	6878      	ldr	r0, [r7, #4]
 80083f0:	f000 f9e0 	bl	80087b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	f003 0301 	and.w	r3, r3, #1
 8008404:	2b01      	cmp	r3, #1
 8008406:	d10e      	bne.n	8008426 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	68db      	ldr	r3, [r3, #12]
 800840e:	f003 0301 	and.w	r3, r3, #1
 8008412:	2b01      	cmp	r3, #1
 8008414:	d107      	bne.n	8008426 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f06f 0201 	mvn.w	r2, #1
 800841e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008420:	6878      	ldr	r0, [r7, #4]
 8008422:	f7f8 ff3d 	bl	80012a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	691b      	ldr	r3, [r3, #16]
 800842c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008430:	2b80      	cmp	r3, #128	; 0x80
 8008432:	d10e      	bne.n	8008452 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68db      	ldr	r3, [r3, #12]
 800843a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800843e:	2b80      	cmp	r3, #128	; 0x80
 8008440:	d107      	bne.n	8008452 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800844a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f000 ff7b 	bl	8009348 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	691b      	ldr	r3, [r3, #16]
 8008458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800845c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008460:	d10e      	bne.n	8008480 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	68db      	ldr	r3, [r3, #12]
 8008468:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800846c:	2b80      	cmp	r3, #128	; 0x80
 800846e:	d107      	bne.n	8008480 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 ff6e 	bl	800935c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	691b      	ldr	r3, [r3, #16]
 8008486:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800848a:	2b40      	cmp	r3, #64	; 0x40
 800848c:	d10e      	bne.n	80084ac <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008498:	2b40      	cmp	r3, #64	; 0x40
 800849a:	d107      	bne.n	80084ac <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f000 f98e 	bl	80087c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	f003 0320 	and.w	r3, r3, #32
 80084b6:	2b20      	cmp	r3, #32
 80084b8:	d10e      	bne.n	80084d8 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	68db      	ldr	r3, [r3, #12]
 80084c0:	f003 0320 	and.w	r3, r3, #32
 80084c4:	2b20      	cmp	r3, #32
 80084c6:	d107      	bne.n	80084d8 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	f06f 0220 	mvn.w	r2, #32
 80084d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80084d2:	6878      	ldr	r0, [r7, #4]
 80084d4:	f000 ff2e 	bl	8009334 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80084d8:	bf00      	nop
 80084da:	3708      	adds	r7, #8
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084ec:	2300      	movs	r3, #0
 80084ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d101      	bne.n	80084fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80084fa:	2302      	movs	r3, #2
 80084fc:	e0ff      	b.n	80086fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	2201      	movs	r2, #1
 8008502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b14      	cmp	r3, #20
 800850a:	f200 80f0 	bhi.w	80086ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800850e:	a201      	add	r2, pc, #4	; (adr r2, 8008514 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008514:	08008569 	.word	0x08008569
 8008518:	080086ef 	.word	0x080086ef
 800851c:	080086ef 	.word	0x080086ef
 8008520:	080086ef 	.word	0x080086ef
 8008524:	080085a9 	.word	0x080085a9
 8008528:	080086ef 	.word	0x080086ef
 800852c:	080086ef 	.word	0x080086ef
 8008530:	080086ef 	.word	0x080086ef
 8008534:	080085eb 	.word	0x080085eb
 8008538:	080086ef 	.word	0x080086ef
 800853c:	080086ef 	.word	0x080086ef
 8008540:	080086ef 	.word	0x080086ef
 8008544:	0800862b 	.word	0x0800862b
 8008548:	080086ef 	.word	0x080086ef
 800854c:	080086ef 	.word	0x080086ef
 8008550:	080086ef 	.word	0x080086ef
 8008554:	0800866d 	.word	0x0800866d
 8008558:	080086ef 	.word	0x080086ef
 800855c:	080086ef 	.word	0x080086ef
 8008560:	080086ef 	.word	0x080086ef
 8008564:	080086ad 	.word	0x080086ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	68b9      	ldr	r1, [r7, #8]
 800856e:	4618      	mov	r0, r3
 8008570:	f000 f9ce 	bl	8008910 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	699a      	ldr	r2, [r3, #24]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f042 0208 	orr.w	r2, r2, #8
 8008582:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	699a      	ldr	r2, [r3, #24]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f022 0204 	bic.w	r2, r2, #4
 8008592:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	6999      	ldr	r1, [r3, #24]
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	691a      	ldr	r2, [r3, #16]
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	430a      	orrs	r2, r1
 80085a4:	619a      	str	r2, [r3, #24]
      break;
 80085a6:	e0a5      	b.n	80086f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68b9      	ldr	r1, [r7, #8]
 80085ae:	4618      	mov	r0, r3
 80085b0:	f000 fa3e 	bl	8008a30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	699a      	ldr	r2, [r3, #24]
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	699a      	ldr	r2, [r3, #24]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	6999      	ldr	r1, [r3, #24]
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	691b      	ldr	r3, [r3, #16]
 80085de:	021a      	lsls	r2, r3, #8
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	430a      	orrs	r2, r1
 80085e6:	619a      	str	r2, [r3, #24]
      break;
 80085e8:	e084      	b.n	80086f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68b9      	ldr	r1, [r7, #8]
 80085f0:	4618      	mov	r0, r3
 80085f2:	f000 faa7 	bl	8008b44 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	69da      	ldr	r2, [r3, #28]
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	f042 0208 	orr.w	r2, r2, #8
 8008604:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	69da      	ldr	r2, [r3, #28]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f022 0204 	bic.w	r2, r2, #4
 8008614:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	69d9      	ldr	r1, [r3, #28]
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	691a      	ldr	r2, [r3, #16]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	430a      	orrs	r2, r1
 8008626:	61da      	str	r2, [r3, #28]
      break;
 8008628:	e064      	b.n	80086f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	68b9      	ldr	r1, [r7, #8]
 8008630:	4618      	mov	r0, r3
 8008632:	f000 fb0f 	bl	8008c54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	69da      	ldr	r2, [r3, #28]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008644:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	69da      	ldr	r2, [r3, #28]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008654:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	69d9      	ldr	r1, [r3, #28]
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	021a      	lsls	r2, r3, #8
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	430a      	orrs	r2, r1
 8008668:	61da      	str	r2, [r3, #28]
      break;
 800866a:	e043      	b.n	80086f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68b9      	ldr	r1, [r7, #8]
 8008672:	4618      	mov	r0, r3
 8008674:	f000 fb58 	bl	8008d28 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	f042 0208 	orr.w	r2, r2, #8
 8008686:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f022 0204 	bic.w	r2, r2, #4
 8008696:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	691a      	ldr	r2, [r3, #16]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	430a      	orrs	r2, r1
 80086a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80086aa:	e023      	b.n	80086f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	68b9      	ldr	r1, [r7, #8]
 80086b2:	4618      	mov	r0, r3
 80086b4:	f000 fb9c 	bl	8008df0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	021a      	lsls	r2, r3, #8
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	430a      	orrs	r2, r1
 80086ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80086ec:	e002      	b.n	80086f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80086ee:	2301      	movs	r3, #1
 80086f0:	75fb      	strb	r3, [r7, #23]
      break;
 80086f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	2200      	movs	r2, #0
 80086f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80086fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3718      	adds	r7, #24
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop

08008708 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008718:	2b01      	cmp	r3, #1
 800871a:	d101      	bne.n	8008720 <HAL_TIM_SlaveConfigSynchro+0x18>
 800871c:	2302      	movs	r3, #2
 800871e:	e031      	b.n	8008784 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2201      	movs	r2, #1
 8008724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2202      	movs	r2, #2
 800872c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8008730:	6839      	ldr	r1, [r7, #0]
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f000 fbc2 	bl	8008ebc <TIM_SlaveTimer_SetConfig>
 8008738:	4603      	mov	r3, r0
 800873a:	2b00      	cmp	r3, #0
 800873c:	d009      	beq.n	8008752 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2201      	movs	r2, #1
 8008742:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e018      	b.n	8008784 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	68da      	ldr	r2, [r3, #12]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008760:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68da      	ldr	r2, [r3, #12]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008770:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2201      	movs	r2, #1
 8008776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2200      	movs	r2, #0
 800877e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008782:	2300      	movs	r3, #0
}
 8008784:	4618      	mov	r0, r3
 8008786:	3708      	adds	r7, #8
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087dc:	b480      	push	{r7}
 80087de:	b085      	sub	sp, #20
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a40      	ldr	r2, [pc, #256]	; (80088f0 <TIM_Base_SetConfig+0x114>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d013      	beq.n	800881c <TIM_Base_SetConfig+0x40>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087fa:	d00f      	beq.n	800881c <TIM_Base_SetConfig+0x40>
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	4a3d      	ldr	r2, [pc, #244]	; (80088f4 <TIM_Base_SetConfig+0x118>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d00b      	beq.n	800881c <TIM_Base_SetConfig+0x40>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	4a3c      	ldr	r2, [pc, #240]	; (80088f8 <TIM_Base_SetConfig+0x11c>)
 8008808:	4293      	cmp	r3, r2
 800880a:	d007      	beq.n	800881c <TIM_Base_SetConfig+0x40>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a3b      	ldr	r2, [pc, #236]	; (80088fc <TIM_Base_SetConfig+0x120>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d003      	beq.n	800881c <TIM_Base_SetConfig+0x40>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	4a3a      	ldr	r2, [pc, #232]	; (8008900 <TIM_Base_SetConfig+0x124>)
 8008818:	4293      	cmp	r3, r2
 800881a:	d108      	bne.n	800882e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008822:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	685b      	ldr	r3, [r3, #4]
 8008828:	68fa      	ldr	r2, [r7, #12]
 800882a:	4313      	orrs	r3, r2
 800882c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a2f      	ldr	r2, [pc, #188]	; (80088f0 <TIM_Base_SetConfig+0x114>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d01f      	beq.n	8008876 <TIM_Base_SetConfig+0x9a>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800883c:	d01b      	beq.n	8008876 <TIM_Base_SetConfig+0x9a>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a2c      	ldr	r2, [pc, #176]	; (80088f4 <TIM_Base_SetConfig+0x118>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d017      	beq.n	8008876 <TIM_Base_SetConfig+0x9a>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a2b      	ldr	r2, [pc, #172]	; (80088f8 <TIM_Base_SetConfig+0x11c>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d013      	beq.n	8008876 <TIM_Base_SetConfig+0x9a>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a2a      	ldr	r2, [pc, #168]	; (80088fc <TIM_Base_SetConfig+0x120>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d00f      	beq.n	8008876 <TIM_Base_SetConfig+0x9a>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4a29      	ldr	r2, [pc, #164]	; (8008900 <TIM_Base_SetConfig+0x124>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d00b      	beq.n	8008876 <TIM_Base_SetConfig+0x9a>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4a28      	ldr	r2, [pc, #160]	; (8008904 <TIM_Base_SetConfig+0x128>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d007      	beq.n	8008876 <TIM_Base_SetConfig+0x9a>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	4a27      	ldr	r2, [pc, #156]	; (8008908 <TIM_Base_SetConfig+0x12c>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d003      	beq.n	8008876 <TIM_Base_SetConfig+0x9a>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	4a26      	ldr	r2, [pc, #152]	; (800890c <TIM_Base_SetConfig+0x130>)
 8008872:	4293      	cmp	r3, r2
 8008874:	d108      	bne.n	8008888 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800887c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	68db      	ldr	r3, [r3, #12]
 8008882:	68fa      	ldr	r2, [r7, #12]
 8008884:	4313      	orrs	r3, r2
 8008886:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	4313      	orrs	r3, r2
 8008894:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68fa      	ldr	r2, [r7, #12]
 800889a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	689a      	ldr	r2, [r3, #8]
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	4a10      	ldr	r2, [pc, #64]	; (80088f0 <TIM_Base_SetConfig+0x114>)
 80088b0:	4293      	cmp	r3, r2
 80088b2:	d00f      	beq.n	80088d4 <TIM_Base_SetConfig+0xf8>
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	4a12      	ldr	r2, [pc, #72]	; (8008900 <TIM_Base_SetConfig+0x124>)
 80088b8:	4293      	cmp	r3, r2
 80088ba:	d00b      	beq.n	80088d4 <TIM_Base_SetConfig+0xf8>
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a11      	ldr	r2, [pc, #68]	; (8008904 <TIM_Base_SetConfig+0x128>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d007      	beq.n	80088d4 <TIM_Base_SetConfig+0xf8>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	4a10      	ldr	r2, [pc, #64]	; (8008908 <TIM_Base_SetConfig+0x12c>)
 80088c8:	4293      	cmp	r3, r2
 80088ca:	d003      	beq.n	80088d4 <TIM_Base_SetConfig+0xf8>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a0f      	ldr	r2, [pc, #60]	; (800890c <TIM_Base_SetConfig+0x130>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d103      	bne.n	80088dc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088d4:	683b      	ldr	r3, [r7, #0]
 80088d6:	691a      	ldr	r2, [r3, #16]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	615a      	str	r2, [r3, #20]
}
 80088e2:	bf00      	nop
 80088e4:	3714      	adds	r7, #20
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	40012c00 	.word	0x40012c00
 80088f4:	40000400 	.word	0x40000400
 80088f8:	40000800 	.word	0x40000800
 80088fc:	40000c00 	.word	0x40000c00
 8008900:	40013400 	.word	0x40013400
 8008904:	40014000 	.word	0x40014000
 8008908:	40014400 	.word	0x40014400
 800890c:	40014800 	.word	0x40014800

08008910 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008910:	b480      	push	{r7}
 8008912:	b087      	sub	sp, #28
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a1b      	ldr	r3, [r3, #32]
 800891e:	f023 0201 	bic.w	r2, r3, #1
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6a1b      	ldr	r3, [r3, #32]
 800892a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	685b      	ldr	r3, [r3, #4]
 8008930:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	699b      	ldr	r3, [r3, #24]
 8008936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800893e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f023 0303 	bic.w	r3, r3, #3
 800894a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	68fa      	ldr	r2, [r7, #12]
 8008952:	4313      	orrs	r3, r2
 8008954:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	f023 0302 	bic.w	r3, r3, #2
 800895c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	697a      	ldr	r2, [r7, #20]
 8008964:	4313      	orrs	r3, r2
 8008966:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	4a2c      	ldr	r2, [pc, #176]	; (8008a1c <TIM_OC1_SetConfig+0x10c>)
 800896c:	4293      	cmp	r3, r2
 800896e:	d00f      	beq.n	8008990 <TIM_OC1_SetConfig+0x80>
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	4a2b      	ldr	r2, [pc, #172]	; (8008a20 <TIM_OC1_SetConfig+0x110>)
 8008974:	4293      	cmp	r3, r2
 8008976:	d00b      	beq.n	8008990 <TIM_OC1_SetConfig+0x80>
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	4a2a      	ldr	r2, [pc, #168]	; (8008a24 <TIM_OC1_SetConfig+0x114>)
 800897c:	4293      	cmp	r3, r2
 800897e:	d007      	beq.n	8008990 <TIM_OC1_SetConfig+0x80>
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	4a29      	ldr	r2, [pc, #164]	; (8008a28 <TIM_OC1_SetConfig+0x118>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d003      	beq.n	8008990 <TIM_OC1_SetConfig+0x80>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	4a28      	ldr	r2, [pc, #160]	; (8008a2c <TIM_OC1_SetConfig+0x11c>)
 800898c:	4293      	cmp	r3, r2
 800898e:	d10c      	bne.n	80089aa <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008990:	697b      	ldr	r3, [r7, #20]
 8008992:	f023 0308 	bic.w	r3, r3, #8
 8008996:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	697a      	ldr	r2, [r7, #20]
 800899e:	4313      	orrs	r3, r2
 80089a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	f023 0304 	bic.w	r3, r3, #4
 80089a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	4a1b      	ldr	r2, [pc, #108]	; (8008a1c <TIM_OC1_SetConfig+0x10c>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d00f      	beq.n	80089d2 <TIM_OC1_SetConfig+0xc2>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4a1a      	ldr	r2, [pc, #104]	; (8008a20 <TIM_OC1_SetConfig+0x110>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d00b      	beq.n	80089d2 <TIM_OC1_SetConfig+0xc2>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	4a19      	ldr	r2, [pc, #100]	; (8008a24 <TIM_OC1_SetConfig+0x114>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d007      	beq.n	80089d2 <TIM_OC1_SetConfig+0xc2>
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a18      	ldr	r2, [pc, #96]	; (8008a28 <TIM_OC1_SetConfig+0x118>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d003      	beq.n	80089d2 <TIM_OC1_SetConfig+0xc2>
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	4a17      	ldr	r2, [pc, #92]	; (8008a2c <TIM_OC1_SetConfig+0x11c>)
 80089ce:	4293      	cmp	r3, r2
 80089d0:	d111      	bne.n	80089f6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80089d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80089e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80089e2:	683b      	ldr	r3, [r7, #0]
 80089e4:	695b      	ldr	r3, [r3, #20]
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	699b      	ldr	r3, [r3, #24]
 80089f0:	693a      	ldr	r2, [r7, #16]
 80089f2:	4313      	orrs	r3, r2
 80089f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	693a      	ldr	r2, [r7, #16]
 80089fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	685a      	ldr	r2, [r3, #4]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	697a      	ldr	r2, [r7, #20]
 8008a0e:	621a      	str	r2, [r3, #32]
}
 8008a10:	bf00      	nop
 8008a12:	371c      	adds	r7, #28
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr
 8008a1c:	40012c00 	.word	0x40012c00
 8008a20:	40013400 	.word	0x40013400
 8008a24:	40014000 	.word	0x40014000
 8008a28:	40014400 	.word	0x40014400
 8008a2c:	40014800 	.word	0x40014800

08008a30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b087      	sub	sp, #28
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6a1b      	ldr	r3, [r3, #32]
 8008a3e:	f023 0210 	bic.w	r2, r3, #16
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	6a1b      	ldr	r3, [r3, #32]
 8008a4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	685b      	ldr	r3, [r3, #4]
 8008a50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	699b      	ldr	r3, [r3, #24]
 8008a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008a5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008a62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	021b      	lsls	r3, r3, #8
 8008a72:	68fa      	ldr	r2, [r7, #12]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	f023 0320 	bic.w	r3, r3, #32
 8008a7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	011b      	lsls	r3, r3, #4
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a28      	ldr	r2, [pc, #160]	; (8008b30 <TIM_OC2_SetConfig+0x100>)
 8008a90:	4293      	cmp	r3, r2
 8008a92:	d003      	beq.n	8008a9c <TIM_OC2_SetConfig+0x6c>
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a27      	ldr	r2, [pc, #156]	; (8008b34 <TIM_OC2_SetConfig+0x104>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d10d      	bne.n	8008ab8 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a9c:	697b      	ldr	r3, [r7, #20]
 8008a9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	68db      	ldr	r3, [r3, #12]
 8008aa8:	011b      	lsls	r3, r3, #4
 8008aaa:	697a      	ldr	r2, [r7, #20]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ab6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	4a1d      	ldr	r2, [pc, #116]	; (8008b30 <TIM_OC2_SetConfig+0x100>)
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d00f      	beq.n	8008ae0 <TIM_OC2_SetConfig+0xb0>
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	4a1c      	ldr	r2, [pc, #112]	; (8008b34 <TIM_OC2_SetConfig+0x104>)
 8008ac4:	4293      	cmp	r3, r2
 8008ac6:	d00b      	beq.n	8008ae0 <TIM_OC2_SetConfig+0xb0>
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	4a1b      	ldr	r2, [pc, #108]	; (8008b38 <TIM_OC2_SetConfig+0x108>)
 8008acc:	4293      	cmp	r3, r2
 8008ace:	d007      	beq.n	8008ae0 <TIM_OC2_SetConfig+0xb0>
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	4a1a      	ldr	r2, [pc, #104]	; (8008b3c <TIM_OC2_SetConfig+0x10c>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d003      	beq.n	8008ae0 <TIM_OC2_SetConfig+0xb0>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	4a19      	ldr	r2, [pc, #100]	; (8008b40 <TIM_OC2_SetConfig+0x110>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d113      	bne.n	8008b08 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008ae6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008aee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	695b      	ldr	r3, [r3, #20]
 8008af4:	009b      	lsls	r3, r3, #2
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	693a      	ldr	r2, [r7, #16]
 8008b04:	4313      	orrs	r3, r2
 8008b06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	693a      	ldr	r2, [r7, #16]
 8008b0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	685a      	ldr	r2, [r3, #4]
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	697a      	ldr	r2, [r7, #20]
 8008b20:	621a      	str	r2, [r3, #32]
}
 8008b22:	bf00      	nop
 8008b24:	371c      	adds	r7, #28
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	40012c00 	.word	0x40012c00
 8008b34:	40013400 	.word	0x40013400
 8008b38:	40014000 	.word	0x40014000
 8008b3c:	40014400 	.word	0x40014400
 8008b40:	40014800 	.word	0x40014800

08008b44 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b087      	sub	sp, #28
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a1b      	ldr	r3, [r3, #32]
 8008b52:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a1b      	ldr	r3, [r3, #32]
 8008b5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	685b      	ldr	r3, [r3, #4]
 8008b64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	69db      	ldr	r3, [r3, #28]
 8008b6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008b72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f023 0303 	bic.w	r3, r3, #3
 8008b7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	68fa      	ldr	r2, [r7, #12]
 8008b86:	4313      	orrs	r3, r2
 8008b88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008b90:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	021b      	lsls	r3, r3, #8
 8008b98:	697a      	ldr	r2, [r7, #20]
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	4a27      	ldr	r2, [pc, #156]	; (8008c40 <TIM_OC3_SetConfig+0xfc>)
 8008ba2:	4293      	cmp	r3, r2
 8008ba4:	d003      	beq.n	8008bae <TIM_OC3_SetConfig+0x6a>
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	4a26      	ldr	r2, [pc, #152]	; (8008c44 <TIM_OC3_SetConfig+0x100>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d10d      	bne.n	8008bca <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008bb4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	68db      	ldr	r3, [r3, #12]
 8008bba:	021b      	lsls	r3, r3, #8
 8008bbc:	697a      	ldr	r2, [r7, #20]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	4a1c      	ldr	r2, [pc, #112]	; (8008c40 <TIM_OC3_SetConfig+0xfc>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d00f      	beq.n	8008bf2 <TIM_OC3_SetConfig+0xae>
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	4a1b      	ldr	r2, [pc, #108]	; (8008c44 <TIM_OC3_SetConfig+0x100>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d00b      	beq.n	8008bf2 <TIM_OC3_SetConfig+0xae>
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4a1a      	ldr	r2, [pc, #104]	; (8008c48 <TIM_OC3_SetConfig+0x104>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d007      	beq.n	8008bf2 <TIM_OC3_SetConfig+0xae>
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	4a19      	ldr	r2, [pc, #100]	; (8008c4c <TIM_OC3_SetConfig+0x108>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d003      	beq.n	8008bf2 <TIM_OC3_SetConfig+0xae>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	4a18      	ldr	r2, [pc, #96]	; (8008c50 <TIM_OC3_SetConfig+0x10c>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d113      	bne.n	8008c1a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008bf8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	695b      	ldr	r3, [r3, #20]
 8008c06:	011b      	lsls	r3, r3, #4
 8008c08:	693a      	ldr	r2, [r7, #16]
 8008c0a:	4313      	orrs	r3, r2
 8008c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	699b      	ldr	r3, [r3, #24]
 8008c12:	011b      	lsls	r3, r3, #4
 8008c14:	693a      	ldr	r2, [r7, #16]
 8008c16:	4313      	orrs	r3, r2
 8008c18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	693a      	ldr	r2, [r7, #16]
 8008c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	68fa      	ldr	r2, [r7, #12]
 8008c24:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c26:	683b      	ldr	r3, [r7, #0]
 8008c28:	685a      	ldr	r2, [r3, #4]
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	697a      	ldr	r2, [r7, #20]
 8008c32:	621a      	str	r2, [r3, #32]
}
 8008c34:	bf00      	nop
 8008c36:	371c      	adds	r7, #28
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	40012c00 	.word	0x40012c00
 8008c44:	40013400 	.word	0x40013400
 8008c48:	40014000 	.word	0x40014000
 8008c4c:	40014400 	.word	0x40014400
 8008c50:	40014800 	.word	0x40014800

08008c54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b087      	sub	sp, #28
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
 8008c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6a1b      	ldr	r3, [r3, #32]
 8008c6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	69db      	ldr	r3, [r3, #28]
 8008c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	021b      	lsls	r3, r3, #8
 8008c96:	68fa      	ldr	r2, [r7, #12]
 8008c98:	4313      	orrs	r3, r2
 8008c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ca2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	031b      	lsls	r3, r3, #12
 8008caa:	693a      	ldr	r2, [r7, #16]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	4a18      	ldr	r2, [pc, #96]	; (8008d14 <TIM_OC4_SetConfig+0xc0>)
 8008cb4:	4293      	cmp	r3, r2
 8008cb6:	d00f      	beq.n	8008cd8 <TIM_OC4_SetConfig+0x84>
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	4a17      	ldr	r2, [pc, #92]	; (8008d18 <TIM_OC4_SetConfig+0xc4>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d00b      	beq.n	8008cd8 <TIM_OC4_SetConfig+0x84>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	4a16      	ldr	r2, [pc, #88]	; (8008d1c <TIM_OC4_SetConfig+0xc8>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d007      	beq.n	8008cd8 <TIM_OC4_SetConfig+0x84>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	4a15      	ldr	r2, [pc, #84]	; (8008d20 <TIM_OC4_SetConfig+0xcc>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d003      	beq.n	8008cd8 <TIM_OC4_SetConfig+0x84>
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	4a14      	ldr	r2, [pc, #80]	; (8008d24 <TIM_OC4_SetConfig+0xd0>)
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	d109      	bne.n	8008cec <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008cde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	695b      	ldr	r3, [r3, #20]
 8008ce4:	019b      	lsls	r3, r3, #6
 8008ce6:	697a      	ldr	r2, [r7, #20]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	685a      	ldr	r2, [r3, #4]
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	693a      	ldr	r2, [r7, #16]
 8008d04:	621a      	str	r2, [r3, #32]
}
 8008d06:	bf00      	nop
 8008d08:	371c      	adds	r7, #28
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d10:	4770      	bx	lr
 8008d12:	bf00      	nop
 8008d14:	40012c00 	.word	0x40012c00
 8008d18:	40013400 	.word	0x40013400
 8008d1c:	40014000 	.word	0x40014000
 8008d20:	40014400 	.word	0x40014400
 8008d24:	40014800 	.word	0x40014800

08008d28 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b087      	sub	sp, #28
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
 8008d30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6a1b      	ldr	r3, [r3, #32]
 8008d36:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	685b      	ldr	r3, [r3, #4]
 8008d48:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68fa      	ldr	r2, [r7, #12]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008d6c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	041b      	lsls	r3, r3, #16
 8008d74:	693a      	ldr	r2, [r7, #16]
 8008d76:	4313      	orrs	r3, r2
 8008d78:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4a17      	ldr	r2, [pc, #92]	; (8008ddc <TIM_OC5_SetConfig+0xb4>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d00f      	beq.n	8008da2 <TIM_OC5_SetConfig+0x7a>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	4a16      	ldr	r2, [pc, #88]	; (8008de0 <TIM_OC5_SetConfig+0xb8>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d00b      	beq.n	8008da2 <TIM_OC5_SetConfig+0x7a>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	4a15      	ldr	r2, [pc, #84]	; (8008de4 <TIM_OC5_SetConfig+0xbc>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d007      	beq.n	8008da2 <TIM_OC5_SetConfig+0x7a>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	4a14      	ldr	r2, [pc, #80]	; (8008de8 <TIM_OC5_SetConfig+0xc0>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d003      	beq.n	8008da2 <TIM_OC5_SetConfig+0x7a>
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	4a13      	ldr	r2, [pc, #76]	; (8008dec <TIM_OC5_SetConfig+0xc4>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d109      	bne.n	8008db6 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008da8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	695b      	ldr	r3, [r3, #20]
 8008dae:	021b      	lsls	r3, r3, #8
 8008db0:	697a      	ldr	r2, [r7, #20]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	697a      	ldr	r2, [r7, #20]
 8008dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	68fa      	ldr	r2, [r7, #12]
 8008dc0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	685a      	ldr	r2, [r3, #4]
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	693a      	ldr	r2, [r7, #16]
 8008dce:	621a      	str	r2, [r3, #32]
}
 8008dd0:	bf00      	nop
 8008dd2:	371c      	adds	r7, #28
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr
 8008ddc:	40012c00 	.word	0x40012c00
 8008de0:	40013400 	.word	0x40013400
 8008de4:	40014000 	.word	0x40014000
 8008de8:	40014400 	.word	0x40014400
 8008dec:	40014800 	.word	0x40014800

08008df0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008df0:	b480      	push	{r7}
 8008df2:	b087      	sub	sp, #28
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
 8008df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a1b      	ldr	r3, [r3, #32]
 8008dfe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6a1b      	ldr	r3, [r3, #32]
 8008e0a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	021b      	lsls	r3, r3, #8
 8008e2a:	68fa      	ldr	r2, [r7, #12]
 8008e2c:	4313      	orrs	r3, r2
 8008e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	689b      	ldr	r3, [r3, #8]
 8008e3c:	051b      	lsls	r3, r3, #20
 8008e3e:	693a      	ldr	r2, [r7, #16]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	4a18      	ldr	r2, [pc, #96]	; (8008ea8 <TIM_OC6_SetConfig+0xb8>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d00f      	beq.n	8008e6c <TIM_OC6_SetConfig+0x7c>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4a17      	ldr	r2, [pc, #92]	; (8008eac <TIM_OC6_SetConfig+0xbc>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d00b      	beq.n	8008e6c <TIM_OC6_SetConfig+0x7c>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	4a16      	ldr	r2, [pc, #88]	; (8008eb0 <TIM_OC6_SetConfig+0xc0>)
 8008e58:	4293      	cmp	r3, r2
 8008e5a:	d007      	beq.n	8008e6c <TIM_OC6_SetConfig+0x7c>
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	4a15      	ldr	r2, [pc, #84]	; (8008eb4 <TIM_OC6_SetConfig+0xc4>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d003      	beq.n	8008e6c <TIM_OC6_SetConfig+0x7c>
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	4a14      	ldr	r2, [pc, #80]	; (8008eb8 <TIM_OC6_SetConfig+0xc8>)
 8008e68:	4293      	cmp	r3, r2
 8008e6a:	d109      	bne.n	8008e80 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008e74:	683b      	ldr	r3, [r7, #0]
 8008e76:	695b      	ldr	r3, [r3, #20]
 8008e78:	029b      	lsls	r3, r3, #10
 8008e7a:	697a      	ldr	r2, [r7, #20]
 8008e7c:	4313      	orrs	r3, r2
 8008e7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	697a      	ldr	r2, [r7, #20]
 8008e84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	68fa      	ldr	r2, [r7, #12]
 8008e8a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	685a      	ldr	r2, [r3, #4]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	693a      	ldr	r2, [r7, #16]
 8008e98:	621a      	str	r2, [r3, #32]
}
 8008e9a:	bf00      	nop
 8008e9c:	371c      	adds	r7, #28
 8008e9e:	46bd      	mov	sp, r7
 8008ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea4:	4770      	bx	lr
 8008ea6:	bf00      	nop
 8008ea8:	40012c00 	.word	0x40012c00
 8008eac:	40013400 	.word	0x40013400
 8008eb0:	40014000 	.word	0x40014000
 8008eb4:	40014400 	.word	0x40014400
 8008eb8:	40014800 	.word	0x40014800

08008ebc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8008ebc:	b580      	push	{r7, lr}
 8008ebe:	b086      	sub	sp, #24
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
 8008ec4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	689b      	ldr	r3, [r3, #8]
 8008ed0:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008ed2:	693b      	ldr	r3, [r7, #16]
 8008ed4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008ed8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008edc:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008ede:	683b      	ldr	r3, [r7, #0]
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	693a      	ldr	r2, [r7, #16]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008eee:	f023 0307 	bic.w	r3, r3, #7
 8008ef2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	693a      	ldr	r2, [r7, #16]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	693a      	ldr	r2, [r7, #16]
 8008f04:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	2b70      	cmp	r3, #112	; 0x70
 8008f0c:	d01a      	beq.n	8008f44 <TIM_SlaveTimer_SetConfig+0x88>
 8008f0e:	2b70      	cmp	r3, #112	; 0x70
 8008f10:	d860      	bhi.n	8008fd4 <TIM_SlaveTimer_SetConfig+0x118>
 8008f12:	2b60      	cmp	r3, #96	; 0x60
 8008f14:	d054      	beq.n	8008fc0 <TIM_SlaveTimer_SetConfig+0x104>
 8008f16:	2b60      	cmp	r3, #96	; 0x60
 8008f18:	d85c      	bhi.n	8008fd4 <TIM_SlaveTimer_SetConfig+0x118>
 8008f1a:	2b50      	cmp	r3, #80	; 0x50
 8008f1c:	d046      	beq.n	8008fac <TIM_SlaveTimer_SetConfig+0xf0>
 8008f1e:	2b50      	cmp	r3, #80	; 0x50
 8008f20:	d858      	bhi.n	8008fd4 <TIM_SlaveTimer_SetConfig+0x118>
 8008f22:	2b40      	cmp	r3, #64	; 0x40
 8008f24:	d019      	beq.n	8008f5a <TIM_SlaveTimer_SetConfig+0x9e>
 8008f26:	2b40      	cmp	r3, #64	; 0x40
 8008f28:	d854      	bhi.n	8008fd4 <TIM_SlaveTimer_SetConfig+0x118>
 8008f2a:	2b30      	cmp	r3, #48	; 0x30
 8008f2c:	d055      	beq.n	8008fda <TIM_SlaveTimer_SetConfig+0x11e>
 8008f2e:	2b30      	cmp	r3, #48	; 0x30
 8008f30:	d850      	bhi.n	8008fd4 <TIM_SlaveTimer_SetConfig+0x118>
 8008f32:	2b20      	cmp	r3, #32
 8008f34:	d051      	beq.n	8008fda <TIM_SlaveTimer_SetConfig+0x11e>
 8008f36:	2b20      	cmp	r3, #32
 8008f38:	d84c      	bhi.n	8008fd4 <TIM_SlaveTimer_SetConfig+0x118>
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d04d      	beq.n	8008fda <TIM_SlaveTimer_SetConfig+0x11e>
 8008f3e:	2b10      	cmp	r3, #16
 8008f40:	d04b      	beq.n	8008fda <TIM_SlaveTimer_SetConfig+0x11e>
 8008f42:	e047      	b.n	8008fd4 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6818      	ldr	r0, [r3, #0]
 8008f48:	683b      	ldr	r3, [r7, #0]
 8008f4a:	68d9      	ldr	r1, [r3, #12]
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	689a      	ldr	r2, [r3, #8]
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	691b      	ldr	r3, [r3, #16]
 8008f54:	f000 f8a6 	bl	80090a4 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8008f58:	e040      	b.n	8008fdc <TIM_SlaveTimer_SetConfig+0x120>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2b05      	cmp	r3, #5
 8008f60:	d101      	bne.n	8008f66 <TIM_SlaveTimer_SetConfig+0xaa>
      {
        return HAL_ERROR;
 8008f62:	2301      	movs	r3, #1
 8008f64:	e03b      	b.n	8008fde <TIM_SlaveTimer_SetConfig+0x122>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	6a1b      	ldr	r3, [r3, #32]
 8008f6c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	6a1a      	ldr	r2, [r3, #32]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f022 0201 	bic.w	r2, r2, #1
 8008f7c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	699b      	ldr	r3, [r3, #24]
 8008f84:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008f8c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8008f8e:	683b      	ldr	r3, [r7, #0]
 8008f90:	691b      	ldr	r3, [r3, #16]
 8008f92:	011b      	lsls	r3, r3, #4
 8008f94:	68ba      	ldr	r2, [r7, #8]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68ba      	ldr	r2, [r7, #8]
 8008fa0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	68fa      	ldr	r2, [r7, #12]
 8008fa8:	621a      	str	r2, [r3, #32]
      break;
 8008faa:	e017      	b.n	8008fdc <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6818      	ldr	r0, [r3, #0]
 8008fb0:	683b      	ldr	r3, [r7, #0]
 8008fb2:	6899      	ldr	r1, [r3, #8]
 8008fb4:	683b      	ldr	r3, [r7, #0]
 8008fb6:	691b      	ldr	r3, [r3, #16]
 8008fb8:	461a      	mov	r2, r3
 8008fba:	f000 f814 	bl	8008fe6 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008fbe:	e00d      	b.n	8008fdc <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	6818      	ldr	r0, [r3, #0]
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	6899      	ldr	r1, [r3, #8]
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	691b      	ldr	r3, [r3, #16]
 8008fcc:	461a      	mov	r2, r3
 8008fce:	f000 f839 	bl	8009044 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8008fd2:	e003      	b.n	8008fdc <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8008fd8:	e000      	b.n	8008fdc <TIM_SlaveTimer_SetConfig+0x120>
      break;
 8008fda:	bf00      	nop
  }

  return status;
 8008fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fde:	4618      	mov	r0, r3
 8008fe0:	3718      	adds	r7, #24
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}

08008fe6 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008fe6:	b480      	push	{r7}
 8008fe8:	b087      	sub	sp, #28
 8008fea:	af00      	add	r7, sp, #0
 8008fec:	60f8      	str	r0, [r7, #12]
 8008fee:	60b9      	str	r1, [r7, #8]
 8008ff0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	6a1b      	ldr	r3, [r3, #32]
 8008ff6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	6a1b      	ldr	r3, [r3, #32]
 8008ffc:	f023 0201 	bic.w	r2, r3, #1
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	699b      	ldr	r3, [r3, #24]
 8009008:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009010:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	011b      	lsls	r3, r3, #4
 8009016:	693a      	ldr	r2, [r7, #16]
 8009018:	4313      	orrs	r3, r2
 800901a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	f023 030a 	bic.w	r3, r3, #10
 8009022:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009024:	697a      	ldr	r2, [r7, #20]
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	4313      	orrs	r3, r2
 800902a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	693a      	ldr	r2, [r7, #16]
 8009030:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	697a      	ldr	r2, [r7, #20]
 8009036:	621a      	str	r2, [r3, #32]
}
 8009038:	bf00      	nop
 800903a:	371c      	adds	r7, #28
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009044:	b480      	push	{r7}
 8009046:	b087      	sub	sp, #28
 8009048:	af00      	add	r7, sp, #0
 800904a:	60f8      	str	r0, [r7, #12]
 800904c:	60b9      	str	r1, [r7, #8]
 800904e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	6a1b      	ldr	r3, [r3, #32]
 8009054:	f023 0210 	bic.w	r2, r3, #16
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	699b      	ldr	r3, [r3, #24]
 8009060:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009062:	68fb      	ldr	r3, [r7, #12]
 8009064:	6a1b      	ldr	r3, [r3, #32]
 8009066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800906e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	031b      	lsls	r3, r3, #12
 8009074:	697a      	ldr	r2, [r7, #20]
 8009076:	4313      	orrs	r3, r2
 8009078:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009080:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	011b      	lsls	r3, r3, #4
 8009086:	693a      	ldr	r2, [r7, #16]
 8009088:	4313      	orrs	r3, r2
 800908a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	697a      	ldr	r2, [r7, #20]
 8009090:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	621a      	str	r2, [r3, #32]
}
 8009098:	bf00      	nop
 800909a:	371c      	adds	r7, #28
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr

080090a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80090a4:	b480      	push	{r7}
 80090a6:	b087      	sub	sp, #28
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	60f8      	str	r0, [r7, #12]
 80090ac:	60b9      	str	r1, [r7, #8]
 80090ae:	607a      	str	r2, [r7, #4]
 80090b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	689b      	ldr	r3, [r3, #8]
 80090b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80090be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	021a      	lsls	r2, r3, #8
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	431a      	orrs	r2, r3
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	4313      	orrs	r3, r2
 80090cc:	697a      	ldr	r2, [r7, #20]
 80090ce:	4313      	orrs	r3, r2
 80090d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	697a      	ldr	r2, [r7, #20]
 80090d6:	609a      	str	r2, [r3, #8]
}
 80090d8:	bf00      	nop
 80090da:	371c      	adds	r7, #28
 80090dc:	46bd      	mov	sp, r7
 80090de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e2:	4770      	bx	lr

080090e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80090e4:	b480      	push	{r7}
 80090e6:	b085      	sub	sp, #20
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	6078      	str	r0, [r7, #4]
 80090ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80090f4:	2b01      	cmp	r3, #1
 80090f6:	d101      	bne.n	80090fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80090f8:	2302      	movs	r3, #2
 80090fa:	e068      	b.n	80091ce <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2202      	movs	r2, #2
 8009108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	689b      	ldr	r3, [r3, #8]
 800911a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a2e      	ldr	r2, [pc, #184]	; (80091dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d004      	beq.n	8009130 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a2d      	ldr	r2, [pc, #180]	; (80091e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d108      	bne.n	8009142 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009136:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	4313      	orrs	r3, r2
 8009140:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009148:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	68fa      	ldr	r2, [r7, #12]
 8009150:	4313      	orrs	r3, r2
 8009152:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4a1e      	ldr	r2, [pc, #120]	; (80091dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d01d      	beq.n	80091a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800916e:	d018      	beq.n	80091a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	4a1b      	ldr	r2, [pc, #108]	; (80091e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009176:	4293      	cmp	r3, r2
 8009178:	d013      	beq.n	80091a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	4a1a      	ldr	r2, [pc, #104]	; (80091e8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009180:	4293      	cmp	r3, r2
 8009182:	d00e      	beq.n	80091a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a18      	ldr	r2, [pc, #96]	; (80091ec <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800918a:	4293      	cmp	r3, r2
 800918c:	d009      	beq.n	80091a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	4a13      	ldr	r2, [pc, #76]	; (80091e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d004      	beq.n	80091a2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a14      	ldr	r2, [pc, #80]	; (80091f0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d10c      	bne.n	80091bc <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80091a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	689b      	ldr	r3, [r3, #8]
 80091ae:	68ba      	ldr	r2, [r7, #8]
 80091b0:	4313      	orrs	r3, r2
 80091b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	68ba      	ldr	r2, [r7, #8]
 80091ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80091cc:	2300      	movs	r3, #0
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3714      	adds	r7, #20
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	40012c00 	.word	0x40012c00
 80091e0:	40013400 	.word	0x40013400
 80091e4:	40000400 	.word	0x40000400
 80091e8:	40000800 	.word	0x40000800
 80091ec:	40000c00 	.word	0x40000c00
 80091f0:	40014000 	.word	0x40014000

080091f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b085      	sub	sp, #20
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
 80091fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80091fe:	2300      	movs	r3, #0
 8009200:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009208:	2b01      	cmp	r3, #1
 800920a:	d101      	bne.n	8009210 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800920c:	2302      	movs	r3, #2
 800920e:	e087      	b.n	8009320 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2201      	movs	r2, #1
 8009214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	68db      	ldr	r3, [r3, #12]
 8009222:	4313      	orrs	r3, r2
 8009224:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800922c:	683b      	ldr	r3, [r7, #0]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	4313      	orrs	r3, r2
 8009232:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800923a:	683b      	ldr	r3, [r7, #0]
 800923c:	685b      	ldr	r3, [r3, #4]
 800923e:	4313      	orrs	r3, r2
 8009240:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009248:	683b      	ldr	r3, [r7, #0]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	4313      	orrs	r3, r2
 800924e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	691b      	ldr	r3, [r3, #16]
 800925a:	4313      	orrs	r3, r2
 800925c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	695b      	ldr	r3, [r3, #20]
 8009268:	4313      	orrs	r3, r2
 800926a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009276:	4313      	orrs	r3, r2
 8009278:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	699b      	ldr	r3, [r3, #24]
 8009284:	041b      	lsls	r3, r3, #16
 8009286:	4313      	orrs	r3, r2
 8009288:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a27      	ldr	r2, [pc, #156]	; (800932c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d004      	beq.n	800929e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a25      	ldr	r2, [pc, #148]	; (8009330 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d106      	bne.n	80092ac <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80092a4:	683b      	ldr	r3, [r7, #0]
 80092a6:	69db      	ldr	r3, [r3, #28]
 80092a8:	4313      	orrs	r3, r2
 80092aa:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a1e      	ldr	r2, [pc, #120]	; (800932c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d004      	beq.n	80092c0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a1d      	ldr	r2, [pc, #116]	; (8009330 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d126      	bne.n	800930e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80092c6:	683b      	ldr	r3, [r7, #0]
 80092c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092ca:	051b      	lsls	r3, r3, #20
 80092cc:	4313      	orrs	r3, r2
 80092ce:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80092d6:	683b      	ldr	r3, [r7, #0]
 80092d8:	6a1b      	ldr	r3, [r3, #32]
 80092da:	4313      	orrs	r3, r2
 80092dc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092e8:	4313      	orrs	r3, r2
 80092ea:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a0e      	ldr	r2, [pc, #56]	; (800932c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d004      	beq.n	8009300 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a0d      	ldr	r2, [pc, #52]	; (8009330 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d106      	bne.n	800930e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930a:	4313      	orrs	r3, r2
 800930c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	68fa      	ldr	r2, [r7, #12]
 8009314:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2200      	movs	r2, #0
 800931a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800931e:	2300      	movs	r3, #0
}
 8009320:	4618      	mov	r0, r3
 8009322:	3714      	adds	r7, #20
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr
 800932c:	40012c00 	.word	0x40012c00
 8009330:	40013400 	.word	0x40013400

08009334 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009334:	b480      	push	{r7}
 8009336:	b083      	sub	sp, #12
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr

08009348 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009348:	b480      	push	{r7}
 800934a:	b083      	sub	sp, #12
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009350:	bf00      	nop
 8009352:	370c      	adds	r7, #12
 8009354:	46bd      	mov	sp, r7
 8009356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935a:	4770      	bx	lr

0800935c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800935c:	b480      	push	{r7}
 800935e:	b083      	sub	sp, #12
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009364:	bf00      	nop
 8009366:	370c      	adds	r7, #12
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr

08009370 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009370:	b580      	push	{r7, lr}
 8009372:	b082      	sub	sp, #8
 8009374:	af00      	add	r7, sp, #0
 8009376:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d101      	bne.n	8009382 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	e042      	b.n	8009408 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009388:	2b00      	cmp	r3, #0
 800938a:	d106      	bne.n	800939a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2200      	movs	r2, #0
 8009390:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009394:	6878      	ldr	r0, [r7, #4]
 8009396:	f7f8 f881 	bl	800149c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	2224      	movs	r2, #36	; 0x24
 800939e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	681a      	ldr	r2, [r3, #0]
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	f022 0201 	bic.w	r2, r2, #1
 80093b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80093b2:	6878      	ldr	r0, [r7, #4]
 80093b4:	f000 f82c 	bl	8009410 <UART_SetConfig>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b01      	cmp	r3, #1
 80093bc:	d101      	bne.n	80093c2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80093be:	2301      	movs	r3, #1
 80093c0:	e022      	b.n	8009408 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d002      	beq.n	80093d0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f000 fb20 	bl	8009a10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	685a      	ldr	r2, [r3, #4]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80093de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	689a      	ldr	r2, [r3, #8]
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80093ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	681a      	ldr	r2, [r3, #0]
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f042 0201 	orr.w	r2, r2, #1
 80093fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f000 fba7 	bl	8009b54 <UART_CheckIdleState>
 8009406:	4603      	mov	r3, r0
}
 8009408:	4618      	mov	r0, r3
 800940a:	3708      	adds	r7, #8
 800940c:	46bd      	mov	sp, r7
 800940e:	bd80      	pop	{r7, pc}

08009410 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009414:	b08c      	sub	sp, #48	; 0x30
 8009416:	af00      	add	r7, sp, #0
 8009418:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800941a:	2300      	movs	r3, #0
 800941c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	689a      	ldr	r2, [r3, #8]
 8009424:	697b      	ldr	r3, [r7, #20]
 8009426:	691b      	ldr	r3, [r3, #16]
 8009428:	431a      	orrs	r2, r3
 800942a:	697b      	ldr	r3, [r7, #20]
 800942c:	695b      	ldr	r3, [r3, #20]
 800942e:	431a      	orrs	r2, r3
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	69db      	ldr	r3, [r3, #28]
 8009434:	4313      	orrs	r3, r2
 8009436:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009438:	697b      	ldr	r3, [r7, #20]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681a      	ldr	r2, [r3, #0]
 800943e:	4baa      	ldr	r3, [pc, #680]	; (80096e8 <UART_SetConfig+0x2d8>)
 8009440:	4013      	ands	r3, r2
 8009442:	697a      	ldr	r2, [r7, #20]
 8009444:	6812      	ldr	r2, [r2, #0]
 8009446:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009448:	430b      	orrs	r3, r1
 800944a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800944c:	697b      	ldr	r3, [r7, #20]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009456:	697b      	ldr	r3, [r7, #20]
 8009458:	68da      	ldr	r2, [r3, #12]
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	430a      	orrs	r2, r1
 8009460:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	699b      	ldr	r3, [r3, #24]
 8009466:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	4a9f      	ldr	r2, [pc, #636]	; (80096ec <UART_SetConfig+0x2dc>)
 800946e:	4293      	cmp	r3, r2
 8009470:	d004      	beq.n	800947c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	6a1b      	ldr	r3, [r3, #32]
 8009476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009478:	4313      	orrs	r3, r2
 800947a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	689b      	ldr	r3, [r3, #8]
 8009482:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8009486:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800948a:	697a      	ldr	r2, [r7, #20]
 800948c:	6812      	ldr	r2, [r2, #0]
 800948e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009490:	430b      	orrs	r3, r1
 8009492:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009494:	697b      	ldr	r3, [r7, #20]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800949a:	f023 010f 	bic.w	r1, r3, #15
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	430a      	orrs	r2, r1
 80094a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80094aa:	697b      	ldr	r3, [r7, #20]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	4a90      	ldr	r2, [pc, #576]	; (80096f0 <UART_SetConfig+0x2e0>)
 80094b0:	4293      	cmp	r3, r2
 80094b2:	d125      	bne.n	8009500 <UART_SetConfig+0xf0>
 80094b4:	4b8f      	ldr	r3, [pc, #572]	; (80096f4 <UART_SetConfig+0x2e4>)
 80094b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ba:	f003 0303 	and.w	r3, r3, #3
 80094be:	2b03      	cmp	r3, #3
 80094c0:	d81a      	bhi.n	80094f8 <UART_SetConfig+0xe8>
 80094c2:	a201      	add	r2, pc, #4	; (adr r2, 80094c8 <UART_SetConfig+0xb8>)
 80094c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094c8:	080094d9 	.word	0x080094d9
 80094cc:	080094e9 	.word	0x080094e9
 80094d0:	080094e1 	.word	0x080094e1
 80094d4:	080094f1 	.word	0x080094f1
 80094d8:	2301      	movs	r3, #1
 80094da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094de:	e116      	b.n	800970e <UART_SetConfig+0x2fe>
 80094e0:	2302      	movs	r3, #2
 80094e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094e6:	e112      	b.n	800970e <UART_SetConfig+0x2fe>
 80094e8:	2304      	movs	r3, #4
 80094ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094ee:	e10e      	b.n	800970e <UART_SetConfig+0x2fe>
 80094f0:	2308      	movs	r3, #8
 80094f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094f6:	e10a      	b.n	800970e <UART_SetConfig+0x2fe>
 80094f8:	2310      	movs	r3, #16
 80094fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80094fe:	e106      	b.n	800970e <UART_SetConfig+0x2fe>
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a7c      	ldr	r2, [pc, #496]	; (80096f8 <UART_SetConfig+0x2e8>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d138      	bne.n	800957c <UART_SetConfig+0x16c>
 800950a:	4b7a      	ldr	r3, [pc, #488]	; (80096f4 <UART_SetConfig+0x2e4>)
 800950c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009510:	f003 030c 	and.w	r3, r3, #12
 8009514:	2b0c      	cmp	r3, #12
 8009516:	d82d      	bhi.n	8009574 <UART_SetConfig+0x164>
 8009518:	a201      	add	r2, pc, #4	; (adr r2, 8009520 <UART_SetConfig+0x110>)
 800951a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800951e:	bf00      	nop
 8009520:	08009555 	.word	0x08009555
 8009524:	08009575 	.word	0x08009575
 8009528:	08009575 	.word	0x08009575
 800952c:	08009575 	.word	0x08009575
 8009530:	08009565 	.word	0x08009565
 8009534:	08009575 	.word	0x08009575
 8009538:	08009575 	.word	0x08009575
 800953c:	08009575 	.word	0x08009575
 8009540:	0800955d 	.word	0x0800955d
 8009544:	08009575 	.word	0x08009575
 8009548:	08009575 	.word	0x08009575
 800954c:	08009575 	.word	0x08009575
 8009550:	0800956d 	.word	0x0800956d
 8009554:	2300      	movs	r3, #0
 8009556:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800955a:	e0d8      	b.n	800970e <UART_SetConfig+0x2fe>
 800955c:	2302      	movs	r3, #2
 800955e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009562:	e0d4      	b.n	800970e <UART_SetConfig+0x2fe>
 8009564:	2304      	movs	r3, #4
 8009566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800956a:	e0d0      	b.n	800970e <UART_SetConfig+0x2fe>
 800956c:	2308      	movs	r3, #8
 800956e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009572:	e0cc      	b.n	800970e <UART_SetConfig+0x2fe>
 8009574:	2310      	movs	r3, #16
 8009576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800957a:	e0c8      	b.n	800970e <UART_SetConfig+0x2fe>
 800957c:	697b      	ldr	r3, [r7, #20]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a5e      	ldr	r2, [pc, #376]	; (80096fc <UART_SetConfig+0x2ec>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d125      	bne.n	80095d2 <UART_SetConfig+0x1c2>
 8009586:	4b5b      	ldr	r3, [pc, #364]	; (80096f4 <UART_SetConfig+0x2e4>)
 8009588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800958c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009590:	2b30      	cmp	r3, #48	; 0x30
 8009592:	d016      	beq.n	80095c2 <UART_SetConfig+0x1b2>
 8009594:	2b30      	cmp	r3, #48	; 0x30
 8009596:	d818      	bhi.n	80095ca <UART_SetConfig+0x1ba>
 8009598:	2b20      	cmp	r3, #32
 800959a:	d00a      	beq.n	80095b2 <UART_SetConfig+0x1a2>
 800959c:	2b20      	cmp	r3, #32
 800959e:	d814      	bhi.n	80095ca <UART_SetConfig+0x1ba>
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d002      	beq.n	80095aa <UART_SetConfig+0x19a>
 80095a4:	2b10      	cmp	r3, #16
 80095a6:	d008      	beq.n	80095ba <UART_SetConfig+0x1aa>
 80095a8:	e00f      	b.n	80095ca <UART_SetConfig+0x1ba>
 80095aa:	2300      	movs	r3, #0
 80095ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095b0:	e0ad      	b.n	800970e <UART_SetConfig+0x2fe>
 80095b2:	2302      	movs	r3, #2
 80095b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095b8:	e0a9      	b.n	800970e <UART_SetConfig+0x2fe>
 80095ba:	2304      	movs	r3, #4
 80095bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095c0:	e0a5      	b.n	800970e <UART_SetConfig+0x2fe>
 80095c2:	2308      	movs	r3, #8
 80095c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095c8:	e0a1      	b.n	800970e <UART_SetConfig+0x2fe>
 80095ca:	2310      	movs	r3, #16
 80095cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80095d0:	e09d      	b.n	800970e <UART_SetConfig+0x2fe>
 80095d2:	697b      	ldr	r3, [r7, #20]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	4a4a      	ldr	r2, [pc, #296]	; (8009700 <UART_SetConfig+0x2f0>)
 80095d8:	4293      	cmp	r3, r2
 80095da:	d125      	bne.n	8009628 <UART_SetConfig+0x218>
 80095dc:	4b45      	ldr	r3, [pc, #276]	; (80096f4 <UART_SetConfig+0x2e4>)
 80095de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80095e6:	2bc0      	cmp	r3, #192	; 0xc0
 80095e8:	d016      	beq.n	8009618 <UART_SetConfig+0x208>
 80095ea:	2bc0      	cmp	r3, #192	; 0xc0
 80095ec:	d818      	bhi.n	8009620 <UART_SetConfig+0x210>
 80095ee:	2b80      	cmp	r3, #128	; 0x80
 80095f0:	d00a      	beq.n	8009608 <UART_SetConfig+0x1f8>
 80095f2:	2b80      	cmp	r3, #128	; 0x80
 80095f4:	d814      	bhi.n	8009620 <UART_SetConfig+0x210>
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d002      	beq.n	8009600 <UART_SetConfig+0x1f0>
 80095fa:	2b40      	cmp	r3, #64	; 0x40
 80095fc:	d008      	beq.n	8009610 <UART_SetConfig+0x200>
 80095fe:	e00f      	b.n	8009620 <UART_SetConfig+0x210>
 8009600:	2300      	movs	r3, #0
 8009602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009606:	e082      	b.n	800970e <UART_SetConfig+0x2fe>
 8009608:	2302      	movs	r3, #2
 800960a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800960e:	e07e      	b.n	800970e <UART_SetConfig+0x2fe>
 8009610:	2304      	movs	r3, #4
 8009612:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009616:	e07a      	b.n	800970e <UART_SetConfig+0x2fe>
 8009618:	2308      	movs	r3, #8
 800961a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800961e:	e076      	b.n	800970e <UART_SetConfig+0x2fe>
 8009620:	2310      	movs	r3, #16
 8009622:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009626:	e072      	b.n	800970e <UART_SetConfig+0x2fe>
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a35      	ldr	r2, [pc, #212]	; (8009704 <UART_SetConfig+0x2f4>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d12a      	bne.n	8009688 <UART_SetConfig+0x278>
 8009632:	4b30      	ldr	r3, [pc, #192]	; (80096f4 <UART_SetConfig+0x2e4>)
 8009634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009638:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800963c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009640:	d01a      	beq.n	8009678 <UART_SetConfig+0x268>
 8009642:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009646:	d81b      	bhi.n	8009680 <UART_SetConfig+0x270>
 8009648:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800964c:	d00c      	beq.n	8009668 <UART_SetConfig+0x258>
 800964e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009652:	d815      	bhi.n	8009680 <UART_SetConfig+0x270>
 8009654:	2b00      	cmp	r3, #0
 8009656:	d003      	beq.n	8009660 <UART_SetConfig+0x250>
 8009658:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800965c:	d008      	beq.n	8009670 <UART_SetConfig+0x260>
 800965e:	e00f      	b.n	8009680 <UART_SetConfig+0x270>
 8009660:	2300      	movs	r3, #0
 8009662:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009666:	e052      	b.n	800970e <UART_SetConfig+0x2fe>
 8009668:	2302      	movs	r3, #2
 800966a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800966e:	e04e      	b.n	800970e <UART_SetConfig+0x2fe>
 8009670:	2304      	movs	r3, #4
 8009672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009676:	e04a      	b.n	800970e <UART_SetConfig+0x2fe>
 8009678:	2308      	movs	r3, #8
 800967a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800967e:	e046      	b.n	800970e <UART_SetConfig+0x2fe>
 8009680:	2310      	movs	r3, #16
 8009682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8009686:	e042      	b.n	800970e <UART_SetConfig+0x2fe>
 8009688:	697b      	ldr	r3, [r7, #20]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a17      	ldr	r2, [pc, #92]	; (80096ec <UART_SetConfig+0x2dc>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d13a      	bne.n	8009708 <UART_SetConfig+0x2f8>
 8009692:	4b18      	ldr	r3, [pc, #96]	; (80096f4 <UART_SetConfig+0x2e4>)
 8009694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009698:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800969c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80096a0:	d01a      	beq.n	80096d8 <UART_SetConfig+0x2c8>
 80096a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80096a6:	d81b      	bhi.n	80096e0 <UART_SetConfig+0x2d0>
 80096a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096ac:	d00c      	beq.n	80096c8 <UART_SetConfig+0x2b8>
 80096ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80096b2:	d815      	bhi.n	80096e0 <UART_SetConfig+0x2d0>
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d003      	beq.n	80096c0 <UART_SetConfig+0x2b0>
 80096b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80096bc:	d008      	beq.n	80096d0 <UART_SetConfig+0x2c0>
 80096be:	e00f      	b.n	80096e0 <UART_SetConfig+0x2d0>
 80096c0:	2300      	movs	r3, #0
 80096c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096c6:	e022      	b.n	800970e <UART_SetConfig+0x2fe>
 80096c8:	2302      	movs	r3, #2
 80096ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096ce:	e01e      	b.n	800970e <UART_SetConfig+0x2fe>
 80096d0:	2304      	movs	r3, #4
 80096d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096d6:	e01a      	b.n	800970e <UART_SetConfig+0x2fe>
 80096d8:	2308      	movs	r3, #8
 80096da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096de:	e016      	b.n	800970e <UART_SetConfig+0x2fe>
 80096e0:	2310      	movs	r3, #16
 80096e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80096e6:	e012      	b.n	800970e <UART_SetConfig+0x2fe>
 80096e8:	cfff69f3 	.word	0xcfff69f3
 80096ec:	40008000 	.word	0x40008000
 80096f0:	40013800 	.word	0x40013800
 80096f4:	40021000 	.word	0x40021000
 80096f8:	40004400 	.word	0x40004400
 80096fc:	40004800 	.word	0x40004800
 8009700:	40004c00 	.word	0x40004c00
 8009704:	40005000 	.word	0x40005000
 8009708:	2310      	movs	r3, #16
 800970a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4ab0      	ldr	r2, [pc, #704]	; (80099d4 <UART_SetConfig+0x5c4>)
 8009714:	4293      	cmp	r3, r2
 8009716:	f040 809b 	bne.w	8009850 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800971a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800971e:	2b08      	cmp	r3, #8
 8009720:	d827      	bhi.n	8009772 <UART_SetConfig+0x362>
 8009722:	a201      	add	r2, pc, #4	; (adr r2, 8009728 <UART_SetConfig+0x318>)
 8009724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009728:	0800974d 	.word	0x0800974d
 800972c:	08009755 	.word	0x08009755
 8009730:	0800975d 	.word	0x0800975d
 8009734:	08009773 	.word	0x08009773
 8009738:	08009763 	.word	0x08009763
 800973c:	08009773 	.word	0x08009773
 8009740:	08009773 	.word	0x08009773
 8009744:	08009773 	.word	0x08009773
 8009748:	0800976b 	.word	0x0800976b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800974c:	f7fc f9c4 	bl	8005ad8 <HAL_RCC_GetPCLK1Freq>
 8009750:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009752:	e014      	b.n	800977e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009754:	f7fc f9d4 	bl	8005b00 <HAL_RCC_GetPCLK2Freq>
 8009758:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800975a:	e010      	b.n	800977e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800975c:	4b9e      	ldr	r3, [pc, #632]	; (80099d8 <UART_SetConfig+0x5c8>)
 800975e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009760:	e00d      	b.n	800977e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009762:	f7fc f907 	bl	8005974 <HAL_RCC_GetSysClockFreq>
 8009766:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009768:	e009      	b.n	800977e <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800976a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800976e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009770:	e005      	b.n	800977e <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 8009772:	2300      	movs	r3, #0
 8009774:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009776:	2301      	movs	r3, #1
 8009778:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800977c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800977e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009780:	2b00      	cmp	r3, #0
 8009782:	f000 8130 	beq.w	80099e6 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800978a:	4a94      	ldr	r2, [pc, #592]	; (80099dc <UART_SetConfig+0x5cc>)
 800978c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009790:	461a      	mov	r2, r3
 8009792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009794:	fbb3 f3f2 	udiv	r3, r3, r2
 8009798:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	685a      	ldr	r2, [r3, #4]
 800979e:	4613      	mov	r3, r2
 80097a0:	005b      	lsls	r3, r3, #1
 80097a2:	4413      	add	r3, r2
 80097a4:	69ba      	ldr	r2, [r7, #24]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d305      	bcc.n	80097b6 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80097aa:	697b      	ldr	r3, [r7, #20]
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80097b0:	69ba      	ldr	r2, [r7, #24]
 80097b2:	429a      	cmp	r2, r3
 80097b4:	d903      	bls.n	80097be <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 80097b6:	2301      	movs	r3, #1
 80097b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80097bc:	e113      	b.n	80099e6 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c0:	2200      	movs	r2, #0
 80097c2:	60bb      	str	r3, [r7, #8]
 80097c4:	60fa      	str	r2, [r7, #12]
 80097c6:	697b      	ldr	r3, [r7, #20]
 80097c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097ca:	4a84      	ldr	r2, [pc, #528]	; (80099dc <UART_SetConfig+0x5cc>)
 80097cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097d0:	b29b      	uxth	r3, r3
 80097d2:	2200      	movs	r2, #0
 80097d4:	603b      	str	r3, [r7, #0]
 80097d6:	607a      	str	r2, [r7, #4]
 80097d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80097e0:	f7f6 fd2e 	bl	8000240 <__aeabi_uldivmod>
 80097e4:	4602      	mov	r2, r0
 80097e6:	460b      	mov	r3, r1
 80097e8:	4610      	mov	r0, r2
 80097ea:	4619      	mov	r1, r3
 80097ec:	f04f 0200 	mov.w	r2, #0
 80097f0:	f04f 0300 	mov.w	r3, #0
 80097f4:	020b      	lsls	r3, r1, #8
 80097f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80097fa:	0202      	lsls	r2, r0, #8
 80097fc:	6979      	ldr	r1, [r7, #20]
 80097fe:	6849      	ldr	r1, [r1, #4]
 8009800:	0849      	lsrs	r1, r1, #1
 8009802:	2000      	movs	r0, #0
 8009804:	460c      	mov	r4, r1
 8009806:	4605      	mov	r5, r0
 8009808:	eb12 0804 	adds.w	r8, r2, r4
 800980c:	eb43 0905 	adc.w	r9, r3, r5
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	685b      	ldr	r3, [r3, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	469a      	mov	sl, r3
 8009818:	4693      	mov	fp, r2
 800981a:	4652      	mov	r2, sl
 800981c:	465b      	mov	r3, fp
 800981e:	4640      	mov	r0, r8
 8009820:	4649      	mov	r1, r9
 8009822:	f7f6 fd0d 	bl	8000240 <__aeabi_uldivmod>
 8009826:	4602      	mov	r2, r0
 8009828:	460b      	mov	r3, r1
 800982a:	4613      	mov	r3, r2
 800982c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800982e:	6a3b      	ldr	r3, [r7, #32]
 8009830:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009834:	d308      	bcc.n	8009848 <UART_SetConfig+0x438>
 8009836:	6a3b      	ldr	r3, [r7, #32]
 8009838:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800983c:	d204      	bcs.n	8009848 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	6a3a      	ldr	r2, [r7, #32]
 8009844:	60da      	str	r2, [r3, #12]
 8009846:	e0ce      	b.n	80099e6 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800984e:	e0ca      	b.n	80099e6 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009850:	697b      	ldr	r3, [r7, #20]
 8009852:	69db      	ldr	r3, [r3, #28]
 8009854:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009858:	d166      	bne.n	8009928 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 800985a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800985e:	2b08      	cmp	r3, #8
 8009860:	d827      	bhi.n	80098b2 <UART_SetConfig+0x4a2>
 8009862:	a201      	add	r2, pc, #4	; (adr r2, 8009868 <UART_SetConfig+0x458>)
 8009864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009868:	0800988d 	.word	0x0800988d
 800986c:	08009895 	.word	0x08009895
 8009870:	0800989d 	.word	0x0800989d
 8009874:	080098b3 	.word	0x080098b3
 8009878:	080098a3 	.word	0x080098a3
 800987c:	080098b3 	.word	0x080098b3
 8009880:	080098b3 	.word	0x080098b3
 8009884:	080098b3 	.word	0x080098b3
 8009888:	080098ab 	.word	0x080098ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800988c:	f7fc f924 	bl	8005ad8 <HAL_RCC_GetPCLK1Freq>
 8009890:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009892:	e014      	b.n	80098be <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009894:	f7fc f934 	bl	8005b00 <HAL_RCC_GetPCLK2Freq>
 8009898:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800989a:	e010      	b.n	80098be <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800989c:	4b4e      	ldr	r3, [pc, #312]	; (80099d8 <UART_SetConfig+0x5c8>)
 800989e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80098a0:	e00d      	b.n	80098be <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098a2:	f7fc f867 	bl	8005974 <HAL_RCC_GetSysClockFreq>
 80098a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80098a8:	e009      	b.n	80098be <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80098b0:	e005      	b.n	80098be <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 80098b2:	2300      	movs	r3, #0
 80098b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80098b6:	2301      	movs	r3, #1
 80098b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80098bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80098be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f000 8090 	beq.w	80099e6 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80098c6:	697b      	ldr	r3, [r7, #20]
 80098c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098ca:	4a44      	ldr	r2, [pc, #272]	; (80099dc <UART_SetConfig+0x5cc>)
 80098cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80098d0:	461a      	mov	r2, r3
 80098d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80098d8:	005a      	lsls	r2, r3, #1
 80098da:	697b      	ldr	r3, [r7, #20]
 80098dc:	685b      	ldr	r3, [r3, #4]
 80098de:	085b      	lsrs	r3, r3, #1
 80098e0:	441a      	add	r2, r3
 80098e2:	697b      	ldr	r3, [r7, #20]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80098ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098ec:	6a3b      	ldr	r3, [r7, #32]
 80098ee:	2b0f      	cmp	r3, #15
 80098f0:	d916      	bls.n	8009920 <UART_SetConfig+0x510>
 80098f2:	6a3b      	ldr	r3, [r7, #32]
 80098f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80098f8:	d212      	bcs.n	8009920 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80098fa:	6a3b      	ldr	r3, [r7, #32]
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	f023 030f 	bic.w	r3, r3, #15
 8009902:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009904:	6a3b      	ldr	r3, [r7, #32]
 8009906:	085b      	lsrs	r3, r3, #1
 8009908:	b29b      	uxth	r3, r3
 800990a:	f003 0307 	and.w	r3, r3, #7
 800990e:	b29a      	uxth	r2, r3
 8009910:	8bfb      	ldrh	r3, [r7, #30]
 8009912:	4313      	orrs	r3, r2
 8009914:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	8bfa      	ldrh	r2, [r7, #30]
 800991c:	60da      	str	r2, [r3, #12]
 800991e:	e062      	b.n	80099e6 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8009920:	2301      	movs	r3, #1
 8009922:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8009926:	e05e      	b.n	80099e6 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009928:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800992c:	2b08      	cmp	r3, #8
 800992e:	d828      	bhi.n	8009982 <UART_SetConfig+0x572>
 8009930:	a201      	add	r2, pc, #4	; (adr r2, 8009938 <UART_SetConfig+0x528>)
 8009932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009936:	bf00      	nop
 8009938:	0800995d 	.word	0x0800995d
 800993c:	08009965 	.word	0x08009965
 8009940:	0800996d 	.word	0x0800996d
 8009944:	08009983 	.word	0x08009983
 8009948:	08009973 	.word	0x08009973
 800994c:	08009983 	.word	0x08009983
 8009950:	08009983 	.word	0x08009983
 8009954:	08009983 	.word	0x08009983
 8009958:	0800997b 	.word	0x0800997b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800995c:	f7fc f8bc 	bl	8005ad8 <HAL_RCC_GetPCLK1Freq>
 8009960:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009962:	e014      	b.n	800998e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009964:	f7fc f8cc 	bl	8005b00 <HAL_RCC_GetPCLK2Freq>
 8009968:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800996a:	e010      	b.n	800998e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800996c:	4b1a      	ldr	r3, [pc, #104]	; (80099d8 <UART_SetConfig+0x5c8>)
 800996e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009970:	e00d      	b.n	800998e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009972:	f7fb ffff 	bl	8005974 <HAL_RCC_GetSysClockFreq>
 8009976:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8009978:	e009      	b.n	800998e <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800997a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800997e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8009980:	e005      	b.n	800998e <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8009982:	2300      	movs	r3, #0
 8009984:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800998c:	bf00      	nop
    }

    if (pclk != 0U)
 800998e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009990:	2b00      	cmp	r3, #0
 8009992:	d028      	beq.n	80099e6 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009998:	4a10      	ldr	r2, [pc, #64]	; (80099dc <UART_SetConfig+0x5cc>)
 800999a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800999e:	461a      	mov	r2, r3
 80099a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	085b      	lsrs	r3, r3, #1
 80099ac:	441a      	add	r2, r3
 80099ae:	697b      	ldr	r3, [r7, #20]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80099b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099b8:	6a3b      	ldr	r3, [r7, #32]
 80099ba:	2b0f      	cmp	r3, #15
 80099bc:	d910      	bls.n	80099e0 <UART_SetConfig+0x5d0>
 80099be:	6a3b      	ldr	r3, [r7, #32]
 80099c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099c4:	d20c      	bcs.n	80099e0 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80099c6:	6a3b      	ldr	r3, [r7, #32]
 80099c8:	b29a      	uxth	r2, r3
 80099ca:	697b      	ldr	r3, [r7, #20]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	60da      	str	r2, [r3, #12]
 80099d0:	e009      	b.n	80099e6 <UART_SetConfig+0x5d6>
 80099d2:	bf00      	nop
 80099d4:	40008000 	.word	0x40008000
 80099d8:	00f42400 	.word	0x00f42400
 80099dc:	08023760 	.word	0x08023760
      }
      else
      {
        ret = HAL_ERROR;
 80099e0:	2301      	movs	r3, #1
 80099e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80099e6:	697b      	ldr	r3, [r7, #20]
 80099e8:	2201      	movs	r2, #1
 80099ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80099ee:	697b      	ldr	r3, [r7, #20]
 80099f0:	2201      	movs	r2, #1
 80099f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80099f6:	697b      	ldr	r3, [r7, #20]
 80099f8:	2200      	movs	r2, #0
 80099fa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80099fc:	697b      	ldr	r3, [r7, #20]
 80099fe:	2200      	movs	r2, #0
 8009a00:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8009a02:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3730      	adds	r7, #48	; 0x30
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009a10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a1c:	f003 0301 	and.w	r3, r3, #1
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d00a      	beq.n	8009a3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	430a      	orrs	r2, r1
 8009a38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a3e:	f003 0302 	and.w	r3, r3, #2
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d00a      	beq.n	8009a5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	685b      	ldr	r3, [r3, #4]
 8009a4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	430a      	orrs	r2, r1
 8009a5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a60:	f003 0304 	and.w	r3, r3, #4
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d00a      	beq.n	8009a7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	685b      	ldr	r3, [r3, #4]
 8009a6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	430a      	orrs	r2, r1
 8009a7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a82:	f003 0308 	and.w	r3, r3, #8
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d00a      	beq.n	8009aa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	685b      	ldr	r3, [r3, #4]
 8009a90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	430a      	orrs	r2, r1
 8009a9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa4:	f003 0310 	and.w	r3, r3, #16
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d00a      	beq.n	8009ac2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	689b      	ldr	r3, [r3, #8]
 8009ab2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	430a      	orrs	r2, r1
 8009ac0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ac6:	f003 0320 	and.w	r3, r3, #32
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d00a      	beq.n	8009ae4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	681b      	ldr	r3, [r3, #0]
 8009ad2:	689b      	ldr	r3, [r3, #8]
 8009ad4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	430a      	orrs	r2, r1
 8009ae2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ae8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	d01a      	beq.n	8009b26 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	430a      	orrs	r2, r1
 8009b04:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b0e:	d10a      	bne.n	8009b26 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	685b      	ldr	r3, [r3, #4]
 8009b16:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	430a      	orrs	r2, r1
 8009b24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d00a      	beq.n	8009b48 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	685b      	ldr	r3, [r3, #4]
 8009b38:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	430a      	orrs	r2, r1
 8009b46:	605a      	str	r2, [r3, #4]
  }
}
 8009b48:	bf00      	nop
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b098      	sub	sp, #96	; 0x60
 8009b58:	af02      	add	r7, sp, #8
 8009b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2200      	movs	r2, #0
 8009b60:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b64:	f7f9 f9b6 	bl	8002ed4 <HAL_GetTick>
 8009b68:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	f003 0308 	and.w	r3, r3, #8
 8009b74:	2b08      	cmp	r3, #8
 8009b76:	d12f      	bne.n	8009bd8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b7c:	9300      	str	r3, [sp, #0]
 8009b7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009b80:	2200      	movs	r2, #0
 8009b82:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 f88e 	bl	8009ca8 <UART_WaitOnFlagUntilTimeout>
 8009b8c:	4603      	mov	r3, r0
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d022      	beq.n	8009bd8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b9a:	e853 3f00 	ldrex	r3, [r3]
 8009b9e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ba2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ba6:	653b      	str	r3, [r7, #80]	; 0x50
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	461a      	mov	r2, r3
 8009bae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009bb0:	647b      	str	r3, [r7, #68]	; 0x44
 8009bb2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009bb6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009bb8:	e841 2300 	strex	r3, r2, [r1]
 8009bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d1e6      	bne.n	8009b92 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2220      	movs	r2, #32
 8009bc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2200      	movs	r2, #0
 8009bd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009bd4:	2303      	movs	r3, #3
 8009bd6:	e063      	b.n	8009ca0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	f003 0304 	and.w	r3, r3, #4
 8009be2:	2b04      	cmp	r3, #4
 8009be4:	d149      	bne.n	8009c7a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009be6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009bea:	9300      	str	r3, [sp, #0]
 8009bec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009bf4:	6878      	ldr	r0, [r7, #4]
 8009bf6:	f000 f857 	bl	8009ca8 <UART_WaitOnFlagUntilTimeout>
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d03c      	beq.n	8009c7a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c08:	e853 3f00 	ldrex	r3, [r3]
 8009c0c:	623b      	str	r3, [r7, #32]
   return(result);
 8009c0e:	6a3b      	ldr	r3, [r7, #32]
 8009c10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009c14:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	461a      	mov	r2, r3
 8009c1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c1e:	633b      	str	r3, [r7, #48]	; 0x30
 8009c20:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c26:	e841 2300 	strex	r3, r2, [r1]
 8009c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d1e6      	bne.n	8009c00 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	3308      	adds	r3, #8
 8009c38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	e853 3f00 	ldrex	r3, [r3]
 8009c40:	60fb      	str	r3, [r7, #12]
   return(result);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	f023 0301 	bic.w	r3, r3, #1
 8009c48:	64bb      	str	r3, [r7, #72]	; 0x48
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	3308      	adds	r3, #8
 8009c50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c52:	61fa      	str	r2, [r7, #28]
 8009c54:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c56:	69b9      	ldr	r1, [r7, #24]
 8009c58:	69fa      	ldr	r2, [r7, #28]
 8009c5a:	e841 2300 	strex	r3, r2, [r1]
 8009c5e:	617b      	str	r3, [r7, #20]
   return(result);
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d1e5      	bne.n	8009c32 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	2220      	movs	r2, #32
 8009c6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	2200      	movs	r2, #0
 8009c72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c76:	2303      	movs	r3, #3
 8009c78:	e012      	b.n	8009ca0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2220      	movs	r2, #32
 8009c7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2220      	movs	r2, #32
 8009c86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2200      	movs	r2, #0
 8009c9a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3758      	adds	r7, #88	; 0x58
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	603b      	str	r3, [r7, #0]
 8009cb4:	4613      	mov	r3, r2
 8009cb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cb8:	e049      	b.n	8009d4e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cc0:	d045      	beq.n	8009d4e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009cc2:	f7f9 f907 	bl	8002ed4 <HAL_GetTick>
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	1ad3      	subs	r3, r2, r3
 8009ccc:	69ba      	ldr	r2, [r7, #24]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	d302      	bcc.n	8009cd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8009cd2:	69bb      	ldr	r3, [r7, #24]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d101      	bne.n	8009cdc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009cd8:	2303      	movs	r3, #3
 8009cda:	e048      	b.n	8009d6e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f003 0304 	and.w	r3, r3, #4
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d031      	beq.n	8009d4e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	69db      	ldr	r3, [r3, #28]
 8009cf0:	f003 0308 	and.w	r3, r3, #8
 8009cf4:	2b08      	cmp	r3, #8
 8009cf6:	d110      	bne.n	8009d1a <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	2208      	movs	r2, #8
 8009cfe:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8009d00:	68f8      	ldr	r0, [r7, #12]
 8009d02:	f000 f838 	bl	8009d76 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2208      	movs	r2, #8
 8009d0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2200      	movs	r2, #0
 8009d12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	e029      	b.n	8009d6e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	69db      	ldr	r3, [r3, #28]
 8009d20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d28:	d111      	bne.n	8009d4e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009d34:	68f8      	ldr	r0, [r7, #12]
 8009d36:	f000 f81e 	bl	8009d76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2220      	movs	r2, #32
 8009d3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2200      	movs	r2, #0
 8009d46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8009d4a:	2303      	movs	r3, #3
 8009d4c:	e00f      	b.n	8009d6e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	69da      	ldr	r2, [r3, #28]
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	4013      	ands	r3, r2
 8009d58:	68ba      	ldr	r2, [r7, #8]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	bf0c      	ite	eq
 8009d5e:	2301      	moveq	r3, #1
 8009d60:	2300      	movne	r3, #0
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	461a      	mov	r2, r3
 8009d66:	79fb      	ldrb	r3, [r7, #7]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d0a6      	beq.n	8009cba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3710      	adds	r7, #16
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d76:	b480      	push	{r7}
 8009d78:	b095      	sub	sp, #84	; 0x54
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d86:	e853 3f00 	ldrex	r3, [r3]
 8009d8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	461a      	mov	r2, r3
 8009d9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009d9c:	643b      	str	r3, [r7, #64]	; 0x40
 8009d9e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009da2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009da4:	e841 2300 	strex	r3, r2, [r1]
 8009da8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d1e6      	bne.n	8009d7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	3308      	adds	r3, #8
 8009db6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db8:	6a3b      	ldr	r3, [r7, #32]
 8009dba:	e853 3f00 	ldrex	r3, [r3]
 8009dbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009dc6:	f023 0301 	bic.w	r3, r3, #1
 8009dca:	64bb      	str	r3, [r7, #72]	; 0x48
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	3308      	adds	r3, #8
 8009dd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009dd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009dd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009dda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009ddc:	e841 2300 	strex	r3, r2, [r1]
 8009de0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1e3      	bne.n	8009db0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d118      	bne.n	8009e22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	e853 3f00 	ldrex	r3, [r3]
 8009dfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	f023 0310 	bic.w	r3, r3, #16
 8009e04:	647b      	str	r3, [r7, #68]	; 0x44
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009e0e:	61bb      	str	r3, [r7, #24]
 8009e10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e12:	6979      	ldr	r1, [r7, #20]
 8009e14:	69ba      	ldr	r2, [r7, #24]
 8009e16:	e841 2300 	strex	r3, r2, [r1]
 8009e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1e6      	bne.n	8009df0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2220      	movs	r2, #32
 8009e26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	675a      	str	r2, [r3, #116]	; 0x74
}
 8009e36:	bf00      	nop
 8009e38:	3754      	adds	r7, #84	; 0x54
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr

08009e42 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009e42:	b480      	push	{r7}
 8009e44:	b085      	sub	sp, #20
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d101      	bne.n	8009e58 <HAL_UARTEx_DisableFifoMode+0x16>
 8009e54:	2302      	movs	r3, #2
 8009e56:	e027      	b.n	8009ea8 <HAL_UARTEx_DisableFifoMode+0x66>
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	2201      	movs	r2, #1
 8009e5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2224      	movs	r2, #36	; 0x24
 8009e64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	681a      	ldr	r2, [r3, #0]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f022 0201 	bic.w	r2, r2, #1
 8009e7e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009e86:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	68fa      	ldr	r2, [r7, #12]
 8009e94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2220      	movs	r2, #32
 8009e9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3714      	adds	r7, #20
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr

08009eb4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009eb4:	b580      	push	{r7, lr}
 8009eb6:	b084      	sub	sp, #16
 8009eb8:	af00      	add	r7, sp, #0
 8009eba:	6078      	str	r0, [r7, #4]
 8009ebc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d101      	bne.n	8009ecc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009ec8:	2302      	movs	r3, #2
 8009eca:	e02d      	b.n	8009f28 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2224      	movs	r2, #36	; 0x24
 8009ed8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	681a      	ldr	r2, [r3, #0]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f022 0201 	bic.w	r2, r2, #1
 8009ef2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	689b      	ldr	r3, [r3, #8]
 8009efa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	683a      	ldr	r2, [r7, #0]
 8009f04:	430a      	orrs	r2, r1
 8009f06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f08:	6878      	ldr	r0, [r7, #4]
 8009f0a:	f000 f84f 	bl	8009fac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	68fa      	ldr	r2, [r7, #12]
 8009f14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2220      	movs	r2, #32
 8009f1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3710      	adds	r7, #16
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}

08009f30 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	b084      	sub	sp, #16
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
 8009f38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8009f40:	2b01      	cmp	r3, #1
 8009f42:	d101      	bne.n	8009f48 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009f44:	2302      	movs	r3, #2
 8009f46:	e02d      	b.n	8009fa4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2201      	movs	r2, #1
 8009f4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2224      	movs	r2, #36	; 0x24
 8009f54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f022 0201 	bic.w	r2, r2, #1
 8009f6e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	683a      	ldr	r2, [r7, #0]
 8009f80:	430a      	orrs	r2, r1
 8009f82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 f811 	bl	8009fac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2220      	movs	r2, #32
 8009f96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b085      	sub	sp, #20
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d108      	bne.n	8009fce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009fcc:	e031      	b.n	800a032 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009fce:	2308      	movs	r3, #8
 8009fd0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009fd2:	2308      	movs	r3, #8
 8009fd4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	689b      	ldr	r3, [r3, #8]
 8009fdc:	0e5b      	lsrs	r3, r3, #25
 8009fde:	b2db      	uxtb	r3, r3
 8009fe0:	f003 0307 	and.w	r3, r3, #7
 8009fe4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	689b      	ldr	r3, [r3, #8]
 8009fec:	0f5b      	lsrs	r3, r3, #29
 8009fee:	b2db      	uxtb	r3, r3
 8009ff0:	f003 0307 	and.w	r3, r3, #7
 8009ff4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ff6:	7bbb      	ldrb	r3, [r7, #14]
 8009ff8:	7b3a      	ldrb	r2, [r7, #12]
 8009ffa:	4911      	ldr	r1, [pc, #68]	; (800a040 <UARTEx_SetNbDataToProcess+0x94>)
 8009ffc:	5c8a      	ldrb	r2, [r1, r2]
 8009ffe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a002:	7b3a      	ldrb	r2, [r7, #12]
 800a004:	490f      	ldr	r1, [pc, #60]	; (800a044 <UARTEx_SetNbDataToProcess+0x98>)
 800a006:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a008:	fb93 f3f2 	sdiv	r3, r3, r2
 800a00c:	b29a      	uxth	r2, r3
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a014:	7bfb      	ldrb	r3, [r7, #15]
 800a016:	7b7a      	ldrb	r2, [r7, #13]
 800a018:	4909      	ldr	r1, [pc, #36]	; (800a040 <UARTEx_SetNbDataToProcess+0x94>)
 800a01a:	5c8a      	ldrb	r2, [r1, r2]
 800a01c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a020:	7b7a      	ldrb	r2, [r7, #13]
 800a022:	4908      	ldr	r1, [pc, #32]	; (800a044 <UARTEx_SetNbDataToProcess+0x98>)
 800a024:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a026:	fb93 f3f2 	sdiv	r3, r3, r2
 800a02a:	b29a      	uxth	r2, r3
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a032:	bf00      	nop
 800a034:	3714      	adds	r7, #20
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr
 800a03e:	bf00      	nop
 800a040:	08023778 	.word	0x08023778
 800a044:	08023780 	.word	0x08023780

0800a048 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800a048:	b480      	push	{r7}
 800a04a:	b087      	sub	sp, #28
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	681a      	ldr	r2, [r3, #0]
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a05c:	683a      	ldr	r2, [r7, #0]
 800a05e:	6812      	ldr	r2, [r2, #0]
 800a060:	f023 0101 	bic.w	r1, r3, #1
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800a06a:	683b      	ldr	r3, [r7, #0]
 800a06c:	689b      	ldr	r3, [r3, #8]
 800a06e:	2b08      	cmp	r3, #8
 800a070:	d102      	bne.n	800a078 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a072:	2340      	movs	r3, #64	; 0x40
 800a074:	617b      	str	r3, [r7, #20]
 800a076:	e001      	b.n	800a07c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800a078:	2300      	movs	r3, #0
 800a07a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800a088:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800a08a:	683b      	ldr	r3, [r7, #0]
 800a08c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800a08e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800a094:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800a096:	683b      	ldr	r3, [r7, #0]
 800a098:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800a09a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800a0a0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800a0a2:	683b      	ldr	r3, [r7, #0]
 800a0a4:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800a0a6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800a0ac:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800a0b2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800a0b4:	683b      	ldr	r3, [r7, #0]
 800a0b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800a0b8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a0c6:	693a      	ldr	r2, [r7, #16]
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0d0:	693a      	ldr	r2, [r7, #16]
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0da:	693a      	ldr	r2, [r7, #16]
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e4:	693a      	ldr	r2, [r7, #16]
 800a0e6:	4313      	orrs	r3, r2
 800a0e8:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 800a0ea:	4b3e      	ldr	r3, [pc, #248]	; (800a1e4 <FMC_NORSRAM_Init+0x19c>)
 800a0ec:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a0f4:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800a0fc:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 800a104:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800a10c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	681a      	ldr	r2, [r3, #0]
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	43db      	mvns	r3, r3
 800a11c:	ea02 0103 	and.w	r1, r2, r3
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	4319      	orrs	r1, r3
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a132:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a136:	d10c      	bne.n	800a152 <FMC_NORSRAM_Init+0x10a>
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d008      	beq.n	800a152 <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a14c:	431a      	orrs	r2, r3
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800a152:	683b      	ldr	r3, [r7, #0]
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d006      	beq.n	800a168 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	681a      	ldr	r2, [r3, #0]
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a162:	431a      	orrs	r2, r3
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d12f      	bne.n	800a1d2 <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	6a1b      	ldr	r3, [r3, #32]
 800a176:	0c1b      	lsrs	r3, r3, #16
 800a178:	041b      	lsls	r3, r3, #16
 800a17a:	683a      	ldr	r2, [r7, #0]
 800a17c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a17e:	431a      	orrs	r2, r3
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	2b04      	cmp	r3, #4
 800a18a:	d014      	beq.n	800a1b6 <FMC_NORSRAM_Init+0x16e>
 800a18c:	2b04      	cmp	r3, #4
 800a18e:	d819      	bhi.n	800a1c4 <FMC_NORSRAM_Init+0x17c>
 800a190:	2b00      	cmp	r3, #0
 800a192:	d002      	beq.n	800a19a <FMC_NORSRAM_Init+0x152>
 800a194:	2b02      	cmp	r3, #2
 800a196:	d007      	beq.n	800a1a8 <FMC_NORSRAM_Init+0x160>
 800a198:	e014      	b.n	800a1c4 <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	6a1b      	ldr	r3, [r3, #32]
 800a19e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	621a      	str	r2, [r3, #32]
        break;
 800a1a6:	e015      	b.n	800a1d4 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	6a1b      	ldr	r3, [r3, #32]
 800a1ac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	621a      	str	r2, [r3, #32]
        break;
 800a1b4:	e00e      	b.n	800a1d4 <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	6a1b      	ldr	r3, [r3, #32]
 800a1ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	621a      	str	r2, [r3, #32]
        break;
 800a1c2:	e007      	b.n	800a1d4 <FMC_NORSRAM_Init+0x18c>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6a1b      	ldr	r3, [r3, #32]
 800a1c8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	621a      	str	r2, [r3, #32]
        break;
 800a1d0:	e000      	b.n	800a1d4 <FMC_NORSRAM_Init+0x18c>
    }
  }
 800a1d2:	bf00      	nop

  return HAL_OK;
 800a1d4:	2300      	movs	r3, #0
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	371c      	adds	r7, #28
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e0:	4770      	bx	lr
 800a1e2:	bf00      	nop
 800a1e4:	0008fb7f 	.word	0x0008fb7f

0800a1e8 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b087      	sub	sp, #28
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	1c5a      	adds	r2, r3, #1
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	681a      	ldr	r2, [r3, #0]
 800a202:	68bb      	ldr	r3, [r7, #8]
 800a204:	685b      	ldr	r3, [r3, #4]
 800a206:	011b      	lsls	r3, r3, #4
 800a208:	431a      	orrs	r2, r3
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	689b      	ldr	r3, [r3, #8]
 800a20e:	021b      	lsls	r3, r3, #8
 800a210:	431a      	orrs	r2, r3
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	079b      	lsls	r3, r3, #30
 800a218:	431a      	orrs	r2, r3
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	691b      	ldr	r3, [r3, #16]
 800a21e:	041b      	lsls	r3, r3, #16
 800a220:	431a      	orrs	r2, r3
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	695b      	ldr	r3, [r3, #20]
 800a226:	3b01      	subs	r3, #1
 800a228:	051b      	lsls	r3, r3, #20
 800a22a:	431a      	orrs	r2, r3
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	699b      	ldr	r3, [r3, #24]
 800a230:	3b02      	subs	r3, #2
 800a232:	061b      	lsls	r3, r3, #24
 800a234:	ea42 0103 	orr.w	r1, r2, r3
 800a238:	68bb      	ldr	r3, [r7, #8]
 800a23a:	69db      	ldr	r3, [r3, #28]
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	3201      	adds	r2, #1
 800a240:	4319      	orrs	r1, r3
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a250:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a254:	d113      	bne.n	800a27e <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a25e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 800a260:	68bb      	ldr	r3, [r7, #8]
 800a262:	695b      	ldr	r3, [r3, #20]
 800a264:	3b01      	subs	r3, #1
 800a266:	051b      	lsls	r3, r3, #20
 800a268:	697a      	ldr	r2, [r7, #20]
 800a26a:	4313      	orrs	r3, r2
 800a26c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	431a      	orrs	r2, r3
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	371c      	adds	r7, #28
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b085      	sub	sp, #20
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	607a      	str	r2, [r7, #4]
 800a298:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2a0:	d121      	bne.n	800a2e6 <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	687a      	ldr	r2, [r7, #4]
 800a2a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a2aa:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	6819      	ldr	r1, [r3, #0]
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	011b      	lsls	r3, r3, #4
 800a2b8:	4319      	orrs	r1, r3
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	689b      	ldr	r3, [r3, #8]
 800a2be:	021b      	lsls	r3, r3, #8
 800a2c0:	4319      	orrs	r1, r3
 800a2c2:	68bb      	ldr	r3, [r7, #8]
 800a2c4:	68db      	ldr	r3, [r3, #12]
 800a2c6:	079b      	lsls	r3, r3, #30
 800a2c8:	4319      	orrs	r1, r3
 800a2ca:	68bb      	ldr	r3, [r7, #8]
 800a2cc:	69db      	ldr	r3, [r3, #28]
 800a2ce:	4319      	orrs	r1, r3
 800a2d0:	68bb      	ldr	r3, [r7, #8]
 800a2d2:	691b      	ldr	r3, [r3, #16]
 800a2d4:	041b      	lsls	r3, r3, #16
 800a2d6:	430b      	orrs	r3, r1
 800a2d8:	ea42 0103 	orr.w	r1, r2, r3
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800a2e4:	e005      	b.n	800a2f2 <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	687a      	ldr	r2, [r7, #4]
 800a2ea:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800a2ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800a2f2:	2300      	movs	r3, #0
}
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	3714      	adds	r7, #20
 800a2f8:	46bd      	mov	sp, r7
 800a2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fe:	4770      	bx	lr

0800a300 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800a300:	b480      	push	{r7}
 800a302:	b08b      	sub	sp, #44	; 0x2c
 800a304:	af00      	add	r7, sp, #0
 800a306:	60f8      	str	r0, [r7, #12]
 800a308:	60b9      	str	r1, [r7, #8]
 800a30a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681a      	ldr	r2, [r3, #0]
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	fa93 f3a3 	rbit	r3, r3
 800a31a:	613b      	str	r3, [r7, #16]
  return result;
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a320:	69bb      	ldr	r3, [r7, #24]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d101      	bne.n	800a32a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800a326:	2320      	movs	r3, #32
 800a328:	e003      	b.n	800a332 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800a32a:	69bb      	ldr	r3, [r7, #24]
 800a32c:	fab3 f383 	clz	r3, r3
 800a330:	b2db      	uxtb	r3, r3
 800a332:	005b      	lsls	r3, r3, #1
 800a334:	2103      	movs	r1, #3
 800a336:	fa01 f303 	lsl.w	r3, r1, r3
 800a33a:	43db      	mvns	r3, r3
 800a33c:	401a      	ands	r2, r3
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a342:	6a3b      	ldr	r3, [r7, #32]
 800a344:	fa93 f3a3 	rbit	r3, r3
 800a348:	61fb      	str	r3, [r7, #28]
  return result;
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a34e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a350:	2b00      	cmp	r3, #0
 800a352:	d101      	bne.n	800a358 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800a354:	2320      	movs	r3, #32
 800a356:	e003      	b.n	800a360 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800a358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a35a:	fab3 f383 	clz	r3, r3
 800a35e:	b2db      	uxtb	r3, r3
 800a360:	005b      	lsls	r3, r3, #1
 800a362:	6879      	ldr	r1, [r7, #4]
 800a364:	fa01 f303 	lsl.w	r3, r1, r3
 800a368:	431a      	orrs	r2, r3
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	601a      	str	r2, [r3, #0]
}
 800a36e:	bf00      	nop
 800a370:	372c      	adds	r7, #44	; 0x2c
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr

0800a37a <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800a37a:	b480      	push	{r7}
 800a37c:	b085      	sub	sp, #20
 800a37e:	af00      	add	r7, sp, #0
 800a380:	60f8      	str	r0, [r7, #12]
 800a382:	60b9      	str	r1, [r7, #8]
 800a384:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	685a      	ldr	r2, [r3, #4]
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	43db      	mvns	r3, r3
 800a38e:	401a      	ands	r2, r3
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	6879      	ldr	r1, [r7, #4]
 800a394:	fb01 f303 	mul.w	r3, r1, r3
 800a398:	431a      	orrs	r2, r3
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	605a      	str	r2, [r3, #4]
}
 800a39e:	bf00      	nop
 800a3a0:	3714      	adds	r7, #20
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr

0800a3aa <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800a3aa:	b480      	push	{r7}
 800a3ac:	b08b      	sub	sp, #44	; 0x2c
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	60f8      	str	r0, [r7, #12]
 800a3b2:	60b9      	str	r1, [r7, #8]
 800a3b4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	689a      	ldr	r2, [r3, #8]
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	fa93 f3a3 	rbit	r3, r3
 800a3c4:	613b      	str	r3, [r7, #16]
  return result;
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a3ca:	69bb      	ldr	r3, [r7, #24]
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d101      	bne.n	800a3d4 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800a3d0:	2320      	movs	r3, #32
 800a3d2:	e003      	b.n	800a3dc <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800a3d4:	69bb      	ldr	r3, [r7, #24]
 800a3d6:	fab3 f383 	clz	r3, r3
 800a3da:	b2db      	uxtb	r3, r3
 800a3dc:	005b      	lsls	r3, r3, #1
 800a3de:	2103      	movs	r1, #3
 800a3e0:	fa01 f303 	lsl.w	r3, r1, r3
 800a3e4:	43db      	mvns	r3, r3
 800a3e6:	401a      	ands	r2, r3
 800a3e8:	68bb      	ldr	r3, [r7, #8]
 800a3ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a3ec:	6a3b      	ldr	r3, [r7, #32]
 800a3ee:	fa93 f3a3 	rbit	r3, r3
 800a3f2:	61fb      	str	r3, [r7, #28]
  return result;
 800a3f4:	69fb      	ldr	r3, [r7, #28]
 800a3f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a3f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d101      	bne.n	800a402 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800a3fe:	2320      	movs	r3, #32
 800a400:	e003      	b.n	800a40a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800a402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a404:	fab3 f383 	clz	r3, r3
 800a408:	b2db      	uxtb	r3, r3
 800a40a:	005b      	lsls	r3, r3, #1
 800a40c:	6879      	ldr	r1, [r7, #4]
 800a40e:	fa01 f303 	lsl.w	r3, r1, r3
 800a412:	431a      	orrs	r2, r3
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800a418:	bf00      	nop
 800a41a:	372c      	adds	r7, #44	; 0x2c
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800a424:	b480      	push	{r7}
 800a426:	b08b      	sub	sp, #44	; 0x2c
 800a428:	af00      	add	r7, sp, #0
 800a42a:	60f8      	str	r0, [r7, #12]
 800a42c:	60b9      	str	r1, [r7, #8]
 800a42e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	68da      	ldr	r2, [r3, #12]
 800a434:	68bb      	ldr	r3, [r7, #8]
 800a436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	fa93 f3a3 	rbit	r3, r3
 800a43e:	613b      	str	r3, [r7, #16]
  return result;
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a444:	69bb      	ldr	r3, [r7, #24]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d101      	bne.n	800a44e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800a44a:	2320      	movs	r3, #32
 800a44c:	e003      	b.n	800a456 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800a44e:	69bb      	ldr	r3, [r7, #24]
 800a450:	fab3 f383 	clz	r3, r3
 800a454:	b2db      	uxtb	r3, r3
 800a456:	005b      	lsls	r3, r3, #1
 800a458:	2103      	movs	r1, #3
 800a45a:	fa01 f303 	lsl.w	r3, r1, r3
 800a45e:	43db      	mvns	r3, r3
 800a460:	401a      	ands	r2, r3
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a466:	6a3b      	ldr	r3, [r7, #32]
 800a468:	fa93 f3a3 	rbit	r3, r3
 800a46c:	61fb      	str	r3, [r7, #28]
  return result;
 800a46e:	69fb      	ldr	r3, [r7, #28]
 800a470:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a474:	2b00      	cmp	r3, #0
 800a476:	d101      	bne.n	800a47c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800a478:	2320      	movs	r3, #32
 800a47a:	e003      	b.n	800a484 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800a47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47e:	fab3 f383 	clz	r3, r3
 800a482:	b2db      	uxtb	r3, r3
 800a484:	005b      	lsls	r3, r3, #1
 800a486:	6879      	ldr	r1, [r7, #4]
 800a488:	fa01 f303 	lsl.w	r3, r1, r3
 800a48c:	431a      	orrs	r2, r3
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	60da      	str	r2, [r3, #12]
}
 800a492:	bf00      	nop
 800a494:	372c      	adds	r7, #44	; 0x2c
 800a496:	46bd      	mov	sp, r7
 800a498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49c:	4770      	bx	lr

0800a49e <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a49e:	b480      	push	{r7}
 800a4a0:	b08b      	sub	sp, #44	; 0x2c
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	60f8      	str	r0, [r7, #12]
 800a4a6:	60b9      	str	r1, [r7, #8]
 800a4a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6a1a      	ldr	r2, [r3, #32]
 800a4ae:	68bb      	ldr	r3, [r7, #8]
 800a4b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	fa93 f3a3 	rbit	r3, r3
 800a4b8:	613b      	str	r3, [r7, #16]
  return result;
 800a4ba:	693b      	ldr	r3, [r7, #16]
 800a4bc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a4be:	69bb      	ldr	r3, [r7, #24]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d101      	bne.n	800a4c8 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800a4c4:	2320      	movs	r3, #32
 800a4c6:	e003      	b.n	800a4d0 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800a4c8:	69bb      	ldr	r3, [r7, #24]
 800a4ca:	fab3 f383 	clz	r3, r3
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	009b      	lsls	r3, r3, #2
 800a4d2:	210f      	movs	r1, #15
 800a4d4:	fa01 f303 	lsl.w	r3, r1, r3
 800a4d8:	43db      	mvns	r3, r3
 800a4da:	401a      	ands	r2, r3
 800a4dc:	68bb      	ldr	r3, [r7, #8]
 800a4de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a4e0:	6a3b      	ldr	r3, [r7, #32]
 800a4e2:	fa93 f3a3 	rbit	r3, r3
 800a4e6:	61fb      	str	r3, [r7, #28]
  return result;
 800a4e8:	69fb      	ldr	r3, [r7, #28]
 800a4ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d101      	bne.n	800a4f6 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800a4f2:	2320      	movs	r3, #32
 800a4f4:	e003      	b.n	800a4fe <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800a4f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f8:	fab3 f383 	clz	r3, r3
 800a4fc:	b2db      	uxtb	r3, r3
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	6879      	ldr	r1, [r7, #4]
 800a502:	fa01 f303 	lsl.w	r3, r1, r3
 800a506:	431a      	orrs	r2, r3
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 800a50c:	bf00      	nop
 800a50e:	372c      	adds	r7, #44	; 0x2c
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr

0800a518 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800a518:	b480      	push	{r7}
 800a51a:	b08b      	sub	sp, #44	; 0x2c
 800a51c:	af00      	add	r7, sp, #0
 800a51e:	60f8      	str	r0, [r7, #12]
 800a520:	60b9      	str	r1, [r7, #8]
 800a522:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	0a1b      	lsrs	r3, r3, #8
 800a52c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a52e:	697b      	ldr	r3, [r7, #20]
 800a530:	fa93 f3a3 	rbit	r3, r3
 800a534:	613b      	str	r3, [r7, #16]
  return result;
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800a53a:	69bb      	ldr	r3, [r7, #24]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d101      	bne.n	800a544 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800a540:	2320      	movs	r3, #32
 800a542:	e003      	b.n	800a54c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800a544:	69bb      	ldr	r3, [r7, #24]
 800a546:	fab3 f383 	clz	r3, r3
 800a54a:	b2db      	uxtb	r3, r3
 800a54c:	009b      	lsls	r3, r3, #2
 800a54e:	210f      	movs	r1, #15
 800a550:	fa01 f303 	lsl.w	r3, r1, r3
 800a554:	43db      	mvns	r3, r3
 800a556:	401a      	ands	r2, r3
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	0a1b      	lsrs	r3, r3, #8
 800a55c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a55e:	6a3b      	ldr	r3, [r7, #32]
 800a560:	fa93 f3a3 	rbit	r3, r3
 800a564:	61fb      	str	r3, [r7, #28]
  return result;
 800a566:	69fb      	ldr	r3, [r7, #28]
 800a568:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800a56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d101      	bne.n	800a574 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800a570:	2320      	movs	r3, #32
 800a572:	e003      	b.n	800a57c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800a574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a576:	fab3 f383 	clz	r3, r3
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	009b      	lsls	r3, r3, #2
 800a57e:	6879      	ldr	r1, [r7, #4]
 800a580:	fa01 f303 	lsl.w	r3, r1, r3
 800a584:	431a      	orrs	r2, r3
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800a58a:	bf00      	nop
 800a58c:	372c      	adds	r7, #44	; 0x2c
 800a58e:	46bd      	mov	sp, r7
 800a590:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a594:	4770      	bx	lr

0800a596 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800a596:	b580      	push	{r7, lr}
 800a598:	b088      	sub	sp, #32
 800a59a:	af00      	add	r7, sp, #0
 800a59c:	6078      	str	r0, [r7, #4]
 800a59e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800a5a0:	683b      	ldr	r3, [r7, #0]
 800a5a2:	681b      	ldr	r3, [r3, #0]
 800a5a4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	fa93 f3a3 	rbit	r3, r3
 800a5ac:	60fb      	str	r3, [r7, #12]
  return result;
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800a5b2:	697b      	ldr	r3, [r7, #20]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d101      	bne.n	800a5bc <LL_GPIO_Init+0x26>
    return 32U;
 800a5b8:	2320      	movs	r3, #32
 800a5ba:	e003      	b.n	800a5c4 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	fab3 f383 	clz	r3, r3
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a5c6:	e047      	b.n	800a658 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	2101      	movs	r1, #1
 800a5ce:	69fb      	ldr	r3, [r7, #28]
 800a5d0:	fa01 f303 	lsl.w	r3, r1, r3
 800a5d4:	4013      	ands	r3, r2
 800a5d6:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 800a5d8:	69bb      	ldr	r3, [r7, #24]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d039      	beq.n	800a652 <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d003      	beq.n	800a5ee <LL_GPIO_Init+0x58>
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	2b02      	cmp	r3, #2
 800a5ec:	d10d      	bne.n	800a60a <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	689b      	ldr	r3, [r3, #8]
 800a5f2:	461a      	mov	r2, r3
 800a5f4:	69b9      	ldr	r1, [r7, #24]
 800a5f6:	6878      	ldr	r0, [r7, #4]
 800a5f8:	f7ff fed7 	bl	800a3aa <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	68db      	ldr	r3, [r3, #12]
 800a600:	461a      	mov	r2, r3
 800a602:	69b9      	ldr	r1, [r7, #24]
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f7ff feb8 	bl	800a37a <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	691b      	ldr	r3, [r3, #16]
 800a60e:	461a      	mov	r2, r3
 800a610:	69b9      	ldr	r1, [r7, #24]
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f7ff ff06 	bl	800a424 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800a618:	683b      	ldr	r3, [r7, #0]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	2b02      	cmp	r3, #2
 800a61e:	d111      	bne.n	800a644 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800a620:	69bb      	ldr	r3, [r7, #24]
 800a622:	2bff      	cmp	r3, #255	; 0xff
 800a624:	d807      	bhi.n	800a636 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a626:	683b      	ldr	r3, [r7, #0]
 800a628:	695b      	ldr	r3, [r3, #20]
 800a62a:	461a      	mov	r2, r3
 800a62c:	69b9      	ldr	r1, [r7, #24]
 800a62e:	6878      	ldr	r0, [r7, #4]
 800a630:	f7ff ff35 	bl	800a49e <LL_GPIO_SetAFPin_0_7>
 800a634:	e006      	b.n	800a644 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800a636:	683b      	ldr	r3, [r7, #0]
 800a638:	695b      	ldr	r3, [r3, #20]
 800a63a:	461a      	mov	r2, r3
 800a63c:	69b9      	ldr	r1, [r7, #24]
 800a63e:	6878      	ldr	r0, [r7, #4]
 800a640:	f7ff ff6a 	bl	800a518 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	461a      	mov	r2, r3
 800a64a:	69b9      	ldr	r1, [r7, #24]
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f7ff fe57 	bl	800a300 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800a652:	69fb      	ldr	r3, [r7, #28]
 800a654:	3301      	adds	r3, #1
 800a656:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800a658:	683b      	ldr	r3, [r7, #0]
 800a65a:	681a      	ldr	r2, [r3, #0]
 800a65c:	69fb      	ldr	r3, [r7, #28]
 800a65e:	fa22 f303 	lsr.w	r3, r2, r3
 800a662:	2b00      	cmp	r3, #0
 800a664:	d1b0      	bne.n	800a5c8 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800a666:	2300      	movs	r3, #0
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3720      	adds	r7, #32
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a670:	b480      	push	{r7}
 800a672:	b085      	sub	sp, #20
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a678:	f64b 7380 	movw	r3, #49024	; 0xbf80
 800a67c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800a684:	b29a      	uxth	r2, r3
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	b29b      	uxth	r3, r3
 800a68a:	43db      	mvns	r3, r3
 800a68c:	b29b      	uxth	r3, r3
 800a68e:	4013      	ands	r3, r2
 800a690:	b29a      	uxth	r2, r3
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800a698:	2300      	movs	r3, #0
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3714      	adds	r7, #20
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a4:	4770      	bx	lr

0800a6a6 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	b480      	push	{r7}
 800a6aa:	b083      	sub	sp, #12
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
 800a6b0:	f107 0014 	add.w	r0, r7, #20
 800a6b4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2201      	movs	r2, #1
 800a6bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800a6d8:	2300      	movs	r3, #0
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	370c      	adds	r7, #12
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6e4:	b004      	add	sp, #16
 800a6e6:	4770      	bx	lr

0800a6e8 <__NVIC_SetPriority>:
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	4603      	mov	r3, r0
 800a6f0:	6039      	str	r1, [r7, #0]
 800a6f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a6f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	db0a      	blt.n	800a712 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a6fc:	683b      	ldr	r3, [r7, #0]
 800a6fe:	b2da      	uxtb	r2, r3
 800a700:	490c      	ldr	r1, [pc, #48]	; (800a734 <__NVIC_SetPriority+0x4c>)
 800a702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a706:	0152      	lsls	r2, r2, #5
 800a708:	b2d2      	uxtb	r2, r2
 800a70a:	440b      	add	r3, r1
 800a70c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800a710:	e00a      	b.n	800a728 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	b2da      	uxtb	r2, r3
 800a716:	4908      	ldr	r1, [pc, #32]	; (800a738 <__NVIC_SetPriority+0x50>)
 800a718:	79fb      	ldrb	r3, [r7, #7]
 800a71a:	f003 030f 	and.w	r3, r3, #15
 800a71e:	3b04      	subs	r3, #4
 800a720:	0152      	lsls	r2, r2, #5
 800a722:	b2d2      	uxtb	r2, r2
 800a724:	440b      	add	r3, r1
 800a726:	761a      	strb	r2, [r3, #24]
}
 800a728:	bf00      	nop
 800a72a:	370c      	adds	r7, #12
 800a72c:	46bd      	mov	sp, r7
 800a72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a732:	4770      	bx	lr
 800a734:	e000e100 	.word	0xe000e100
 800a738:	e000ed00 	.word	0xe000ed00

0800a73c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800a73c:	b580      	push	{r7, lr}
 800a73e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800a740:	4b05      	ldr	r3, [pc, #20]	; (800a758 <SysTick_Handler+0x1c>)
 800a742:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800a744:	f002 f824 	bl	800c790 <xTaskGetSchedulerState>
 800a748:	4603      	mov	r3, r0
 800a74a:	2b01      	cmp	r3, #1
 800a74c:	d001      	beq.n	800a752 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800a74e:	f002 fd67 	bl	800d220 <xPortSysTickHandler>
  }
}
 800a752:	bf00      	nop
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	e000e010 	.word	0xe000e010

0800a75c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a75c:	b580      	push	{r7, lr}
 800a75e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a760:	2100      	movs	r1, #0
 800a762:	f06f 0004 	mvn.w	r0, #4
 800a766:	f7ff ffbf 	bl	800a6e8 <__NVIC_SetPriority>
#endif
}
 800a76a:	bf00      	nop
 800a76c:	bd80      	pop	{r7, pc}
	...

0800a770 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a776:	f3ef 8305 	mrs	r3, IPSR
 800a77a:	603b      	str	r3, [r7, #0]
  return(result);
 800a77c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d003      	beq.n	800a78a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a782:	f06f 0305 	mvn.w	r3, #5
 800a786:	607b      	str	r3, [r7, #4]
 800a788:	e00c      	b.n	800a7a4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a78a:	4b0a      	ldr	r3, [pc, #40]	; (800a7b4 <osKernelInitialize+0x44>)
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d105      	bne.n	800a79e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a792:	4b08      	ldr	r3, [pc, #32]	; (800a7b4 <osKernelInitialize+0x44>)
 800a794:	2201      	movs	r2, #1
 800a796:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a798:	2300      	movs	r3, #0
 800a79a:	607b      	str	r3, [r7, #4]
 800a79c:	e002      	b.n	800a7a4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a79e:	f04f 33ff 	mov.w	r3, #4294967295
 800a7a2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a7a4:	687b      	ldr	r3, [r7, #4]
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	370c      	adds	r7, #12
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop
 800a7b4:	2001cbf8 	.word	0x2001cbf8

0800a7b8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a7b8:	b580      	push	{r7, lr}
 800a7ba:	b082      	sub	sp, #8
 800a7bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7be:	f3ef 8305 	mrs	r3, IPSR
 800a7c2:	603b      	str	r3, [r7, #0]
  return(result);
 800a7c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d003      	beq.n	800a7d2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800a7ca:	f06f 0305 	mvn.w	r3, #5
 800a7ce:	607b      	str	r3, [r7, #4]
 800a7d0:	e010      	b.n	800a7f4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a7d2:	4b0b      	ldr	r3, [pc, #44]	; (800a800 <osKernelStart+0x48>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	2b01      	cmp	r3, #1
 800a7d8:	d109      	bne.n	800a7ee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a7da:	f7ff ffbf 	bl	800a75c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a7de:	4b08      	ldr	r3, [pc, #32]	; (800a800 <osKernelStart+0x48>)
 800a7e0:	2202      	movs	r2, #2
 800a7e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a7e4:	f001 fbe2 	bl	800bfac <vTaskStartScheduler>
      stat = osOK;
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	607b      	str	r3, [r7, #4]
 800a7ec:	e002      	b.n	800a7f4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a7ee:	f04f 33ff 	mov.w	r3, #4294967295
 800a7f2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a7f4:	687b      	ldr	r3, [r7, #4]
}
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	3708      	adds	r7, #8
 800a7fa:	46bd      	mov	sp, r7
 800a7fc:	bd80      	pop	{r7, pc}
 800a7fe:	bf00      	nop
 800a800:	2001cbf8 	.word	0x2001cbf8

0800a804 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a804:	b580      	push	{r7, lr}
 800a806:	b08e      	sub	sp, #56	; 0x38
 800a808:	af04      	add	r7, sp, #16
 800a80a:	60f8      	str	r0, [r7, #12]
 800a80c:	60b9      	str	r1, [r7, #8]
 800a80e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a810:	2300      	movs	r3, #0
 800a812:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a814:	f3ef 8305 	mrs	r3, IPSR
 800a818:	617b      	str	r3, [r7, #20]
  return(result);
 800a81a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d17e      	bne.n	800a91e <osThreadNew+0x11a>
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d07b      	beq.n	800a91e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a826:	2380      	movs	r3, #128	; 0x80
 800a828:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a82a:	2318      	movs	r3, #24
 800a82c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a82e:	2300      	movs	r3, #0
 800a830:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800a832:	f04f 33ff 	mov.w	r3, #4294967295
 800a836:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d045      	beq.n	800a8ca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	2b00      	cmp	r3, #0
 800a844:	d002      	beq.n	800a84c <osThreadNew+0x48>
        name = attr->name;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	699b      	ldr	r3, [r3, #24]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d002      	beq.n	800a85a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	699b      	ldr	r3, [r3, #24]
 800a858:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a85a:	69fb      	ldr	r3, [r7, #28]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d008      	beq.n	800a872 <osThreadNew+0x6e>
 800a860:	69fb      	ldr	r3, [r7, #28]
 800a862:	2b38      	cmp	r3, #56	; 0x38
 800a864:	d805      	bhi.n	800a872 <osThreadNew+0x6e>
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	f003 0301 	and.w	r3, r3, #1
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d001      	beq.n	800a876 <osThreadNew+0x72>
        return (NULL);
 800a872:	2300      	movs	r3, #0
 800a874:	e054      	b.n	800a920 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	695b      	ldr	r3, [r3, #20]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d003      	beq.n	800a886 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	695b      	ldr	r3, [r3, #20]
 800a882:	089b      	lsrs	r3, r3, #2
 800a884:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	689b      	ldr	r3, [r3, #8]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d00e      	beq.n	800a8ac <osThreadNew+0xa8>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	68db      	ldr	r3, [r3, #12]
 800a892:	2bbb      	cmp	r3, #187	; 0xbb
 800a894:	d90a      	bls.n	800a8ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d006      	beq.n	800a8ac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	695b      	ldr	r3, [r3, #20]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d002      	beq.n	800a8ac <osThreadNew+0xa8>
        mem = 1;
 800a8a6:	2301      	movs	r3, #1
 800a8a8:	61bb      	str	r3, [r7, #24]
 800a8aa:	e010      	b.n	800a8ce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d10c      	bne.n	800a8ce <osThreadNew+0xca>
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	68db      	ldr	r3, [r3, #12]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d108      	bne.n	800a8ce <osThreadNew+0xca>
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	691b      	ldr	r3, [r3, #16]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d104      	bne.n	800a8ce <osThreadNew+0xca>
          mem = 0;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	61bb      	str	r3, [r7, #24]
 800a8c8:	e001      	b.n	800a8ce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a8ce:	69bb      	ldr	r3, [r7, #24]
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d110      	bne.n	800a8f6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a8dc:	9202      	str	r2, [sp, #8]
 800a8de:	9301      	str	r3, [sp, #4]
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	9300      	str	r3, [sp, #0]
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	6a3a      	ldr	r2, [r7, #32]
 800a8e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f001 f9a8 	bl	800bc40 <xTaskCreateStatic>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	613b      	str	r3, [r7, #16]
 800a8f4:	e013      	b.n	800a91e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d110      	bne.n	800a91e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a8fc:	6a3b      	ldr	r3, [r7, #32]
 800a8fe:	b29a      	uxth	r2, r3
 800a900:	f107 0310 	add.w	r3, r7, #16
 800a904:	9301      	str	r3, [sp, #4]
 800a906:	69fb      	ldr	r3, [r7, #28]
 800a908:	9300      	str	r3, [sp, #0]
 800a90a:	68bb      	ldr	r3, [r7, #8]
 800a90c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a90e:	68f8      	ldr	r0, [r7, #12]
 800a910:	f001 f9db 	bl	800bcca <xTaskCreate>
 800a914:	4603      	mov	r3, r0
 800a916:	2b01      	cmp	r3, #1
 800a918:	d001      	beq.n	800a91e <osThreadNew+0x11a>
            hTask = NULL;
 800a91a:	2300      	movs	r3, #0
 800a91c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a91e:	693b      	ldr	r3, [r7, #16]
}
 800a920:	4618      	mov	r0, r3
 800a922:	3728      	adds	r7, #40	; 0x28
 800a924:	46bd      	mov	sp, r7
 800a926:	bd80      	pop	{r7, pc}

0800a928 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a928:	b580      	push	{r7, lr}
 800a92a:	b084      	sub	sp, #16
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a930:	f3ef 8305 	mrs	r3, IPSR
 800a934:	60bb      	str	r3, [r7, #8]
  return(result);
 800a936:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d003      	beq.n	800a944 <osDelay+0x1c>
    stat = osErrorISR;
 800a93c:	f06f 0305 	mvn.w	r3, #5
 800a940:	60fb      	str	r3, [r7, #12]
 800a942:	e007      	b.n	800a954 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a944:	2300      	movs	r3, #0
 800a946:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d002      	beq.n	800a954 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f001 fb08 	bl	800bf64 <vTaskDelay>
    }
  }

  return (stat);
 800a954:	68fb      	ldr	r3, [r7, #12]
}
 800a956:	4618      	mov	r0, r3
 800a958:	3710      	adds	r7, #16
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}

0800a95e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800a95e:	b580      	push	{r7, lr}
 800a960:	b08a      	sub	sp, #40	; 0x28
 800a962:	af02      	add	r7, sp, #8
 800a964:	60f8      	str	r0, [r7, #12]
 800a966:	60b9      	str	r1, [r7, #8]
 800a968:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800a96a:	2300      	movs	r3, #0
 800a96c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a96e:	f3ef 8305 	mrs	r3, IPSR
 800a972:	613b      	str	r3, [r7, #16]
  return(result);
 800a974:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800a976:	2b00      	cmp	r3, #0
 800a978:	d175      	bne.n	800aa66 <osSemaphoreNew+0x108>
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d072      	beq.n	800aa66 <osSemaphoreNew+0x108>
 800a980:	68ba      	ldr	r2, [r7, #8]
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	429a      	cmp	r2, r3
 800a986:	d86e      	bhi.n	800aa66 <osSemaphoreNew+0x108>
    mem = -1;
 800a988:	f04f 33ff 	mov.w	r3, #4294967295
 800a98c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d015      	beq.n	800a9c0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	689b      	ldr	r3, [r3, #8]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	d006      	beq.n	800a9aa <osSemaphoreNew+0x4c>
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	68db      	ldr	r3, [r3, #12]
 800a9a0:	2b4f      	cmp	r3, #79	; 0x4f
 800a9a2:	d902      	bls.n	800a9aa <osSemaphoreNew+0x4c>
        mem = 1;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	61bb      	str	r3, [r7, #24]
 800a9a8:	e00c      	b.n	800a9c4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d108      	bne.n	800a9c4 <osSemaphoreNew+0x66>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	68db      	ldr	r3, [r3, #12]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d104      	bne.n	800a9c4 <osSemaphoreNew+0x66>
          mem = 0;
 800a9ba:	2300      	movs	r3, #0
 800a9bc:	61bb      	str	r3, [r7, #24]
 800a9be:	e001      	b.n	800a9c4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800a9c4:	69bb      	ldr	r3, [r7, #24]
 800a9c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9ca:	d04c      	beq.n	800aa66 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d128      	bne.n	800aa24 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800a9d2:	69bb      	ldr	r3, [r7, #24]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d10a      	bne.n	800a9ee <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	689b      	ldr	r3, [r3, #8]
 800a9dc:	2203      	movs	r2, #3
 800a9de:	9200      	str	r2, [sp, #0]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	2100      	movs	r1, #0
 800a9e4:	2001      	movs	r0, #1
 800a9e6:	f000 fadf 	bl	800afa8 <xQueueGenericCreateStatic>
 800a9ea:	61f8      	str	r0, [r7, #28]
 800a9ec:	e005      	b.n	800a9fa <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800a9ee:	2203      	movs	r2, #3
 800a9f0:	2100      	movs	r1, #0
 800a9f2:	2001      	movs	r0, #1
 800a9f4:	f000 fb28 	bl	800b048 <xQueueGenericCreate>
 800a9f8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d022      	beq.n	800aa46 <osSemaphoreNew+0xe8>
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d01f      	beq.n	800aa46 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800aa06:	2300      	movs	r3, #0
 800aa08:	2200      	movs	r2, #0
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	69f8      	ldr	r0, [r7, #28]
 800aa0e:	f000 fbba 	bl	800b186 <xQueueGenericSend>
 800aa12:	4603      	mov	r3, r0
 800aa14:	2b01      	cmp	r3, #1
 800aa16:	d016      	beq.n	800aa46 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800aa18:	69f8      	ldr	r0, [r7, #28]
 800aa1a:	f000 ff45 	bl	800b8a8 <vQueueDelete>
            hSemaphore = NULL;
 800aa1e:	2300      	movs	r3, #0
 800aa20:	61fb      	str	r3, [r7, #28]
 800aa22:	e010      	b.n	800aa46 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800aa24:	69bb      	ldr	r3, [r7, #24]
 800aa26:	2b01      	cmp	r3, #1
 800aa28:	d108      	bne.n	800aa3c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	689b      	ldr	r3, [r3, #8]
 800aa2e:	461a      	mov	r2, r3
 800aa30:	68b9      	ldr	r1, [r7, #8]
 800aa32:	68f8      	ldr	r0, [r7, #12]
 800aa34:	f000 fb5d 	bl	800b0f2 <xQueueCreateCountingSemaphoreStatic>
 800aa38:	61f8      	str	r0, [r7, #28]
 800aa3a:	e004      	b.n	800aa46 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800aa3c:	68b9      	ldr	r1, [r7, #8]
 800aa3e:	68f8      	ldr	r0, [r7, #12]
 800aa40:	f000 fb7e 	bl	800b140 <xQueueCreateCountingSemaphore>
 800aa44:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800aa46:	69fb      	ldr	r3, [r7, #28]
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d00c      	beq.n	800aa66 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d003      	beq.n	800aa5a <osSemaphoreNew+0xfc>
          name = attr->name;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	617b      	str	r3, [r7, #20]
 800aa58:	e001      	b.n	800aa5e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800aa5e:	6979      	ldr	r1, [r7, #20]
 800aa60:	69f8      	ldr	r0, [r7, #28]
 800aa62:	f001 f865 	bl	800bb30 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800aa66:	69fb      	ldr	r3, [r7, #28]
}
 800aa68:	4618      	mov	r0, r3
 800aa6a:	3720      	adds	r7, #32
 800aa6c:	46bd      	mov	sp, r7
 800aa6e:	bd80      	pop	{r7, pc}

0800aa70 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800aa70:	b580      	push	{r7, lr}
 800aa72:	b086      	sub	sp, #24
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800aa7e:	2300      	movs	r3, #0
 800aa80:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800aa82:	693b      	ldr	r3, [r7, #16]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d103      	bne.n	800aa90 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800aa88:	f06f 0303 	mvn.w	r3, #3
 800aa8c:	617b      	str	r3, [r7, #20]
 800aa8e:	e035      	b.n	800aafc <osSemaphoreAcquire+0x8c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800aa90:	f3ef 8305 	mrs	r3, IPSR
 800aa94:	60fb      	str	r3, [r7, #12]
  return(result);
 800aa96:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d01e      	beq.n	800aada <osSemaphoreAcquire+0x6a>
    if (timeout != 0U) {
 800aa9c:	683b      	ldr	r3, [r7, #0]
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d003      	beq.n	800aaaa <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800aaa2:	f06f 0303 	mvn.w	r3, #3
 800aaa6:	617b      	str	r3, [r7, #20]
 800aaa8:	e028      	b.n	800aafc <osSemaphoreAcquire+0x8c>
    }
    else {
      yield = pdFALSE;
 800aaaa:	2300      	movs	r3, #0
 800aaac:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800aaae:	f107 0308 	add.w	r3, r7, #8
 800aab2:	461a      	mov	r2, r3
 800aab4:	2100      	movs	r1, #0
 800aab6:	6938      	ldr	r0, [r7, #16]
 800aab8:	f000 fe98 	bl	800b7ec <xQueueReceiveFromISR>
 800aabc:	4603      	mov	r3, r0
 800aabe:	2b01      	cmp	r3, #1
 800aac0:	d003      	beq.n	800aaca <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800aac2:	f06f 0302 	mvn.w	r3, #2
 800aac6:	617b      	str	r3, [r7, #20]
 800aac8:	e018      	b.n	800aafc <osSemaphoreAcquire+0x8c>
      } else {
        portYIELD_FROM_ISR (yield);
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d015      	beq.n	800aafc <osSemaphoreAcquire+0x8c>
 800aad0:	4b0d      	ldr	r3, [pc, #52]	; (800ab08 <osSemaphoreAcquire+0x98>)
 800aad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aad6:	601a      	str	r2, [r3, #0]
 800aad8:	e010      	b.n	800aafc <osSemaphoreAcquire+0x8c>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800aada:	6839      	ldr	r1, [r7, #0]
 800aadc:	6938      	ldr	r0, [r7, #16]
 800aade:	f000 fda8 	bl	800b632 <xQueueSemaphoreTake>
 800aae2:	4603      	mov	r3, r0
 800aae4:	2b01      	cmp	r3, #1
 800aae6:	d009      	beq.n	800aafc <osSemaphoreAcquire+0x8c>
      if (timeout != 0U) {
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d003      	beq.n	800aaf6 <osSemaphoreAcquire+0x86>
        stat = osErrorTimeout;
 800aaee:	f06f 0301 	mvn.w	r3, #1
 800aaf2:	617b      	str	r3, [r7, #20]
 800aaf4:	e002      	b.n	800aafc <osSemaphoreAcquire+0x8c>
      } else {
        stat = osErrorResource;
 800aaf6:	f06f 0302 	mvn.w	r3, #2
 800aafa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800aafc:	697b      	ldr	r3, [r7, #20]
}
 800aafe:	4618      	mov	r0, r3
 800ab00:	3718      	adds	r7, #24
 800ab02:	46bd      	mov	sp, r7
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	bf00      	nop
 800ab08:	e000ed04 	.word	0xe000ed04

0800ab0c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b086      	sub	sp, #24
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800ab18:	2300      	movs	r3, #0
 800ab1a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d103      	bne.n	800ab2a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800ab22:	f06f 0303 	mvn.w	r3, #3
 800ab26:	617b      	str	r3, [r7, #20]
 800ab28:	e028      	b.n	800ab7c <osSemaphoreRelease+0x70>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab2a:	f3ef 8305 	mrs	r3, IPSR
 800ab2e:	60fb      	str	r3, [r7, #12]
  return(result);
 800ab30:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d016      	beq.n	800ab64 <osSemaphoreRelease+0x58>
    yield = pdFALSE;
 800ab36:	2300      	movs	r3, #0
 800ab38:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ab3a:	f107 0308 	add.w	r3, r7, #8
 800ab3e:	4619      	mov	r1, r3
 800ab40:	6938      	ldr	r0, [r7, #16]
 800ab42:	f000 fc5a 	bl	800b3fa <xQueueGiveFromISR>
 800ab46:	4603      	mov	r3, r0
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	d003      	beq.n	800ab54 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800ab4c:	f06f 0302 	mvn.w	r3, #2
 800ab50:	617b      	str	r3, [r7, #20]
 800ab52:	e013      	b.n	800ab7c <osSemaphoreRelease+0x70>
    } else {
      portYIELD_FROM_ISR (yield);
 800ab54:	68bb      	ldr	r3, [r7, #8]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d010      	beq.n	800ab7c <osSemaphoreRelease+0x70>
 800ab5a:	4b0b      	ldr	r3, [pc, #44]	; (800ab88 <osSemaphoreRelease+0x7c>)
 800ab5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ab60:	601a      	str	r2, [r3, #0]
 800ab62:	e00b      	b.n	800ab7c <osSemaphoreRelease+0x70>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ab64:	2300      	movs	r3, #0
 800ab66:	2200      	movs	r2, #0
 800ab68:	2100      	movs	r1, #0
 800ab6a:	6938      	ldr	r0, [r7, #16]
 800ab6c:	f000 fb0b 	bl	800b186 <xQueueGenericSend>
 800ab70:	4603      	mov	r3, r0
 800ab72:	2b01      	cmp	r3, #1
 800ab74:	d002      	beq.n	800ab7c <osSemaphoreRelease+0x70>
      stat = osErrorResource;
 800ab76:	f06f 0302 	mvn.w	r3, #2
 800ab7a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800ab7c:	697b      	ldr	r3, [r7, #20]
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3718      	adds	r7, #24
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	e000ed04 	.word	0xe000ed04

0800ab8c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800ab8c:	b580      	push	{r7, lr}
 800ab8e:	b08a      	sub	sp, #40	; 0x28
 800ab90:	af02      	add	r7, sp, #8
 800ab92:	60f8      	str	r0, [r7, #12]
 800ab94:	60b9      	str	r1, [r7, #8]
 800ab96:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ab9c:	f3ef 8305 	mrs	r3, IPSR
 800aba0:	613b      	str	r3, [r7, #16]
  return(result);
 800aba2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d15f      	bne.n	800ac68 <osMessageQueueNew+0xdc>
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d05c      	beq.n	800ac68 <osMessageQueueNew+0xdc>
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d059      	beq.n	800ac68 <osMessageQueueNew+0xdc>
    mem = -1;
 800abb4:	f04f 33ff 	mov.w	r3, #4294967295
 800abb8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d029      	beq.n	800ac14 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d012      	beq.n	800abee <osMessageQueueNew+0x62>
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	68db      	ldr	r3, [r3, #12]
 800abcc:	2b4f      	cmp	r3, #79	; 0x4f
 800abce:	d90e      	bls.n	800abee <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d00a      	beq.n	800abee <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	695a      	ldr	r2, [r3, #20]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	68b9      	ldr	r1, [r7, #8]
 800abe0:	fb01 f303 	mul.w	r3, r1, r3
 800abe4:	429a      	cmp	r2, r3
 800abe6:	d302      	bcc.n	800abee <osMessageQueueNew+0x62>
        mem = 1;
 800abe8:	2301      	movs	r3, #1
 800abea:	61bb      	str	r3, [r7, #24]
 800abec:	e014      	b.n	800ac18 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	689b      	ldr	r3, [r3, #8]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d110      	bne.n	800ac18 <osMessageQueueNew+0x8c>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	68db      	ldr	r3, [r3, #12]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d10c      	bne.n	800ac18 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d108      	bne.n	800ac18 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	695b      	ldr	r3, [r3, #20]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d104      	bne.n	800ac18 <osMessageQueueNew+0x8c>
          mem = 0;
 800ac0e:	2300      	movs	r3, #0
 800ac10:	61bb      	str	r3, [r7, #24]
 800ac12:	e001      	b.n	800ac18 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800ac14:	2300      	movs	r3, #0
 800ac16:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800ac18:	69bb      	ldr	r3, [r7, #24]
 800ac1a:	2b01      	cmp	r3, #1
 800ac1c:	d10b      	bne.n	800ac36 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	691a      	ldr	r2, [r3, #16]
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	689b      	ldr	r3, [r3, #8]
 800ac26:	2100      	movs	r1, #0
 800ac28:	9100      	str	r1, [sp, #0]
 800ac2a:	68b9      	ldr	r1, [r7, #8]
 800ac2c:	68f8      	ldr	r0, [r7, #12]
 800ac2e:	f000 f9bb 	bl	800afa8 <xQueueGenericCreateStatic>
 800ac32:	61f8      	str	r0, [r7, #28]
 800ac34:	e008      	b.n	800ac48 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800ac36:	69bb      	ldr	r3, [r7, #24]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d105      	bne.n	800ac48 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800ac3c:	2200      	movs	r2, #0
 800ac3e:	68b9      	ldr	r1, [r7, #8]
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	f000 fa01 	bl	800b048 <xQueueGenericCreate>
 800ac46:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800ac48:	69fb      	ldr	r3, [r7, #28]
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	d00c      	beq.n	800ac68 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d003      	beq.n	800ac5c <osMessageQueueNew+0xd0>
        name = attr->name;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	617b      	str	r3, [r7, #20]
 800ac5a:	e001      	b.n	800ac60 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800ac5c:	2300      	movs	r3, #0
 800ac5e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800ac60:	6979      	ldr	r1, [r7, #20]
 800ac62:	69f8      	ldr	r0, [r7, #28]
 800ac64:	f000 ff64 	bl	800bb30 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800ac68:	69fb      	ldr	r3, [r7, #28]
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3720      	adds	r7, #32
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
	...

0800ac74 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b088      	sub	sp, #32
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	60f8      	str	r0, [r7, #12]
 800ac7c:	60b9      	str	r1, [r7, #8]
 800ac7e:	607a      	str	r2, [r7, #4]
 800ac80:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800ac86:	2300      	movs	r3, #0
 800ac88:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ac8a:	f3ef 8305 	mrs	r3, IPSR
 800ac8e:	617b      	str	r3, [r7, #20]
  return(result);
 800ac90:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d024      	beq.n	800ace0 <osMessageQueueGet+0x6c>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ac96:	69bb      	ldr	r3, [r7, #24]
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d005      	beq.n	800aca8 <osMessageQueueGet+0x34>
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d002      	beq.n	800aca8 <osMessageQueueGet+0x34>
 800aca2:	683b      	ldr	r3, [r7, #0]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d003      	beq.n	800acb0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800aca8:	f06f 0303 	mvn.w	r3, #3
 800acac:	61fb      	str	r3, [r7, #28]
 800acae:	e033      	b.n	800ad18 <osMessageQueueGet+0xa4>
    }
    else {
      yield = pdFALSE;
 800acb0:	2300      	movs	r3, #0
 800acb2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800acb4:	f107 0310 	add.w	r3, r7, #16
 800acb8:	461a      	mov	r2, r3
 800acba:	68b9      	ldr	r1, [r7, #8]
 800acbc:	69b8      	ldr	r0, [r7, #24]
 800acbe:	f000 fd95 	bl	800b7ec <xQueueReceiveFromISR>
 800acc2:	4603      	mov	r3, r0
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d003      	beq.n	800acd0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800acc8:	f06f 0302 	mvn.w	r3, #2
 800accc:	61fb      	str	r3, [r7, #28]
 800acce:	e023      	b.n	800ad18 <osMessageQueueGet+0xa4>
      } else {
        portYIELD_FROM_ISR (yield);
 800acd0:	693b      	ldr	r3, [r7, #16]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d020      	beq.n	800ad18 <osMessageQueueGet+0xa4>
 800acd6:	4b13      	ldr	r3, [pc, #76]	; (800ad24 <osMessageQueueGet+0xb0>)
 800acd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acdc:	601a      	str	r2, [r3, #0]
 800acde:	e01b      	b.n	800ad18 <osMessageQueueGet+0xa4>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ace0:	69bb      	ldr	r3, [r7, #24]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d002      	beq.n	800acec <osMessageQueueGet+0x78>
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d103      	bne.n	800acf4 <osMessageQueueGet+0x80>
      stat = osErrorParameter;
 800acec:	f06f 0303 	mvn.w	r3, #3
 800acf0:	61fb      	str	r3, [r7, #28]
 800acf2:	e011      	b.n	800ad18 <osMessageQueueGet+0xa4>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800acf4:	683a      	ldr	r2, [r7, #0]
 800acf6:	68b9      	ldr	r1, [r7, #8]
 800acf8:	69b8      	ldr	r0, [r7, #24]
 800acfa:	f000 fbe1 	bl	800b4c0 <xQueueReceive>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d009      	beq.n	800ad18 <osMessageQueueGet+0xa4>
        if (timeout != 0U) {
 800ad04:	683b      	ldr	r3, [r7, #0]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d003      	beq.n	800ad12 <osMessageQueueGet+0x9e>
          stat = osErrorTimeout;
 800ad0a:	f06f 0301 	mvn.w	r3, #1
 800ad0e:	61fb      	str	r3, [r7, #28]
 800ad10:	e002      	b.n	800ad18 <osMessageQueueGet+0xa4>
        } else {
          stat = osErrorResource;
 800ad12:	f06f 0302 	mvn.w	r3, #2
 800ad16:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800ad18:	69fb      	ldr	r3, [r7, #28]
}
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	3720      	adds	r7, #32
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	e000ed04 	.word	0xe000ed04

0800ad28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800ad28:	b480      	push	{r7}
 800ad2a:	b085      	sub	sp, #20
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	60f8      	str	r0, [r7, #12]
 800ad30:	60b9      	str	r1, [r7, #8]
 800ad32:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	4a07      	ldr	r2, [pc, #28]	; (800ad54 <vApplicationGetIdleTaskMemory+0x2c>)
 800ad38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	4a06      	ldr	r2, [pc, #24]	; (800ad58 <vApplicationGetIdleTaskMemory+0x30>)
 800ad3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2280      	movs	r2, #128	; 0x80
 800ad44:	601a      	str	r2, [r3, #0]
}
 800ad46:	bf00      	nop
 800ad48:	3714      	adds	r7, #20
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad50:	4770      	bx	lr
 800ad52:	bf00      	nop
 800ad54:	2001cbfc 	.word	0x2001cbfc
 800ad58:	2001ccb8 	.word	0x2001ccb8

0800ad5c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800ad5c:	b480      	push	{r7}
 800ad5e:	b085      	sub	sp, #20
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	4a07      	ldr	r2, [pc, #28]	; (800ad88 <vApplicationGetTimerTaskMemory+0x2c>)
 800ad6c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	4a06      	ldr	r2, [pc, #24]	; (800ad8c <vApplicationGetTimerTaskMemory+0x30>)
 800ad72:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ad7a:	601a      	str	r2, [r3, #0]
}
 800ad7c:	bf00      	nop
 800ad7e:	3714      	adds	r7, #20
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr
 800ad88:	2001ceb8 	.word	0x2001ceb8
 800ad8c:	2001cf74 	.word	0x2001cf74

0800ad90 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800ad90:	b480      	push	{r7}
 800ad92:	b083      	sub	sp, #12
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	f103 0208 	add.w	r2, r3, #8
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f04f 32ff 	mov.w	r2, #4294967295
 800ada8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	f103 0208 	add.w	r2, r3, #8
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	f103 0208 	add.w	r2, r3, #8
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2200      	movs	r2, #0
 800adc2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800adc4:	bf00      	nop
 800adc6:	370c      	adds	r7, #12
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800add0:	b480      	push	{r7}
 800add2:	b083      	sub	sp, #12
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2200      	movs	r2, #0
 800addc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800adde:	bf00      	nop
 800ade0:	370c      	adds	r7, #12
 800ade2:	46bd      	mov	sp, r7
 800ade4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade8:	4770      	bx	lr

0800adea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800adea:	b480      	push	{r7}
 800adec:	b085      	sub	sp, #20
 800adee:	af00      	add	r7, sp, #0
 800adf0:	6078      	str	r0, [r7, #4]
 800adf2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	685b      	ldr	r3, [r3, #4]
 800adf8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	68fa      	ldr	r2, [r7, #12]
 800adfe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	689a      	ldr	r2, [r3, #8]
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	683a      	ldr	r2, [r7, #0]
 800ae0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	683a      	ldr	r2, [r7, #0]
 800ae14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	687a      	ldr	r2, [r7, #4]
 800ae1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	1c5a      	adds	r2, r3, #1
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	601a      	str	r2, [r3, #0]
}
 800ae26:	bf00      	nop
 800ae28:	3714      	adds	r7, #20
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae30:	4770      	bx	lr

0800ae32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ae32:	b480      	push	{r7}
 800ae34:	b085      	sub	sp, #20
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
 800ae3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ae3c:	683b      	ldr	r3, [r7, #0]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae48:	d103      	bne.n	800ae52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	691b      	ldr	r3, [r3, #16]
 800ae4e:	60fb      	str	r3, [r7, #12]
 800ae50:	e00c      	b.n	800ae6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	3308      	adds	r3, #8
 800ae56:	60fb      	str	r3, [r7, #12]
 800ae58:	e002      	b.n	800ae60 <vListInsert+0x2e>
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	60fb      	str	r3, [r7, #12]
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	685b      	ldr	r3, [r3, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	68ba      	ldr	r2, [r7, #8]
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d2f6      	bcs.n	800ae5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	685a      	ldr	r2, [r3, #4]
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	685b      	ldr	r3, [r3, #4]
 800ae78:	683a      	ldr	r2, [r7, #0]
 800ae7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	68fa      	ldr	r2, [r7, #12]
 800ae80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	683a      	ldr	r2, [r7, #0]
 800ae86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	687a      	ldr	r2, [r7, #4]
 800ae8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	681b      	ldr	r3, [r3, #0]
 800ae92:	1c5a      	adds	r2, r3, #1
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	601a      	str	r2, [r3, #0]
}
 800ae98:	bf00      	nop
 800ae9a:	3714      	adds	r7, #20
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr

0800aea4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aea4:	b480      	push	{r7}
 800aea6:	b085      	sub	sp, #20
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	691b      	ldr	r3, [r3, #16]
 800aeb0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	687a      	ldr	r2, [r7, #4]
 800aeb8:	6892      	ldr	r2, [r2, #8]
 800aeba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	689b      	ldr	r3, [r3, #8]
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	6852      	ldr	r2, [r2, #4]
 800aec4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	687a      	ldr	r2, [r7, #4]
 800aecc:	429a      	cmp	r2, r3
 800aece:	d103      	bne.n	800aed8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	689a      	ldr	r2, [r3, #8]
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2200      	movs	r2, #0
 800aedc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	1e5a      	subs	r2, r3, #1
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3714      	adds	r7, #20
 800aef0:	46bd      	mov	sp, r7
 800aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef6:	4770      	bx	lr

0800aef8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b084      	sub	sp, #16
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d102      	bne.n	800af12 <xQueueGenericReset+0x1a>
 800af0c:	f002 fa94 	bl	800d438 <ulSetInterruptMask>
 800af10:	e7fe      	b.n	800af10 <xQueueGenericReset+0x18>

	taskENTER_CRITICAL();
 800af12:	f002 f959 	bl	800d1c8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681a      	ldr	r2, [r3, #0]
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af1e:	68f9      	ldr	r1, [r7, #12]
 800af20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800af22:	fb01 f303 	mul.w	r3, r1, r3
 800af26:	441a      	add	r2, r3
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2200      	movs	r2, #0
 800af30:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681a      	ldr	r2, [r3, #0]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800af42:	3b01      	subs	r3, #1
 800af44:	68f9      	ldr	r1, [r7, #12]
 800af46:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800af48:	fb01 f303 	mul.w	r3, r1, r3
 800af4c:	441a      	add	r2, r3
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	22ff      	movs	r2, #255	; 0xff
 800af56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	22ff      	movs	r2, #255	; 0xff
 800af5e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800af62:	683b      	ldr	r3, [r7, #0]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d10e      	bne.n	800af86 <xQueueGenericReset+0x8e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	691b      	ldr	r3, [r3, #16]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d014      	beq.n	800af9a <xQueueGenericReset+0xa2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	3310      	adds	r3, #16
 800af74:	4618      	mov	r0, r3
 800af76:	f001 fa71 	bl	800c45c <xTaskRemoveFromEventList>
 800af7a:	4603      	mov	r3, r0
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d00c      	beq.n	800af9a <xQueueGenericReset+0xa2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800af80:	f002 f910 	bl	800d1a4 <vPortYield>
 800af84:	e009      	b.n	800af9a <xQueueGenericReset+0xa2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	3310      	adds	r3, #16
 800af8a:	4618      	mov	r0, r3
 800af8c:	f7ff ff00 	bl	800ad90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	3324      	adds	r3, #36	; 0x24
 800af94:	4618      	mov	r0, r3
 800af96:	f7ff fefb 	bl	800ad90 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800af9a:	f002 f927 	bl	800d1ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800af9e:	2301      	movs	r3, #1
}
 800afa0:	4618      	mov	r0, r3
 800afa2:	3710      	adds	r7, #16
 800afa4:	46bd      	mov	sp, r7
 800afa6:	bd80      	pop	{r7, pc}

0800afa8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b088      	sub	sp, #32
 800afac:	af02      	add	r7, sp, #8
 800afae:	60f8      	str	r0, [r7, #12]
 800afb0:	60b9      	str	r1, [r7, #8]
 800afb2:	607a      	str	r2, [r7, #4]
 800afb4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	2b00      	cmp	r3, #0
 800afba:	d102      	bne.n	800afc2 <xQueueGenericCreateStatic+0x1a>
 800afbc:	f002 fa3c 	bl	800d438 <ulSetInterruptMask>
 800afc0:	e7fe      	b.n	800afc0 <xQueueGenericCreateStatic+0x18>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d102      	bne.n	800afce <xQueueGenericCreateStatic+0x26>
 800afc8:	f002 fa36 	bl	800d438 <ulSetInterruptMask>
 800afcc:	e7fe      	b.n	800afcc <xQueueGenericCreateStatic+0x24>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d002      	beq.n	800afda <xQueueGenericCreateStatic+0x32>
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d001      	beq.n	800afde <xQueueGenericCreateStatic+0x36>
 800afda:	2301      	movs	r3, #1
 800afdc:	e000      	b.n	800afe0 <xQueueGenericCreateStatic+0x38>
 800afde:	2300      	movs	r3, #0
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d102      	bne.n	800afea <xQueueGenericCreateStatic+0x42>
 800afe4:	f002 fa28 	bl	800d438 <ulSetInterruptMask>
 800afe8:	e7fe      	b.n	800afe8 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d102      	bne.n	800aff6 <xQueueGenericCreateStatic+0x4e>
 800aff0:	68bb      	ldr	r3, [r7, #8]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d101      	bne.n	800affa <xQueueGenericCreateStatic+0x52>
 800aff6:	2301      	movs	r3, #1
 800aff8:	e000      	b.n	800affc <xQueueGenericCreateStatic+0x54>
 800affa:	2300      	movs	r3, #0
 800affc:	2b00      	cmp	r3, #0
 800affe:	d102      	bne.n	800b006 <xQueueGenericCreateStatic+0x5e>
 800b000:	f002 fa1a 	bl	800d438 <ulSetInterruptMask>
 800b004:	e7fe      	b.n	800b004 <xQueueGenericCreateStatic+0x5c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b006:	2350      	movs	r3, #80	; 0x50
 800b008:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b00a:	693b      	ldr	r3, [r7, #16]
 800b00c:	2b50      	cmp	r3, #80	; 0x50
 800b00e:	d002      	beq.n	800b016 <xQueueGenericCreateStatic+0x6e>
 800b010:	f002 fa12 	bl	800d438 <ulSetInterruptMask>
 800b014:	e7fe      	b.n	800b014 <xQueueGenericCreateStatic+0x6c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b016:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d00d      	beq.n	800b03e <xQueueGenericCreateStatic+0x96>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	2201      	movs	r2, #1
 800b026:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b02a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b02e:	697b      	ldr	r3, [r7, #20]
 800b030:	9300      	str	r3, [sp, #0]
 800b032:	4613      	mov	r3, r2
 800b034:	687a      	ldr	r2, [r7, #4]
 800b036:	68b9      	ldr	r1, [r7, #8]
 800b038:	68f8      	ldr	r0, [r7, #12]
 800b03a:	f000 f837 	bl	800b0ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b03e:	697b      	ldr	r3, [r7, #20]
	}
 800b040:	4618      	mov	r0, r3
 800b042:	3718      	adds	r7, #24
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b08a      	sub	sp, #40	; 0x28
 800b04c:	af02      	add	r7, sp, #8
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	4613      	mov	r3, r2
 800b054:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d102      	bne.n	800b062 <xQueueGenericCreate+0x1a>
 800b05c:	f002 f9ec 	bl	800d438 <ulSetInterruptMask>
 800b060:	e7fe      	b.n	800b060 <xQueueGenericCreate+0x18>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	68ba      	ldr	r2, [r7, #8]
 800b066:	fb02 f303 	mul.w	r3, r2, r3
 800b06a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800b06c:	69fb      	ldr	r3, [r7, #28]
 800b06e:	3350      	adds	r3, #80	; 0x50
 800b070:	4618      	mov	r0, r3
 800b072:	f002 fa41 	bl	800d4f8 <pvPortMalloc>
 800b076:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800b078:	69bb      	ldr	r3, [r7, #24]
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d011      	beq.n	800b0a2 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800b07e:	69bb      	ldr	r3, [r7, #24]
 800b080:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	3350      	adds	r3, #80	; 0x50
 800b086:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800b088:	69bb      	ldr	r3, [r7, #24]
 800b08a:	2200      	movs	r2, #0
 800b08c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800b090:	79fa      	ldrb	r2, [r7, #7]
 800b092:	69bb      	ldr	r3, [r7, #24]
 800b094:	9300      	str	r3, [sp, #0]
 800b096:	4613      	mov	r3, r2
 800b098:	697a      	ldr	r2, [r7, #20]
 800b09a:	68b9      	ldr	r1, [r7, #8]
 800b09c:	68f8      	ldr	r0, [r7, #12]
 800b09e:	f000 f805 	bl	800b0ac <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800b0a2:	69bb      	ldr	r3, [r7, #24]
	}
 800b0a4:	4618      	mov	r0, r3
 800b0a6:	3720      	adds	r7, #32
 800b0a8:	46bd      	mov	sp, r7
 800b0aa:	bd80      	pop	{r7, pc}

0800b0ac <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800b0ac:	b580      	push	{r7, lr}
 800b0ae:	b084      	sub	sp, #16
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	60f8      	str	r0, [r7, #12]
 800b0b4:	60b9      	str	r1, [r7, #8]
 800b0b6:	607a      	str	r2, [r7, #4]
 800b0b8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800b0ba:	68bb      	ldr	r3, [r7, #8]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d103      	bne.n	800b0c8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800b0c0:	69bb      	ldr	r3, [r7, #24]
 800b0c2:	69ba      	ldr	r2, [r7, #24]
 800b0c4:	601a      	str	r2, [r3, #0]
 800b0c6:	e002      	b.n	800b0ce <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800b0c8:	69bb      	ldr	r3, [r7, #24]
 800b0ca:	687a      	ldr	r2, [r7, #4]
 800b0cc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800b0ce:	69bb      	ldr	r3, [r7, #24]
 800b0d0:	68fa      	ldr	r2, [r7, #12]
 800b0d2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	68ba      	ldr	r2, [r7, #8]
 800b0d8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800b0da:	2101      	movs	r1, #1
 800b0dc:	69b8      	ldr	r0, [r7, #24]
 800b0de:	f7ff ff0b 	bl	800aef8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800b0e2:	69bb      	ldr	r3, [r7, #24]
 800b0e4:	78fa      	ldrb	r2, [r7, #3]
 800b0e6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800b0ea:	bf00      	nop
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b088      	sub	sp, #32
 800b0f6:	af02      	add	r7, sp, #8
 800b0f8:	60f8      	str	r0, [r7, #12]
 800b0fa:	60b9      	str	r1, [r7, #8]
 800b0fc:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d102      	bne.n	800b10a <xQueueCreateCountingSemaphoreStatic+0x18>
 800b104:	f002 f998 	bl	800d438 <ulSetInterruptMask>
 800b108:	e7fe      	b.n	800b108 <xQueueCreateCountingSemaphoreStatic+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b10a:	68ba      	ldr	r2, [r7, #8]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	429a      	cmp	r2, r3
 800b110:	d902      	bls.n	800b118 <xQueueCreateCountingSemaphoreStatic+0x26>
 800b112:	f002 f991 	bl	800d438 <ulSetInterruptMask>
 800b116:	e7fe      	b.n	800b116 <xQueueCreateCountingSemaphoreStatic+0x24>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b118:	2302      	movs	r3, #2
 800b11a:	9300      	str	r3, [sp, #0]
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	2200      	movs	r2, #0
 800b120:	2100      	movs	r1, #0
 800b122:	68f8      	ldr	r0, [r7, #12]
 800b124:	f7ff ff40 	bl	800afa8 <xQueueGenericCreateStatic>
 800b128:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800b12a:	697b      	ldr	r3, [r7, #20]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d002      	beq.n	800b136 <xQueueCreateCountingSemaphoreStatic+0x44>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	68ba      	ldr	r2, [r7, #8]
 800b134:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b136:	697b      	ldr	r3, [r7, #20]
	}
 800b138:	4618      	mov	r0, r3
 800b13a:	3718      	adds	r7, #24
 800b13c:	46bd      	mov	sp, r7
 800b13e:	bd80      	pop	{r7, pc}

0800b140 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800b140:	b580      	push	{r7, lr}
 800b142:	b084      	sub	sp, #16
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
 800b148:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d102      	bne.n	800b156 <xQueueCreateCountingSemaphore+0x16>
 800b150:	f002 f972 	bl	800d438 <ulSetInterruptMask>
 800b154:	e7fe      	b.n	800b154 <xQueueCreateCountingSemaphore+0x14>
		configASSERT( uxInitialCount <= uxMaxCount );
 800b156:	683a      	ldr	r2, [r7, #0]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	429a      	cmp	r2, r3
 800b15c:	d902      	bls.n	800b164 <xQueueCreateCountingSemaphore+0x24>
 800b15e:	f002 f96b 	bl	800d438 <ulSetInterruptMask>
 800b162:	e7fe      	b.n	800b162 <xQueueCreateCountingSemaphore+0x22>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800b164:	2202      	movs	r2, #2
 800b166:	2100      	movs	r1, #0
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f7ff ff6d 	bl	800b048 <xQueueGenericCreate>
 800b16e:	60f8      	str	r0, [r7, #12]

		if( xHandle != NULL )
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d002      	beq.n	800b17c <xQueueCreateCountingSemaphore+0x3c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	683a      	ldr	r2, [r7, #0]
 800b17a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800b17c:	68fb      	ldr	r3, [r7, #12]
	}
 800b17e:	4618      	mov	r0, r3
 800b180:	3710      	adds	r7, #16
 800b182:	46bd      	mov	sp, r7
 800b184:	bd80      	pop	{r7, pc}

0800b186 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800b186:	b580      	push	{r7, lr}
 800b188:	b08a      	sub	sp, #40	; 0x28
 800b18a:	af00      	add	r7, sp, #0
 800b18c:	60f8      	str	r0, [r7, #12]
 800b18e:	60b9      	str	r1, [r7, #8]
 800b190:	607a      	str	r2, [r7, #4]
 800b192:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800b194:	2300      	movs	r3, #0
 800b196:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800b19c:	6a3b      	ldr	r3, [r7, #32]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d102      	bne.n	800b1a8 <xQueueGenericSend+0x22>
 800b1a2:	f002 f949 	bl	800d438 <ulSetInterruptMask>
 800b1a6:	e7fe      	b.n	800b1a6 <xQueueGenericSend+0x20>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d103      	bne.n	800b1b6 <xQueueGenericSend+0x30>
 800b1ae:	6a3b      	ldr	r3, [r7, #32]
 800b1b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d101      	bne.n	800b1ba <xQueueGenericSend+0x34>
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	e000      	b.n	800b1bc <xQueueGenericSend+0x36>
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d102      	bne.n	800b1c6 <xQueueGenericSend+0x40>
 800b1c0:	f002 f93a 	bl	800d438 <ulSetInterruptMask>
 800b1c4:	e7fe      	b.n	800b1c4 <xQueueGenericSend+0x3e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	2b02      	cmp	r3, #2
 800b1ca:	d103      	bne.n	800b1d4 <xQueueGenericSend+0x4e>
 800b1cc:	6a3b      	ldr	r3, [r7, #32]
 800b1ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1d0:	2b01      	cmp	r3, #1
 800b1d2:	d101      	bne.n	800b1d8 <xQueueGenericSend+0x52>
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	e000      	b.n	800b1da <xQueueGenericSend+0x54>
 800b1d8:	2300      	movs	r3, #0
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d102      	bne.n	800b1e4 <xQueueGenericSend+0x5e>
 800b1de:	f002 f92b 	bl	800d438 <ulSetInterruptMask>
 800b1e2:	e7fe      	b.n	800b1e2 <xQueueGenericSend+0x5c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b1e4:	f001 fad4 	bl	800c790 <xTaskGetSchedulerState>
 800b1e8:	4603      	mov	r3, r0
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d102      	bne.n	800b1f4 <xQueueGenericSend+0x6e>
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d101      	bne.n	800b1f8 <xQueueGenericSend+0x72>
 800b1f4:	2301      	movs	r3, #1
 800b1f6:	e000      	b.n	800b1fa <xQueueGenericSend+0x74>
 800b1f8:	2300      	movs	r3, #0
 800b1fa:	2b00      	cmp	r3, #0
 800b1fc:	d102      	bne.n	800b204 <xQueueGenericSend+0x7e>
 800b1fe:	f002 f91b 	bl	800d438 <ulSetInterruptMask>
 800b202:	e7fe      	b.n	800b202 <xQueueGenericSend+0x7c>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b204:	f001 ffe0 	bl	800d1c8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b208:	6a3b      	ldr	r3, [r7, #32]
 800b20a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b20c:	6a3b      	ldr	r3, [r7, #32]
 800b20e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b210:	429a      	cmp	r2, r3
 800b212:	d302      	bcc.n	800b21a <xQueueGenericSend+0x94>
 800b214:	683b      	ldr	r3, [r7, #0]
 800b216:	2b02      	cmp	r3, #2
 800b218:	d11d      	bne.n	800b256 <xQueueGenericSend+0xd0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b21a:	683a      	ldr	r2, [r7, #0]
 800b21c:	68b9      	ldr	r1, [r7, #8]
 800b21e:	6a38      	ldr	r0, [r7, #32]
 800b220:	f000 fb75 	bl	800b90e <prvCopyDataToQueue>
 800b224:	61f8      	str	r0, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b226:	6a3b      	ldr	r3, [r7, #32]
 800b228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d00a      	beq.n	800b244 <xQueueGenericSend+0xbe>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b22e:	6a3b      	ldr	r3, [r7, #32]
 800b230:	3324      	adds	r3, #36	; 0x24
 800b232:	4618      	mov	r0, r3
 800b234:	f001 f912 	bl	800c45c <xTaskRemoveFromEventList>
 800b238:	4603      	mov	r3, r0
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d007      	beq.n	800b24e <xQueueGenericSend+0xc8>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800b23e:	f001 ffb1 	bl	800d1a4 <vPortYield>
 800b242:	e004      	b.n	800b24e <xQueueGenericSend+0xc8>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d001      	beq.n	800b24e <xQueueGenericSend+0xc8>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800b24a:	f001 ffab 	bl	800d1a4 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800b24e:	f001 ffcd 	bl	800d1ec <vPortExitCritical>
				return pdPASS;
 800b252:	2301      	movs	r3, #1
 800b254:	e05c      	b.n	800b310 <xQueueGenericSend+0x18a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d103      	bne.n	800b264 <xQueueGenericSend+0xde>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b25c:	f001 ffc6 	bl	800d1ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800b260:	2300      	movs	r3, #0
 800b262:	e055      	b.n	800b310 <xQueueGenericSend+0x18a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b266:	2b00      	cmp	r3, #0
 800b268:	d106      	bne.n	800b278 <xQueueGenericSend+0xf2>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b26a:	f107 0314 	add.w	r3, r7, #20
 800b26e:	4618      	mov	r0, r3
 800b270:	f001 f950 	bl	800c514 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b274:	2301      	movs	r3, #1
 800b276:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b278:	f001 ffb8 	bl	800d1ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b27c:	f000 fef6 	bl	800c06c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b280:	f001 ffa2 	bl	800d1c8 <vPortEnterCritical>
 800b284:	6a3b      	ldr	r3, [r7, #32]
 800b286:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b28a:	b25b      	sxtb	r3, r3
 800b28c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b290:	d103      	bne.n	800b29a <xQueueGenericSend+0x114>
 800b292:	6a3b      	ldr	r3, [r7, #32]
 800b294:	2200      	movs	r2, #0
 800b296:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b29a:	6a3b      	ldr	r3, [r7, #32]
 800b29c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b2a0:	b25b      	sxtb	r3, r3
 800b2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2a6:	d103      	bne.n	800b2b0 <xQueueGenericSend+0x12a>
 800b2a8:	6a3b      	ldr	r3, [r7, #32]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b2b0:	f001 ff9c 	bl	800d1ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b2b4:	1d3a      	adds	r2, r7, #4
 800b2b6:	f107 0314 	add.w	r3, r7, #20
 800b2ba:	4611      	mov	r1, r2
 800b2bc:	4618      	mov	r0, r3
 800b2be:	f001 f93f 	bl	800c540 <xTaskCheckForTimeOut>
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d11d      	bne.n	800b304 <xQueueGenericSend+0x17e>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800b2c8:	6a38      	ldr	r0, [r7, #32]
 800b2ca:	f000 fc18 	bl	800bafe <prvIsQueueFull>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d011      	beq.n	800b2f8 <xQueueGenericSend+0x172>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800b2d4:	6a3b      	ldr	r3, [r7, #32]
 800b2d6:	3310      	adds	r3, #16
 800b2d8:	687a      	ldr	r2, [r7, #4]
 800b2da:	4611      	mov	r1, r2
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f001 f87d 	bl	800c3dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800b2e2:	6a38      	ldr	r0, [r7, #32]
 800b2e4:	f000 fba3 	bl	800ba2e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800b2e8:	f000 fece 	bl	800c088 <xTaskResumeAll>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d188      	bne.n	800b204 <xQueueGenericSend+0x7e>
				{
					portYIELD_WITHIN_API();
 800b2f2:	f001 ff57 	bl	800d1a4 <vPortYield>
 800b2f6:	e785      	b.n	800b204 <xQueueGenericSend+0x7e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800b2f8:	6a38      	ldr	r0, [r7, #32]
 800b2fa:	f000 fb98 	bl	800ba2e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b2fe:	f000 fec3 	bl	800c088 <xTaskResumeAll>
 800b302:	e77f      	b.n	800b204 <xQueueGenericSend+0x7e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800b304:	6a38      	ldr	r0, [r7, #32]
 800b306:	f000 fb92 	bl	800ba2e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b30a:	f000 febd 	bl	800c088 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800b30e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800b310:	4618      	mov	r0, r3
 800b312:	3728      	adds	r7, #40	; 0x28
 800b314:	46bd      	mov	sp, r7
 800b316:	bd80      	pop	{r7, pc}

0800b318 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b08a      	sub	sp, #40	; 0x28
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	60b9      	str	r1, [r7, #8]
 800b322:	607a      	str	r2, [r7, #4]
 800b324:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800b32a:	6a3b      	ldr	r3, [r7, #32]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d102      	bne.n	800b336 <xQueueGenericSendFromISR+0x1e>
 800b330:	f002 f882 	bl	800d438 <ulSetInterruptMask>
 800b334:	e7fe      	b.n	800b334 <xQueueGenericSendFromISR+0x1c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d103      	bne.n	800b344 <xQueueGenericSendFromISR+0x2c>
 800b33c:	6a3b      	ldr	r3, [r7, #32]
 800b33e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b340:	2b00      	cmp	r3, #0
 800b342:	d101      	bne.n	800b348 <xQueueGenericSendFromISR+0x30>
 800b344:	2301      	movs	r3, #1
 800b346:	e000      	b.n	800b34a <xQueueGenericSendFromISR+0x32>
 800b348:	2300      	movs	r3, #0
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d102      	bne.n	800b354 <xQueueGenericSendFromISR+0x3c>
 800b34e:	f002 f873 	bl	800d438 <ulSetInterruptMask>
 800b352:	e7fe      	b.n	800b352 <xQueueGenericSendFromISR+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	2b02      	cmp	r3, #2
 800b358:	d103      	bne.n	800b362 <xQueueGenericSendFromISR+0x4a>
 800b35a:	6a3b      	ldr	r3, [r7, #32]
 800b35c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b35e:	2b01      	cmp	r3, #1
 800b360:	d101      	bne.n	800b366 <xQueueGenericSendFromISR+0x4e>
 800b362:	2301      	movs	r3, #1
 800b364:	e000      	b.n	800b368 <xQueueGenericSendFromISR+0x50>
 800b366:	2300      	movs	r3, #0
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d102      	bne.n	800b372 <xQueueGenericSendFromISR+0x5a>
 800b36c:	f002 f864 	bl	800d438 <ulSetInterruptMask>
 800b370:	e7fe      	b.n	800b370 <xQueueGenericSendFromISR+0x58>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b372:	f002 f861 	bl	800d438 <ulSetInterruptMask>
 800b376:	61f8      	str	r0, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800b378:	6a3b      	ldr	r3, [r7, #32]
 800b37a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b37c:	6a3b      	ldr	r3, [r7, #32]
 800b37e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b380:	429a      	cmp	r2, r3
 800b382:	d302      	bcc.n	800b38a <xQueueGenericSendFromISR+0x72>
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	2b02      	cmp	r3, #2
 800b388:	d12d      	bne.n	800b3e6 <xQueueGenericSendFromISR+0xce>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b38a:	6a3b      	ldr	r3, [r7, #32]
 800b38c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b390:	76fb      	strb	r3, [r7, #27]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b392:	6a3b      	ldr	r3, [r7, #32]
 800b394:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b396:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800b398:	683a      	ldr	r2, [r7, #0]
 800b39a:	68b9      	ldr	r1, [r7, #8]
 800b39c:	6a38      	ldr	r0, [r7, #32]
 800b39e:	f000 fab6 	bl	800b90e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b3a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3aa:	d112      	bne.n	800b3d2 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b3ac:	6a3b      	ldr	r3, [r7, #32]
 800b3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d015      	beq.n	800b3e0 <xQueueGenericSendFromISR+0xc8>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b3b4:	6a3b      	ldr	r3, [r7, #32]
 800b3b6:	3324      	adds	r3, #36	; 0x24
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	f001 f84f 	bl	800c45c <xTaskRemoveFromEventList>
 800b3be:	4603      	mov	r3, r0
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d00d      	beq.n	800b3e0 <xQueueGenericSendFromISR+0xc8>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d00a      	beq.n	800b3e0 <xQueueGenericSendFromISR+0xc8>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2201      	movs	r2, #1
 800b3ce:	601a      	str	r2, [r3, #0]
 800b3d0:	e006      	b.n	800b3e0 <xQueueGenericSendFromISR+0xc8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b3d2:	7efb      	ldrb	r3, [r7, #27]
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	b2db      	uxtb	r3, r3
 800b3d8:	b25a      	sxtb	r2, r3
 800b3da:	6a3b      	ldr	r3, [r7, #32]
 800b3dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	627b      	str	r3, [r7, #36]	; 0x24
		{
 800b3e4:	e001      	b.n	800b3ea <xQueueGenericSendFromISR+0xd2>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800b3ea:	69f8      	ldr	r0, [r7, #28]
 800b3ec:	f002 f831 	bl	800d452 <vClearInterruptMask>

	return xReturn;
 800b3f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b3f2:	4618      	mov	r0, r3
 800b3f4:	3728      	adds	r7, #40	; 0x28
 800b3f6:	46bd      	mov	sp, r7
 800b3f8:	bd80      	pop	{r7, pc}

0800b3fa <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b3fa:	b580      	push	{r7, lr}
 800b3fc:	b088      	sub	sp, #32
 800b3fe:	af00      	add	r7, sp, #0
 800b400:	6078      	str	r0, [r7, #4]
 800b402:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800b408:	69bb      	ldr	r3, [r7, #24]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d102      	bne.n	800b414 <xQueueGiveFromISR+0x1a>
 800b40e:	f002 f813 	bl	800d438 <ulSetInterruptMask>
 800b412:	e7fe      	b.n	800b412 <xQueueGiveFromISR+0x18>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b414:	69bb      	ldr	r3, [r7, #24]
 800b416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d002      	beq.n	800b422 <xQueueGiveFromISR+0x28>
 800b41c:	f002 f80c 	bl	800d438 <ulSetInterruptMask>
 800b420:	e7fe      	b.n	800b420 <xQueueGiveFromISR+0x26>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800b422:	69bb      	ldr	r3, [r7, #24]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	d103      	bne.n	800b432 <xQueueGiveFromISR+0x38>
 800b42a:	69bb      	ldr	r3, [r7, #24]
 800b42c:	689b      	ldr	r3, [r3, #8]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d101      	bne.n	800b436 <xQueueGiveFromISR+0x3c>
 800b432:	2301      	movs	r3, #1
 800b434:	e000      	b.n	800b438 <xQueueGiveFromISR+0x3e>
 800b436:	2300      	movs	r3, #0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d102      	bne.n	800b442 <xQueueGiveFromISR+0x48>
 800b43c:	f001 fffc 	bl	800d438 <ulSetInterruptMask>
 800b440:	e7fe      	b.n	800b440 <xQueueGiveFromISR+0x46>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b442:	f001 fff9 	bl	800d438 <ulSetInterruptMask>
 800b446:	6178      	str	r0, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b448:	69bb      	ldr	r3, [r7, #24]
 800b44a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b44c:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800b44e:	69bb      	ldr	r3, [r7, #24]
 800b450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b452:	693a      	ldr	r2, [r7, #16]
 800b454:	429a      	cmp	r2, r3
 800b456:	d229      	bcs.n	800b4ac <xQueueGiveFromISR+0xb2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800b458:	69bb      	ldr	r3, [r7, #24]
 800b45a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b45e:	73fb      	strb	r3, [r7, #15]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	1c5a      	adds	r2, r3, #1
 800b464:	69bb      	ldr	r3, [r7, #24]
 800b466:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800b468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b470:	d112      	bne.n	800b498 <xQueueGiveFromISR+0x9e>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b472:	69bb      	ldr	r3, [r7, #24]
 800b474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b476:	2b00      	cmp	r3, #0
 800b478:	d015      	beq.n	800b4a6 <xQueueGiveFromISR+0xac>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b47a:	69bb      	ldr	r3, [r7, #24]
 800b47c:	3324      	adds	r3, #36	; 0x24
 800b47e:	4618      	mov	r0, r3
 800b480:	f000 ffec 	bl	800c45c <xTaskRemoveFromEventList>
 800b484:	4603      	mov	r3, r0
 800b486:	2b00      	cmp	r3, #0
 800b488:	d00d      	beq.n	800b4a6 <xQueueGiveFromISR+0xac>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d00a      	beq.n	800b4a6 <xQueueGiveFromISR+0xac>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	2201      	movs	r2, #1
 800b494:	601a      	str	r2, [r3, #0]
 800b496:	e006      	b.n	800b4a6 <xQueueGiveFromISR+0xac>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800b498:	7bfb      	ldrb	r3, [r7, #15]
 800b49a:	3301      	adds	r3, #1
 800b49c:	b2db      	uxtb	r3, r3
 800b49e:	b25a      	sxtb	r2, r3
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800b4a6:	2301      	movs	r3, #1
 800b4a8:	61fb      	str	r3, [r7, #28]
 800b4aa:	e001      	b.n	800b4b0 <xQueueGiveFromISR+0xb6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b4ac:	2300      	movs	r3, #0
 800b4ae:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800b4b0:	6978      	ldr	r0, [r7, #20]
 800b4b2:	f001 ffce 	bl	800d452 <vClearInterruptMask>

	return xReturn;
 800b4b6:	69fb      	ldr	r3, [r7, #28]
}
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	3720      	adds	r7, #32
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b08a      	sub	sp, #40	; 0x28
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	60f8      	str	r0, [r7, #12]
 800b4c8:	60b9      	str	r1, [r7, #8]
 800b4ca:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b4d4:	6a3b      	ldr	r3, [r7, #32]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d102      	bne.n	800b4e0 <xQueueReceive+0x20>
 800b4da:	f001 ffad 	bl	800d438 <ulSetInterruptMask>
 800b4de:	e7fe      	b.n	800b4de <xQueueReceive+0x1e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d103      	bne.n	800b4ee <xQueueReceive+0x2e>
 800b4e6:	6a3b      	ldr	r3, [r7, #32]
 800b4e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d101      	bne.n	800b4f2 <xQueueReceive+0x32>
 800b4ee:	2301      	movs	r3, #1
 800b4f0:	e000      	b.n	800b4f4 <xQueueReceive+0x34>
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d102      	bne.n	800b4fe <xQueueReceive+0x3e>
 800b4f8:	f001 ff9e 	bl	800d438 <ulSetInterruptMask>
 800b4fc:	e7fe      	b.n	800b4fc <xQueueReceive+0x3c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b4fe:	f001 f947 	bl	800c790 <xTaskGetSchedulerState>
 800b502:	4603      	mov	r3, r0
 800b504:	2b00      	cmp	r3, #0
 800b506:	d102      	bne.n	800b50e <xQueueReceive+0x4e>
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d101      	bne.n	800b512 <xQueueReceive+0x52>
 800b50e:	2301      	movs	r3, #1
 800b510:	e000      	b.n	800b514 <xQueueReceive+0x54>
 800b512:	2300      	movs	r3, #0
 800b514:	2b00      	cmp	r3, #0
 800b516:	d102      	bne.n	800b51e <xQueueReceive+0x5e>
 800b518:	f001 ff8e 	bl	800d438 <ulSetInterruptMask>
 800b51c:	e7fe      	b.n	800b51c <xQueueReceive+0x5c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b51e:	f001 fe53 	bl	800d1c8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b522:	6a3b      	ldr	r3, [r7, #32]
 800b524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b526:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b528:	69fb      	ldr	r3, [r7, #28]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d019      	beq.n	800b562 <xQueueReceive+0xa2>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b52e:	68b9      	ldr	r1, [r7, #8]
 800b530:	6a38      	ldr	r0, [r7, #32]
 800b532:	f000 fa56 	bl	800b9e2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b536:	69fb      	ldr	r3, [r7, #28]
 800b538:	1e5a      	subs	r2, r3, #1
 800b53a:	6a3b      	ldr	r3, [r7, #32]
 800b53c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b53e:	6a3b      	ldr	r3, [r7, #32]
 800b540:	691b      	ldr	r3, [r3, #16]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d009      	beq.n	800b55a <xQueueReceive+0x9a>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b546:	6a3b      	ldr	r3, [r7, #32]
 800b548:	3310      	adds	r3, #16
 800b54a:	4618      	mov	r0, r3
 800b54c:	f000 ff86 	bl	800c45c <xTaskRemoveFromEventList>
 800b550:	4603      	mov	r3, r0
 800b552:	2b00      	cmp	r3, #0
 800b554:	d001      	beq.n	800b55a <xQueueReceive+0x9a>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b556:	f001 fe25 	bl	800d1a4 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b55a:	f001 fe47 	bl	800d1ec <vPortExitCritical>
				return pdPASS;
 800b55e:	2301      	movs	r3, #1
 800b560:	e063      	b.n	800b62a <xQueueReceive+0x16a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d103      	bne.n	800b570 <xQueueReceive+0xb0>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b568:	f001 fe40 	bl	800d1ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b56c:	2300      	movs	r3, #0
 800b56e:	e05c      	b.n	800b62a <xQueueReceive+0x16a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b572:	2b00      	cmp	r3, #0
 800b574:	d106      	bne.n	800b584 <xQueueReceive+0xc4>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b576:	f107 0314 	add.w	r3, r7, #20
 800b57a:	4618      	mov	r0, r3
 800b57c:	f000 ffca 	bl	800c514 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b580:	2301      	movs	r3, #1
 800b582:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b584:	f001 fe32 	bl	800d1ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b588:	f000 fd70 	bl	800c06c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b58c:	f001 fe1c 	bl	800d1c8 <vPortEnterCritical>
 800b590:	6a3b      	ldr	r3, [r7, #32]
 800b592:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b596:	b25b      	sxtb	r3, r3
 800b598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b59c:	d103      	bne.n	800b5a6 <xQueueReceive+0xe6>
 800b59e:	6a3b      	ldr	r3, [r7, #32]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b5a6:	6a3b      	ldr	r3, [r7, #32]
 800b5a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b5ac:	b25b      	sxtb	r3, r3
 800b5ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5b2:	d103      	bne.n	800b5bc <xQueueReceive+0xfc>
 800b5b4:	6a3b      	ldr	r3, [r7, #32]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b5bc:	f001 fe16 	bl	800d1ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b5c0:	1d3a      	adds	r2, r7, #4
 800b5c2:	f107 0314 	add.w	r3, r7, #20
 800b5c6:	4611      	mov	r1, r2
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	f000 ffb9 	bl	800c540 <xTaskCheckForTimeOut>
 800b5ce:	4603      	mov	r3, r0
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d11d      	bne.n	800b610 <xQueueReceive+0x150>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b5d4:	6a38      	ldr	r0, [r7, #32]
 800b5d6:	f000 fa7c 	bl	800bad2 <prvIsQueueEmpty>
 800b5da:	4603      	mov	r3, r0
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d011      	beq.n	800b604 <xQueueReceive+0x144>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b5e0:	6a3b      	ldr	r3, [r7, #32]
 800b5e2:	3324      	adds	r3, #36	; 0x24
 800b5e4:	687a      	ldr	r2, [r7, #4]
 800b5e6:	4611      	mov	r1, r2
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f000 fef7 	bl	800c3dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b5ee:	6a38      	ldr	r0, [r7, #32]
 800b5f0:	f000 fa1d 	bl	800ba2e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b5f4:	f000 fd48 	bl	800c088 <xTaskResumeAll>
 800b5f8:	4603      	mov	r3, r0
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d18f      	bne.n	800b51e <xQueueReceive+0x5e>
				{
					portYIELD_WITHIN_API();
 800b5fe:	f001 fdd1 	bl	800d1a4 <vPortYield>
 800b602:	e78c      	b.n	800b51e <xQueueReceive+0x5e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b604:	6a38      	ldr	r0, [r7, #32]
 800b606:	f000 fa12 	bl	800ba2e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b60a:	f000 fd3d 	bl	800c088 <xTaskResumeAll>
 800b60e:	e786      	b.n	800b51e <xQueueReceive+0x5e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b610:	6a38      	ldr	r0, [r7, #32]
 800b612:	f000 fa0c 	bl	800ba2e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b616:	f000 fd37 	bl	800c088 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b61a:	6a38      	ldr	r0, [r7, #32]
 800b61c:	f000 fa59 	bl	800bad2 <prvIsQueueEmpty>
 800b620:	4603      	mov	r3, r0
 800b622:	2b00      	cmp	r3, #0
 800b624:	f43f af7b 	beq.w	800b51e <xQueueReceive+0x5e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b628:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3728      	adds	r7, #40	; 0x28
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}

0800b632 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800b632:	b580      	push	{r7, lr}
 800b634:	b08a      	sub	sp, #40	; 0x28
 800b636:	af00      	add	r7, sp, #0
 800b638:	6078      	str	r0, [r7, #4]
 800b63a:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800b63c:	2300      	movs	r3, #0
 800b63e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800b644:	2300      	movs	r3, #0
 800b646:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b648:	69fb      	ldr	r3, [r7, #28]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d102      	bne.n	800b654 <xQueueSemaphoreTake+0x22>
 800b64e:	f001 fef3 	bl	800d438 <ulSetInterruptMask>
 800b652:	e7fe      	b.n	800b652 <xQueueSemaphoreTake+0x20>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800b654:	69fb      	ldr	r3, [r7, #28]
 800b656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d002      	beq.n	800b662 <xQueueSemaphoreTake+0x30>
 800b65c:	f001 feec 	bl	800d438 <ulSetInterruptMask>
 800b660:	e7fe      	b.n	800b660 <xQueueSemaphoreTake+0x2e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b662:	f001 f895 	bl	800c790 <xTaskGetSchedulerState>
 800b666:	4603      	mov	r3, r0
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d102      	bne.n	800b672 <xQueueSemaphoreTake+0x40>
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d101      	bne.n	800b676 <xQueueSemaphoreTake+0x44>
 800b672:	2301      	movs	r3, #1
 800b674:	e000      	b.n	800b678 <xQueueSemaphoreTake+0x46>
 800b676:	2300      	movs	r3, #0
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d102      	bne.n	800b682 <xQueueSemaphoreTake+0x50>
 800b67c:	f001 fedc 	bl	800d438 <ulSetInterruptMask>
 800b680:	e7fe      	b.n	800b680 <xQueueSemaphoreTake+0x4e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b682:	f001 fda1 	bl	800d1c8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800b686:	69fb      	ldr	r3, [r7, #28]
 800b688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b68a:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800b68c:	69bb      	ldr	r3, [r7, #24]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d01e      	beq.n	800b6d0 <xQueueSemaphoreTake+0x9e>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	1e5a      	subs	r2, r3, #1
 800b696:	69fb      	ldr	r3, [r7, #28]
 800b698:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b69a:	69fb      	ldr	r3, [r7, #28]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d104      	bne.n	800b6ac <xQueueSemaphoreTake+0x7a>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800b6a2:	f001 f9cb 	bl	800ca3c <pvTaskIncrementMutexHeldCount>
 800b6a6:	4602      	mov	r2, r0
 800b6a8:	69fb      	ldr	r3, [r7, #28]
 800b6aa:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b6ac:	69fb      	ldr	r3, [r7, #28]
 800b6ae:	691b      	ldr	r3, [r3, #16]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d009      	beq.n	800b6c8 <xQueueSemaphoreTake+0x96>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	3310      	adds	r3, #16
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f000 fecf 	bl	800c45c <xTaskRemoveFromEventList>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d001      	beq.n	800b6c8 <xQueueSemaphoreTake+0x96>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b6c4:	f001 fd6e 	bl	800d1a4 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b6c8:	f001 fd90 	bl	800d1ec <vPortExitCritical>
				return pdPASS;
 800b6cc:	2301      	movs	r3, #1
 800b6ce:	e089      	b.n	800b7e4 <xQueueSemaphoreTake+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b6d0:	683b      	ldr	r3, [r7, #0]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d109      	bne.n	800b6ea <xQueueSemaphoreTake+0xb8>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800b6d6:	6a3b      	ldr	r3, [r7, #32]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d002      	beq.n	800b6e2 <xQueueSemaphoreTake+0xb0>
 800b6dc:	f001 feac 	bl	800d438 <ulSetInterruptMask>
 800b6e0:	e7fe      	b.n	800b6e0 <xQueueSemaphoreTake+0xae>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800b6e2:	f001 fd83 	bl	800d1ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b6e6:	2300      	movs	r3, #0
 800b6e8:	e07c      	b.n	800b7e4 <xQueueSemaphoreTake+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d106      	bne.n	800b6fe <xQueueSemaphoreTake+0xcc>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b6f0:	f107 030c 	add.w	r3, r7, #12
 800b6f4:	4618      	mov	r0, r3
 800b6f6:	f000 ff0d 	bl	800c514 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b6fa:	2301      	movs	r3, #1
 800b6fc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b6fe:	f001 fd75 	bl	800d1ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b702:	f000 fcb3 	bl	800c06c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b706:	f001 fd5f 	bl	800d1c8 <vPortEnterCritical>
 800b70a:	69fb      	ldr	r3, [r7, #28]
 800b70c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b710:	b25b      	sxtb	r3, r3
 800b712:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b716:	d103      	bne.n	800b720 <xQueueSemaphoreTake+0xee>
 800b718:	69fb      	ldr	r3, [r7, #28]
 800b71a:	2200      	movs	r2, #0
 800b71c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b720:	69fb      	ldr	r3, [r7, #28]
 800b722:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b726:	b25b      	sxtb	r3, r3
 800b728:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b72c:	d103      	bne.n	800b736 <xQueueSemaphoreTake+0x104>
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	2200      	movs	r2, #0
 800b732:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b736:	f001 fd59 	bl	800d1ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b73a:	463a      	mov	r2, r7
 800b73c:	f107 030c 	add.w	r3, r7, #12
 800b740:	4611      	mov	r1, r2
 800b742:	4618      	mov	r0, r3
 800b744:	f000 fefc 	bl	800c540 <xTaskCheckForTimeOut>
 800b748:	4603      	mov	r3, r0
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d12c      	bne.n	800b7a8 <xQueueSemaphoreTake+0x176>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b74e:	69f8      	ldr	r0, [r7, #28]
 800b750:	f000 f9bf 	bl	800bad2 <prvIsQueueEmpty>
 800b754:	4603      	mov	r3, r0
 800b756:	2b00      	cmp	r3, #0
 800b758:	d020      	beq.n	800b79c <xQueueSemaphoreTake+0x16a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b75a:	69fb      	ldr	r3, [r7, #28]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d109      	bne.n	800b776 <xQueueSemaphoreTake+0x144>
					{
						taskENTER_CRITICAL();
 800b762:	f001 fd31 	bl	800d1c8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b766:	69fb      	ldr	r3, [r7, #28]
 800b768:	689b      	ldr	r3, [r3, #8]
 800b76a:	4618      	mov	r0, r3
 800b76c:	f001 f82e 	bl	800c7cc <xTaskPriorityInherit>
 800b770:	6238      	str	r0, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800b772:	f001 fd3b 	bl	800d1ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	3324      	adds	r3, #36	; 0x24
 800b77a:	683a      	ldr	r2, [r7, #0]
 800b77c:	4611      	mov	r1, r2
 800b77e:	4618      	mov	r0, r3
 800b780:	f000 fe2c 	bl	800c3dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b784:	69f8      	ldr	r0, [r7, #28]
 800b786:	f000 f952 	bl	800ba2e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b78a:	f000 fc7d 	bl	800c088 <xTaskResumeAll>
 800b78e:	4603      	mov	r3, r0
 800b790:	2b00      	cmp	r3, #0
 800b792:	f47f af76 	bne.w	800b682 <xQueueSemaphoreTake+0x50>
				{
					portYIELD_WITHIN_API();
 800b796:	f001 fd05 	bl	800d1a4 <vPortYield>
 800b79a:	e772      	b.n	800b682 <xQueueSemaphoreTake+0x50>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800b79c:	69f8      	ldr	r0, [r7, #28]
 800b79e:	f000 f946 	bl	800ba2e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b7a2:	f000 fc71 	bl	800c088 <xTaskResumeAll>
 800b7a6:	e76c      	b.n	800b682 <xQueueSemaphoreTake+0x50>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800b7a8:	69f8      	ldr	r0, [r7, #28]
 800b7aa:	f000 f940 	bl	800ba2e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b7ae:	f000 fc6b 	bl	800c088 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b7b2:	69f8      	ldr	r0, [r7, #28]
 800b7b4:	f000 f98d 	bl	800bad2 <prvIsQueueEmpty>
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	f43f af61 	beq.w	800b682 <xQueueSemaphoreTake+0x50>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800b7c0:	6a3b      	ldr	r3, [r7, #32]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d00d      	beq.n	800b7e2 <xQueueSemaphoreTake+0x1b0>
					{
						taskENTER_CRITICAL();
 800b7c6:	f001 fcff 	bl	800d1c8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800b7ca:	69f8      	ldr	r0, [r7, #28]
 800b7cc:	f000 f887 	bl	800b8de <prvGetDisinheritPriorityAfterTimeout>
 800b7d0:	6178      	str	r0, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800b7d2:	69fb      	ldr	r3, [r7, #28]
 800b7d4:	689b      	ldr	r3, [r3, #8]
 800b7d6:	6979      	ldr	r1, [r7, #20]
 800b7d8:	4618      	mov	r0, r3
 800b7da:	f001 f8bd 	bl	800c958 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800b7de:	f001 fd05 	bl	800d1ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b7e2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3728      	adds	r7, #40	; 0x28
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}

0800b7ec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800b7ec:	b580      	push	{r7, lr}
 800b7ee:	b08a      	sub	sp, #40	; 0x28
 800b7f0:	af00      	add	r7, sp, #0
 800b7f2:	60f8      	str	r0, [r7, #12]
 800b7f4:	60b9      	str	r1, [r7, #8]
 800b7f6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800b7fc:	6a3b      	ldr	r3, [r7, #32]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d102      	bne.n	800b808 <xQueueReceiveFromISR+0x1c>
 800b802:	f001 fe19 	bl	800d438 <ulSetInterruptMask>
 800b806:	e7fe      	b.n	800b806 <xQueueReceiveFromISR+0x1a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d103      	bne.n	800b816 <xQueueReceiveFromISR+0x2a>
 800b80e:	6a3b      	ldr	r3, [r7, #32]
 800b810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b812:	2b00      	cmp	r3, #0
 800b814:	d101      	bne.n	800b81a <xQueueReceiveFromISR+0x2e>
 800b816:	2301      	movs	r3, #1
 800b818:	e000      	b.n	800b81c <xQueueReceiveFromISR+0x30>
 800b81a:	2300      	movs	r3, #0
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d102      	bne.n	800b826 <xQueueReceiveFromISR+0x3a>
 800b820:	f001 fe0a 	bl	800d438 <ulSetInterruptMask>
 800b824:	e7fe      	b.n	800b824 <xQueueReceiveFromISR+0x38>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b826:	f001 fe07 	bl	800d438 <ulSetInterruptMask>
 800b82a:	61f8      	str	r0, [r7, #28]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b82c:	6a3b      	ldr	r3, [r7, #32]
 800b82e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b830:	61bb      	str	r3, [r7, #24]

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b832:	69bb      	ldr	r3, [r7, #24]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d02d      	beq.n	800b894 <xQueueReceiveFromISR+0xa8>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800b838:	6a3b      	ldr	r3, [r7, #32]
 800b83a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b83e:	75fb      	strb	r3, [r7, #23]

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b840:	68b9      	ldr	r1, [r7, #8]
 800b842:	6a38      	ldr	r0, [r7, #32]
 800b844:	f000 f8cd 	bl	800b9e2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b848:	69bb      	ldr	r3, [r7, #24]
 800b84a:	1e5a      	subs	r2, r3, #1
 800b84c:	6a3b      	ldr	r3, [r7, #32]
 800b84e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800b850:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b854:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b858:	d112      	bne.n	800b880 <xQueueReceiveFromISR+0x94>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b85a:	6a3b      	ldr	r3, [r7, #32]
 800b85c:	691b      	ldr	r3, [r3, #16]
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d015      	beq.n	800b88e <xQueueReceiveFromISR+0xa2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b862:	6a3b      	ldr	r3, [r7, #32]
 800b864:	3310      	adds	r3, #16
 800b866:	4618      	mov	r0, r3
 800b868:	f000 fdf8 	bl	800c45c <xTaskRemoveFromEventList>
 800b86c:	4603      	mov	r3, r0
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d00d      	beq.n	800b88e <xQueueReceiveFromISR+0xa2>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d00a      	beq.n	800b88e <xQueueReceiveFromISR+0xa2>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2201      	movs	r2, #1
 800b87c:	601a      	str	r2, [r3, #0]
 800b87e:	e006      	b.n	800b88e <xQueueReceiveFromISR+0xa2>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800b880:	7dfb      	ldrb	r3, [r7, #23]
 800b882:	3301      	adds	r3, #1
 800b884:	b2db      	uxtb	r3, r3
 800b886:	b25a      	sxtb	r2, r3
 800b888:	6a3b      	ldr	r3, [r7, #32]
 800b88a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800b88e:	2301      	movs	r3, #1
 800b890:	627b      	str	r3, [r7, #36]	; 0x24
 800b892:	e001      	b.n	800b898 <xQueueReceiveFromISR+0xac>
		}
		else
		{
			xReturn = pdFAIL;
 800b894:	2300      	movs	r3, #0
 800b896:	627b      	str	r3, [r7, #36]	; 0x24
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800b898:	69f8      	ldr	r0, [r7, #28]
 800b89a:	f001 fdda 	bl	800d452 <vClearInterruptMask>

	return xReturn;
 800b89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3728      	adds	r7, #40	; 0x28
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b084      	sub	sp, #16
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d102      	bne.n	800b8c0 <vQueueDelete+0x18>
 800b8ba:	f001 fdbd 	bl	800d438 <ulSetInterruptMask>
 800b8be:	e7fe      	b.n	800b8be <vQueueDelete+0x16>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800b8c0:	68f8      	ldr	r0, [r7, #12]
 800b8c2:	f000 f95f 	bl	800bb84 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d102      	bne.n	800b8d6 <vQueueDelete+0x2e>
		{
			vPortFree( pxQueue );
 800b8d0:	68f8      	ldr	r0, [r7, #12]
 800b8d2:	f001 fec5 	bl	800d660 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800b8d6:	bf00      	nop
 800b8d8:	3710      	adds	r7, #16
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}

0800b8de <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800b8de:	b480      	push	{r7}
 800b8e0:	b085      	sub	sp, #20
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d006      	beq.n	800b8fc <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800b8f8:	60fb      	str	r3, [r7, #12]
 800b8fa:	e001      	b.n	800b900 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800b900:	68fb      	ldr	r3, [r7, #12]
	}
 800b902:	4618      	mov	r0, r3
 800b904:	3714      	adds	r7, #20
 800b906:	46bd      	mov	sp, r7
 800b908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b90c:	4770      	bx	lr

0800b90e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b90e:	b580      	push	{r7, lr}
 800b910:	b086      	sub	sp, #24
 800b912:	af00      	add	r7, sp, #0
 800b914:	60f8      	str	r0, [r7, #12]
 800b916:	60b9      	str	r1, [r7, #8]
 800b918:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b91a:	2300      	movs	r3, #0
 800b91c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b922:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b924:	68fb      	ldr	r3, [r7, #12]
 800b926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d10d      	bne.n	800b948 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d14d      	bne.n	800b9d0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	689b      	ldr	r3, [r3, #8]
 800b938:	4618      	mov	r0, r3
 800b93a:	f000 ffaf 	bl	800c89c <xTaskPriorityDisinherit>
 800b93e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	2200      	movs	r2, #0
 800b944:	609a      	str	r2, [r3, #8]
 800b946:	e043      	b.n	800b9d0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d119      	bne.n	800b982 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	6858      	ldr	r0, [r3, #4]
 800b952:	68fb      	ldr	r3, [r7, #12]
 800b954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b956:	461a      	mov	r2, r3
 800b958:	68b9      	ldr	r1, [r7, #8]
 800b95a:	f016 fa57 	bl	8021e0c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	685a      	ldr	r2, [r3, #4]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b966:	441a      	add	r2, r3
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b96c:	68fb      	ldr	r3, [r7, #12]
 800b96e:	685a      	ldr	r2, [r3, #4]
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	689b      	ldr	r3, [r3, #8]
 800b974:	429a      	cmp	r2, r3
 800b976:	d32b      	bcc.n	800b9d0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	681a      	ldr	r2, [r3, #0]
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	605a      	str	r2, [r3, #4]
 800b980:	e026      	b.n	800b9d0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	68d8      	ldr	r0, [r3, #12]
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b98a:	461a      	mov	r2, r3
 800b98c:	68b9      	ldr	r1, [r7, #8]
 800b98e:	f016 fa3d 	bl	8021e0c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	68da      	ldr	r2, [r3, #12]
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b99a:	425b      	negs	r3, r3
 800b99c:	441a      	add	r2, r3
 800b99e:	68fb      	ldr	r3, [r7, #12]
 800b9a0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	68da      	ldr	r2, [r3, #12]
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	429a      	cmp	r2, r3
 800b9ac:	d207      	bcs.n	800b9be <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	689a      	ldr	r2, [r3, #8]
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9b6:	425b      	negs	r3, r3
 800b9b8:	441a      	add	r2, r3
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2b02      	cmp	r3, #2
 800b9c2:	d105      	bne.n	800b9d0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d002      	beq.n	800b9d0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	3b01      	subs	r3, #1
 800b9ce:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b9d0:	693b      	ldr	r3, [r7, #16]
 800b9d2:	1c5a      	adds	r2, r3, #1
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b9d8:	697b      	ldr	r3, [r7, #20]
}
 800b9da:	4618      	mov	r0, r3
 800b9dc:	3718      	adds	r7, #24
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	bd80      	pop	{r7, pc}

0800b9e2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b9e2:	b580      	push	{r7, lr}
 800b9e4:	b082      	sub	sp, #8
 800b9e6:	af00      	add	r7, sp, #0
 800b9e8:	6078      	str	r0, [r7, #4]
 800b9ea:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d018      	beq.n	800ba26 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	68da      	ldr	r2, [r3, #12]
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9fc:	441a      	add	r2, r3
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	68da      	ldr	r2, [r3, #12]
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	689b      	ldr	r3, [r3, #8]
 800ba0a:	429a      	cmp	r2, r3
 800ba0c:	d303      	bcc.n	800ba16 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681a      	ldr	r2, [r3, #0]
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	68d9      	ldr	r1, [r3, #12]
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba1e:	461a      	mov	r2, r3
 800ba20:	6838      	ldr	r0, [r7, #0]
 800ba22:	f016 f9f3 	bl	8021e0c <memcpy>
	}
}
 800ba26:	bf00      	nop
 800ba28:	3708      	adds	r7, #8
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}

0800ba2e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ba2e:	b580      	push	{r7, lr}
 800ba30:	b084      	sub	sp, #16
 800ba32:	af00      	add	r7, sp, #0
 800ba34:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ba36:	f001 fbc7 	bl	800d1c8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ba40:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ba42:	e011      	b.n	800ba68 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d012      	beq.n	800ba72 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	3324      	adds	r3, #36	; 0x24
 800ba50:	4618      	mov	r0, r3
 800ba52:	f000 fd03 	bl	800c45c <xTaskRemoveFromEventList>
 800ba56:	4603      	mov	r3, r0
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d001      	beq.n	800ba60 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ba5c:	f000 fdc2 	bl	800c5e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ba60:	7bfb      	ldrb	r3, [r7, #15]
 800ba62:	3b01      	subs	r3, #1
 800ba64:	b2db      	uxtb	r3, r3
 800ba66:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ba68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	dce9      	bgt.n	800ba44 <prvUnlockQueue+0x16>
 800ba70:	e000      	b.n	800ba74 <prvUnlockQueue+0x46>
					break;
 800ba72:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	22ff      	movs	r2, #255	; 0xff
 800ba78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800ba7c:	f001 fbb6 	bl	800d1ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ba80:	f001 fba2 	bl	800d1c8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ba8a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ba8c:	e011      	b.n	800bab2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	691b      	ldr	r3, [r3, #16]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d012      	beq.n	800babc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	3310      	adds	r3, #16
 800ba9a:	4618      	mov	r0, r3
 800ba9c:	f000 fcde 	bl	800c45c <xTaskRemoveFromEventList>
 800baa0:	4603      	mov	r3, r0
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d001      	beq.n	800baaa <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800baa6:	f000 fd9d 	bl	800c5e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800baaa:	7bbb      	ldrb	r3, [r7, #14]
 800baac:	3b01      	subs	r3, #1
 800baae:	b2db      	uxtb	r3, r3
 800bab0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800bab2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	dce9      	bgt.n	800ba8e <prvUnlockQueue+0x60>
 800baba:	e000      	b.n	800babe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800babc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	22ff      	movs	r2, #255	; 0xff
 800bac2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800bac6:	f001 fb91 	bl	800d1ec <vPortExitCritical>
}
 800baca:	bf00      	nop
 800bacc:	3710      	adds	r7, #16
 800bace:	46bd      	mov	sp, r7
 800bad0:	bd80      	pop	{r7, pc}

0800bad2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800bad2:	b580      	push	{r7, lr}
 800bad4:	b084      	sub	sp, #16
 800bad6:	af00      	add	r7, sp, #0
 800bad8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bada:	f001 fb75 	bl	800d1c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d102      	bne.n	800baec <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800bae6:	2301      	movs	r3, #1
 800bae8:	60fb      	str	r3, [r7, #12]
 800baea:	e001      	b.n	800baf0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800baec:	2300      	movs	r3, #0
 800baee:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800baf0:	f001 fb7c 	bl	800d1ec <vPortExitCritical>

	return xReturn;
 800baf4:	68fb      	ldr	r3, [r7, #12]
}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3710      	adds	r7, #16
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}

0800bafe <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800bafe:	b580      	push	{r7, lr}
 800bb00:	b084      	sub	sp, #16
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800bb06:	f001 fb5f 	bl	800d1c8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb12:	429a      	cmp	r2, r3
 800bb14:	d102      	bne.n	800bb1c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800bb16:	2301      	movs	r3, #1
 800bb18:	60fb      	str	r3, [r7, #12]
 800bb1a:	e001      	b.n	800bb20 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800bb1c:	2300      	movs	r3, #0
 800bb1e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800bb20:	f001 fb64 	bl	800d1ec <vPortExitCritical>

	return xReturn;
 800bb24:	68fb      	ldr	r3, [r7, #12]
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3710      	adds	r7, #16
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}
	...

0800bb30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bb30:	b480      	push	{r7}
 800bb32:	b085      	sub	sp, #20
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	60fb      	str	r3, [r7, #12]
 800bb3e:	e014      	b.n	800bb6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800bb40:	4a0f      	ldr	r2, [pc, #60]	; (800bb80 <vQueueAddToRegistry+0x50>)
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d10b      	bne.n	800bb64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800bb4c:	490c      	ldr	r1, [pc, #48]	; (800bb80 <vQueueAddToRegistry+0x50>)
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	683a      	ldr	r2, [r7, #0]
 800bb52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800bb56:	4a0a      	ldr	r2, [pc, #40]	; (800bb80 <vQueueAddToRegistry+0x50>)
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	00db      	lsls	r3, r3, #3
 800bb5c:	4413      	add	r3, r2
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800bb62:	e006      	b.n	800bb72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	3301      	adds	r3, #1
 800bb68:	60fb      	str	r3, [r7, #12]
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	2b07      	cmp	r3, #7
 800bb6e:	d9e7      	bls.n	800bb40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800bb70:	bf00      	nop
 800bb72:	bf00      	nop
 800bb74:	3714      	adds	r7, #20
 800bb76:	46bd      	mov	sp, r7
 800bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7c:	4770      	bx	lr
 800bb7e:	bf00      	nop
 800bb80:	2001d374 	.word	0x2001d374

0800bb84 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800bb84:	b480      	push	{r7}
 800bb86:	b085      	sub	sp, #20
 800bb88:	af00      	add	r7, sp, #0
 800bb8a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	60fb      	str	r3, [r7, #12]
 800bb90:	e016      	b.n	800bbc0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800bb92:	4a10      	ldr	r2, [pc, #64]	; (800bbd4 <vQueueUnregisterQueue+0x50>)
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	00db      	lsls	r3, r3, #3
 800bb98:	4413      	add	r3, r2
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	687a      	ldr	r2, [r7, #4]
 800bb9e:	429a      	cmp	r2, r3
 800bba0:	d10b      	bne.n	800bbba <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800bba2:	4a0c      	ldr	r2, [pc, #48]	; (800bbd4 <vQueueUnregisterQueue+0x50>)
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2100      	movs	r1, #0
 800bba8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800bbac:	4a09      	ldr	r2, [pc, #36]	; (800bbd4 <vQueueUnregisterQueue+0x50>)
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	00db      	lsls	r3, r3, #3
 800bbb2:	4413      	add	r3, r2
 800bbb4:	2200      	movs	r2, #0
 800bbb6:	605a      	str	r2, [r3, #4]
				break;
 800bbb8:	e006      	b.n	800bbc8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	60fb      	str	r3, [r7, #12]
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	2b07      	cmp	r3, #7
 800bbc4:	d9e5      	bls.n	800bb92 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800bbc6:	bf00      	nop
 800bbc8:	bf00      	nop
 800bbca:	3714      	adds	r7, #20
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd2:	4770      	bx	lr
 800bbd4:	2001d374 	.word	0x2001d374

0800bbd8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b086      	sub	sp, #24
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	60f8      	str	r0, [r7, #12]
 800bbe0:	60b9      	str	r1, [r7, #8]
 800bbe2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800bbe8:	f001 faee 	bl	800d1c8 <vPortEnterCritical>
 800bbec:	697b      	ldr	r3, [r7, #20]
 800bbee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bbf2:	b25b      	sxtb	r3, r3
 800bbf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bbf8:	d103      	bne.n	800bc02 <vQueueWaitForMessageRestricted+0x2a>
 800bbfa:	697b      	ldr	r3, [r7, #20]
 800bbfc:	2200      	movs	r2, #0
 800bbfe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bc08:	b25b      	sxtb	r3, r3
 800bc0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc0e:	d103      	bne.n	800bc18 <vQueueWaitForMessageRestricted+0x40>
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	2200      	movs	r2, #0
 800bc14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bc18:	f001 fae8 	bl	800d1ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d106      	bne.n	800bc32 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	3324      	adds	r3, #36	; 0x24
 800bc28:	687a      	ldr	r2, [r7, #4]
 800bc2a:	68b9      	ldr	r1, [r7, #8]
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f000 fbf1 	bl	800c414 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800bc32:	6978      	ldr	r0, [r7, #20]
 800bc34:	f7ff fefb 	bl	800ba2e <prvUnlockQueue>
	}
 800bc38:	bf00      	nop
 800bc3a:	3718      	adds	r7, #24
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	b08c      	sub	sp, #48	; 0x30
 800bc44:	af04      	add	r7, sp, #16
 800bc46:	60f8      	str	r0, [r7, #12]
 800bc48:	60b9      	str	r1, [r7, #8]
 800bc4a:	607a      	str	r2, [r7, #4]
 800bc4c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800bc4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d102      	bne.n	800bc5a <xTaskCreateStatic+0x1a>
 800bc54:	f001 fbf0 	bl	800d438 <ulSetInterruptMask>
 800bc58:	e7fe      	b.n	800bc58 <xTaskCreateStatic+0x18>
		configASSERT( pxTaskBuffer != NULL );
 800bc5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d102      	bne.n	800bc66 <xTaskCreateStatic+0x26>
 800bc60:	f001 fbea 	bl	800d438 <ulSetInterruptMask>
 800bc64:	e7fe      	b.n	800bc64 <xTaskCreateStatic+0x24>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800bc66:	23bc      	movs	r3, #188	; 0xbc
 800bc68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800bc6a:	697b      	ldr	r3, [r7, #20]
 800bc6c:	2bbc      	cmp	r3, #188	; 0xbc
 800bc6e:	d002      	beq.n	800bc76 <xTaskCreateStatic+0x36>
 800bc70:	f001 fbe2 	bl	800d438 <ulSetInterruptMask>
 800bc74:	e7fe      	b.n	800bc74 <xTaskCreateStatic+0x34>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800bc76:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800bc78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d01e      	beq.n	800bcbc <xTaskCreateStatic+0x7c>
 800bc7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	d01b      	beq.n	800bcbc <xTaskCreateStatic+0x7c>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc86:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800bc88:	69fb      	ldr	r3, [r7, #28]
 800bc8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc8c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800bc8e:	69fb      	ldr	r3, [r7, #28]
 800bc90:	2202      	movs	r2, #2
 800bc92:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800bc96:	2300      	movs	r3, #0
 800bc98:	9303      	str	r3, [sp, #12]
 800bc9a:	69fb      	ldr	r3, [r7, #28]
 800bc9c:	9302      	str	r3, [sp, #8]
 800bc9e:	f107 0318 	add.w	r3, r7, #24
 800bca2:	9301      	str	r3, [sp, #4]
 800bca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca6:	9300      	str	r3, [sp, #0]
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	687a      	ldr	r2, [r7, #4]
 800bcac:	68b9      	ldr	r1, [r7, #8]
 800bcae:	68f8      	ldr	r0, [r7, #12]
 800bcb0:	f000 f850 	bl	800bd54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bcb4:	69f8      	ldr	r0, [r7, #28]
 800bcb6:	f000 f8ed 	bl	800be94 <prvAddNewTaskToReadyList>
 800bcba:	e001      	b.n	800bcc0 <xTaskCreateStatic+0x80>
		}
		else
		{
			xReturn = NULL;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bcc0:	69bb      	ldr	r3, [r7, #24]
	}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3720      	adds	r7, #32
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}

0800bcca <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800bcca:	b580      	push	{r7, lr}
 800bccc:	b08c      	sub	sp, #48	; 0x30
 800bcce:	af04      	add	r7, sp, #16
 800bcd0:	60f8      	str	r0, [r7, #12]
 800bcd2:	60b9      	str	r1, [r7, #8]
 800bcd4:	603b      	str	r3, [r7, #0]
 800bcd6:	4613      	mov	r3, r2
 800bcd8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800bcda:	88fb      	ldrh	r3, [r7, #6]
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	4618      	mov	r0, r3
 800bce0:	f001 fc0a 	bl	800d4f8 <pvPortMalloc>
 800bce4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800bce6:	697b      	ldr	r3, [r7, #20]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d00e      	beq.n	800bd0a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800bcec:	20bc      	movs	r0, #188	; 0xbc
 800bcee:	f001 fc03 	bl	800d4f8 <pvPortMalloc>
 800bcf2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800bcf4:	69fb      	ldr	r3, [r7, #28]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d003      	beq.n	800bd02 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800bcfa:	69fb      	ldr	r3, [r7, #28]
 800bcfc:	697a      	ldr	r2, [r7, #20]
 800bcfe:	631a      	str	r2, [r3, #48]	; 0x30
 800bd00:	e005      	b.n	800bd0e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800bd02:	6978      	ldr	r0, [r7, #20]
 800bd04:	f001 fcac 	bl	800d660 <vPortFree>
 800bd08:	e001      	b.n	800bd0e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800bd0e:	69fb      	ldr	r3, [r7, #28]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d017      	beq.n	800bd44 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800bd14:	69fb      	ldr	r3, [r7, #28]
 800bd16:	2200      	movs	r2, #0
 800bd18:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800bd1c:	88fa      	ldrh	r2, [r7, #6]
 800bd1e:	2300      	movs	r3, #0
 800bd20:	9303      	str	r3, [sp, #12]
 800bd22:	69fb      	ldr	r3, [r7, #28]
 800bd24:	9302      	str	r3, [sp, #8]
 800bd26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd28:	9301      	str	r3, [sp, #4]
 800bd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2c:	9300      	str	r3, [sp, #0]
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	68b9      	ldr	r1, [r7, #8]
 800bd32:	68f8      	ldr	r0, [r7, #12]
 800bd34:	f000 f80e 	bl	800bd54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800bd38:	69f8      	ldr	r0, [r7, #28]
 800bd3a:	f000 f8ab 	bl	800be94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800bd3e:	2301      	movs	r3, #1
 800bd40:	61bb      	str	r3, [r7, #24]
 800bd42:	e002      	b.n	800bd4a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800bd44:	f04f 33ff 	mov.w	r3, #4294967295
 800bd48:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800bd4a:	69bb      	ldr	r3, [r7, #24]
	}
 800bd4c:	4618      	mov	r0, r3
 800bd4e:	3720      	adds	r7, #32
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bd80      	pop	{r7, pc}

0800bd54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800bd54:	b580      	push	{r7, lr}
 800bd56:	b086      	sub	sp, #24
 800bd58:	af00      	add	r7, sp, #0
 800bd5a:	60f8      	str	r0, [r7, #12]
 800bd5c:	60b9      	str	r1, [r7, #8]
 800bd5e:	607a      	str	r2, [r7, #4]
 800bd60:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800bd62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd64:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	009b      	lsls	r3, r3, #2
 800bd6a:	461a      	mov	r2, r3
 800bd6c:	21a5      	movs	r1, #165	; 0xa5
 800bd6e:	f016 f85a 	bl	8021e26 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800bd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bd7c:	3b01      	subs	r3, #1
 800bd7e:	009b      	lsls	r3, r3, #2
 800bd80:	4413      	add	r3, r2
 800bd82:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	f023 0307 	bic.w	r3, r3, #7
 800bd8a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800bd8c:	693b      	ldr	r3, [r7, #16]
 800bd8e:	f003 0307 	and.w	r3, r3, #7
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d002      	beq.n	800bd9c <prvInitialiseNewTask+0x48>
 800bd96:	f001 fb4f 	bl	800d438 <ulSetInterruptMask>
 800bd9a:	e7fe      	b.n	800bd9a <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d01f      	beq.n	800bde2 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bda2:	2300      	movs	r3, #0
 800bda4:	617b      	str	r3, [r7, #20]
 800bda6:	e012      	b.n	800bdce <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800bda8:	68ba      	ldr	r2, [r7, #8]
 800bdaa:	697b      	ldr	r3, [r7, #20]
 800bdac:	4413      	add	r3, r2
 800bdae:	7819      	ldrb	r1, [r3, #0]
 800bdb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	3334      	adds	r3, #52	; 0x34
 800bdb8:	460a      	mov	r2, r1
 800bdba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800bdbc:	68ba      	ldr	r2, [r7, #8]
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d006      	beq.n	800bdd6 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bdc8:	697b      	ldr	r3, [r7, #20]
 800bdca:	3301      	adds	r3, #1
 800bdcc:	617b      	str	r3, [r7, #20]
 800bdce:	697b      	ldr	r3, [r7, #20]
 800bdd0:	2b0f      	cmp	r3, #15
 800bdd2:	d9e9      	bls.n	800bda8 <prvInitialiseNewTask+0x54>
 800bdd4:	e000      	b.n	800bdd8 <prvInitialiseNewTask+0x84>
			{
				break;
 800bdd6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800bdd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdda:	2200      	movs	r2, #0
 800bddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bde0:	e003      	b.n	800bdea <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800bde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde4:	2200      	movs	r2, #0
 800bde6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800bdea:	6a3b      	ldr	r3, [r7, #32]
 800bdec:	2b37      	cmp	r3, #55	; 0x37
 800bdee:	d901      	bls.n	800bdf4 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800bdf0:	2337      	movs	r3, #55	; 0x37
 800bdf2:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800bdf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdf6:	6a3a      	ldr	r2, [r7, #32]
 800bdf8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800bdfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdfc:	6a3a      	ldr	r2, [r7, #32]
 800bdfe:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800be00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be02:	2200      	movs	r2, #0
 800be04:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800be06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be08:	3304      	adds	r3, #4
 800be0a:	4618      	mov	r0, r3
 800be0c:	f7fe ffe0 	bl	800add0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800be10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be12:	3318      	adds	r3, #24
 800be14:	4618      	mov	r0, r3
 800be16:	f7fe ffdb 	bl	800add0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800be1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be1c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be1e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800be20:	6a3b      	ldr	r3, [r7, #32]
 800be22:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800be26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be28:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800be2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be2e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800be30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be32:	2200      	movs	r2, #0
 800be34:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800be38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be3a:	2200      	movs	r2, #0
 800be3c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800be40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be42:	3354      	adds	r3, #84	; 0x54
 800be44:	2260      	movs	r2, #96	; 0x60
 800be46:	2100      	movs	r1, #0
 800be48:	4618      	mov	r0, r3
 800be4a:	f015 ffec 	bl	8021e26 <memset>
 800be4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be50:	4a0d      	ldr	r2, [pc, #52]	; (800be88 <prvInitialiseNewTask+0x134>)
 800be52:	659a      	str	r2, [r3, #88]	; 0x58
 800be54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be56:	4a0d      	ldr	r2, [pc, #52]	; (800be8c <prvInitialiseNewTask+0x138>)
 800be58:	65da      	str	r2, [r3, #92]	; 0x5c
 800be5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be5c:	4a0c      	ldr	r2, [pc, #48]	; (800be90 <prvInitialiseNewTask+0x13c>)
 800be5e:	661a      	str	r2, [r3, #96]	; 0x60
		function as well. */
		#if( portHAS_STACK_OVERFLOW_CHECKING == 1 )
		{
			#if( portSTACK_GROWTH < 0 )
			{
				pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxNewTCB->pxStack, pxTaskCode, pvParameters );
 800be60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be62:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800be64:	683b      	ldr	r3, [r7, #0]
 800be66:	68fa      	ldr	r2, [r7, #12]
 800be68:	6938      	ldr	r0, [r7, #16]
 800be6a:	f001 fa09 	bl	800d280 <pxPortInitialiseStack>
 800be6e:	4602      	mov	r2, r0
 800be70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800be74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be76:	2b00      	cmp	r3, #0
 800be78:	d002      	beq.n	800be80 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800be7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800be7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800be80:	bf00      	nop
 800be82:	3718      	adds	r7, #24
 800be84:	46bd      	mov	sp, r7
 800be86:	bd80      	pop	{r7, pc}
 800be88:	0802476c 	.word	0x0802476c
 800be8c:	0802478c 	.word	0x0802478c
 800be90:	0802474c 	.word	0x0802474c

0800be94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b082      	sub	sp, #8
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800be9c:	f001 f994 	bl	800d1c8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800bea0:	4b2a      	ldr	r3, [pc, #168]	; (800bf4c <prvAddNewTaskToReadyList+0xb8>)
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	3301      	adds	r3, #1
 800bea6:	4a29      	ldr	r2, [pc, #164]	; (800bf4c <prvAddNewTaskToReadyList+0xb8>)
 800bea8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800beaa:	4b29      	ldr	r3, [pc, #164]	; (800bf50 <prvAddNewTaskToReadyList+0xbc>)
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d109      	bne.n	800bec6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800beb2:	4a27      	ldr	r2, [pc, #156]	; (800bf50 <prvAddNewTaskToReadyList+0xbc>)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800beb8:	4b24      	ldr	r3, [pc, #144]	; (800bf4c <prvAddNewTaskToReadyList+0xb8>)
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	2b01      	cmp	r3, #1
 800bebe:	d110      	bne.n	800bee2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800bec0:	f000 fbac 	bl	800c61c <prvInitialiseTaskLists>
 800bec4:	e00d      	b.n	800bee2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800bec6:	4b23      	ldr	r3, [pc, #140]	; (800bf54 <prvAddNewTaskToReadyList+0xc0>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	2b00      	cmp	r3, #0
 800becc:	d109      	bne.n	800bee2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800bece:	4b20      	ldr	r3, [pc, #128]	; (800bf50 <prvAddNewTaskToReadyList+0xbc>)
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed8:	429a      	cmp	r2, r3
 800beda:	d802      	bhi.n	800bee2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800bedc:	4a1c      	ldr	r2, [pc, #112]	; (800bf50 <prvAddNewTaskToReadyList+0xbc>)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800bee2:	4b1d      	ldr	r3, [pc, #116]	; (800bf58 <prvAddNewTaskToReadyList+0xc4>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	3301      	adds	r3, #1
 800bee8:	4a1b      	ldr	r2, [pc, #108]	; (800bf58 <prvAddNewTaskToReadyList+0xc4>)
 800beea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800beec:	4b1a      	ldr	r3, [pc, #104]	; (800bf58 <prvAddNewTaskToReadyList+0xc4>)
 800beee:	681a      	ldr	r2, [r3, #0]
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bef8:	4b18      	ldr	r3, [pc, #96]	; (800bf5c <prvAddNewTaskToReadyList+0xc8>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	429a      	cmp	r2, r3
 800befe:	d903      	bls.n	800bf08 <prvAddNewTaskToReadyList+0x74>
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf04:	4a15      	ldr	r2, [pc, #84]	; (800bf5c <prvAddNewTaskToReadyList+0xc8>)
 800bf06:	6013      	str	r3, [r2, #0]
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf0c:	4613      	mov	r3, r2
 800bf0e:	009b      	lsls	r3, r3, #2
 800bf10:	4413      	add	r3, r2
 800bf12:	009b      	lsls	r3, r3, #2
 800bf14:	4a12      	ldr	r2, [pc, #72]	; (800bf60 <prvAddNewTaskToReadyList+0xcc>)
 800bf16:	441a      	add	r2, r3
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	3304      	adds	r3, #4
 800bf1c:	4619      	mov	r1, r3
 800bf1e:	4610      	mov	r0, r2
 800bf20:	f7fe ff63 	bl	800adea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800bf24:	f001 f962 	bl	800d1ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800bf28:	4b0a      	ldr	r3, [pc, #40]	; (800bf54 <prvAddNewTaskToReadyList+0xc0>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d008      	beq.n	800bf42 <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800bf30:	4b07      	ldr	r3, [pc, #28]	; (800bf50 <prvAddNewTaskToReadyList+0xbc>)
 800bf32:	681b      	ldr	r3, [r3, #0]
 800bf34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	d201      	bcs.n	800bf42 <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800bf3e:	f001 f931 	bl	800d1a4 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800bf42:	bf00      	nop
 800bf44:	3708      	adds	r7, #8
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	2001d888 	.word	0x2001d888
 800bf50:	2001d3b4 	.word	0x2001d3b4
 800bf54:	2001d894 	.word	0x2001d894
 800bf58:	2001d8a4 	.word	0x2001d8a4
 800bf5c:	2001d890 	.word	0x2001d890
 800bf60:	2001d3b8 	.word	0x2001d3b8

0800bf64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800bf64:	b580      	push	{r7, lr}
 800bf66:	b084      	sub	sp, #16
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800bf6c:	2300      	movs	r3, #0
 800bf6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d00f      	beq.n	800bf96 <vTaskDelay+0x32>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800bf76:	4b0c      	ldr	r3, [pc, #48]	; (800bfa8 <vTaskDelay+0x44>)
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d002      	beq.n	800bf84 <vTaskDelay+0x20>
 800bf7e:	f001 fa5b 	bl	800d438 <ulSetInterruptMask>
 800bf82:	e7fe      	b.n	800bf82 <vTaskDelay+0x1e>
			vTaskSuspendAll();
 800bf84:	f000 f872 	bl	800c06c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800bf88:	2100      	movs	r1, #0
 800bf8a:	6878      	ldr	r0, [r7, #4]
 800bf8c:	f000 fd6a 	bl	800ca64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800bf90:	f000 f87a 	bl	800c088 <xTaskResumeAll>
 800bf94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d101      	bne.n	800bfa0 <vTaskDelay+0x3c>
		{
			portYIELD_WITHIN_API();
 800bf9c:	f001 f902 	bl	800d1a4 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bfa0:	bf00      	nop
 800bfa2:	3710      	adds	r7, #16
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}
 800bfa8:	2001d8b0 	.word	0x2001d8b0

0800bfac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b088      	sub	sp, #32
 800bfb0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800bfba:	463a      	mov	r2, r7
 800bfbc:	1d39      	adds	r1, r7, #4
 800bfbe:	f107 0308 	add.w	r3, r7, #8
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f7fe feb0 	bl	800ad28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800bfc8:	6839      	ldr	r1, [r7, #0]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	68ba      	ldr	r2, [r7, #8]
 800bfce:	9202      	str	r2, [sp, #8]
 800bfd0:	9301      	str	r3, [sp, #4]
 800bfd2:	2300      	movs	r3, #0
 800bfd4:	9300      	str	r3, [sp, #0]
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	460a      	mov	r2, r1
 800bfda:	491c      	ldr	r1, [pc, #112]	; (800c04c <vTaskStartScheduler+0xa0>)
 800bfdc:	481c      	ldr	r0, [pc, #112]	; (800c050 <vTaskStartScheduler+0xa4>)
 800bfde:	f7ff fe2f 	bl	800bc40 <xTaskCreateStatic>
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	4a1b      	ldr	r2, [pc, #108]	; (800c054 <vTaskStartScheduler+0xa8>)
 800bfe6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800bfe8:	4b1a      	ldr	r3, [pc, #104]	; (800c054 <vTaskStartScheduler+0xa8>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d002      	beq.n	800bff6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800bff0:	2301      	movs	r3, #1
 800bff2:	60fb      	str	r3, [r7, #12]
 800bff4:	e001      	b.n	800bffa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800bff6:	2300      	movs	r3, #0
 800bff8:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d102      	bne.n	800c006 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800c000:	f000 fd84 	bl	800cb0c <xTimerCreateTimerTask>
 800c004:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	2b01      	cmp	r3, #1
 800c00a:	d113      	bne.n	800c034 <vTaskStartScheduler+0x88>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800c00c:	f001 fa14 	bl	800d438 <ulSetInterruptMask>
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c010:	4b11      	ldr	r3, [pc, #68]	; (800c058 <vTaskStartScheduler+0xac>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	3354      	adds	r3, #84	; 0x54
 800c016:	4a11      	ldr	r2, [pc, #68]	; (800c05c <vTaskStartScheduler+0xb0>)
 800c018:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c01a:	4b11      	ldr	r3, [pc, #68]	; (800c060 <vTaskStartScheduler+0xb4>)
 800c01c:	f04f 32ff 	mov.w	r2, #4294967295
 800c020:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c022:	4b10      	ldr	r3, [pc, #64]	; (800c064 <vTaskStartScheduler+0xb8>)
 800c024:	2201      	movs	r2, #1
 800c026:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c028:	4b0f      	ldr	r3, [pc, #60]	; (800c068 <vTaskStartScheduler+0xbc>)
 800c02a:	2200      	movs	r2, #0
 800c02c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c02e:	f001 f9b1 	bl	800d394 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c032:	e006      	b.n	800c042 <vTaskStartScheduler+0x96>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c03a:	d102      	bne.n	800c042 <vTaskStartScheduler+0x96>
 800c03c:	f001 f9fc 	bl	800d438 <ulSetInterruptMask>
 800c040:	e7fe      	b.n	800c040 <vTaskStartScheduler+0x94>
}
 800c042:	bf00      	nop
 800c044:	3710      	adds	r7, #16
 800c046:	46bd      	mov	sp, r7
 800c048:	bd80      	pop	{r7, pc}
 800c04a:	bf00      	nop
 800c04c:	08022d98 	.word	0x08022d98
 800c050:	0800c5fd 	.word	0x0800c5fd
 800c054:	2001d8ac 	.word	0x2001d8ac
 800c058:	2001d3b4 	.word	0x2001d3b4
 800c05c:	200000f0 	.word	0x200000f0
 800c060:	2001d8a8 	.word	0x2001d8a8
 800c064:	2001d894 	.word	0x2001d894
 800c068:	2001d88c 	.word	0x2001d88c

0800c06c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c06c:	b480      	push	{r7}
 800c06e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800c070:	4b04      	ldr	r3, [pc, #16]	; (800c084 <vTaskSuspendAll+0x18>)
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	3301      	adds	r3, #1
 800c076:	4a03      	ldr	r2, [pc, #12]	; (800c084 <vTaskSuspendAll+0x18>)
 800c078:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800c07a:	bf00      	nop
 800c07c:	46bd      	mov	sp, r7
 800c07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c082:	4770      	bx	lr
 800c084:	2001d8b0 	.word	0x2001d8b0

0800c088 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b084      	sub	sp, #16
 800c08c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c08e:	2300      	movs	r3, #0
 800c090:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c092:	2300      	movs	r3, #0
 800c094:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c096:	4b3b      	ldr	r3, [pc, #236]	; (800c184 <xTaskResumeAll+0xfc>)
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	d102      	bne.n	800c0a4 <xTaskResumeAll+0x1c>
 800c09e:	f001 f9cb 	bl	800d438 <ulSetInterruptMask>
 800c0a2:	e7fe      	b.n	800c0a2 <xTaskResumeAll+0x1a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c0a4:	f001 f890 	bl	800d1c8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c0a8:	4b36      	ldr	r3, [pc, #216]	; (800c184 <xTaskResumeAll+0xfc>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	3b01      	subs	r3, #1
 800c0ae:	4a35      	ldr	r2, [pc, #212]	; (800c184 <xTaskResumeAll+0xfc>)
 800c0b0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0b2:	4b34      	ldr	r3, [pc, #208]	; (800c184 <xTaskResumeAll+0xfc>)
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d15c      	bne.n	800c174 <xTaskResumeAll+0xec>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c0ba:	4b33      	ldr	r3, [pc, #204]	; (800c188 <xTaskResumeAll+0x100>)
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d058      	beq.n	800c174 <xTaskResumeAll+0xec>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c0c2:	e02f      	b.n	800c124 <xTaskResumeAll+0x9c>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c0c4:	4b31      	ldr	r3, [pc, #196]	; (800c18c <xTaskResumeAll+0x104>)
 800c0c6:	68db      	ldr	r3, [r3, #12]
 800c0c8:	68db      	ldr	r3, [r3, #12]
 800c0ca:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	3318      	adds	r3, #24
 800c0d0:	4618      	mov	r0, r3
 800c0d2:	f7fe fee7 	bl	800aea4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	3304      	adds	r3, #4
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7fe fee2 	bl	800aea4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0e4:	4b2a      	ldr	r3, [pc, #168]	; (800c190 <xTaskResumeAll+0x108>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	429a      	cmp	r2, r3
 800c0ea:	d903      	bls.n	800c0f4 <xTaskResumeAll+0x6c>
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f0:	4a27      	ldr	r2, [pc, #156]	; (800c190 <xTaskResumeAll+0x108>)
 800c0f2:	6013      	str	r3, [r2, #0]
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0f8:	4613      	mov	r3, r2
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	4413      	add	r3, r2
 800c0fe:	009b      	lsls	r3, r3, #2
 800c100:	4a24      	ldr	r2, [pc, #144]	; (800c194 <xTaskResumeAll+0x10c>)
 800c102:	441a      	add	r2, r3
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	3304      	adds	r3, #4
 800c108:	4619      	mov	r1, r3
 800c10a:	4610      	mov	r0, r2
 800c10c:	f7fe fe6d 	bl	800adea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c114:	4b20      	ldr	r3, [pc, #128]	; (800c198 <xTaskResumeAll+0x110>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d302      	bcc.n	800c124 <xTaskResumeAll+0x9c>
					{
						xYieldPending = pdTRUE;
 800c11e:	4b1f      	ldr	r3, [pc, #124]	; (800c19c <xTaskResumeAll+0x114>)
 800c120:	2201      	movs	r2, #1
 800c122:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c124:	4b19      	ldr	r3, [pc, #100]	; (800c18c <xTaskResumeAll+0x104>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d1cb      	bne.n	800c0c4 <xTaskResumeAll+0x3c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d001      	beq.n	800c136 <xTaskResumeAll+0xae>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c132:	f000 fb0d 	bl	800c750 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800c136:	4b1a      	ldr	r3, [pc, #104]	; (800c1a0 <xTaskResumeAll+0x118>)
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d010      	beq.n	800c164 <xTaskResumeAll+0xdc>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c142:	f000 f83f 	bl	800c1c4 <xTaskIncrementTick>
 800c146:	4603      	mov	r3, r0
 800c148:	2b00      	cmp	r3, #0
 800c14a:	d002      	beq.n	800c152 <xTaskResumeAll+0xca>
							{
								xYieldPending = pdTRUE;
 800c14c:	4b13      	ldr	r3, [pc, #76]	; (800c19c <xTaskResumeAll+0x114>)
 800c14e:	2201      	movs	r2, #1
 800c150:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	3b01      	subs	r3, #1
 800c156:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d1f1      	bne.n	800c142 <xTaskResumeAll+0xba>

						xPendedTicks = 0;
 800c15e:	4b10      	ldr	r3, [pc, #64]	; (800c1a0 <xTaskResumeAll+0x118>)
 800c160:	2200      	movs	r2, #0
 800c162:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c164:	4b0d      	ldr	r3, [pc, #52]	; (800c19c <xTaskResumeAll+0x114>)
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d003      	beq.n	800c174 <xTaskResumeAll+0xec>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c16c:	2301      	movs	r3, #1
 800c16e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c170:	f001 f818 	bl	800d1a4 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c174:	f001 f83a 	bl	800d1ec <vPortExitCritical>

	return xAlreadyYielded;
 800c178:	68bb      	ldr	r3, [r7, #8]
}
 800c17a:	4618      	mov	r0, r3
 800c17c:	3710      	adds	r7, #16
 800c17e:	46bd      	mov	sp, r7
 800c180:	bd80      	pop	{r7, pc}
 800c182:	bf00      	nop
 800c184:	2001d8b0 	.word	0x2001d8b0
 800c188:	2001d888 	.word	0x2001d888
 800c18c:	2001d848 	.word	0x2001d848
 800c190:	2001d890 	.word	0x2001d890
 800c194:	2001d3b8 	.word	0x2001d3b8
 800c198:	2001d3b4 	.word	0x2001d3b4
 800c19c:	2001d89c 	.word	0x2001d89c
 800c1a0:	2001d898 	.word	0x2001d898

0800c1a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c1a4:	b480      	push	{r7}
 800c1a6:	b083      	sub	sp, #12
 800c1a8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c1aa:	4b05      	ldr	r3, [pc, #20]	; (800c1c0 <xTaskGetTickCount+0x1c>)
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c1b0:	687b      	ldr	r3, [r7, #4]
}
 800c1b2:	4618      	mov	r0, r3
 800c1b4:	370c      	adds	r7, #12
 800c1b6:	46bd      	mov	sp, r7
 800c1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1bc:	4770      	bx	lr
 800c1be:	bf00      	nop
 800c1c0:	2001d88c 	.word	0x2001d88c

0800c1c4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b086      	sub	sp, #24
 800c1c8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c1ce:	4b4b      	ldr	r3, [pc, #300]	; (800c2fc <xTaskIncrementTick+0x138>)
 800c1d0:	681b      	ldr	r3, [r3, #0]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	f040 8087 	bne.w	800c2e6 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c1d8:	4b49      	ldr	r3, [pc, #292]	; (800c300 <xTaskIncrementTick+0x13c>)
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	3301      	adds	r3, #1
 800c1de:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c1e0:	4a47      	ldr	r2, [pc, #284]	; (800c300 <xTaskIncrementTick+0x13c>)
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c1e6:	693b      	ldr	r3, [r7, #16]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d118      	bne.n	800c21e <xTaskIncrementTick+0x5a>
		{
			taskSWITCH_DELAYED_LISTS();
 800c1ec:	4b45      	ldr	r3, [pc, #276]	; (800c304 <xTaskIncrementTick+0x140>)
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d002      	beq.n	800c1fc <xTaskIncrementTick+0x38>
 800c1f6:	f001 f91f 	bl	800d438 <ulSetInterruptMask>
 800c1fa:	e7fe      	b.n	800c1fa <xTaskIncrementTick+0x36>
 800c1fc:	4b41      	ldr	r3, [pc, #260]	; (800c304 <xTaskIncrementTick+0x140>)
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	60fb      	str	r3, [r7, #12]
 800c202:	4b41      	ldr	r3, [pc, #260]	; (800c308 <xTaskIncrementTick+0x144>)
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	4a3f      	ldr	r2, [pc, #252]	; (800c304 <xTaskIncrementTick+0x140>)
 800c208:	6013      	str	r3, [r2, #0]
 800c20a:	4a3f      	ldr	r2, [pc, #252]	; (800c308 <xTaskIncrementTick+0x144>)
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	6013      	str	r3, [r2, #0]
 800c210:	4b3e      	ldr	r3, [pc, #248]	; (800c30c <xTaskIncrementTick+0x148>)
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	3301      	adds	r3, #1
 800c216:	4a3d      	ldr	r2, [pc, #244]	; (800c30c <xTaskIncrementTick+0x148>)
 800c218:	6013      	str	r3, [r2, #0]
 800c21a:	f000 fa99 	bl	800c750 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c21e:	4b3c      	ldr	r3, [pc, #240]	; (800c310 <xTaskIncrementTick+0x14c>)
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	693a      	ldr	r2, [r7, #16]
 800c224:	429a      	cmp	r2, r3
 800c226:	d349      	bcc.n	800c2bc <xTaskIncrementTick+0xf8>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c228:	4b36      	ldr	r3, [pc, #216]	; (800c304 <xTaskIncrementTick+0x140>)
 800c22a:	681b      	ldr	r3, [r3, #0]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d104      	bne.n	800c23c <xTaskIncrementTick+0x78>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c232:	4b37      	ldr	r3, [pc, #220]	; (800c310 <xTaskIncrementTick+0x14c>)
 800c234:	f04f 32ff 	mov.w	r2, #4294967295
 800c238:	601a      	str	r2, [r3, #0]
					break;
 800c23a:	e03f      	b.n	800c2bc <xTaskIncrementTick+0xf8>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c23c:	4b31      	ldr	r3, [pc, #196]	; (800c304 <xTaskIncrementTick+0x140>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	68db      	ldr	r3, [r3, #12]
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	685b      	ldr	r3, [r3, #4]
 800c24a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c24c:	693a      	ldr	r2, [r7, #16]
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	429a      	cmp	r2, r3
 800c252:	d203      	bcs.n	800c25c <xTaskIncrementTick+0x98>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c254:	4a2e      	ldr	r2, [pc, #184]	; (800c310 <xTaskIncrementTick+0x14c>)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c25a:	e02f      	b.n	800c2bc <xTaskIncrementTick+0xf8>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c25c:	68bb      	ldr	r3, [r7, #8]
 800c25e:	3304      	adds	r3, #4
 800c260:	4618      	mov	r0, r3
 800c262:	f7fe fe1f 	bl	800aea4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d004      	beq.n	800c278 <xTaskIncrementTick+0xb4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	3318      	adds	r3, #24
 800c272:	4618      	mov	r0, r3
 800c274:	f7fe fe16 	bl	800aea4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c278:	68bb      	ldr	r3, [r7, #8]
 800c27a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c27c:	4b25      	ldr	r3, [pc, #148]	; (800c314 <xTaskIncrementTick+0x150>)
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	429a      	cmp	r2, r3
 800c282:	d903      	bls.n	800c28c <xTaskIncrementTick+0xc8>
 800c284:	68bb      	ldr	r3, [r7, #8]
 800c286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c288:	4a22      	ldr	r2, [pc, #136]	; (800c314 <xTaskIncrementTick+0x150>)
 800c28a:	6013      	str	r3, [r2, #0]
 800c28c:	68bb      	ldr	r3, [r7, #8]
 800c28e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c290:	4613      	mov	r3, r2
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	4413      	add	r3, r2
 800c296:	009b      	lsls	r3, r3, #2
 800c298:	4a1f      	ldr	r2, [pc, #124]	; (800c318 <xTaskIncrementTick+0x154>)
 800c29a:	441a      	add	r2, r3
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	3304      	adds	r3, #4
 800c2a0:	4619      	mov	r1, r3
 800c2a2:	4610      	mov	r0, r2
 800c2a4:	f7fe fda1 	bl	800adea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2ac:	4b1b      	ldr	r3, [pc, #108]	; (800c31c <xTaskIncrementTick+0x158>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d3b8      	bcc.n	800c228 <xTaskIncrementTick+0x64>
						{
							xSwitchRequired = pdTRUE;
 800c2b6:	2301      	movs	r3, #1
 800c2b8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c2ba:	e7b5      	b.n	800c228 <xTaskIncrementTick+0x64>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800c2bc:	4b17      	ldr	r3, [pc, #92]	; (800c31c <xTaskIncrementTick+0x158>)
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2c2:	4915      	ldr	r1, [pc, #84]	; (800c318 <xTaskIncrementTick+0x154>)
 800c2c4:	4613      	mov	r3, r2
 800c2c6:	009b      	lsls	r3, r3, #2
 800c2c8:	4413      	add	r3, r2
 800c2ca:	009b      	lsls	r3, r3, #2
 800c2cc:	440b      	add	r3, r1
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	2b01      	cmp	r3, #1
 800c2d2:	d901      	bls.n	800c2d8 <xTaskIncrementTick+0x114>
			{
				xSwitchRequired = pdTRUE;
 800c2d4:	2301      	movs	r3, #1
 800c2d6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800c2d8:	4b11      	ldr	r3, [pc, #68]	; (800c320 <xTaskIncrementTick+0x15c>)
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d007      	beq.n	800c2f0 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	617b      	str	r3, [r7, #20]
 800c2e4:	e004      	b.n	800c2f0 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800c2e6:	4b0f      	ldr	r3, [pc, #60]	; (800c324 <xTaskIncrementTick+0x160>)
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	4a0d      	ldr	r2, [pc, #52]	; (800c324 <xTaskIncrementTick+0x160>)
 800c2ee:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800c2f0:	697b      	ldr	r3, [r7, #20]
}
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	3718      	adds	r7, #24
 800c2f6:	46bd      	mov	sp, r7
 800c2f8:	bd80      	pop	{r7, pc}
 800c2fa:	bf00      	nop
 800c2fc:	2001d8b0 	.word	0x2001d8b0
 800c300:	2001d88c 	.word	0x2001d88c
 800c304:	2001d840 	.word	0x2001d840
 800c308:	2001d844 	.word	0x2001d844
 800c30c:	2001d8a0 	.word	0x2001d8a0
 800c310:	2001d8a8 	.word	0x2001d8a8
 800c314:	2001d890 	.word	0x2001d890
 800c318:	2001d3b8 	.word	0x2001d3b8
 800c31c:	2001d3b4 	.word	0x2001d3b4
 800c320:	2001d89c 	.word	0x2001d89c
 800c324:	2001d898 	.word	0x2001d898

0800c328 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800c328:	b580      	push	{r7, lr}
 800c32a:	b082      	sub	sp, #8
 800c32c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800c32e:	4b25      	ldr	r3, [pc, #148]	; (800c3c4 <vTaskSwitchContext+0x9c>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d003      	beq.n	800c33e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800c336:	4b24      	ldr	r3, [pc, #144]	; (800c3c8 <vTaskSwitchContext+0xa0>)
 800c338:	2201      	movs	r2, #1
 800c33a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800c33c:	e03e      	b.n	800c3bc <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800c33e:	4b22      	ldr	r3, [pc, #136]	; (800c3c8 <vTaskSwitchContext+0xa0>)
 800c340:	2200      	movs	r2, #0
 800c342:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c344:	4b21      	ldr	r3, [pc, #132]	; (800c3cc <vTaskSwitchContext+0xa4>)
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	607b      	str	r3, [r7, #4]
 800c34a:	e008      	b.n	800c35e <vTaskSwitchContext+0x36>
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d102      	bne.n	800c358 <vTaskSwitchContext+0x30>
 800c352:	f001 f871 	bl	800d438 <ulSetInterruptMask>
 800c356:	e7fe      	b.n	800c356 <vTaskSwitchContext+0x2e>
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	3b01      	subs	r3, #1
 800c35c:	607b      	str	r3, [r7, #4]
 800c35e:	491c      	ldr	r1, [pc, #112]	; (800c3d0 <vTaskSwitchContext+0xa8>)
 800c360:	687a      	ldr	r2, [r7, #4]
 800c362:	4613      	mov	r3, r2
 800c364:	009b      	lsls	r3, r3, #2
 800c366:	4413      	add	r3, r2
 800c368:	009b      	lsls	r3, r3, #2
 800c36a:	440b      	add	r3, r1
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d0ec      	beq.n	800c34c <vTaskSwitchContext+0x24>
 800c372:	687a      	ldr	r2, [r7, #4]
 800c374:	4613      	mov	r3, r2
 800c376:	009b      	lsls	r3, r3, #2
 800c378:	4413      	add	r3, r2
 800c37a:	009b      	lsls	r3, r3, #2
 800c37c:	4a14      	ldr	r2, [pc, #80]	; (800c3d0 <vTaskSwitchContext+0xa8>)
 800c37e:	4413      	add	r3, r2
 800c380:	603b      	str	r3, [r7, #0]
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	685b      	ldr	r3, [r3, #4]
 800c386:	685a      	ldr	r2, [r3, #4]
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	605a      	str	r2, [r3, #4]
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	685a      	ldr	r2, [r3, #4]
 800c390:	683b      	ldr	r3, [r7, #0]
 800c392:	3308      	adds	r3, #8
 800c394:	429a      	cmp	r2, r3
 800c396:	d104      	bne.n	800c3a2 <vTaskSwitchContext+0x7a>
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	685a      	ldr	r2, [r3, #4]
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	605a      	str	r2, [r3, #4]
 800c3a2:	683b      	ldr	r3, [r7, #0]
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	68db      	ldr	r3, [r3, #12]
 800c3a8:	4a0a      	ldr	r2, [pc, #40]	; (800c3d4 <vTaskSwitchContext+0xac>)
 800c3aa:	6013      	str	r3, [r2, #0]
 800c3ac:	4a07      	ldr	r2, [pc, #28]	; (800c3cc <vTaskSwitchContext+0xa4>)
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800c3b2:	4b08      	ldr	r3, [pc, #32]	; (800c3d4 <vTaskSwitchContext+0xac>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	3354      	adds	r3, #84	; 0x54
 800c3b8:	4a07      	ldr	r2, [pc, #28]	; (800c3d8 <vTaskSwitchContext+0xb0>)
 800c3ba:	6013      	str	r3, [r2, #0]
}
 800c3bc:	bf00      	nop
 800c3be:	3708      	adds	r7, #8
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}
 800c3c4:	2001d8b0 	.word	0x2001d8b0
 800c3c8:	2001d89c 	.word	0x2001d89c
 800c3cc:	2001d890 	.word	0x2001d890
 800c3d0:	2001d3b8 	.word	0x2001d3b8
 800c3d4:	2001d3b4 	.word	0x2001d3b4
 800c3d8:	200000f0 	.word	0x200000f0

0800c3dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b082      	sub	sp, #8
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
 800c3e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	2b00      	cmp	r3, #0
 800c3ea:	d102      	bne.n	800c3f2 <vTaskPlaceOnEventList+0x16>
 800c3ec:	f001 f824 	bl	800d438 <ulSetInterruptMask>
 800c3f0:	e7fe      	b.n	800c3f0 <vTaskPlaceOnEventList+0x14>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c3f2:	4b07      	ldr	r3, [pc, #28]	; (800c410 <vTaskPlaceOnEventList+0x34>)
 800c3f4:	681b      	ldr	r3, [r3, #0]
 800c3f6:	3318      	adds	r3, #24
 800c3f8:	4619      	mov	r1, r3
 800c3fa:	6878      	ldr	r0, [r7, #4]
 800c3fc:	f7fe fd19 	bl	800ae32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c400:	2101      	movs	r1, #1
 800c402:	6838      	ldr	r0, [r7, #0]
 800c404:	f000 fb2e 	bl	800ca64 <prvAddCurrentTaskToDelayedList>
}
 800c408:	bf00      	nop
 800c40a:	3708      	adds	r7, #8
 800c40c:	46bd      	mov	sp, r7
 800c40e:	bd80      	pop	{r7, pc}
 800c410:	2001d3b4 	.word	0x2001d3b4

0800c414 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c414:	b580      	push	{r7, lr}
 800c416:	b084      	sub	sp, #16
 800c418:	af00      	add	r7, sp, #0
 800c41a:	60f8      	str	r0, [r7, #12]
 800c41c:	60b9      	str	r1, [r7, #8]
 800c41e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800c420:	68fb      	ldr	r3, [r7, #12]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d102      	bne.n	800c42c <vTaskPlaceOnEventListRestricted+0x18>
 800c426:	f001 f807 	bl	800d438 <ulSetInterruptMask>
 800c42a:	e7fe      	b.n	800c42a <vTaskPlaceOnEventListRestricted+0x16>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800c42c:	4b0a      	ldr	r3, [pc, #40]	; (800c458 <vTaskPlaceOnEventListRestricted+0x44>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	3318      	adds	r3, #24
 800c432:	4619      	mov	r1, r3
 800c434:	68f8      	ldr	r0, [r7, #12]
 800c436:	f7fe fcd8 	bl	800adea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d002      	beq.n	800c446 <vTaskPlaceOnEventListRestricted+0x32>
		{
			xTicksToWait = portMAX_DELAY;
 800c440:	f04f 33ff 	mov.w	r3, #4294967295
 800c444:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800c446:	6879      	ldr	r1, [r7, #4]
 800c448:	68b8      	ldr	r0, [r7, #8]
 800c44a:	f000 fb0b 	bl	800ca64 <prvAddCurrentTaskToDelayedList>
	}
 800c44e:	bf00      	nop
 800c450:	3710      	adds	r7, #16
 800c452:	46bd      	mov	sp, r7
 800c454:	bd80      	pop	{r7, pc}
 800c456:	bf00      	nop
 800c458:	2001d3b4 	.word	0x2001d3b4

0800c45c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b084      	sub	sp, #16
 800c460:	af00      	add	r7, sp, #0
 800c462:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	68db      	ldr	r3, [r3, #12]
 800c468:	68db      	ldr	r3, [r3, #12]
 800c46a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d102      	bne.n	800c478 <xTaskRemoveFromEventList+0x1c>
 800c472:	f000 ffe1 	bl	800d438 <ulSetInterruptMask>
 800c476:	e7fe      	b.n	800c476 <xTaskRemoveFromEventList+0x1a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	3318      	adds	r3, #24
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7fe fd11 	bl	800aea4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c482:	4b1e      	ldr	r3, [pc, #120]	; (800c4fc <xTaskRemoveFromEventList+0xa0>)
 800c484:	681b      	ldr	r3, [r3, #0]
 800c486:	2b00      	cmp	r3, #0
 800c488:	d11d      	bne.n	800c4c6 <xTaskRemoveFromEventList+0x6a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	3304      	adds	r3, #4
 800c48e:	4618      	mov	r0, r3
 800c490:	f7fe fd08 	bl	800aea4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c498:	4b19      	ldr	r3, [pc, #100]	; (800c500 <xTaskRemoveFromEventList+0xa4>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	429a      	cmp	r2, r3
 800c49e:	d903      	bls.n	800c4a8 <xTaskRemoveFromEventList+0x4c>
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4a4:	4a16      	ldr	r2, [pc, #88]	; (800c500 <xTaskRemoveFromEventList+0xa4>)
 800c4a6:	6013      	str	r3, [r2, #0]
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4ac:	4613      	mov	r3, r2
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	4413      	add	r3, r2
 800c4b2:	009b      	lsls	r3, r3, #2
 800c4b4:	4a13      	ldr	r2, [pc, #76]	; (800c504 <xTaskRemoveFromEventList+0xa8>)
 800c4b6:	441a      	add	r2, r3
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	3304      	adds	r3, #4
 800c4bc:	4619      	mov	r1, r3
 800c4be:	4610      	mov	r0, r2
 800c4c0:	f7fe fc93 	bl	800adea <vListInsertEnd>
 800c4c4:	e005      	b.n	800c4d2 <xTaskRemoveFromEventList+0x76>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	3318      	adds	r3, #24
 800c4ca:	4619      	mov	r1, r3
 800c4cc:	480e      	ldr	r0, [pc, #56]	; (800c508 <xTaskRemoveFromEventList+0xac>)
 800c4ce:	f7fe fc8c 	bl	800adea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c4d2:	68bb      	ldr	r3, [r7, #8]
 800c4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4d6:	4b0d      	ldr	r3, [pc, #52]	; (800c50c <xTaskRemoveFromEventList+0xb0>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4dc:	429a      	cmp	r2, r3
 800c4de:	d905      	bls.n	800c4ec <xTaskRemoveFromEventList+0x90>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c4e0:	2301      	movs	r3, #1
 800c4e2:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c4e4:	4b0a      	ldr	r3, [pc, #40]	; (800c510 <xTaskRemoveFromEventList+0xb4>)
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	601a      	str	r2, [r3, #0]
 800c4ea:	e001      	b.n	800c4f0 <xTaskRemoveFromEventList+0x94>
	}
	else
	{
		xReturn = pdFALSE;
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800c4f0:	68fb      	ldr	r3, [r7, #12]
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3710      	adds	r7, #16
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	2001d8b0 	.word	0x2001d8b0
 800c500:	2001d890 	.word	0x2001d890
 800c504:	2001d3b8 	.word	0x2001d3b8
 800c508:	2001d848 	.word	0x2001d848
 800c50c:	2001d3b4 	.word	0x2001d3b4
 800c510:	2001d89c 	.word	0x2001d89c

0800c514 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c51c:	4b06      	ldr	r3, [pc, #24]	; (800c538 <vTaskInternalSetTimeOutState+0x24>)
 800c51e:	681a      	ldr	r2, [r3, #0]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c524:	4b05      	ldr	r3, [pc, #20]	; (800c53c <vTaskInternalSetTimeOutState+0x28>)
 800c526:	681a      	ldr	r2, [r3, #0]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	605a      	str	r2, [r3, #4]
}
 800c52c:	bf00      	nop
 800c52e:	370c      	adds	r7, #12
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr
 800c538:	2001d8a0 	.word	0x2001d8a0
 800c53c:	2001d88c 	.word	0x2001d88c

0800c540 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b086      	sub	sp, #24
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
 800c548:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d102      	bne.n	800c556 <xTaskCheckForTimeOut+0x16>
 800c550:	f000 ff72 	bl	800d438 <ulSetInterruptMask>
 800c554:	e7fe      	b.n	800c554 <xTaskCheckForTimeOut+0x14>
	configASSERT( pxTicksToWait );
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d102      	bne.n	800c562 <xTaskCheckForTimeOut+0x22>
 800c55c:	f000 ff6c 	bl	800d438 <ulSetInterruptMask>
 800c560:	e7fe      	b.n	800c560 <xTaskCheckForTimeOut+0x20>

	taskENTER_CRITICAL();
 800c562:	f000 fe31 	bl	800d1c8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c566:	4b1d      	ldr	r3, [pc, #116]	; (800c5dc <xTaskCheckForTimeOut+0x9c>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	693a      	ldr	r2, [r7, #16]
 800c572:	1ad3      	subs	r3, r2, r3
 800c574:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c576:	683b      	ldr	r3, [r7, #0]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c57e:	d102      	bne.n	800c586 <xTaskCheckForTimeOut+0x46>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c580:	2300      	movs	r3, #0
 800c582:	617b      	str	r3, [r7, #20]
 800c584:	e023      	b.n	800c5ce <xTaskCheckForTimeOut+0x8e>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	681a      	ldr	r2, [r3, #0]
 800c58a:	4b15      	ldr	r3, [pc, #84]	; (800c5e0 <xTaskCheckForTimeOut+0xa0>)
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	429a      	cmp	r2, r3
 800c590:	d007      	beq.n	800c5a2 <xTaskCheckForTimeOut+0x62>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	685b      	ldr	r3, [r3, #4]
 800c596:	693a      	ldr	r2, [r7, #16]
 800c598:	429a      	cmp	r2, r3
 800c59a:	d302      	bcc.n	800c5a2 <xTaskCheckForTimeOut+0x62>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c59c:	2301      	movs	r3, #1
 800c59e:	617b      	str	r3, [r7, #20]
 800c5a0:	e015      	b.n	800c5ce <xTaskCheckForTimeOut+0x8e>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c5a2:	683b      	ldr	r3, [r7, #0]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	68fa      	ldr	r2, [r7, #12]
 800c5a8:	429a      	cmp	r2, r3
 800c5aa:	d20b      	bcs.n	800c5c4 <xTaskCheckForTimeOut+0x84>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c5ac:	683b      	ldr	r3, [r7, #0]
 800c5ae:	681a      	ldr	r2, [r3, #0]
 800c5b0:	68fb      	ldr	r3, [r7, #12]
 800c5b2:	1ad2      	subs	r2, r2, r3
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c5b8:	6878      	ldr	r0, [r7, #4]
 800c5ba:	f7ff ffab 	bl	800c514 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c5be:	2300      	movs	r3, #0
 800c5c0:	617b      	str	r3, [r7, #20]
 800c5c2:	e004      	b.n	800c5ce <xTaskCheckForTimeOut+0x8e>
		}
		else
		{
			*pxTicksToWait = 0;
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c5ca:	2301      	movs	r3, #1
 800c5cc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800c5ce:	f000 fe0d 	bl	800d1ec <vPortExitCritical>

	return xReturn;
 800c5d2:	697b      	ldr	r3, [r7, #20]
}
 800c5d4:	4618      	mov	r0, r3
 800c5d6:	3718      	adds	r7, #24
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	bd80      	pop	{r7, pc}
 800c5dc:	2001d88c 	.word	0x2001d88c
 800c5e0:	2001d8a0 	.word	0x2001d8a0

0800c5e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c5e8:	4b03      	ldr	r3, [pc, #12]	; (800c5f8 <vTaskMissedYield+0x14>)
 800c5ea:	2201      	movs	r2, #1
 800c5ec:	601a      	str	r2, [r3, #0]
}
 800c5ee:	bf00      	nop
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f6:	4770      	bx	lr
 800c5f8:	2001d89c 	.word	0x2001d89c

0800c5fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c5fc:	b580      	push	{r7, lr}
 800c5fe:	b082      	sub	sp, #8
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c604:	f000 f84a 	bl	800c69c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c608:	4b03      	ldr	r3, [pc, #12]	; (800c618 <prvIdleTask+0x1c>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	2b01      	cmp	r3, #1
 800c60e:	d9f9      	bls.n	800c604 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c610:	f000 fdc8 	bl	800d1a4 <vPortYield>
		prvCheckTasksWaitingTermination();
 800c614:	e7f6      	b.n	800c604 <prvIdleTask+0x8>
 800c616:	bf00      	nop
 800c618:	2001d3b8 	.word	0x2001d3b8

0800c61c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b082      	sub	sp, #8
 800c620:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c622:	2300      	movs	r3, #0
 800c624:	607b      	str	r3, [r7, #4]
 800c626:	e00c      	b.n	800c642 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	4613      	mov	r3, r2
 800c62c:	009b      	lsls	r3, r3, #2
 800c62e:	4413      	add	r3, r2
 800c630:	009b      	lsls	r3, r3, #2
 800c632:	4a12      	ldr	r2, [pc, #72]	; (800c67c <prvInitialiseTaskLists+0x60>)
 800c634:	4413      	add	r3, r2
 800c636:	4618      	mov	r0, r3
 800c638:	f7fe fbaa 	bl	800ad90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	3301      	adds	r3, #1
 800c640:	607b      	str	r3, [r7, #4]
 800c642:	687b      	ldr	r3, [r7, #4]
 800c644:	2b37      	cmp	r3, #55	; 0x37
 800c646:	d9ef      	bls.n	800c628 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c648:	480d      	ldr	r0, [pc, #52]	; (800c680 <prvInitialiseTaskLists+0x64>)
 800c64a:	f7fe fba1 	bl	800ad90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c64e:	480d      	ldr	r0, [pc, #52]	; (800c684 <prvInitialiseTaskLists+0x68>)
 800c650:	f7fe fb9e 	bl	800ad90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c654:	480c      	ldr	r0, [pc, #48]	; (800c688 <prvInitialiseTaskLists+0x6c>)
 800c656:	f7fe fb9b 	bl	800ad90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c65a:	480c      	ldr	r0, [pc, #48]	; (800c68c <prvInitialiseTaskLists+0x70>)
 800c65c:	f7fe fb98 	bl	800ad90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c660:	480b      	ldr	r0, [pc, #44]	; (800c690 <prvInitialiseTaskLists+0x74>)
 800c662:	f7fe fb95 	bl	800ad90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c666:	4b0b      	ldr	r3, [pc, #44]	; (800c694 <prvInitialiseTaskLists+0x78>)
 800c668:	4a05      	ldr	r2, [pc, #20]	; (800c680 <prvInitialiseTaskLists+0x64>)
 800c66a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c66c:	4b0a      	ldr	r3, [pc, #40]	; (800c698 <prvInitialiseTaskLists+0x7c>)
 800c66e:	4a05      	ldr	r2, [pc, #20]	; (800c684 <prvInitialiseTaskLists+0x68>)
 800c670:	601a      	str	r2, [r3, #0]
}
 800c672:	bf00      	nop
 800c674:	3708      	adds	r7, #8
 800c676:	46bd      	mov	sp, r7
 800c678:	bd80      	pop	{r7, pc}
 800c67a:	bf00      	nop
 800c67c:	2001d3b8 	.word	0x2001d3b8
 800c680:	2001d818 	.word	0x2001d818
 800c684:	2001d82c 	.word	0x2001d82c
 800c688:	2001d848 	.word	0x2001d848
 800c68c:	2001d85c 	.word	0x2001d85c
 800c690:	2001d874 	.word	0x2001d874
 800c694:	2001d840 	.word	0x2001d840
 800c698:	2001d844 	.word	0x2001d844

0800c69c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b082      	sub	sp, #8
 800c6a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c6a2:	e019      	b.n	800c6d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c6a4:	f000 fd90 	bl	800d1c8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c6a8:	4b10      	ldr	r3, [pc, #64]	; (800c6ec <prvCheckTasksWaitingTermination+0x50>)
 800c6aa:	68db      	ldr	r3, [r3, #12]
 800c6ac:	68db      	ldr	r3, [r3, #12]
 800c6ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	3304      	adds	r3, #4
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	f7fe fbf5 	bl	800aea4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c6ba:	4b0d      	ldr	r3, [pc, #52]	; (800c6f0 <prvCheckTasksWaitingTermination+0x54>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	3b01      	subs	r3, #1
 800c6c0:	4a0b      	ldr	r2, [pc, #44]	; (800c6f0 <prvCheckTasksWaitingTermination+0x54>)
 800c6c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c6c4:	4b0b      	ldr	r3, [pc, #44]	; (800c6f4 <prvCheckTasksWaitingTermination+0x58>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	3b01      	subs	r3, #1
 800c6ca:	4a0a      	ldr	r2, [pc, #40]	; (800c6f4 <prvCheckTasksWaitingTermination+0x58>)
 800c6cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c6ce:	f000 fd8d 	bl	800d1ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c6d2:	6878      	ldr	r0, [r7, #4]
 800c6d4:	f000 f810 	bl	800c6f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c6d8:	4b06      	ldr	r3, [pc, #24]	; (800c6f4 <prvCheckTasksWaitingTermination+0x58>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d1e1      	bne.n	800c6a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c6e0:	bf00      	nop
 800c6e2:	bf00      	nop
 800c6e4:	3708      	adds	r7, #8
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bd80      	pop	{r7, pc}
 800c6ea:	bf00      	nop
 800c6ec:	2001d85c 	.word	0x2001d85c
 800c6f0:	2001d888 	.word	0x2001d888
 800c6f4:	2001d870 	.word	0x2001d870

0800c6f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	3354      	adds	r3, #84	; 0x54
 800c704:	4618      	mov	r0, r3
 800c706:	f015 ff75 	bl	80225f4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c710:	2b00      	cmp	r3, #0
 800c712:	d108      	bne.n	800c726 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c718:	4618      	mov	r0, r3
 800c71a:	f000 ffa1 	bl	800d660 <vPortFree>
				vPortFree( pxTCB );
 800c71e:	6878      	ldr	r0, [r7, #4]
 800c720:	f000 ff9e 	bl	800d660 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c724:	e010      	b.n	800c748 <prvDeleteTCB+0x50>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c72c:	2b01      	cmp	r3, #1
 800c72e:	d103      	bne.n	800c738 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c730:	6878      	ldr	r0, [r7, #4]
 800c732:	f000 ff95 	bl	800d660 <vPortFree>
	}
 800c736:	e007      	b.n	800c748 <prvDeleteTCB+0x50>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800c73e:	2b02      	cmp	r3, #2
 800c740:	d002      	beq.n	800c748 <prvDeleteTCB+0x50>
 800c742:	f000 fe79 	bl	800d438 <ulSetInterruptMask>
 800c746:	e7fe      	b.n	800c746 <prvDeleteTCB+0x4e>
	}
 800c748:	bf00      	nop
 800c74a:	3708      	adds	r7, #8
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c750:	b480      	push	{r7}
 800c752:	b083      	sub	sp, #12
 800c754:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c756:	4b0c      	ldr	r3, [pc, #48]	; (800c788 <prvResetNextTaskUnblockTime+0x38>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d104      	bne.n	800c76a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c760:	4b0a      	ldr	r3, [pc, #40]	; (800c78c <prvResetNextTaskUnblockTime+0x3c>)
 800c762:	f04f 32ff 	mov.w	r2, #4294967295
 800c766:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c768:	e008      	b.n	800c77c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c76a:	4b07      	ldr	r3, [pc, #28]	; (800c788 <prvResetNextTaskUnblockTime+0x38>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	68db      	ldr	r3, [r3, #12]
 800c770:	68db      	ldr	r3, [r3, #12]
 800c772:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	4a04      	ldr	r2, [pc, #16]	; (800c78c <prvResetNextTaskUnblockTime+0x3c>)
 800c77a:	6013      	str	r3, [r2, #0]
}
 800c77c:	bf00      	nop
 800c77e:	370c      	adds	r7, #12
 800c780:	46bd      	mov	sp, r7
 800c782:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c786:	4770      	bx	lr
 800c788:	2001d840 	.word	0x2001d840
 800c78c:	2001d8a8 	.word	0x2001d8a8

0800c790 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c790:	b480      	push	{r7}
 800c792:	b083      	sub	sp, #12
 800c794:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c796:	4b0b      	ldr	r3, [pc, #44]	; (800c7c4 <xTaskGetSchedulerState+0x34>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d102      	bne.n	800c7a4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c79e:	2301      	movs	r3, #1
 800c7a0:	607b      	str	r3, [r7, #4]
 800c7a2:	e008      	b.n	800c7b6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c7a4:	4b08      	ldr	r3, [pc, #32]	; (800c7c8 <xTaskGetSchedulerState+0x38>)
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d102      	bne.n	800c7b2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c7ac:	2302      	movs	r3, #2
 800c7ae:	607b      	str	r3, [r7, #4]
 800c7b0:	e001      	b.n	800c7b6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c7b6:	687b      	ldr	r3, [r7, #4]
	}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	370c      	adds	r7, #12
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr
 800c7c4:	2001d894 	.word	0x2001d894
 800c7c8:	2001d8b0 	.word	0x2001d8b0

0800c7cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b084      	sub	sp, #16
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c7d8:	2300      	movs	r3, #0
 800c7da:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d051      	beq.n	800c886 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c7e6:	4b2a      	ldr	r3, [pc, #168]	; (800c890 <xTaskPriorityInherit+0xc4>)
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ec:	429a      	cmp	r2, r3
 800c7ee:	d241      	bcs.n	800c874 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c7f0:	68bb      	ldr	r3, [r7, #8]
 800c7f2:	699b      	ldr	r3, [r3, #24]
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	db06      	blt.n	800c806 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c7f8:	4b25      	ldr	r3, [pc, #148]	; (800c890 <xTaskPriorityInherit+0xc4>)
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7fe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c806:	68bb      	ldr	r3, [r7, #8]
 800c808:	6959      	ldr	r1, [r3, #20]
 800c80a:	68bb      	ldr	r3, [r7, #8]
 800c80c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c80e:	4613      	mov	r3, r2
 800c810:	009b      	lsls	r3, r3, #2
 800c812:	4413      	add	r3, r2
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	4a1f      	ldr	r2, [pc, #124]	; (800c894 <xTaskPriorityInherit+0xc8>)
 800c818:	4413      	add	r3, r2
 800c81a:	4299      	cmp	r1, r3
 800c81c:	d122      	bne.n	800c864 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	3304      	adds	r3, #4
 800c822:	4618      	mov	r0, r3
 800c824:	f7fe fb3e 	bl	800aea4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c828:	4b19      	ldr	r3, [pc, #100]	; (800c890 <xTaskPriorityInherit+0xc4>)
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c82e:	68bb      	ldr	r3, [r7, #8]
 800c830:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c832:	68bb      	ldr	r3, [r7, #8]
 800c834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c836:	4b18      	ldr	r3, [pc, #96]	; (800c898 <xTaskPriorityInherit+0xcc>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	429a      	cmp	r2, r3
 800c83c:	d903      	bls.n	800c846 <xTaskPriorityInherit+0x7a>
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c842:	4a15      	ldr	r2, [pc, #84]	; (800c898 <xTaskPriorityInherit+0xcc>)
 800c844:	6013      	str	r3, [r2, #0]
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c84a:	4613      	mov	r3, r2
 800c84c:	009b      	lsls	r3, r3, #2
 800c84e:	4413      	add	r3, r2
 800c850:	009b      	lsls	r3, r3, #2
 800c852:	4a10      	ldr	r2, [pc, #64]	; (800c894 <xTaskPriorityInherit+0xc8>)
 800c854:	441a      	add	r2, r3
 800c856:	68bb      	ldr	r3, [r7, #8]
 800c858:	3304      	adds	r3, #4
 800c85a:	4619      	mov	r1, r3
 800c85c:	4610      	mov	r0, r2
 800c85e:	f7fe fac4 	bl	800adea <vListInsertEnd>
 800c862:	e004      	b.n	800c86e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c864:	4b0a      	ldr	r3, [pc, #40]	; (800c890 <xTaskPriorityInherit+0xc4>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c86e:	2301      	movs	r3, #1
 800c870:	60fb      	str	r3, [r7, #12]
 800c872:	e008      	b.n	800c886 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c874:	68bb      	ldr	r3, [r7, #8]
 800c876:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c878:	4b05      	ldr	r3, [pc, #20]	; (800c890 <xTaskPriorityInherit+0xc4>)
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c87e:	429a      	cmp	r2, r3
 800c880:	d201      	bcs.n	800c886 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c882:	2301      	movs	r3, #1
 800c884:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c886:	68fb      	ldr	r3, [r7, #12]
	}
 800c888:	4618      	mov	r0, r3
 800c88a:	3710      	adds	r7, #16
 800c88c:	46bd      	mov	sp, r7
 800c88e:	bd80      	pop	{r7, pc}
 800c890:	2001d3b4 	.word	0x2001d3b4
 800c894:	2001d3b8 	.word	0x2001d3b8
 800c898:	2001d890 	.word	0x2001d890

0800c89c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c89c:	b580      	push	{r7, lr}
 800c89e:	b084      	sub	sp, #16
 800c8a0:	af00      	add	r7, sp, #0
 800c8a2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d046      	beq.n	800c940 <xTaskPriorityDisinherit+0xa4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c8b2:	4b26      	ldr	r3, [pc, #152]	; (800c94c <xTaskPriorityDisinherit+0xb0>)
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	68ba      	ldr	r2, [r7, #8]
 800c8b8:	429a      	cmp	r2, r3
 800c8ba:	d002      	beq.n	800c8c2 <xTaskPriorityDisinherit+0x26>
 800c8bc:	f000 fdbc 	bl	800d438 <ulSetInterruptMask>
 800c8c0:	e7fe      	b.n	800c8c0 <xTaskPriorityDisinherit+0x24>
			configASSERT( pxTCB->uxMutexesHeld );
 800c8c2:	68bb      	ldr	r3, [r7, #8]
 800c8c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d102      	bne.n	800c8d0 <xTaskPriorityDisinherit+0x34>
 800c8ca:	f000 fdb5 	bl	800d438 <ulSetInterruptMask>
 800c8ce:	e7fe      	b.n	800c8ce <xTaskPriorityDisinherit+0x32>
			( pxTCB->uxMutexesHeld )--;
 800c8d0:	68bb      	ldr	r3, [r7, #8]
 800c8d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8d4:	1e5a      	subs	r2, r3, #1
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8de:	68bb      	ldr	r3, [r7, #8]
 800c8e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c8e2:	429a      	cmp	r2, r3
 800c8e4:	d02c      	beq.n	800c940 <xTaskPriorityDisinherit+0xa4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d128      	bne.n	800c940 <xTaskPriorityDisinherit+0xa4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	3304      	adds	r3, #4
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f7fe fad6 	bl	800aea4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c8f8:	68bb      	ldr	r3, [r7, #8]
 800c8fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c8fc:	68bb      	ldr	r3, [r7, #8]
 800c8fe:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c904:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c90c:	68bb      	ldr	r3, [r7, #8]
 800c90e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c910:	4b0f      	ldr	r3, [pc, #60]	; (800c950 <xTaskPriorityDisinherit+0xb4>)
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	429a      	cmp	r2, r3
 800c916:	d903      	bls.n	800c920 <xTaskPriorityDisinherit+0x84>
 800c918:	68bb      	ldr	r3, [r7, #8]
 800c91a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c91c:	4a0c      	ldr	r2, [pc, #48]	; (800c950 <xTaskPriorityDisinherit+0xb4>)
 800c91e:	6013      	str	r3, [r2, #0]
 800c920:	68bb      	ldr	r3, [r7, #8]
 800c922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c924:	4613      	mov	r3, r2
 800c926:	009b      	lsls	r3, r3, #2
 800c928:	4413      	add	r3, r2
 800c92a:	009b      	lsls	r3, r3, #2
 800c92c:	4a09      	ldr	r2, [pc, #36]	; (800c954 <xTaskPriorityDisinherit+0xb8>)
 800c92e:	441a      	add	r2, r3
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	3304      	adds	r3, #4
 800c934:	4619      	mov	r1, r3
 800c936:	4610      	mov	r0, r2
 800c938:	f7fe fa57 	bl	800adea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c93c:	2301      	movs	r3, #1
 800c93e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c940:	68fb      	ldr	r3, [r7, #12]
	}
 800c942:	4618      	mov	r0, r3
 800c944:	3710      	adds	r7, #16
 800c946:	46bd      	mov	sp, r7
 800c948:	bd80      	pop	{r7, pc}
 800c94a:	bf00      	nop
 800c94c:	2001d3b4 	.word	0x2001d3b4
 800c950:	2001d890 	.word	0x2001d890
 800c954:	2001d3b8 	.word	0x2001d3b8

0800c958 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b086      	sub	sp, #24
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c966:	2301      	movs	r3, #1
 800c968:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d05a      	beq.n	800ca26 <vTaskPriorityDisinheritAfterTimeout+0xce>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c974:	2b00      	cmp	r3, #0
 800c976:	d102      	bne.n	800c97e <vTaskPriorityDisinheritAfterTimeout+0x26>
 800c978:	f000 fd5e 	bl	800d438 <ulSetInterruptMask>
 800c97c:	e7fe      	b.n	800c97c <vTaskPriorityDisinheritAfterTimeout+0x24>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c97e:	693b      	ldr	r3, [r7, #16]
 800c980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c982:	683a      	ldr	r2, [r7, #0]
 800c984:	429a      	cmp	r2, r3
 800c986:	d902      	bls.n	800c98e <vTaskPriorityDisinheritAfterTimeout+0x36>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c988:	683b      	ldr	r3, [r7, #0]
 800c98a:	617b      	str	r3, [r7, #20]
 800c98c:	e002      	b.n	800c994 <vTaskPriorityDisinheritAfterTimeout+0x3c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c992:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c998:	697a      	ldr	r2, [r7, #20]
 800c99a:	429a      	cmp	r2, r3
 800c99c:	d043      	beq.n	800ca26 <vTaskPriorityDisinheritAfterTimeout+0xce>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c99e:	693b      	ldr	r3, [r7, #16]
 800c9a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c9a2:	68fa      	ldr	r2, [r7, #12]
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d13e      	bne.n	800ca26 <vTaskPriorityDisinheritAfterTimeout+0xce>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c9a8:	4b21      	ldr	r3, [pc, #132]	; (800ca30 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	693a      	ldr	r2, [r7, #16]
 800c9ae:	429a      	cmp	r2, r3
 800c9b0:	d102      	bne.n	800c9b8 <vTaskPriorityDisinheritAfterTimeout+0x60>
 800c9b2:	f000 fd41 	bl	800d438 <ulSetInterruptMask>
 800c9b6:	e7fe      	b.n	800c9b6 <vTaskPriorityDisinheritAfterTimeout+0x5e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c9b8:	693b      	ldr	r3, [r7, #16]
 800c9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9bc:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800c9be:	693b      	ldr	r3, [r7, #16]
 800c9c0:	697a      	ldr	r2, [r7, #20]
 800c9c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c9c4:	693b      	ldr	r3, [r7, #16]
 800c9c6:	699b      	ldr	r3, [r3, #24]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	db04      	blt.n	800c9d6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9cc:	697b      	ldr	r3, [r7, #20]
 800c9ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c9d2:	693b      	ldr	r3, [r7, #16]
 800c9d4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c9d6:	693b      	ldr	r3, [r7, #16]
 800c9d8:	6959      	ldr	r1, [r3, #20]
 800c9da:	68ba      	ldr	r2, [r7, #8]
 800c9dc:	4613      	mov	r3, r2
 800c9de:	009b      	lsls	r3, r3, #2
 800c9e0:	4413      	add	r3, r2
 800c9e2:	009b      	lsls	r3, r3, #2
 800c9e4:	4a13      	ldr	r2, [pc, #76]	; (800ca34 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800c9e6:	4413      	add	r3, r2
 800c9e8:	4299      	cmp	r1, r3
 800c9ea:	d11c      	bne.n	800ca26 <vTaskPriorityDisinheritAfterTimeout+0xce>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	3304      	adds	r3, #4
 800c9f0:	4618      	mov	r0, r3
 800c9f2:	f7fe fa57 	bl	800aea4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9fa:	4b0f      	ldr	r3, [pc, #60]	; (800ca38 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d903      	bls.n	800ca0a <vTaskPriorityDisinheritAfterTimeout+0xb2>
 800ca02:	693b      	ldr	r3, [r7, #16]
 800ca04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca06:	4a0c      	ldr	r2, [pc, #48]	; (800ca38 <vTaskPriorityDisinheritAfterTimeout+0xe0>)
 800ca08:	6013      	str	r3, [r2, #0]
 800ca0a:	693b      	ldr	r3, [r7, #16]
 800ca0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca0e:	4613      	mov	r3, r2
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	4413      	add	r3, r2
 800ca14:	009b      	lsls	r3, r3, #2
 800ca16:	4a07      	ldr	r2, [pc, #28]	; (800ca34 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800ca18:	441a      	add	r2, r3
 800ca1a:	693b      	ldr	r3, [r7, #16]
 800ca1c:	3304      	adds	r3, #4
 800ca1e:	4619      	mov	r1, r3
 800ca20:	4610      	mov	r0, r2
 800ca22:	f7fe f9e2 	bl	800adea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ca26:	bf00      	nop
 800ca28:	3718      	adds	r7, #24
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop
 800ca30:	2001d3b4 	.word	0x2001d3b4
 800ca34:	2001d3b8 	.word	0x2001d3b8
 800ca38:	2001d890 	.word	0x2001d890

0800ca3c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800ca3c:	b480      	push	{r7}
 800ca3e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800ca40:	4b07      	ldr	r3, [pc, #28]	; (800ca60 <pvTaskIncrementMutexHeldCount+0x24>)
 800ca42:	681b      	ldr	r3, [r3, #0]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d004      	beq.n	800ca52 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800ca48:	4b05      	ldr	r3, [pc, #20]	; (800ca60 <pvTaskIncrementMutexHeldCount+0x24>)
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ca4e:	3201      	adds	r2, #1
 800ca50:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800ca52:	4b03      	ldr	r3, [pc, #12]	; (800ca60 <pvTaskIncrementMutexHeldCount+0x24>)
 800ca54:	681b      	ldr	r3, [r3, #0]
	}
 800ca56:	4618      	mov	r0, r3
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5e:	4770      	bx	lr
 800ca60:	2001d3b4 	.word	0x2001d3b4

0800ca64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ca64:	b580      	push	{r7, lr}
 800ca66:	b084      	sub	sp, #16
 800ca68:	af00      	add	r7, sp, #0
 800ca6a:	6078      	str	r0, [r7, #4]
 800ca6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ca6e:	4b21      	ldr	r3, [pc, #132]	; (800caf4 <prvAddCurrentTaskToDelayedList+0x90>)
 800ca70:	681b      	ldr	r3, [r3, #0]
 800ca72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ca74:	4b20      	ldr	r3, [pc, #128]	; (800caf8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	3304      	adds	r3, #4
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	f7fe fa12 	bl	800aea4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ca80:	687b      	ldr	r3, [r7, #4]
 800ca82:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca86:	d10a      	bne.n	800ca9e <prvAddCurrentTaskToDelayedList+0x3a>
 800ca88:	683b      	ldr	r3, [r7, #0]
 800ca8a:	2b00      	cmp	r3, #0
 800ca8c:	d007      	beq.n	800ca9e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ca8e:	4b1a      	ldr	r3, [pc, #104]	; (800caf8 <prvAddCurrentTaskToDelayedList+0x94>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	3304      	adds	r3, #4
 800ca94:	4619      	mov	r1, r3
 800ca96:	4819      	ldr	r0, [pc, #100]	; (800cafc <prvAddCurrentTaskToDelayedList+0x98>)
 800ca98:	f7fe f9a7 	bl	800adea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ca9c:	e026      	b.n	800caec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ca9e:	68fa      	ldr	r2, [r7, #12]
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	4413      	add	r3, r2
 800caa4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800caa6:	4b14      	ldr	r3, [pc, #80]	; (800caf8 <prvAddCurrentTaskToDelayedList+0x94>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	68ba      	ldr	r2, [r7, #8]
 800caac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800caae:	68ba      	ldr	r2, [r7, #8]
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	429a      	cmp	r2, r3
 800cab4:	d209      	bcs.n	800caca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800cab6:	4b12      	ldr	r3, [pc, #72]	; (800cb00 <prvAddCurrentTaskToDelayedList+0x9c>)
 800cab8:	681a      	ldr	r2, [r3, #0]
 800caba:	4b0f      	ldr	r3, [pc, #60]	; (800caf8 <prvAddCurrentTaskToDelayedList+0x94>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	3304      	adds	r3, #4
 800cac0:	4619      	mov	r1, r3
 800cac2:	4610      	mov	r0, r2
 800cac4:	f7fe f9b5 	bl	800ae32 <vListInsert>
}
 800cac8:	e010      	b.n	800caec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800caca:	4b0e      	ldr	r3, [pc, #56]	; (800cb04 <prvAddCurrentTaskToDelayedList+0xa0>)
 800cacc:	681a      	ldr	r2, [r3, #0]
 800cace:	4b0a      	ldr	r3, [pc, #40]	; (800caf8 <prvAddCurrentTaskToDelayedList+0x94>)
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	3304      	adds	r3, #4
 800cad4:	4619      	mov	r1, r3
 800cad6:	4610      	mov	r0, r2
 800cad8:	f7fe f9ab 	bl	800ae32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800cadc:	4b0a      	ldr	r3, [pc, #40]	; (800cb08 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	68ba      	ldr	r2, [r7, #8]
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d202      	bcs.n	800caec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800cae6:	4a08      	ldr	r2, [pc, #32]	; (800cb08 <prvAddCurrentTaskToDelayedList+0xa4>)
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	6013      	str	r3, [r2, #0]
}
 800caec:	bf00      	nop
 800caee:	3710      	adds	r7, #16
 800caf0:	46bd      	mov	sp, r7
 800caf2:	bd80      	pop	{r7, pc}
 800caf4:	2001d88c 	.word	0x2001d88c
 800caf8:	2001d3b4 	.word	0x2001d3b4
 800cafc:	2001d874 	.word	0x2001d874
 800cb00:	2001d844 	.word	0x2001d844
 800cb04:	2001d840 	.word	0x2001d840
 800cb08:	2001d8a8 	.word	0x2001d8a8

0800cb0c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b088      	sub	sp, #32
 800cb10:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800cb12:	2300      	movs	r3, #0
 800cb14:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800cb16:	f000 fac7 	bl	800d0a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800cb1a:	4b18      	ldr	r3, [pc, #96]	; (800cb7c <xTimerCreateTimerTask+0x70>)
 800cb1c:	681b      	ldr	r3, [r3, #0]
 800cb1e:	2b00      	cmp	r3, #0
 800cb20:	d020      	beq.n	800cb64 <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800cb22:	2300      	movs	r3, #0
 800cb24:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800cb26:	2300      	movs	r3, #0
 800cb28:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800cb2a:	463a      	mov	r2, r7
 800cb2c:	1d39      	adds	r1, r7, #4
 800cb2e:	f107 0308 	add.w	r3, r7, #8
 800cb32:	4618      	mov	r0, r3
 800cb34:	f7fe f912 	bl	800ad5c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800cb38:	6839      	ldr	r1, [r7, #0]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	68ba      	ldr	r2, [r7, #8]
 800cb3e:	9202      	str	r2, [sp, #8]
 800cb40:	9301      	str	r3, [sp, #4]
 800cb42:	2302      	movs	r3, #2
 800cb44:	9300      	str	r3, [sp, #0]
 800cb46:	2300      	movs	r3, #0
 800cb48:	460a      	mov	r2, r1
 800cb4a:	490d      	ldr	r1, [pc, #52]	; (800cb80 <xTimerCreateTimerTask+0x74>)
 800cb4c:	480d      	ldr	r0, [pc, #52]	; (800cb84 <xTimerCreateTimerTask+0x78>)
 800cb4e:	f7ff f877 	bl	800bc40 <xTaskCreateStatic>
 800cb52:	4603      	mov	r3, r0
 800cb54:	4a0c      	ldr	r2, [pc, #48]	; (800cb88 <xTimerCreateTimerTask+0x7c>)
 800cb56:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800cb58:	4b0b      	ldr	r3, [pc, #44]	; (800cb88 <xTimerCreateTimerTask+0x7c>)
 800cb5a:	681b      	ldr	r3, [r3, #0]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d001      	beq.n	800cb64 <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 800cb60:	2301      	movs	r3, #1
 800cb62:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d102      	bne.n	800cb70 <xTimerCreateTimerTask+0x64>
 800cb6a:	f000 fc65 	bl	800d438 <ulSetInterruptMask>
 800cb6e:	e7fe      	b.n	800cb6e <xTimerCreateTimerTask+0x62>
	return xReturn;
 800cb70:	68fb      	ldr	r3, [r7, #12]
}
 800cb72:	4618      	mov	r0, r3
 800cb74:	3710      	adds	r7, #16
 800cb76:	46bd      	mov	sp, r7
 800cb78:	bd80      	pop	{r7, pc}
 800cb7a:	bf00      	nop
 800cb7c:	2001d8e4 	.word	0x2001d8e4
 800cb80:	08022da0 	.word	0x08022da0
 800cb84:	0800cca1 	.word	0x0800cca1
 800cb88:	2001d8e8 	.word	0x2001d8e8

0800cb8c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800cb8c:	b580      	push	{r7, lr}
 800cb8e:	b08a      	sub	sp, #40	; 0x28
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	60f8      	str	r0, [r7, #12]
 800cb94:	60b9      	str	r1, [r7, #8]
 800cb96:	607a      	str	r2, [r7, #4]
 800cb98:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d102      	bne.n	800cbaa <xTimerGenericCommand+0x1e>
 800cba4:	f000 fc48 	bl	800d438 <ulSetInterruptMask>
 800cba8:	e7fe      	b.n	800cba8 <xTimerGenericCommand+0x1c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800cbaa:	4b1a      	ldr	r3, [pc, #104]	; (800cc14 <xTimerGenericCommand+0x88>)
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d02a      	beq.n	800cc08 <xTimerGenericCommand+0x7c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800cbb2:	68bb      	ldr	r3, [r7, #8]
 800cbb4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	2b05      	cmp	r3, #5
 800cbc2:	dc18      	bgt.n	800cbf6 <xTimerGenericCommand+0x6a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800cbc4:	f7ff fde4 	bl	800c790 <xTaskGetSchedulerState>
 800cbc8:	4603      	mov	r3, r0
 800cbca:	2b02      	cmp	r3, #2
 800cbcc:	d109      	bne.n	800cbe2 <xTimerGenericCommand+0x56>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800cbce:	4b11      	ldr	r3, [pc, #68]	; (800cc14 <xTimerGenericCommand+0x88>)
 800cbd0:	6818      	ldr	r0, [r3, #0]
 800cbd2:	f107 0114 	add.w	r1, r7, #20
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbda:	f7fe fad4 	bl	800b186 <xQueueGenericSend>
 800cbde:	6278      	str	r0, [r7, #36]	; 0x24
 800cbe0:	e012      	b.n	800cc08 <xTimerGenericCommand+0x7c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800cbe2:	4b0c      	ldr	r3, [pc, #48]	; (800cc14 <xTimerGenericCommand+0x88>)
 800cbe4:	6818      	ldr	r0, [r3, #0]
 800cbe6:	f107 0114 	add.w	r1, r7, #20
 800cbea:	2300      	movs	r3, #0
 800cbec:	2200      	movs	r2, #0
 800cbee:	f7fe faca 	bl	800b186 <xQueueGenericSend>
 800cbf2:	6278      	str	r0, [r7, #36]	; 0x24
 800cbf4:	e008      	b.n	800cc08 <xTimerGenericCommand+0x7c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800cbf6:	4b07      	ldr	r3, [pc, #28]	; (800cc14 <xTimerGenericCommand+0x88>)
 800cbf8:	6818      	ldr	r0, [r3, #0]
 800cbfa:	f107 0114 	add.w	r1, r7, #20
 800cbfe:	2300      	movs	r3, #0
 800cc00:	683a      	ldr	r2, [r7, #0]
 800cc02:	f7fe fb89 	bl	800b318 <xQueueGenericSendFromISR>
 800cc06:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800cc08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc0a:	4618      	mov	r0, r3
 800cc0c:	3728      	adds	r7, #40	; 0x28
 800cc0e:	46bd      	mov	sp, r7
 800cc10:	bd80      	pop	{r7, pc}
 800cc12:	bf00      	nop
 800cc14:	2001d8e4 	.word	0x2001d8e4

0800cc18 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b086      	sub	sp, #24
 800cc1c:	af02      	add	r7, sp, #8
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc22:	4b1e      	ldr	r3, [pc, #120]	; (800cc9c <prvProcessExpiredTimer+0x84>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	68db      	ldr	r3, [r3, #12]
 800cc28:	68db      	ldr	r3, [r3, #12]
 800cc2a:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	3304      	adds	r3, #4
 800cc30:	4618      	mov	r0, r3
 800cc32:	f7fe f937 	bl	800aea4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc3c:	f003 0304 	and.w	r3, r3, #4
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d01a      	beq.n	800cc7a <prvProcessExpiredTimer+0x62>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	699a      	ldr	r2, [r3, #24]
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	18d1      	adds	r1, r2, r3
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	683a      	ldr	r2, [r7, #0]
 800cc50:	68f8      	ldr	r0, [r7, #12]
 800cc52:	f000 f8c1 	bl	800cdd8 <prvInsertTimerInActiveList>
 800cc56:	4603      	mov	r3, r0
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d017      	beq.n	800cc8c <prvProcessExpiredTimer+0x74>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	9300      	str	r3, [sp, #0]
 800cc60:	2300      	movs	r3, #0
 800cc62:	687a      	ldr	r2, [r7, #4]
 800cc64:	2100      	movs	r1, #0
 800cc66:	68f8      	ldr	r0, [r7, #12]
 800cc68:	f7ff ff90 	bl	800cb8c <xTimerGenericCommand>
 800cc6c:	60b8      	str	r0, [r7, #8]
			configASSERT( xResult );
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d10b      	bne.n	800cc8c <prvProcessExpiredTimer+0x74>
 800cc74:	f000 fbe0 	bl	800d438 <ulSetInterruptMask>
 800cc78:	e7fe      	b.n	800cc78 <prvProcessExpiredTimer+0x60>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cc80:	f023 0301 	bic.w	r3, r3, #1
 800cc84:	b2da      	uxtb	r2, r3
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	6a1b      	ldr	r3, [r3, #32]
 800cc90:	68f8      	ldr	r0, [r7, #12]
 800cc92:	4798      	blx	r3
}
 800cc94:	bf00      	nop
 800cc96:	3710      	adds	r7, #16
 800cc98:	46bd      	mov	sp, r7
 800cc9a:	bd80      	pop	{r7, pc}
 800cc9c:	2001d8dc 	.word	0x2001d8dc

0800cca0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b084      	sub	sp, #16
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800cca8:	f107 0308 	add.w	r3, r7, #8
 800ccac:	4618      	mov	r0, r3
 800ccae:	f000 f84f 	bl	800cd50 <prvGetNextExpireTime>
 800ccb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	4619      	mov	r1, r3
 800ccb8:	68f8      	ldr	r0, [r7, #12]
 800ccba:	f000 f803 	bl	800ccc4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ccbe:	f000 f8cd 	bl	800ce5c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ccc2:	e7f1      	b.n	800cca8 <prvTimerTask+0x8>

0800ccc4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b084      	sub	sp, #16
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
 800cccc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ccce:	f7ff f9cd 	bl	800c06c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ccd2:	f107 0308 	add.w	r3, r7, #8
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f000 f85e 	bl	800cd98 <prvSampleTimeNow>
 800ccdc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d12a      	bne.n	800cd3a <prvProcessTimerOrBlockTask+0x76>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800cce4:	683b      	ldr	r3, [r7, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d10a      	bne.n	800cd00 <prvProcessTimerOrBlockTask+0x3c>
 800ccea:	687a      	ldr	r2, [r7, #4]
 800ccec:	68fb      	ldr	r3, [r7, #12]
 800ccee:	429a      	cmp	r2, r3
 800ccf0:	d806      	bhi.n	800cd00 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ccf2:	f7ff f9c9 	bl	800c088 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ccf6:	68f9      	ldr	r1, [r7, #12]
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f7ff ff8d 	bl	800cc18 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ccfe:	e01e      	b.n	800cd3e <prvProcessTimerOrBlockTask+0x7a>
				if( xListWasEmpty != pdFALSE )
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d008      	beq.n	800cd18 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800cd06:	4b10      	ldr	r3, [pc, #64]	; (800cd48 <prvProcessTimerOrBlockTask+0x84>)
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d101      	bne.n	800cd14 <prvProcessTimerOrBlockTask+0x50>
 800cd10:	2301      	movs	r3, #1
 800cd12:	e000      	b.n	800cd16 <prvProcessTimerOrBlockTask+0x52>
 800cd14:	2300      	movs	r3, #0
 800cd16:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800cd18:	4b0c      	ldr	r3, [pc, #48]	; (800cd4c <prvProcessTimerOrBlockTask+0x88>)
 800cd1a:	6818      	ldr	r0, [r3, #0]
 800cd1c:	687a      	ldr	r2, [r7, #4]
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	1ad3      	subs	r3, r2, r3
 800cd22:	683a      	ldr	r2, [r7, #0]
 800cd24:	4619      	mov	r1, r3
 800cd26:	f7fe ff57 	bl	800bbd8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800cd2a:	f7ff f9ad 	bl	800c088 <xTaskResumeAll>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d104      	bne.n	800cd3e <prvProcessTimerOrBlockTask+0x7a>
					portYIELD_WITHIN_API();
 800cd34:	f000 fa36 	bl	800d1a4 <vPortYield>
}
 800cd38:	e001      	b.n	800cd3e <prvProcessTimerOrBlockTask+0x7a>
			( void ) xTaskResumeAll();
 800cd3a:	f7ff f9a5 	bl	800c088 <xTaskResumeAll>
}
 800cd3e:	bf00      	nop
 800cd40:	3710      	adds	r7, #16
 800cd42:	46bd      	mov	sp, r7
 800cd44:	bd80      	pop	{r7, pc}
 800cd46:	bf00      	nop
 800cd48:	2001d8e0 	.word	0x2001d8e0
 800cd4c:	2001d8e4 	.word	0x2001d8e4

0800cd50 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800cd50:	b480      	push	{r7}
 800cd52:	b085      	sub	sp, #20
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800cd58:	4b0e      	ldr	r3, [pc, #56]	; (800cd94 <prvGetNextExpireTime+0x44>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d101      	bne.n	800cd66 <prvGetNextExpireTime+0x16>
 800cd62:	2201      	movs	r2, #1
 800cd64:	e000      	b.n	800cd68 <prvGetNextExpireTime+0x18>
 800cd66:	2200      	movs	r2, #0
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d105      	bne.n	800cd80 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cd74:	4b07      	ldr	r3, [pc, #28]	; (800cd94 <prvGetNextExpireTime+0x44>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	68db      	ldr	r3, [r3, #12]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	60fb      	str	r3, [r7, #12]
 800cd7e:	e001      	b.n	800cd84 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800cd80:	2300      	movs	r3, #0
 800cd82:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800cd84:	68fb      	ldr	r3, [r7, #12]
}
 800cd86:	4618      	mov	r0, r3
 800cd88:	3714      	adds	r7, #20
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd90:	4770      	bx	lr
 800cd92:	bf00      	nop
 800cd94:	2001d8dc 	.word	0x2001d8dc

0800cd98 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800cd98:	b580      	push	{r7, lr}
 800cd9a:	b084      	sub	sp, #16
 800cd9c:	af00      	add	r7, sp, #0
 800cd9e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800cda0:	f7ff fa00 	bl	800c1a4 <xTaskGetTickCount>
 800cda4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800cda6:	4b0b      	ldr	r3, [pc, #44]	; (800cdd4 <prvSampleTimeNow+0x3c>)
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	68fa      	ldr	r2, [r7, #12]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d205      	bcs.n	800cdbc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800cdb0:	f000 f91e 	bl	800cff0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	601a      	str	r2, [r3, #0]
 800cdba:	e002      	b.n	800cdc2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	2200      	movs	r2, #0
 800cdc0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800cdc2:	4a04      	ldr	r2, [pc, #16]	; (800cdd4 <prvSampleTimeNow+0x3c>)
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800cdc8:	68fb      	ldr	r3, [r7, #12]
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3710      	adds	r7, #16
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}
 800cdd2:	bf00      	nop
 800cdd4:	2001d8ec 	.word	0x2001d8ec

0800cdd8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800cdd8:	b580      	push	{r7, lr}
 800cdda:	b086      	sub	sp, #24
 800cddc:	af00      	add	r7, sp, #0
 800cdde:	60f8      	str	r0, [r7, #12]
 800cde0:	60b9      	str	r1, [r7, #8]
 800cde2:	607a      	str	r2, [r7, #4]
 800cde4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800cde6:	2300      	movs	r3, #0
 800cde8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	68ba      	ldr	r2, [r7, #8]
 800cdee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	68fa      	ldr	r2, [r7, #12]
 800cdf4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800cdf6:	68ba      	ldr	r2, [r7, #8]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	429a      	cmp	r2, r3
 800cdfc:	d812      	bhi.n	800ce24 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	683b      	ldr	r3, [r7, #0]
 800ce02:	1ad2      	subs	r2, r2, r3
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	699b      	ldr	r3, [r3, #24]
 800ce08:	429a      	cmp	r2, r3
 800ce0a:	d302      	bcc.n	800ce12 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	617b      	str	r3, [r7, #20]
 800ce10:	e01b      	b.n	800ce4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ce12:	4b10      	ldr	r3, [pc, #64]	; (800ce54 <prvInsertTimerInActiveList+0x7c>)
 800ce14:	681a      	ldr	r2, [r3, #0]
 800ce16:	68fb      	ldr	r3, [r7, #12]
 800ce18:	3304      	adds	r3, #4
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	4610      	mov	r0, r2
 800ce1e:	f7fe f808 	bl	800ae32 <vListInsert>
 800ce22:	e012      	b.n	800ce4a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ce24:	687a      	ldr	r2, [r7, #4]
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	429a      	cmp	r2, r3
 800ce2a:	d206      	bcs.n	800ce3a <prvInsertTimerInActiveList+0x62>
 800ce2c:	68ba      	ldr	r2, [r7, #8]
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d302      	bcc.n	800ce3a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ce34:	2301      	movs	r3, #1
 800ce36:	617b      	str	r3, [r7, #20]
 800ce38:	e007      	b.n	800ce4a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ce3a:	4b07      	ldr	r3, [pc, #28]	; (800ce58 <prvInsertTimerInActiveList+0x80>)
 800ce3c:	681a      	ldr	r2, [r3, #0]
 800ce3e:	68fb      	ldr	r3, [r7, #12]
 800ce40:	3304      	adds	r3, #4
 800ce42:	4619      	mov	r1, r3
 800ce44:	4610      	mov	r0, r2
 800ce46:	f7fd fff4 	bl	800ae32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ce4a:	697b      	ldr	r3, [r7, #20]
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3718      	adds	r7, #24
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	2001d8e0 	.word	0x2001d8e0
 800ce58:	2001d8dc 	.word	0x2001d8dc

0800ce5c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b08c      	sub	sp, #48	; 0x30
 800ce60:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ce62:	e0b2      	b.n	800cfca <prvProcessReceivedCommands+0x16e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ce64:	68bb      	ldr	r3, [r7, #8]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	da11      	bge.n	800ce8e <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ce6a:	f107 0308 	add.w	r3, r7, #8
 800ce6e:	3304      	adds	r3, #4
 800ce70:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ce72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d102      	bne.n	800ce7e <prvProcessReceivedCommands+0x22>
 800ce78:	f000 fade 	bl	800d438 <ulSetInterruptMask>
 800ce7c:	e7fe      	b.n	800ce7c <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ce7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce84:	6850      	ldr	r0, [r2, #4]
 800ce86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce88:	6892      	ldr	r2, [r2, #8]
 800ce8a:	4611      	mov	r1, r2
 800ce8c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ce8e:	68bb      	ldr	r3, [r7, #8]
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	f2c0 8099 	blt.w	800cfc8 <prvProcessReceivedCommands+0x16c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ce96:	693b      	ldr	r3, [r7, #16]
 800ce98:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ce9a:	6a3b      	ldr	r3, [r7, #32]
 800ce9c:	695b      	ldr	r3, [r3, #20]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d004      	beq.n	800ceac <prvProcessReceivedCommands+0x50>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cea2:	6a3b      	ldr	r3, [r7, #32]
 800cea4:	3304      	adds	r3, #4
 800cea6:	4618      	mov	r0, r3
 800cea8:	f7fd fffc 	bl	800aea4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ceac:	1d3b      	adds	r3, r7, #4
 800ceae:	4618      	mov	r0, r3
 800ceb0:	f7ff ff72 	bl	800cd98 <prvSampleTimeNow>
 800ceb4:	61f8      	str	r0, [r7, #28]

			switch( xMessage.xMessageID )
 800ceb6:	68bb      	ldr	r3, [r7, #8]
 800ceb8:	2b09      	cmp	r3, #9
 800ceba:	f200 8086 	bhi.w	800cfca <prvProcessReceivedCommands+0x16e>
 800cebe:	a201      	add	r2, pc, #4	; (adr r2, 800cec4 <prvProcessReceivedCommands+0x68>)
 800cec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cec4:	0800ceed 	.word	0x0800ceed
 800cec8:	0800ceed 	.word	0x0800ceed
 800cecc:	0800ceed 	.word	0x0800ceed
 800ced0:	0800cf51 	.word	0x0800cf51
 800ced4:	0800cf65 	.word	0x0800cf65
 800ced8:	0800cf9f 	.word	0x0800cf9f
 800cedc:	0800ceed 	.word	0x0800ceed
 800cee0:	0800ceed 	.word	0x0800ceed
 800cee4:	0800cf51 	.word	0x0800cf51
 800cee8:	0800cf65 	.word	0x0800cf65
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ceec:	6a3b      	ldr	r3, [r7, #32]
 800ceee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cef2:	f043 0301 	orr.w	r3, r3, #1
 800cef6:	b2da      	uxtb	r2, r3
 800cef8:	6a3b      	ldr	r3, [r7, #32]
 800cefa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cefe:	68fa      	ldr	r2, [r7, #12]
 800cf00:	6a3b      	ldr	r3, [r7, #32]
 800cf02:	699b      	ldr	r3, [r3, #24]
 800cf04:	18d1      	adds	r1, r2, r3
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	69fa      	ldr	r2, [r7, #28]
 800cf0a:	6a38      	ldr	r0, [r7, #32]
 800cf0c:	f7ff ff64 	bl	800cdd8 <prvInsertTimerInActiveList>
 800cf10:	4603      	mov	r3, r0
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d059      	beq.n	800cfca <prvProcessReceivedCommands+0x16e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cf16:	6a3b      	ldr	r3, [r7, #32]
 800cf18:	6a1b      	ldr	r3, [r3, #32]
 800cf1a:	6a38      	ldr	r0, [r7, #32]
 800cf1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cf1e:	6a3b      	ldr	r3, [r7, #32]
 800cf20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf24:	f003 0304 	and.w	r3, r3, #4
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d04e      	beq.n	800cfca <prvProcessReceivedCommands+0x16e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cf2c:	68fa      	ldr	r2, [r7, #12]
 800cf2e:	6a3b      	ldr	r3, [r7, #32]
 800cf30:	699b      	ldr	r3, [r3, #24]
 800cf32:	441a      	add	r2, r3
 800cf34:	2300      	movs	r3, #0
 800cf36:	9300      	str	r3, [sp, #0]
 800cf38:	2300      	movs	r3, #0
 800cf3a:	2100      	movs	r1, #0
 800cf3c:	6a38      	ldr	r0, [r7, #32]
 800cf3e:	f7ff fe25 	bl	800cb8c <xTimerGenericCommand>
 800cf42:	61b8      	str	r0, [r7, #24]
							configASSERT( xResult );
 800cf44:	69bb      	ldr	r3, [r7, #24]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d13f      	bne.n	800cfca <prvProcessReceivedCommands+0x16e>
 800cf4a:	f000 fa75 	bl	800d438 <ulSetInterruptMask>
 800cf4e:	e7fe      	b.n	800cf4e <prvProcessReceivedCommands+0xf2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cf50:	6a3b      	ldr	r3, [r7, #32]
 800cf52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf56:	f023 0301 	bic.w	r3, r3, #1
 800cf5a:	b2da      	uxtb	r2, r3
 800cf5c:	6a3b      	ldr	r3, [r7, #32]
 800cf5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800cf62:	e032      	b.n	800cfca <prvProcessReceivedCommands+0x16e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cf64:	6a3b      	ldr	r3, [r7, #32]
 800cf66:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cf6a:	f043 0301 	orr.w	r3, r3, #1
 800cf6e:	b2da      	uxtb	r2, r3
 800cf70:	6a3b      	ldr	r3, [r7, #32]
 800cf72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cf76:	68fa      	ldr	r2, [r7, #12]
 800cf78:	6a3b      	ldr	r3, [r7, #32]
 800cf7a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cf7c:	6a3b      	ldr	r3, [r7, #32]
 800cf7e:	699b      	ldr	r3, [r3, #24]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d102      	bne.n	800cf8a <prvProcessReceivedCommands+0x12e>
 800cf84:	f000 fa58 	bl	800d438 <ulSetInterruptMask>
 800cf88:	e7fe      	b.n	800cf88 <prvProcessReceivedCommands+0x12c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cf8a:	6a3b      	ldr	r3, [r7, #32]
 800cf8c:	699a      	ldr	r2, [r3, #24]
 800cf8e:	69fb      	ldr	r3, [r7, #28]
 800cf90:	18d1      	adds	r1, r2, r3
 800cf92:	69fb      	ldr	r3, [r7, #28]
 800cf94:	69fa      	ldr	r2, [r7, #28]
 800cf96:	6a38      	ldr	r0, [r7, #32]
 800cf98:	f7ff ff1e 	bl	800cdd8 <prvInsertTimerInActiveList>
					break;
 800cf9c:	e015      	b.n	800cfca <prvProcessReceivedCommands+0x16e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cf9e:	6a3b      	ldr	r3, [r7, #32]
 800cfa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfa4:	f003 0302 	and.w	r3, r3, #2
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d103      	bne.n	800cfb4 <prvProcessReceivedCommands+0x158>
						{
							vPortFree( pxTimer );
 800cfac:	6a38      	ldr	r0, [r7, #32]
 800cfae:	f000 fb57 	bl	800d660 <vPortFree>
 800cfb2:	e00a      	b.n	800cfca <prvProcessReceivedCommands+0x16e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cfb4:	6a3b      	ldr	r3, [r7, #32]
 800cfb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800cfba:	f023 0301 	bic.w	r3, r3, #1
 800cfbe:	b2da      	uxtb	r2, r3
 800cfc0:	6a3b      	ldr	r3, [r7, #32]
 800cfc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cfc6:	e000      	b.n	800cfca <prvProcessReceivedCommands+0x16e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800cfc8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cfca:	4b08      	ldr	r3, [pc, #32]	; (800cfec <prvProcessReceivedCommands+0x190>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	f107 0108 	add.w	r1, r7, #8
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	4618      	mov	r0, r3
 800cfd6:	f7fe fa73 	bl	800b4c0 <xQueueReceive>
 800cfda:	4603      	mov	r3, r0
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	f47f af41 	bne.w	800ce64 <prvProcessReceivedCommands+0x8>
	}
}
 800cfe2:	bf00      	nop
 800cfe4:	bf00      	nop
 800cfe6:	3728      	adds	r7, #40	; 0x28
 800cfe8:	46bd      	mov	sp, r7
 800cfea:	bd80      	pop	{r7, pc}
 800cfec:	2001d8e4 	.word	0x2001d8e4

0800cff0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cff0:	b580      	push	{r7, lr}
 800cff2:	b088      	sub	sp, #32
 800cff4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cff6:	e040      	b.n	800d07a <prvSwitchTimerLists+0x8a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cff8:	4b29      	ldr	r3, [pc, #164]	; (800d0a0 <prvSwitchTimerLists+0xb0>)
 800cffa:	681b      	ldr	r3, [r3, #0]
 800cffc:	68db      	ldr	r3, [r3, #12]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d002:	4b27      	ldr	r3, [pc, #156]	; (800d0a0 <prvSwitchTimerLists+0xb0>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	68db      	ldr	r3, [r3, #12]
 800d008:	68db      	ldr	r3, [r3, #12]
 800d00a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	3304      	adds	r3, #4
 800d010:	4618      	mov	r0, r3
 800d012:	f7fd ff47 	bl	800aea4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d016:	68fb      	ldr	r3, [r7, #12]
 800d018:	6a1b      	ldr	r3, [r3, #32]
 800d01a:	68f8      	ldr	r0, [r7, #12]
 800d01c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d01e:	68fb      	ldr	r3, [r7, #12]
 800d020:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d024:	f003 0304 	and.w	r3, r3, #4
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d026      	beq.n	800d07a <prvSwitchTimerLists+0x8a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	699b      	ldr	r3, [r3, #24]
 800d030:	693a      	ldr	r2, [r7, #16]
 800d032:	4413      	add	r3, r2
 800d034:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d036:	68ba      	ldr	r2, [r7, #8]
 800d038:	693b      	ldr	r3, [r7, #16]
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d90e      	bls.n	800d05c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	68ba      	ldr	r2, [r7, #8]
 800d042:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	68fa      	ldr	r2, [r7, #12]
 800d048:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d04a:	4b15      	ldr	r3, [pc, #84]	; (800d0a0 <prvSwitchTimerLists+0xb0>)
 800d04c:	681a      	ldr	r2, [r3, #0]
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	3304      	adds	r3, #4
 800d052:	4619      	mov	r1, r3
 800d054:	4610      	mov	r0, r2
 800d056:	f7fd feec 	bl	800ae32 <vListInsert>
 800d05a:	e00e      	b.n	800d07a <prvSwitchTimerLists+0x8a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d05c:	2300      	movs	r3, #0
 800d05e:	9300      	str	r3, [sp, #0]
 800d060:	2300      	movs	r3, #0
 800d062:	693a      	ldr	r2, [r7, #16]
 800d064:	2100      	movs	r1, #0
 800d066:	68f8      	ldr	r0, [r7, #12]
 800d068:	f7ff fd90 	bl	800cb8c <xTimerGenericCommand>
 800d06c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d102      	bne.n	800d07a <prvSwitchTimerLists+0x8a>
 800d074:	f000 f9e0 	bl	800d438 <ulSetInterruptMask>
 800d078:	e7fe      	b.n	800d078 <prvSwitchTimerLists+0x88>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d07a:	4b09      	ldr	r3, [pc, #36]	; (800d0a0 <prvSwitchTimerLists+0xb0>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	681b      	ldr	r3, [r3, #0]
 800d080:	2b00      	cmp	r3, #0
 800d082:	d1b9      	bne.n	800cff8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800d084:	4b06      	ldr	r3, [pc, #24]	; (800d0a0 <prvSwitchTimerLists+0xb0>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800d08a:	4b06      	ldr	r3, [pc, #24]	; (800d0a4 <prvSwitchTimerLists+0xb4>)
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	4a04      	ldr	r2, [pc, #16]	; (800d0a0 <prvSwitchTimerLists+0xb0>)
 800d090:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800d092:	4a04      	ldr	r2, [pc, #16]	; (800d0a4 <prvSwitchTimerLists+0xb4>)
 800d094:	697b      	ldr	r3, [r7, #20]
 800d096:	6013      	str	r3, [r2, #0]
}
 800d098:	bf00      	nop
 800d09a:	3718      	adds	r7, #24
 800d09c:	46bd      	mov	sp, r7
 800d09e:	bd80      	pop	{r7, pc}
 800d0a0:	2001d8dc 	.word	0x2001d8dc
 800d0a4:	2001d8e0 	.word	0x2001d8e0

0800d0a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b082      	sub	sp, #8
 800d0ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800d0ae:	f000 f88b 	bl	800d1c8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800d0b2:	4b15      	ldr	r3, [pc, #84]	; (800d108 <prvCheckForValidListAndQueue+0x60>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d120      	bne.n	800d0fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800d0ba:	4814      	ldr	r0, [pc, #80]	; (800d10c <prvCheckForValidListAndQueue+0x64>)
 800d0bc:	f7fd fe68 	bl	800ad90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800d0c0:	4813      	ldr	r0, [pc, #76]	; (800d110 <prvCheckForValidListAndQueue+0x68>)
 800d0c2:	f7fd fe65 	bl	800ad90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800d0c6:	4b13      	ldr	r3, [pc, #76]	; (800d114 <prvCheckForValidListAndQueue+0x6c>)
 800d0c8:	4a10      	ldr	r2, [pc, #64]	; (800d10c <prvCheckForValidListAndQueue+0x64>)
 800d0ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800d0cc:	4b12      	ldr	r3, [pc, #72]	; (800d118 <prvCheckForValidListAndQueue+0x70>)
 800d0ce:	4a10      	ldr	r2, [pc, #64]	; (800d110 <prvCheckForValidListAndQueue+0x68>)
 800d0d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	9300      	str	r3, [sp, #0]
 800d0d6:	4b11      	ldr	r3, [pc, #68]	; (800d11c <prvCheckForValidListAndQueue+0x74>)
 800d0d8:	4a11      	ldr	r2, [pc, #68]	; (800d120 <prvCheckForValidListAndQueue+0x78>)
 800d0da:	2110      	movs	r1, #16
 800d0dc:	200a      	movs	r0, #10
 800d0de:	f7fd ff63 	bl	800afa8 <xQueueGenericCreateStatic>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	4a08      	ldr	r2, [pc, #32]	; (800d108 <prvCheckForValidListAndQueue+0x60>)
 800d0e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800d0e8:	4b07      	ldr	r3, [pc, #28]	; (800d108 <prvCheckForValidListAndQueue+0x60>)
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d005      	beq.n	800d0fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800d0f0:	4b05      	ldr	r3, [pc, #20]	; (800d108 <prvCheckForValidListAndQueue+0x60>)
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	490b      	ldr	r1, [pc, #44]	; (800d124 <prvCheckForValidListAndQueue+0x7c>)
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7fe fd1a 	bl	800bb30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d0fc:	f000 f876 	bl	800d1ec <vPortExitCritical>
}
 800d100:	bf00      	nop
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	2001d8e4 	.word	0x2001d8e4
 800d10c:	2001d8b4 	.word	0x2001d8b4
 800d110:	2001d8c8 	.word	0x2001d8c8
 800d114:	2001d8dc 	.word	0x2001d8dc
 800d118:	2001d8e0 	.word	0x2001d8e0
 800d11c:	2001d990 	.word	0x2001d990
 800d120:	2001d8f0 	.word	0x2001d8f0
 800d124:	08022da8 	.word	0x08022da8

0800d128 <vPortSetupTimerInterrupt>:
	}
#endif /* configUSE_TICKLESS_IDLE */
/*-----------------------------------------------------------*/

__attribute__(( weak )) void vPortSetupTimerInterrupt( void ) /* PRIVILEGED_FUNCTION */
{
 800d128:	b480      	push	{r7}
 800d12a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d12c:	4b0b      	ldr	r3, [pc, #44]	; (800d15c <vPortSetupTimerInterrupt+0x34>)
 800d12e:	2200      	movs	r2, #0
 800d130:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d132:	4b0b      	ldr	r3, [pc, #44]	; (800d160 <vPortSetupTimerInterrupt+0x38>)
 800d134:	2200      	movs	r2, #0
 800d136:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d138:	4b0a      	ldr	r3, [pc, #40]	; (800d164 <vPortSetupTimerInterrupt+0x3c>)
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	4a0a      	ldr	r2, [pc, #40]	; (800d168 <vPortSetupTimerInterrupt+0x40>)
 800d13e:	fba2 2303 	umull	r2, r3, r2, r3
 800d142:	099b      	lsrs	r3, r3, #6
 800d144:	4a09      	ldr	r2, [pc, #36]	; (800d16c <vPortSetupTimerInterrupt+0x44>)
 800d146:	3b01      	subs	r3, #1
 800d148:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800d14a:	4b04      	ldr	r3, [pc, #16]	; (800d15c <vPortSetupTimerInterrupt+0x34>)
 800d14c:	2207      	movs	r2, #7
 800d14e:	601a      	str	r2, [r3, #0]
}
 800d150:	bf00      	nop
 800d152:	46bd      	mov	sp, r7
 800d154:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d158:	4770      	bx	lr
 800d15a:	bf00      	nop
 800d15c:	e000e010 	.word	0xe000e010
 800d160:	e000e018 	.word	0xe000e018
 800d164:	20000004 	.word	0x20000004
 800d168:	10624dd3 	.word	0x10624dd3
 800d16c:	e000e014 	.word	0xe000e014

0800d170 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b082      	sub	sp, #8
 800d174:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800d176:	2300      	movs	r3, #0
 800d178:	607b      	str	r3, [r7, #4]
	/* A function that implements a task must not exit or attempt to return to
	 * its caller as there is nothing to return to. If a task wants to exit it
	 * should instead call vTaskDelete( NULL ). Artificially force an assert()
	 * to be triggered if configASSERT() is defined, then stop here so
	 * application writers can catch the error. */
	configASSERT( ulCriticalNesting == ~0UL );
 800d17a:	4b09      	ldr	r3, [pc, #36]	; (800d1a0 <prvTaskExitError+0x30>)
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d182:	d002      	beq.n	800d18a <prvTaskExitError+0x1a>
 800d184:	f000 f958 	bl	800d438 <ulSetInterruptMask>
 800d188:	e7fe      	b.n	800d188 <prvTaskExitError+0x18>
	portDISABLE_INTERRUPTS();
 800d18a:	f000 f955 	bl	800d438 <ulSetInterruptMask>

	while( ulDummy == 0 )
 800d18e:	bf00      	nop
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d0fc      	beq.n	800d190 <prvTaskExitError+0x20>
		 * warnings about code appearing after this function is called - making
		 * ulDummy volatile makes the compiler think the function could return
		 * and therefore not output an 'unreachable code' warning for code that
		 * appears after it. */
	}
}
 800d196:	bf00      	nop
 800d198:	bf00      	nop
 800d19a:	3708      	adds	r7, #8
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}
 800d1a0:	20000070 	.word	0x20000070

0800d1a4 <vPortYield>:
	}
#endif /* configENABLE_FPU */
/*-----------------------------------------------------------*/

void vPortYield( void ) /* PRIVILEGED_FUNCTION */
{
 800d1a4:	b480      	push	{r7}
 800d1a6:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d1a8:	4b06      	ldr	r3, [pc, #24]	; (800d1c4 <vPortYield+0x20>)
 800d1aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1ae:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800d1b0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800d1b4:	f3bf 8f6f 	isb	sy
}
 800d1b8:	bf00      	nop
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c0:	4770      	bx	lr
 800d1c2:	bf00      	nop
 800d1c4:	e000ed04 	.word	0xe000ed04

0800d1c8 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800d1cc:	f000 f934 	bl	800d438 <ulSetInterruptMask>
	ulCriticalNesting++;
 800d1d0:	4b05      	ldr	r3, [pc, #20]	; (800d1e8 <vPortEnterCritical+0x20>)
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	3301      	adds	r3, #1
 800d1d6:	4a04      	ldr	r2, [pc, #16]	; (800d1e8 <vPortEnterCritical+0x20>)
 800d1d8:	6013      	str	r3, [r2, #0]

	/* Barriers are normally not required but do ensure the code is
	 * completely within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800d1da:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800d1de:	f3bf 8f6f 	isb	sy
}
 800d1e2:	bf00      	nop
 800d1e4:	bd80      	pop	{r7, pc}
 800d1e6:	bf00      	nop
 800d1e8:	20000070 	.word	0x20000070

0800d1ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void ) /* PRIVILEGED_FUNCTION */
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	af00      	add	r7, sp, #0
	configASSERT( ulCriticalNesting );
 800d1f0:	4b0a      	ldr	r3, [pc, #40]	; (800d21c <vPortExitCritical+0x30>)
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d102      	bne.n	800d1fe <vPortExitCritical+0x12>
 800d1f8:	f000 f91e 	bl	800d438 <ulSetInterruptMask>
 800d1fc:	e7fe      	b.n	800d1fc <vPortExitCritical+0x10>
	ulCriticalNesting--;
 800d1fe:	4b07      	ldr	r3, [pc, #28]	; (800d21c <vPortExitCritical+0x30>)
 800d200:	681b      	ldr	r3, [r3, #0]
 800d202:	3b01      	subs	r3, #1
 800d204:	4a05      	ldr	r2, [pc, #20]	; (800d21c <vPortExitCritical+0x30>)
 800d206:	6013      	str	r3, [r2, #0]

	if( ulCriticalNesting == 0 )
 800d208:	4b04      	ldr	r3, [pc, #16]	; (800d21c <vPortExitCritical+0x30>)
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d102      	bne.n	800d216 <vPortExitCritical+0x2a>
	{
		portENABLE_INTERRUPTS();
 800d210:	2000      	movs	r0, #0
 800d212:	f000 f91e 	bl	800d452 <vClearInterruptMask>
	}
}
 800d216:	bf00      	nop
 800d218:	bd80      	pop	{r7, pc}
 800d21a:	bf00      	nop
 800d21c:	20000070 	.word	0x20000070

0800d220 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void SysTick_Handler( void ) /* PRIVILEGED_FUNCTION */
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b082      	sub	sp, #8
 800d224:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800d226:	f000 f907 	bl	800d438 <ulSetInterruptMask>
 800d22a:	6078      	str	r0, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d22c:	f7fe ffca 	bl	800c1c4 <xTaskIncrementTick>
 800d230:	4603      	mov	r3, r0
 800d232:	2b00      	cmp	r3, #0
 800d234:	d003      	beq.n	800d23e <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d236:	4b05      	ldr	r3, [pc, #20]	; (800d24c <xPortSysTickHandler+0x2c>)
 800d238:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d23c:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f000 f907 	bl	800d452 <vClearInterruptMask>
}
 800d244:	bf00      	nop
 800d246:	3708      	adds	r7, #8
 800d248:	46bd      	mov	sp, r7
 800d24a:	bd80      	pop	{r7, pc}
 800d24c:	e000ed04 	.word	0xe000ed04

0800d250 <vPortSVCHandler_C>:
/*-----------------------------------------------------------*/

void vPortSVCHandler_C( uint32_t *pulCallerStackAddress ) /* PRIVILEGED_FUNCTION portDONT_DISCARD */
{
 800d250:	b580      	push	{r7, lr}
 800d252:	b084      	sub	sp, #16
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
#endif /* configENABLE_TRUSTZONE */
uint8_t ucSVCNumber;

	/* Register are stored on the stack in the following order - R0, R1, R2, R3,
	 * R12, LR, PC, xPSR. */
	ulPC = pulCallerStackAddress[ 6 ];
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	699b      	ldr	r3, [r3, #24]
 800d25c:	60fb      	str	r3, [r7, #12]
	ucSVCNumber = ( ( uint8_t *) ulPC )[ -2 ];
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	3b02      	subs	r3, #2
 800d262:	781b      	ldrb	r3, [r3, #0]
 800d264:	72fb      	strb	r3, [r7, #11]

	switch( ucSVCNumber )
 800d266:	7afb      	ldrb	r3, [r7, #11]
 800d268:	2b02      	cmp	r3, #2
 800d26a:	d102      	bne.n	800d272 <vPortSVCHandler_C+0x22>
			}
			#endif /* configENABLE_FPU */

			/* Setup the context of the first task so that the first task starts
			 * executing. */
			vRestoreContextOfFirstTask();
 800d26c:	f000 f8b8 	bl	800d3e0 <vRestoreContextOfFirstTask>
		}
		break;
 800d270:	e002      	b.n	800d278 <vPortSVCHandler_C+0x28>
		#endif /* configENABLE_MPU */

		default:
		{
			/* Incorrect SVC call. */
			configASSERT( pdFALSE );
 800d272:	f000 f8e1 	bl	800d438 <ulSetInterruptMask>
 800d276:	e7fe      	b.n	800d276 <vPortSVCHandler_C+0x26>
		}
	}
}
 800d278:	bf00      	nop
 800d27a:	3710      	adds	r7, #16
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}

0800d280 <pxPortInitialiseStack>:
#if( configENABLE_MPU == 1 )
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters, BaseType_t xRunPrivileged ) /* PRIVILEGED_FUNCTION */
#else
	StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, StackType_t *pxEndOfStack, TaskFunction_t pxCode, void *pvParameters ) /* PRIVILEGED_FUNCTION */
#endif /* configENABLE_MPU */
{
 800d280:	b480      	push	{r7}
 800d282:	b085      	sub	sp, #20
 800d284:	af00      	add	r7, sp, #0
 800d286:	60f8      	str	r0, [r7, #12]
 800d288:	60b9      	str	r1, [r7, #8]
 800d28a:	607a      	str	r2, [r7, #4]
 800d28c:	603b      	str	r3, [r7, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#else /* portPRELOAD_REGISTERS */
	{
		pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	3b04      	subs	r3, #4
 800d292:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_XPSR;							/* xPSR */
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d29a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	3b04      	subs	r3, #4
 800d2a0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxCode;						/* PC */
 800d2a2:	687a      	ldr	r2, [r7, #4]
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d2a8:	68fb      	ldr	r3, [r7, #12]
 800d2aa:	3b04      	subs	r3, #4
 800d2ac:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d2ae:	4a38      	ldr	r2, [pc, #224]	; (800d390 <pxPortInitialiseStack+0x110>)
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	3b04      	subs	r3, #4
 800d2b8:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x12121212UL;				/* R12 */
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	f04f 3212 	mov.w	r2, #303174162	; 0x12121212
 800d2c0:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	3b04      	subs	r3, #4
 800d2c6:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x03030303UL;				/* R3 */
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f04f 3203 	mov.w	r2, #50529027	; 0x3030303
 800d2ce:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	3b04      	subs	r3, #4
 800d2d4:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x02020202UL;				/* R2 */
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	f04f 3202 	mov.w	r2, #33686018	; 0x2020202
 800d2dc:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d2de:	68fb      	ldr	r3, [r7, #12]
 800d2e0:	3b04      	subs	r3, #4
 800d2e2:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x01010101UL;				/* R1 */
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	f04f 3201 	mov.w	r2, #16843009	; 0x1010101
 800d2ea:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	3b04      	subs	r3, #4
 800d2f0:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pvParameters;				/* R0 */
 800d2f2:	683a      	ldr	r2, [r7, #0]
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	3b04      	subs	r3, #4
 800d2fc:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x11111111UL;				/* R11 */
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800d304:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d306:	68fb      	ldr	r3, [r7, #12]
 800d308:	3b04      	subs	r3, #4
 800d30a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x10101010UL;				/* R10 */
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f04f 3210 	mov.w	r2, #269488144	; 0x10101010
 800d312:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	3b04      	subs	r3, #4
 800d318:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x09090909UL;				/* R09 */
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	f04f 3209 	mov.w	r2, #151587081	; 0x9090909
 800d320:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	3b04      	subs	r3, #4
 800d326:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x08080808UL;				/* R08 */
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	f04f 3208 	mov.w	r2, #134744072	; 0x8080808
 800d32e:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	3b04      	subs	r3, #4
 800d334:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x07070707UL;				/* R07 */
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f04f 3207 	mov.w	r2, #117901063	; 0x7070707
 800d33c:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	3b04      	subs	r3, #4
 800d342:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x06060606UL;				/* R06 */
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	f04f 3206 	mov.w	r2, #101058054	; 0x6060606
 800d34a:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	3b04      	subs	r3, #4
 800d350:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x05050505UL;				/* R05 */
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	f04f 3205 	mov.w	r2, #84215045	; 0x5050505
 800d358:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	3b04      	subs	r3, #4
 800d35e:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) 0x04040404UL;				/* R04 */
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	f04f 3204 	mov.w	r2, #67372036	; 0x4040404
 800d366:	601a      	str	r2, [r3, #0]
		pxTopOfStack--;
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	3b04      	subs	r3, #4
 800d36c:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = portINITIAL_EXC_RETURN;						/* EXC_RETURN */
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f06f 0243 	mvn.w	r2, #67	; 0x43
 800d374:	601a      	str	r2, [r3, #0]
				*pxTopOfStack = portINITIAL_CONTROL_UNPRIVILEGED;	/* Slot used to hold this task's CONTROL value. */
			}
		}
		#endif /* configENABLE_MPU */

		pxTopOfStack--;
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	3b04      	subs	r3, #4
 800d37a:	60fb      	str	r3, [r7, #12]
		*pxTopOfStack = ( StackType_t ) pxEndOfStack;	/* Slot used to hold this task's PSPLIM value. */
 800d37c:	68ba      	ldr	r2, [r7, #8]
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	601a      	str	r2, [r3, #0]
		}
		#endif /* configENABLE_TRUSTZONE */
	}
	#endif /* portPRELOAD_REGISTERS */

	return pxTopOfStack;
 800d382:	68fb      	ldr	r3, [r7, #12]
}
 800d384:	4618      	mov	r0, r3
 800d386:	3714      	adds	r7, #20
 800d388:	46bd      	mov	sp, r7
 800d38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38e:	4770      	bx	lr
 800d390:	0800d171 	.word	0x0800d171

0800d394 <xPortStartScheduler>:
/*-----------------------------------------------------------*/

BaseType_t xPortStartScheduler( void ) /* PRIVILEGED_FUNCTION */
{
 800d394:	b580      	push	{r7, lr}
 800d396:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d398:	4b0c      	ldr	r3, [pc, #48]	; (800d3cc <xPortStartScheduler+0x38>)
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	4a0b      	ldr	r2, [pc, #44]	; (800d3cc <xPortStartScheduler+0x38>)
 800d39e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800d3a2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d3a4:	4b09      	ldr	r3, [pc, #36]	; (800d3cc <xPortStartScheduler+0x38>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	4a08      	ldr	r2, [pc, #32]	; (800d3cc <xPortStartScheduler+0x38>)
 800d3aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800d3ae:	6013      	str	r3, [r2, #0]
	}
	#endif /* configENABLE_MPU */

	/* Start the timer that generates the tick ISR. Interrupts are disabled
	 * here already. */
	vPortSetupTimerInterrupt();
 800d3b0:	f7ff feba 	bl	800d128 <vPortSetupTimerInterrupt>

	/* Initialize the critical nesting count ready for the first task. */
	ulCriticalNesting = 0;
 800d3b4:	4b06      	ldr	r3, [pc, #24]	; (800d3d0 <xPortStartScheduler+0x3c>)
 800d3b6:	2200      	movs	r2, #0
 800d3b8:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vStartFirstTask();
 800d3ba:	f000 f829 	bl	800d410 <vStartFirstTask>
	 * exit error function to prevent compiler warnings about a static function
	 * not being called in the case that the application writer overrides this
	 * functionality by defining configTASK_RETURN_ADDRESS. Call
	 * vTaskSwitchContext() so link time optimization does not remove the
	 * symbol. */
	vTaskSwitchContext();
 800d3be:	f7fe ffb3 	bl	800c328 <vTaskSwitchContext>
	prvTaskExitError();
 800d3c2:	f7ff fed5 	bl	800d170 <prvTaskExitError>

	/* Should not get here. */
	return 0;
 800d3c6:	2300      	movs	r3, #0
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	bd80      	pop	{r7, pc}
 800d3cc:	e000ed20 	.word	0xe000ed20
 800d3d0:	20000070 	.word	0x20000070
	...

0800d3e0 <vRestoreContextOfFirstTask>:
 * header files. */
#undef MPU_WRAPPERS_INCLUDED_FROM_API_FILE

void vRestoreContextOfFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800d3e0:	4a07      	ldr	r2, [pc, #28]	; (800d400 <pxCurrentTCBConst2>)
 800d3e2:	6811      	ldr	r1, [r2, #0]
 800d3e4:	6808      	ldr	r0, [r1, #0]
 800d3e6:	c806      	ldmia	r0!, {r1, r2}
 800d3e8:	f381 880b 	msr	PSPLIM, r1
 800d3ec:	2102      	movs	r1, #2
 800d3ee:	f381 8814 	msr	CONTROL, r1
 800d3f2:	3020      	adds	r0, #32
 800d3f4:	f380 8809 	msr	PSP, r0
 800d3f8:	f3bf 8f6f 	isb	sy
 800d3fc:	4710      	bx	r2
 800d3fe:	bf00      	nop

0800d400 <pxCurrentTCBConst2>:
 800d400:	2001d3b4 	.word	0x2001d3b4
	"xMAIR0Const2: .word 0xe000edc0						\n"
	"xRNRConst2: .word 0xe000ed98						\n"
	"xRBARConst2: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	);
}
 800d404:	bf00      	nop
 800d406:	bf00      	nop
	...

0800d410 <vStartFirstTask>:
}
/*-----------------------------------------------------------*/

void vStartFirstTask( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800d410:	4807      	ldr	r0, [pc, #28]	; (800d430 <xVTORConst>)
 800d412:	6800      	ldr	r0, [r0, #0]
 800d414:	6800      	ldr	r0, [r0, #0]
 800d416:	f380 8808 	msr	MSP, r0
 800d41a:	b662      	cpsie	i
 800d41c:	b661      	cpsie	f
 800d41e:	f3bf 8f4f 	dsb	sy
 800d422:	f3bf 8f6f 	isb	sy
 800d426:	df02      	svc	2
 800d428:	bf00      	nop
 800d42a:	bf00      	nop
 800d42c:	f3af 8000 	nop.w

0800d430 <xVTORConst>:
 800d430:	e000ed08 	.word	0xe000ed08
	"													\n"
	"   .align 4										\n"
	"xVTORConst: .word 0xe000ed08						\n"
	:: "i" ( portSVC_START_SCHEDULER ) : "memory"
	);
}
 800d434:	bf00      	nop
 800d436:	bf00      	nop

0800d438 <ulSetInterruptMask>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMask( void ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800d438:	f3ef 8011 	mrs	r0, BASEPRI
 800d43c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
 800d440:	f381 8811 	msr	BASEPRI, r1
 800d444:	f3bf 8f4f 	dsb	sy
 800d448:	f3bf 8f6f 	isb	sy
 800d44c:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	:: "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800d44e:	bf00      	nop
 800d450:	4618      	mov	r0, r3

0800d452 <vClearInterruptMask>:
/*-----------------------------------------------------------*/

void vClearInterruptMask( __attribute__( ( unused ) ) uint32_t ulMask ) /* __attribute__(( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800d452:	f380 8811 	msr	BASEPRI, r0
 800d456:	f3bf 8f4f 	dsb	sy
 800d45a:	f3bf 8f6f 	isb	sy
 800d45e:	4770      	bx	lr
	"	dsb												\n"
	"	isb												\n"
	"	bx lr											\n" /* Return. */
	::: "memory"
	);
}
 800d460:	bf00      	nop
	...

0800d470 <PendSV_Handler>:
/*-----------------------------------------------------------*/

void PendSV_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800d470:	f3ef 8009 	mrs	r0, PSP
 800d474:	f3ef 820b 	mrs	r2, PSPLIM
 800d478:	4673      	mov	r3, lr
 800d47a:	e920 0ffc 	stmdb	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800d47e:	4a10      	ldr	r2, [pc, #64]	; (800d4c0 <pxCurrentTCBConst>)
 800d480:	6811      	ldr	r1, [r2, #0]
 800d482:	6008      	str	r0, [r1, #0]
 800d484:	f04f 00a0 	mov.w	r0, #160	; 0xa0
 800d488:	f380 8811 	msr	BASEPRI, r0
 800d48c:	f3bf 8f4f 	dsb	sy
 800d490:	f3bf 8f6f 	isb	sy
 800d494:	f7fe ff48 	bl	800c328 <vTaskSwitchContext>
 800d498:	f04f 0000 	mov.w	r0, #0
 800d49c:	f380 8811 	msr	BASEPRI, r0
 800d4a0:	4a07      	ldr	r2, [pc, #28]	; (800d4c0 <pxCurrentTCBConst>)
 800d4a2:	6811      	ldr	r1, [r2, #0]
 800d4a4:	6808      	ldr	r0, [r1, #0]
 800d4a6:	e8b0 0ffc 	ldmia.w	r0!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 800d4aa:	f382 880b 	msr	PSPLIM, r2
 800d4ae:	f380 8809 	msr	PSP, r0
 800d4b2:	4718      	bx	r3
 800d4b4:	f3af 8000 	nop.w
 800d4b8:	f3af 8000 	nop.w
 800d4bc:	f3af 8000 	nop.w

0800d4c0 <pxCurrentTCBConst>:
 800d4c0:	2001d3b4 	.word	0x2001d3b4
	"xRNRConst: .word 0xe000ed98						\n"
	"xRBARConst: .word 0xe000ed9c						\n"
	#endif /* configENABLE_MPU */
	:: "i"( configMAX_SYSCALL_INTERRUPT_PRIORITY )
	);
}
 800d4c4:	bf00      	nop
 800d4c6:	bf00      	nop
	...

0800d4d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void SVC_Handler( void ) /* __attribute__ (( naked )) PRIVILEGED_FUNCTION */
{
	__asm volatile
 800d4d0:	f01e 0f04 	tst.w	lr, #4
 800d4d4:	bf0c      	ite	eq
 800d4d6:	f3ef 8008 	mrseq	r0, MSP
 800d4da:	f3ef 8009 	mrsne	r0, PSP
 800d4de:	4904      	ldr	r1, [pc, #16]	; (800d4f0 <svchandler_address_const>)
 800d4e0:	4708      	bx	r1
 800d4e2:	bf00      	nop
 800d4e4:	f3af 8000 	nop.w
 800d4e8:	f3af 8000 	nop.w
 800d4ec:	f3af 8000 	nop.w

0800d4f0 <svchandler_address_const>:
 800d4f0:	0800d251 	.word	0x0800d251
	"	bx r1											\n"
	"													\n"
	"	.align 4										\n"
	"svchandler_address_const: .word vPortSVCHandler_C	\n"
	);
}
 800d4f4:	bf00      	nop
 800d4f6:	bf00      	nop

0800d4f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b086      	sub	sp, #24
 800d4fc:	af00      	add	r7, sp, #0
 800d4fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d500:	2300      	movs	r3, #0
 800d502:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800d504:	f7fe fdb2 	bl	800c06c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d508:	4b4f      	ldr	r3, [pc, #316]	; (800d648 <pvPortMalloc+0x150>)
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d101      	bne.n	800d514 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d510:	f000 f8f8 	bl	800d704 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d514:	4b4d      	ldr	r3, [pc, #308]	; (800d64c <pvPortMalloc+0x154>)
 800d516:	681a      	ldr	r2, [r3, #0]
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	4013      	ands	r3, r2
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	f040 8083 	bne.w	800d628 <pvPortMalloc+0x130>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d015      	beq.n	800d554 <pvPortMalloc+0x5c>
			{
				xWantedSize += xHeapStructSize;
 800d528:	2208      	movs	r2, #8
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	4413      	add	r3, r2
 800d52e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f003 0307 	and.w	r3, r3, #7
 800d536:	2b00      	cmp	r3, #0
 800d538:	d00c      	beq.n	800d554 <pvPortMalloc+0x5c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	f023 0307 	bic.w	r3, r3, #7
 800d540:	3308      	adds	r3, #8
 800d542:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f003 0307 	and.w	r3, r3, #7
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d002      	beq.n	800d554 <pvPortMalloc+0x5c>
 800d54e:	f7ff ff73 	bl	800d438 <ulSetInterruptMask>
 800d552:	e7fe      	b.n	800d552 <pvPortMalloc+0x5a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d066      	beq.n	800d628 <pvPortMalloc+0x130>
 800d55a:	4b3d      	ldr	r3, [pc, #244]	; (800d650 <pvPortMalloc+0x158>)
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	429a      	cmp	r2, r3
 800d562:	d861      	bhi.n	800d628 <pvPortMalloc+0x130>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d564:	4b3b      	ldr	r3, [pc, #236]	; (800d654 <pvPortMalloc+0x15c>)
 800d566:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800d568:	4b3a      	ldr	r3, [pc, #232]	; (800d654 <pvPortMalloc+0x15c>)
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d56e:	e004      	b.n	800d57a <pvPortMalloc+0x82>
				{
					pxPreviousBlock = pxBlock;
 800d570:	697b      	ldr	r3, [r7, #20]
 800d572:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	681b      	ldr	r3, [r3, #0]
 800d578:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d57a:	697b      	ldr	r3, [r7, #20]
 800d57c:	685b      	ldr	r3, [r3, #4]
 800d57e:	687a      	ldr	r2, [r7, #4]
 800d580:	429a      	cmp	r2, r3
 800d582:	d903      	bls.n	800d58c <pvPortMalloc+0x94>
 800d584:	697b      	ldr	r3, [r7, #20]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d1f1      	bne.n	800d570 <pvPortMalloc+0x78>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d58c:	4b2e      	ldr	r3, [pc, #184]	; (800d648 <pvPortMalloc+0x150>)
 800d58e:	681b      	ldr	r3, [r3, #0]
 800d590:	697a      	ldr	r2, [r7, #20]
 800d592:	429a      	cmp	r2, r3
 800d594:	d048      	beq.n	800d628 <pvPortMalloc+0x130>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	2208      	movs	r2, #8
 800d59c:	4413      	add	r3, r2
 800d59e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	681a      	ldr	r2, [r3, #0]
 800d5a4:	693b      	ldr	r3, [r7, #16]
 800d5a6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	685a      	ldr	r2, [r3, #4]
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	1ad2      	subs	r2, r2, r3
 800d5b0:	2308      	movs	r3, #8
 800d5b2:	005b      	lsls	r3, r3, #1
 800d5b4:	429a      	cmp	r2, r3
 800d5b6:	d917      	bls.n	800d5e8 <pvPortMalloc+0xf0>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d5b8:	697a      	ldr	r2, [r7, #20]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	4413      	add	r3, r2
 800d5be:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	f003 0307 	and.w	r3, r3, #7
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d002      	beq.n	800d5d0 <pvPortMalloc+0xd8>
 800d5ca:	f7ff ff35 	bl	800d438 <ulSetInterruptMask>
 800d5ce:	e7fe      	b.n	800d5ce <pvPortMalloc+0xd6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	685a      	ldr	r2, [r3, #4]
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	1ad2      	subs	r2, r2, r3
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	687a      	ldr	r2, [r7, #4]
 800d5e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d5e2:	68b8      	ldr	r0, [r7, #8]
 800d5e4:	f000 f8f0 	bl	800d7c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d5e8:	4b19      	ldr	r3, [pc, #100]	; (800d650 <pvPortMalloc+0x158>)
 800d5ea:	681a      	ldr	r2, [r3, #0]
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	685b      	ldr	r3, [r3, #4]
 800d5f0:	1ad3      	subs	r3, r2, r3
 800d5f2:	4a17      	ldr	r2, [pc, #92]	; (800d650 <pvPortMalloc+0x158>)
 800d5f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d5f6:	4b16      	ldr	r3, [pc, #88]	; (800d650 <pvPortMalloc+0x158>)
 800d5f8:	681a      	ldr	r2, [r3, #0]
 800d5fa:	4b17      	ldr	r3, [pc, #92]	; (800d658 <pvPortMalloc+0x160>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d203      	bcs.n	800d60a <pvPortMalloc+0x112>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d602:	4b13      	ldr	r3, [pc, #76]	; (800d650 <pvPortMalloc+0x158>)
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	4a14      	ldr	r2, [pc, #80]	; (800d658 <pvPortMalloc+0x160>)
 800d608:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d60a:	697b      	ldr	r3, [r7, #20]
 800d60c:	685a      	ldr	r2, [r3, #4]
 800d60e:	4b0f      	ldr	r3, [pc, #60]	; (800d64c <pvPortMalloc+0x154>)
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	431a      	orrs	r2, r3
 800d614:	697b      	ldr	r3, [r7, #20]
 800d616:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d618:	697b      	ldr	r3, [r7, #20]
 800d61a:	2200      	movs	r2, #0
 800d61c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d61e:	4b0f      	ldr	r3, [pc, #60]	; (800d65c <pvPortMalloc+0x164>)
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	3301      	adds	r3, #1
 800d624:	4a0d      	ldr	r2, [pc, #52]	; (800d65c <pvPortMalloc+0x164>)
 800d626:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d628:	f7fe fd2e 	bl	800c088 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	f003 0307 	and.w	r3, r3, #7
 800d632:	2b00      	cmp	r3, #0
 800d634:	d002      	beq.n	800d63c <pvPortMalloc+0x144>
 800d636:	f7ff feff 	bl	800d438 <ulSetInterruptMask>
 800d63a:	e7fe      	b.n	800d63a <pvPortMalloc+0x142>
	return pvReturn;
 800d63c:	68fb      	ldr	r3, [r7, #12]
}
 800d63e:	4618      	mov	r0, r3
 800d640:	3718      	adds	r7, #24
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}
 800d646:	bf00      	nop
 800d648:	2001f9e8 	.word	0x2001f9e8
 800d64c:	2001f9fc 	.word	0x2001f9fc
 800d650:	2001f9ec 	.word	0x2001f9ec
 800d654:	2001f9e0 	.word	0x2001f9e0
 800d658:	2001f9f0 	.word	0x2001f9f0
 800d65c:	2001f9f4 	.word	0x2001f9f4

0800d660 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b084      	sub	sp, #16
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d03d      	beq.n	800d6ee <vPortFree+0x8e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d672:	2308      	movs	r3, #8
 800d674:	425b      	negs	r3, r3
 800d676:	68fa      	ldr	r2, [r7, #12]
 800d678:	4413      	add	r3, r2
 800d67a:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d680:	68bb      	ldr	r3, [r7, #8]
 800d682:	685a      	ldr	r2, [r3, #4]
 800d684:	4b1c      	ldr	r3, [pc, #112]	; (800d6f8 <vPortFree+0x98>)
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	4013      	ands	r3, r2
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d102      	bne.n	800d694 <vPortFree+0x34>
 800d68e:	f7ff fed3 	bl	800d438 <ulSetInterruptMask>
 800d692:	e7fe      	b.n	800d692 <vPortFree+0x32>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d002      	beq.n	800d6a2 <vPortFree+0x42>
 800d69c:	f7ff fecc 	bl	800d438 <ulSetInterruptMask>
 800d6a0:	e7fe      	b.n	800d6a0 <vPortFree+0x40>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	685a      	ldr	r2, [r3, #4]
 800d6a6:	4b14      	ldr	r3, [pc, #80]	; (800d6f8 <vPortFree+0x98>)
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	4013      	ands	r3, r2
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d01e      	beq.n	800d6ee <vPortFree+0x8e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d6b0:	68bb      	ldr	r3, [r7, #8]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d11a      	bne.n	800d6ee <vPortFree+0x8e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	685a      	ldr	r2, [r3, #4]
 800d6bc:	4b0e      	ldr	r3, [pc, #56]	; (800d6f8 <vPortFree+0x98>)
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	43db      	mvns	r3, r3
 800d6c2:	401a      	ands	r2, r3
 800d6c4:	68bb      	ldr	r3, [r7, #8]
 800d6c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d6c8:	f7fe fcd0 	bl	800c06c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d6cc:	68bb      	ldr	r3, [r7, #8]
 800d6ce:	685a      	ldr	r2, [r3, #4]
 800d6d0:	4b0a      	ldr	r3, [pc, #40]	; (800d6fc <vPortFree+0x9c>)
 800d6d2:	681b      	ldr	r3, [r3, #0]
 800d6d4:	4413      	add	r3, r2
 800d6d6:	4a09      	ldr	r2, [pc, #36]	; (800d6fc <vPortFree+0x9c>)
 800d6d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d6da:	68b8      	ldr	r0, [r7, #8]
 800d6dc:	f000 f874 	bl	800d7c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d6e0:	4b07      	ldr	r3, [pc, #28]	; (800d700 <vPortFree+0xa0>)
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	3301      	adds	r3, #1
 800d6e6:	4a06      	ldr	r2, [pc, #24]	; (800d700 <vPortFree+0xa0>)
 800d6e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d6ea:	f7fe fccd 	bl	800c088 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d6ee:	bf00      	nop
 800d6f0:	3710      	adds	r7, #16
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}
 800d6f6:	bf00      	nop
 800d6f8:	2001f9fc 	.word	0x2001f9fc
 800d6fc:	2001f9ec 	.word	0x2001f9ec
 800d700:	2001f9f8 	.word	0x2001f9f8

0800d704 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d704:	b480      	push	{r7}
 800d706:	b085      	sub	sp, #20
 800d708:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d70a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d70e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d710:	4b27      	ldr	r3, [pc, #156]	; (800d7b0 <prvHeapInit+0xac>)
 800d712:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f003 0307 	and.w	r3, r3, #7
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d00c      	beq.n	800d738 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d71e:	68fb      	ldr	r3, [r7, #12]
 800d720:	3307      	adds	r3, #7
 800d722:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f023 0307 	bic.w	r3, r3, #7
 800d72a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d72c:	68ba      	ldr	r2, [r7, #8]
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	1ad3      	subs	r3, r2, r3
 800d732:	4a1f      	ldr	r2, [pc, #124]	; (800d7b0 <prvHeapInit+0xac>)
 800d734:	4413      	add	r3, r2
 800d736:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d73c:	4a1d      	ldr	r2, [pc, #116]	; (800d7b4 <prvHeapInit+0xb0>)
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d742:	4b1c      	ldr	r3, [pc, #112]	; (800d7b4 <prvHeapInit+0xb0>)
 800d744:	2200      	movs	r2, #0
 800d746:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	68ba      	ldr	r2, [r7, #8]
 800d74c:	4413      	add	r3, r2
 800d74e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d750:	2208      	movs	r2, #8
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	1a9b      	subs	r3, r3, r2
 800d756:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	f023 0307 	bic.w	r3, r3, #7
 800d75e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	4a15      	ldr	r2, [pc, #84]	; (800d7b8 <prvHeapInit+0xb4>)
 800d764:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d766:	4b14      	ldr	r3, [pc, #80]	; (800d7b8 <prvHeapInit+0xb4>)
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	2200      	movs	r2, #0
 800d76c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d76e:	4b12      	ldr	r3, [pc, #72]	; (800d7b8 <prvHeapInit+0xb4>)
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	2200      	movs	r2, #0
 800d774:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	68fa      	ldr	r2, [r7, #12]
 800d77e:	1ad2      	subs	r2, r2, r3
 800d780:	683b      	ldr	r3, [r7, #0]
 800d782:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d784:	4b0c      	ldr	r3, [pc, #48]	; (800d7b8 <prvHeapInit+0xb4>)
 800d786:	681a      	ldr	r2, [r3, #0]
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d78c:	683b      	ldr	r3, [r7, #0]
 800d78e:	685b      	ldr	r3, [r3, #4]
 800d790:	4a0a      	ldr	r2, [pc, #40]	; (800d7bc <prvHeapInit+0xb8>)
 800d792:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	685b      	ldr	r3, [r3, #4]
 800d798:	4a09      	ldr	r2, [pc, #36]	; (800d7c0 <prvHeapInit+0xbc>)
 800d79a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d79c:	4b09      	ldr	r3, [pc, #36]	; (800d7c4 <prvHeapInit+0xc0>)
 800d79e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d7a2:	601a      	str	r2, [r3, #0]
}
 800d7a4:	bf00      	nop
 800d7a6:	3714      	adds	r7, #20
 800d7a8:	46bd      	mov	sp, r7
 800d7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ae:	4770      	bx	lr
 800d7b0:	2001d9e0 	.word	0x2001d9e0
 800d7b4:	2001f9e0 	.word	0x2001f9e0
 800d7b8:	2001f9e8 	.word	0x2001f9e8
 800d7bc:	2001f9f0 	.word	0x2001f9f0
 800d7c0:	2001f9ec 	.word	0x2001f9ec
 800d7c4:	2001f9fc 	.word	0x2001f9fc

0800d7c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b085      	sub	sp, #20
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d7d0:	4b28      	ldr	r3, [pc, #160]	; (800d874 <prvInsertBlockIntoFreeList+0xac>)
 800d7d2:	60fb      	str	r3, [r7, #12]
 800d7d4:	e002      	b.n	800d7dc <prvInsertBlockIntoFreeList+0x14>
 800d7d6:	68fb      	ldr	r3, [r7, #12]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	60fb      	str	r3, [r7, #12]
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	687a      	ldr	r2, [r7, #4]
 800d7e2:	429a      	cmp	r2, r3
 800d7e4:	d8f7      	bhi.n	800d7d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	685b      	ldr	r3, [r3, #4]
 800d7ee:	68ba      	ldr	r2, [r7, #8]
 800d7f0:	4413      	add	r3, r2
 800d7f2:	687a      	ldr	r2, [r7, #4]
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d108      	bne.n	800d80a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	685a      	ldr	r2, [r3, #4]
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	685b      	ldr	r3, [r3, #4]
 800d800:	441a      	add	r2, r3
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d806:	68fb      	ldr	r3, [r7, #12]
 800d808:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	685b      	ldr	r3, [r3, #4]
 800d812:	68ba      	ldr	r2, [r7, #8]
 800d814:	441a      	add	r2, r3
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	429a      	cmp	r2, r3
 800d81c:	d118      	bne.n	800d850 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d81e:	68fb      	ldr	r3, [r7, #12]
 800d820:	681a      	ldr	r2, [r3, #0]
 800d822:	4b15      	ldr	r3, [pc, #84]	; (800d878 <prvInsertBlockIntoFreeList+0xb0>)
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	429a      	cmp	r2, r3
 800d828:	d00d      	beq.n	800d846 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	685a      	ldr	r2, [r3, #4]
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	685b      	ldr	r3, [r3, #4]
 800d834:	441a      	add	r2, r3
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	681b      	ldr	r3, [r3, #0]
 800d83e:	681a      	ldr	r2, [r3, #0]
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	601a      	str	r2, [r3, #0]
 800d844:	e008      	b.n	800d858 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d846:	4b0c      	ldr	r3, [pc, #48]	; (800d878 <prvInsertBlockIntoFreeList+0xb0>)
 800d848:	681a      	ldr	r2, [r3, #0]
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	601a      	str	r2, [r3, #0]
 800d84e:	e003      	b.n	800d858 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	681a      	ldr	r2, [r3, #0]
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d858:	68fa      	ldr	r2, [r7, #12]
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d002      	beq.n	800d866 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	687a      	ldr	r2, [r7, #4]
 800d864:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d866:	bf00      	nop
 800d868:	3714      	adds	r7, #20
 800d86a:	46bd      	mov	sp, r7
 800d86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d870:	4770      	bx	lr
 800d872:	bf00      	nop
 800d874:	2001f9e0 	.word	0x2001f9e0
 800d878:	2001f9e8 	.word	0x2001f9e8

0800d87c <MX_TouchGFX_PreOSInit>:

/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
 800d87c:	b480      	push	{r7}
 800d87e:	af00      	add	r7, sp, #0
}
 800d880:	bf00      	nop
 800d882:	46bd      	mov	sp, r7
 800d884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d888:	4770      	bx	lr

0800d88a <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 800d88a:	b580      	push	{r7, lr}
 800d88c:	af00      	add	r7, sp, #0
  // Calling forward to touchgfx_init in C++ domain
  touchgfx_components_init();
 800d88e:	f003 f96b 	bl	8010b68 <touchgfx_components_init>
  touchgfx_init();
 800d892:	f003 f93f 	bl	8010b14 <touchgfx_init>
}
 800d896:	bf00      	nop
 800d898:	bd80      	pop	{r7, pc}
	...

0800d89c <_ZN8touchgfx12FontProviderD1Ev>:
     * @return The font with a font id of fontId.
     */
    virtual Font* getFont(FontId fontId) = 0;

    /** Finalizes an instance of the FontProvider class. */
    virtual ~FontProvider()
 800d89c:	b480      	push	{r7}
 800d89e:	b083      	sub	sp, #12
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
    {
 800d8a4:	4a04      	ldr	r2, [pc, #16]	; (800d8b8 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	601a      	str	r2, [r3, #0]
    }
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	370c      	adds	r7, #12
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8b6:	4770      	bx	lr
 800d8b8:	080237a4 	.word	0x080237a4

0800d8bc <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b082      	sub	sp, #8
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	6078      	str	r0, [r7, #4]
    }
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f7ff ffe9 	bl	800d89c <_ZN8touchgfx12FontProviderD1Ev>
 800d8ca:	2104      	movs	r1, #4
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f014 f8f8 	bl	8021ac2 <_ZdlPvj>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	4618      	mov	r0, r3
 800d8d6:	3708      	adds	r7, #8
 800d8d8:	46bd      	mov	sp, r7
 800d8da:	bd80      	pop	{r7, pc}

0800d8dc <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 800d8dc:	b580      	push	{r7, lr}
 800d8de:	b082      	sub	sp, #8
 800d8e0:	af00      	add	r7, sp, #0
 800d8e2:	6078      	str	r0, [r7, #4]
 800d8e4:	460b      	mov	r3, r1
 800d8e6:	807b      	strh	r3, [r7, #2]
    switch (typography)
 800d8e8:	887b      	ldrh	r3, [r7, #2]
 800d8ea:	2b02      	cmp	r3, #2
 800d8ec:	d010      	beq.n	800d910 <_ZN23ApplicationFontProvider7getFontEt+0x34>
 800d8ee:	2b02      	cmp	r3, #2
 800d8f0:	dc13      	bgt.n	800d91a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d002      	beq.n	800d8fc <_ZN23ApplicationFontProvider7getFontEt+0x20>
 800d8f6:	2b01      	cmp	r3, #1
 800d8f8:	d005      	beq.n	800d906 <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 800d8fa:	e00e      	b.n	800d91a <_ZN23ApplicationFontProvider7getFontEt+0x3e>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 800d8fc:	f001 ffbc 	bl	800f878 <_ZN17TypedTextDatabase8getFontsEv>
 800d900:	4603      	mov	r3, r0
 800d902:	681b      	ldr	r3, [r3, #0]
 800d904:	e00a      	b.n	800d91c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 800d906:	f001 ffb7 	bl	800f878 <_ZN17TypedTextDatabase8getFontsEv>
 800d90a:	4603      	mov	r3, r0
 800d90c:	685b      	ldr	r3, [r3, #4]
 800d90e:	e005      	b.n	800d91c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    case Typography::SMALL:
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 800d910:	f001 ffb2 	bl	800f878 <_ZN17TypedTextDatabase8getFontsEv>
 800d914:	4603      	mov	r3, r0
 800d916:	689b      	ldr	r3, [r3, #8]
 800d918:	e000      	b.n	800d91c <_ZN23ApplicationFontProvider7getFontEt+0x40>
    default:
        return 0;
 800d91a:	2300      	movs	r3, #0
    }
}
 800d91c:	4618      	mov	r0, r3
 800d91e:	3708      	adds	r7, #8
 800d920:	46bd      	mov	sp, r7
 800d922:	bd80      	pop	{r7, pc}

0800d924 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 800d924:	b580      	push	{r7, lr}
 800d926:	b082      	sub	sp, #8
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	4a05      	ldr	r2, [pc, #20]	; (800d944 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	601a      	str	r2, [r3, #0]
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	4618      	mov	r0, r3
 800d936:	f7ff ffb1 	bl	800d89c <_ZN8touchgfx12FontProviderD1Ev>
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	4618      	mov	r0, r3
 800d93e:	3708      	adds	r7, #8
 800d940:	46bd      	mov	sp, r7
 800d942:	bd80      	pop	{r7, pc}
 800d944:	08023790 	.word	0x08023790

0800d948 <_ZN23ApplicationFontProviderD0Ev>:
 800d948:	b580      	push	{r7, lr}
 800d94a:	b082      	sub	sp, #8
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6878      	ldr	r0, [r7, #4]
 800d952:	f7ff ffe7 	bl	800d924 <_ZN23ApplicationFontProviderD1Ev>
 800d956:	2104      	movs	r1, #4
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f014 f8b2 	bl	8021ac2 <_ZdlPvj>
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	4618      	mov	r0, r3
 800d962:	3708      	adds	r7, #8
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}

0800d968 <_ZN8touchgfx4FontD1Ev>:
 */
class Font
{
public:
    /** Finalizes an instance of the Font class. */
    virtual ~Font()
 800d968:	b480      	push	{r7}
 800d96a:	b083      	sub	sp, #12
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
    {
 800d970:	4a04      	ldr	r2, [pc, #16]	; (800d984 <_ZN8touchgfx4FontD1Ev+0x1c>)
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	601a      	str	r2, [r3, #0]
    }
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	4618      	mov	r0, r3
 800d97a:	370c      	adds	r7, #12
 800d97c:	46bd      	mov	sp, r7
 800d97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d982:	4770      	bx	lr
 800d984:	08023a8c 	.word	0x08023a8c

0800d988 <_ZN8touchgfx4FontD0Ev>:
    virtual ~Font()
 800d988:	b580      	push	{r7, lr}
 800d98a:	b082      	sub	sp, #8
 800d98c:	af00      	add	r7, sp, #0
 800d98e:	6078      	str	r0, [r7, #4]
    }
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f7ff ffe9 	bl	800d968 <_ZN8touchgfx4FontD1Ev>
 800d996:	2114      	movs	r1, #20
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f014 f892 	bl	8021ac2 <_ZdlPvj>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3708      	adds	r7, #8
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}

0800d9a8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 800d9a8:	b590      	push	{r4, r7, lr}
 800d9aa:	b087      	sub	sp, #28
 800d9ac:	af00      	add	r7, sp, #0
 800d9ae:	6078      	str	r0, [r7, #4]
 800d9b0:	460b      	mov	r3, r1
 800d9b2:	807b      	strh	r3, [r7, #2]
    {
        if (unicode == 0)
 800d9b4:	887b      	ldrh	r3, [r7, #2]
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d101      	bne.n	800d9be <_ZNK8touchgfx4Font8getGlyphEt+0x16>
        {
            return 0;
 800d9ba:	2300      	movs	r3, #0
 800d9bc:	e010      	b.n	800d9e0 <_ZNK8touchgfx4Font8getGlyphEt+0x38>
        }
        const uint8_t* dummyPixelDataPointer = 0;
 800d9be:	2300      	movs	r3, #0
 800d9c0:	613b      	str	r3, [r7, #16]
        uint8_t bitsPerPixelDummy = 0;
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	73fb      	strb	r3, [r7, #15]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	3308      	adds	r3, #8
 800d9cc:	681c      	ldr	r4, [r3, #0]
 800d9ce:	f107 030f 	add.w	r3, r7, #15
 800d9d2:	f107 0210 	add.w	r2, r7, #16
 800d9d6:	8879      	ldrh	r1, [r7, #2]
 800d9d8:	6878      	ldr	r0, [r7, #4]
 800d9da:	47a0      	blx	r4
 800d9dc:	6178      	str	r0, [r7, #20]
        return glyph;
 800d9de:	697b      	ldr	r3, [r7, #20]
    }
 800d9e0:	4618      	mov	r0, r3
 800d9e2:	371c      	adds	r7, #28
 800d9e4:	46bd      	mov	sp, r7
 800d9e6:	bd90      	pop	{r4, r7, pc}

0800d9e8 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * used when no glyph is available for some character. If 0 (zero) is returned, there is
     * no default character.
     *
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
 800d9e8:	b480      	push	{r7}
 800d9ea:	b083      	sub	sp, #12
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
    {
        return fallbackCharacter;
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	89db      	ldrh	r3, [r3, #14]
    }
 800d9f4:	4618      	mov	r0, r3
 800d9f6:	370c      	adds	r7, #12
 800d9f8:	46bd      	mov	sp, r7
 800d9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9fe:	4770      	bx	lr

0800da00 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     *
     * @return The ellipsis character for the typography.
     *
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
 800da00:	b480      	push	{r7}
 800da02:	b083      	sub	sp, #12
 800da04:	af00      	add	r7, sp, #0
 800da06:	6078      	str	r0, [r7, #4]
    {
        return ellipsisCharacter;
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	8a1b      	ldrh	r3, [r3, #16]
    }
 800da0c:	4618      	mov	r0, r3
 800da0e:	370c      	adds	r7, #12
 800da10:	46bd      	mov	sp, r7
 800da12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da16:	4770      	bx	lr

0800da18 <_ZNK8touchgfx4Font11getBaselineEv>:
     * @return The height in pixels of this font.
     *
     * @note It is not sufficient to allocate text areas with this height. Use
     *       getMinimumTextHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
 800da18:	b480      	push	{r7}
 800da1a:	b083      	sub	sp, #12
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
    {
        return baselineHeight;
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	88db      	ldrh	r3, [r3, #6]
    }
 800da24:	4618      	mov	r0, r3
 800da26:	370c      	adds	r7, #12
 800da28:	46bd      	mov	sp, r7
 800da2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da2e:	4770      	bx	lr

0800da30 <_ZNK8touchgfx4Font9getHeightEv>:
     * Returns the height of a font. The font may exceed the top by getPixelsAboveTop() or the
     * bottom by getPixelsBelowBottom.
     *
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
 800da30:	b480      	push	{r7}
 800da32:	b083      	sub	sp, #12
 800da34:	af00      	add	r7, sp, #0
 800da36:	6078      	str	r0, [r7, #4]
    {
        return fontHeight;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	889b      	ldrh	r3, [r3, #4]
    }
 800da3c:	4618      	mov	r0, r3
 800da3e:	370c      	adds	r7, #12
 800da40:	46bd      	mov	sp, r7
 800da42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da46:	4770      	bx	lr

0800da48 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
    /**
     * Gets bits per pixel for this font.
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
 800da48:	b480      	push	{r7}
 800da4a:	b083      	sub	sp, #12
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
    {
        return bPerPixel;
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	7a9b      	ldrb	r3, [r3, #10]
 800da54:	f3c3 0306 	ubfx	r3, r3, #0, #7
 800da58:	b2db      	uxtb	r3, r3
    }
 800da5a:	4618      	mov	r0, r3
 800da5c:	370c      	adds	r7, #12
 800da5e:	46bd      	mov	sp, r7
 800da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da64:	4770      	bx	lr

0800da66 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
    /**
     * Are the glyphs saved with each glyph row byte aligned?
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
 800da66:	b480      	push	{r7}
 800da68:	b083      	sub	sp, #12
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	6078      	str	r0, [r7, #4]
    {
        return bAlignRow;
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	7a9b      	ldrb	r3, [r3, #10]
 800da72:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800da76:	b2db      	uxtb	r3, r3
    }
 800da78:	4618      	mov	r0, r3
 800da7a:	370c      	adds	r7, #12
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr

0800da84 <_ZN8touchgfx9ConstFontD1Ev>:
 *
 * @see Font
 *
 * @note Pure virtual class. Create an application-specific implementation of getPixelData().
 */
class ConstFont : public Font
 800da84:	b580      	push	{r7, lr}
 800da86:	b082      	sub	sp, #8
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
 800da8c:	4a05      	ldr	r2, [pc, #20]	; (800daa4 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	601a      	str	r2, [r3, #0]
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	4618      	mov	r0, r3
 800da96:	f7ff ff67 	bl	800d968 <_ZN8touchgfx4FontD1Ev>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	4618      	mov	r0, r3
 800da9e:	3708      	adds	r7, #8
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}
 800daa4:	080243c0 	.word	0x080243c0

0800daa8 <_ZN8touchgfx9ConstFontD0Ev>:
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b082      	sub	sp, #8
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f7ff ffe7 	bl	800da84 <_ZN8touchgfx9ConstFontD1Ev>
 800dab6:	211c      	movs	r1, #28
 800dab8:	6878      	ldr	r0, [r7, #4]
 800daba:	f014 f802 	bl	8021ac2 <_ZdlPvj>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	4618      	mov	r0, r3
 800dac2:	3708      	adds	r7, #8
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bd80      	pop	{r7, pc}

0800dac8 <_ZN8touchgfx13GeneratedFontD1Ev>:

#include <touchgfx/ConstFont.hpp>

namespace touchgfx
{
class GeneratedFont : public ConstFont
 800dac8:	b580      	push	{r7, lr}
 800daca:	b082      	sub	sp, #8
 800dacc:	af00      	add	r7, sp, #0
 800dace:	6078      	str	r0, [r7, #4]
 800dad0:	4a05      	ldr	r2, [pc, #20]	; (800dae8 <_ZN8touchgfx13GeneratedFontD1Ev+0x20>)
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	601a      	str	r2, [r3, #0]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	4618      	mov	r0, r3
 800dada:	f7ff ffd3 	bl	800da84 <_ZN8touchgfx9ConstFontD1Ev>
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	4618      	mov	r0, r3
 800dae2:	3708      	adds	r7, #8
 800dae4:	46bd      	mov	sp, r7
 800dae6:	bd80      	pop	{r7, pc}
 800dae8:	080237b8 	.word	0x080237b8

0800daec <_ZN8touchgfx13GeneratedFontD0Ev>:
 800daec:	b580      	push	{r7, lr}
 800daee:	b082      	sub	sp, #8
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f7ff ffe7 	bl	800dac8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800dafa:	212c      	movs	r1, #44	; 0x2c
 800dafc:	6878      	ldr	r0, [r7, #4]
 800dafe:	f013 ffe0 	bl	8021ac2 <_ZdlPvj>
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	4618      	mov	r0, r3
 800db06:	3708      	adds	r7, #8
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:

    virtual const uint8_t* getPixelData(const GlyphNode* glyph) const;

    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
 800db0c:	b480      	push	{r7}
 800db0e:	b083      	sub	sp, #12
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
    {
        return gsubTable;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    }
 800db18:	4618      	mov	r0, r3
 800db1a:	370c      	adds	r7, #12
 800db1c:	46bd      	mov	sp, r7
 800db1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db22:	4770      	bx	lr

0800db24 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800db24:	b480      	push	{r7}
 800db26:	b083      	sub	sp, #12
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
    {
        return arabicTable;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    }
 800db30:	4618      	mov	r0, r3
 800db32:	370c      	adds	r7, #12
 800db34:	46bd      	mov	sp, r7
 800db36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3a:	4770      	bx	lr

0800db3c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:

#include <fonts/GeneratedFont.hpp>

namespace touchgfx
{
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b08e      	sub	sp, #56	; 0x38
 800db40:	af0a      	add	r7, sp, #40	; 0x28
 800db42:	60f8      	str	r0, [r7, #12]
 800db44:	60b9      	str	r1, [r7, #8]
 800db46:	4611      	mov	r1, r2
 800db48:	461a      	mov	r2, r3
 800db4a:	460b      	mov	r3, r1
 800db4c:	80fb      	strh	r3, [r7, #6]
 800db4e:	4613      	mov	r3, r2
 800db50:	80bb      	strh	r3, [r7, #4]
    : ConstFont(glyphs, numGlyphs, height, baseline, pixAboveTop, pixBelowBottom, bitsPerPixel, byteAlignRow, maxLeft, maxRight, fallbackChar, ellipsisChar),
      glyphData(glyphDataInternalFlash),
      kerningData(kerningList),
      gsubTable(gsubData),
      arabicTable(formsTable)
 800db52:	68f8      	ldr	r0, [r7, #12]
 800db54:	88b9      	ldrh	r1, [r7, #4]
 800db56:	88fa      	ldrh	r2, [r7, #6]
 800db58:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800db5c:	9308      	str	r3, [sp, #32]
 800db5e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800db60:	9307      	str	r3, [sp, #28]
 800db62:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800db66:	9306      	str	r3, [sp, #24]
 800db68:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800db6c:	9305      	str	r3, [sp, #20]
 800db6e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800db72:	9304      	str	r3, [sp, #16]
 800db74:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800db78:	9303      	str	r3, [sp, #12]
 800db7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800db7e:	9302      	str	r3, [sp, #8]
 800db80:	7f3b      	ldrb	r3, [r7, #28]
 800db82:	9301      	str	r3, [sp, #4]
 800db84:	8b3b      	ldrh	r3, [r7, #24]
 800db86:	9300      	str	r3, [sp, #0]
 800db88:	460b      	mov	r3, r1
 800db8a:	68b9      	ldr	r1, [r7, #8]
 800db8c:	f006 fe9a 	bl	80148c4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800db90:	4a09      	ldr	r2, [pc, #36]	; (800dbb8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x7c>)
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	601a      	str	r2, [r3, #0]
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800db9a:	61da      	str	r2, [r3, #28]
 800db9c:	68fb      	ldr	r3, [r7, #12]
 800db9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dba0:	621a      	str	r2, [r3, #32]
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dba6:	625a      	str	r2, [r3, #36]	; 0x24
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dbac:	629a      	str	r2, [r3, #40]	; 0x28
{
}
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3710      	adds	r7, #16
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}
 800dbb8:	080237b8 	.word	0x080237b8

0800dbbc <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
 800dbbc:	b480      	push	{r7}
 800dbbe:	b085      	sub	sp, #20
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	6078      	str	r0, [r7, #4]
 800dbc4:	6039      	str	r1, [r7, #0]
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
 800dbc6:	687b      	ldr	r3, [r7, #4]
 800dbc8:	69db      	ldr	r3, [r3, #28]
 800dbca:	60fb      	str	r3, [r7, #12]
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 800dbcc:	683b      	ldr	r3, [r7, #0]
 800dbce:	889b      	ldrh	r3, [r3, #4]
 800dbd0:	0adb      	lsrs	r3, r3, #11
 800dbd2:	b29b      	uxth	r3, r3
 800dbd4:	009b      	lsls	r3, r3, #2
 800dbd6:	68fa      	ldr	r2, [r7, #12]
 800dbd8:	4413      	add	r3, r2
 800dbda:	681a      	ldr	r2, [r3, #0]
 800dbdc:	683b      	ldr	r3, [r7, #0]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	4413      	add	r3, r2
}
 800dbe2:	4618      	mov	r0, r3
 800dbe4:	3714      	adds	r7, #20
 800dbe6:	46bd      	mov	sp, r7
 800dbe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbec:	4770      	bx	lr

0800dbee <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 800dbee:	b480      	push	{r7}
 800dbf0:	b089      	sub	sp, #36	; 0x24
 800dbf2:	af00      	add	r7, sp, #0
 800dbf4:	60f8      	str	r0, [r7, #12]
 800dbf6:	460b      	mov	r3, r1
 800dbf8:	607a      	str	r2, [r7, #4]
 800dbfa:	817b      	strh	r3, [r7, #10]
    if (!glyph || glyph->kerningTableSize == 0)
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d003      	beq.n	800dc0a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	7b1b      	ldrb	r3, [r3, #12]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d101      	bne.n	800dc0e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x20>
    {
        return 0;
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	e030      	b.n	800dc70 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 800dc0e:	68fb      	ldr	r3, [r7, #12]
 800dc10:	6a1a      	ldr	r2, [r3, #32]
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	617b      	str	r3, [r7, #20]
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	7b5b      	ldrb	r3, [r3, #13]
 800dc1a:	021b      	lsls	r3, r3, #8
 800dc1c:	b21b      	sxth	r3, r3
 800dc1e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dc22:	b219      	sxth	r1, r3
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	7adb      	ldrb	r3, [r3, #11]
 800dc28:	b21b      	sxth	r3, r3
 800dc2a:	430b      	orrs	r3, r1
 800dc2c:	b21b      	sxth	r3, r3
 800dc2e:	b29b      	uxth	r3, r3
 800dc30:	009b      	lsls	r3, r3, #2
 800dc32:	4413      	add	r3, r2
 800dc34:	61fb      	str	r3, [r7, #28]
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	7b1b      	ldrb	r3, [r3, #12]
 800dc3a:	837b      	strh	r3, [r7, #26]
 800dc3c:	8b7b      	ldrh	r3, [r7, #26]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d015      	beq.n	800dc6e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x80>
    {
        if (prevChar == kerndata->unicodePrevChar)
 800dc42:	69fb      	ldr	r3, [r7, #28]
 800dc44:	881b      	ldrh	r3, [r3, #0]
 800dc46:	897a      	ldrh	r2, [r7, #10]
 800dc48:	429a      	cmp	r2, r3
 800dc4a:	d103      	bne.n	800dc54 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x66>
        {
            return kerndata->distance;
 800dc4c:	69fb      	ldr	r3, [r7, #28]
 800dc4e:	f993 3002 	ldrsb.w	r3, [r3, #2]
 800dc52:	e00d      	b.n	800dc70 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x82>
        }
        if (prevChar < kerndata->unicodePrevChar)
 800dc54:	69fb      	ldr	r3, [r7, #28]
 800dc56:	881b      	ldrh	r3, [r3, #0]
 800dc58:	897a      	ldrh	r2, [r7, #10]
 800dc5a:	429a      	cmp	r2, r3
 800dc5c:	d306      	bcc.n	800dc6c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x7e>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800dc5e:	8b7b      	ldrh	r3, [r7, #26]
 800dc60:	3b01      	subs	r3, #1
 800dc62:	837b      	strh	r3, [r7, #26]
 800dc64:	69fb      	ldr	r3, [r7, #28]
 800dc66:	3304      	adds	r3, #4
 800dc68:	61fb      	str	r3, [r7, #28]
 800dc6a:	e7e7      	b.n	800dc3c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x4e>
        {
            break;
 800dc6c:	bf00      	nop
        }
    }
    return 0;
 800dc6e:	2300      	movs	r3, #0
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3724      	adds	r7, #36	; 0x24
 800dc74:	46bd      	mov	sp, r7
 800dc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc7a:	4770      	bx	lr

0800dc7c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	af00      	add	r7, sp, #0
 800dc80:	4801      	ldr	r0, [pc, #4]	; (800dc88 <__tcf_0+0xc>)
 800dc82:	f7ff ff21 	bl	800dac8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800dc86:	bd80      	pop	{r7, pc}
 800dc88:	2001fa00 	.word	0x2001fa00

0800dc8c <_Z23getFont_verdana_10_4bppv>:
{
 800dc8c:	b580      	push	{r7, lr}
 800dc8e:	b08e      	sub	sp, #56	; 0x38
 800dc90:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800dc92:	4b21      	ldr	r3, [pc, #132]	; (800dd18 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800dc94:	e8d3 3f8f 	ldab	r3, [r3]
 800dc98:	b2db      	uxtb	r3, r3
 800dc9a:	f003 0301 	and.w	r3, r3, #1
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	bf0c      	ite	eq
 800dca2:	2301      	moveq	r3, #1
 800dca4:	2300      	movne	r3, #0
 800dca6:	b2db      	uxtb	r3, r3
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d030      	beq.n	800dd0e <_Z23getFont_verdana_10_4bppv+0x82>
 800dcac:	481a      	ldr	r0, [pc, #104]	; (800dd18 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800dcae:	f013 ff0a 	bl	8021ac6 <__cxa_guard_acquire>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	bf14      	ite	ne
 800dcb8:	2301      	movne	r3, #1
 800dcba:	2300      	moveq	r3, #0
 800dcbc:	b2db      	uxtb	r3, r3
 800dcbe:	2b00      	cmp	r3, #0
 800dcc0:	d025      	beq.n	800dd0e <_Z23getFont_verdana_10_4bppv+0x82>
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	930c      	str	r3, [sp, #48]	; 0x30
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	930b      	str	r3, [sp, #44]	; 0x2c
 800dcca:	2300      	movs	r3, #0
 800dccc:	930a      	str	r3, [sp, #40]	; 0x28
 800dcce:	233f      	movs	r3, #63	; 0x3f
 800dcd0:	9309      	str	r3, [sp, #36]	; 0x24
 800dcd2:	4b12      	ldr	r3, [pc, #72]	; (800dd1c <_Z23getFont_verdana_10_4bppv+0x90>)
 800dcd4:	9308      	str	r3, [sp, #32]
 800dcd6:	4b12      	ldr	r3, [pc, #72]	; (800dd20 <_Z23getFont_verdana_10_4bppv+0x94>)
 800dcd8:	9307      	str	r3, [sp, #28]
 800dcda:	2300      	movs	r3, #0
 800dcdc:	9306      	str	r3, [sp, #24]
 800dcde:	2300      	movs	r3, #0
 800dce0:	9305      	str	r3, [sp, #20]
 800dce2:	2301      	movs	r3, #1
 800dce4:	9304      	str	r3, [sp, #16]
 800dce6:	2304      	movs	r3, #4
 800dce8:	9303      	str	r3, [sp, #12]
 800dcea:	2300      	movs	r3, #0
 800dcec:	9302      	str	r3, [sp, #8]
 800dcee:	2300      	movs	r3, #0
 800dcf0:	9301      	str	r3, [sp, #4]
 800dcf2:	230a      	movs	r3, #10
 800dcf4:	9300      	str	r3, [sp, #0]
 800dcf6:	230a      	movs	r3, #10
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	490a      	ldr	r1, [pc, #40]	; (800dd24 <_Z23getFont_verdana_10_4bppv+0x98>)
 800dcfc:	480a      	ldr	r0, [pc, #40]	; (800dd28 <_Z23getFont_verdana_10_4bppv+0x9c>)
 800dcfe:	f7ff ff1d 	bl	800db3c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800dd02:	480a      	ldr	r0, [pc, #40]	; (800dd2c <_Z23getFont_verdana_10_4bppv+0xa0>)
 800dd04:	f013 ff28 	bl	8021b58 <atexit>
 800dd08:	4803      	ldr	r0, [pc, #12]	; (800dd18 <_Z23getFont_verdana_10_4bppv+0x8c>)
 800dd0a:	f013 fee8 	bl	8021ade <__cxa_guard_release>
    return verdana_10_4bpp;
 800dd0e:	4b06      	ldr	r3, [pc, #24]	; (800dd28 <_Z23getFont_verdana_10_4bppv+0x9c>)
}
 800dd10:	4618      	mov	r0, r3
 800dd12:	46bd      	mov	sp, r7
 800dd14:	bd80      	pop	{r7, pc}
 800dd16:	bf00      	nop
 800dd18:	2001fa2c 	.word	0x2001fa2c
 800dd1c:	08024990 	.word	0x08024990
 800dd20:	0802499c 	.word	0x0802499c
 800dd24:	08024960 	.word	0x08024960
 800dd28:	2001fa00 	.word	0x2001fa00
 800dd2c:	0800dc7d 	.word	0x0800dc7d

0800dd30 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800dd30:	b580      	push	{r7, lr}
 800dd32:	af00      	add	r7, sp, #0
 800dd34:	4801      	ldr	r0, [pc, #4]	; (800dd3c <__tcf_0+0xc>)
 800dd36:	f7ff fec7 	bl	800dac8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800dd3a:	bd80      	pop	{r7, pc}
 800dd3c:	2001fa30 	.word	0x2001fa30

0800dd40 <_Z23getFont_verdana_20_4bppv>:
{
 800dd40:	b580      	push	{r7, lr}
 800dd42:	b08e      	sub	sp, #56	; 0x38
 800dd44:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800dd46:	4b21      	ldr	r3, [pc, #132]	; (800ddcc <_Z23getFont_verdana_20_4bppv+0x8c>)
 800dd48:	e8d3 3f8f 	ldab	r3, [r3]
 800dd4c:	b2db      	uxtb	r3, r3
 800dd4e:	f003 0301 	and.w	r3, r3, #1
 800dd52:	2b00      	cmp	r3, #0
 800dd54:	bf0c      	ite	eq
 800dd56:	2301      	moveq	r3, #1
 800dd58:	2300      	movne	r3, #0
 800dd5a:	b2db      	uxtb	r3, r3
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d030      	beq.n	800ddc2 <_Z23getFont_verdana_20_4bppv+0x82>
 800dd60:	481a      	ldr	r0, [pc, #104]	; (800ddcc <_Z23getFont_verdana_20_4bppv+0x8c>)
 800dd62:	f013 feb0 	bl	8021ac6 <__cxa_guard_acquire>
 800dd66:	4603      	mov	r3, r0
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	bf14      	ite	ne
 800dd6c:	2301      	movne	r3, #1
 800dd6e:	2300      	moveq	r3, #0
 800dd70:	b2db      	uxtb	r3, r3
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d025      	beq.n	800ddc2 <_Z23getFont_verdana_20_4bppv+0x82>
 800dd76:	2300      	movs	r3, #0
 800dd78:	930c      	str	r3, [sp, #48]	; 0x30
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	930b      	str	r3, [sp, #44]	; 0x2c
 800dd7e:	2300      	movs	r3, #0
 800dd80:	930a      	str	r3, [sp, #40]	; 0x28
 800dd82:	233f      	movs	r3, #63	; 0x3f
 800dd84:	9309      	str	r3, [sp, #36]	; 0x24
 800dd86:	4b12      	ldr	r3, [pc, #72]	; (800ddd0 <_Z23getFont_verdana_20_4bppv+0x90>)
 800dd88:	9308      	str	r3, [sp, #32]
 800dd8a:	4b12      	ldr	r3, [pc, #72]	; (800ddd4 <_Z23getFont_verdana_20_4bppv+0x94>)
 800dd8c:	9307      	str	r3, [sp, #28]
 800dd8e:	2300      	movs	r3, #0
 800dd90:	9306      	str	r3, [sp, #24]
 800dd92:	2300      	movs	r3, #0
 800dd94:	9305      	str	r3, [sp, #20]
 800dd96:	2301      	movs	r3, #1
 800dd98:	9304      	str	r3, [sp, #16]
 800dd9a:	2304      	movs	r3, #4
 800dd9c:	9303      	str	r3, [sp, #12]
 800dd9e:	2300      	movs	r3, #0
 800dda0:	9302      	str	r3, [sp, #8]
 800dda2:	2300      	movs	r3, #0
 800dda4:	9301      	str	r3, [sp, #4]
 800dda6:	2314      	movs	r3, #20
 800dda8:	9300      	str	r3, [sp, #0]
 800ddaa:	2314      	movs	r3, #20
 800ddac:	2201      	movs	r2, #1
 800ddae:	490a      	ldr	r1, [pc, #40]	; (800ddd8 <_Z23getFont_verdana_20_4bppv+0x98>)
 800ddb0:	480a      	ldr	r0, [pc, #40]	; (800dddc <_Z23getFont_verdana_20_4bppv+0x9c>)
 800ddb2:	f7ff fec3 	bl	800db3c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800ddb6:	480a      	ldr	r0, [pc, #40]	; (800dde0 <_Z23getFont_verdana_20_4bppv+0xa0>)
 800ddb8:	f013 fece 	bl	8021b58 <atexit>
 800ddbc:	4803      	ldr	r0, [pc, #12]	; (800ddcc <_Z23getFont_verdana_20_4bppv+0x8c>)
 800ddbe:	f013 fe8e 	bl	8021ade <__cxa_guard_release>
    return verdana_20_4bpp;
 800ddc2:	4b06      	ldr	r3, [pc, #24]	; (800dddc <_Z23getFont_verdana_20_4bppv+0x9c>)
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	2001fa5c 	.word	0x2001fa5c
 800ddd0:	08024994 	.word	0x08024994
 800ddd4:	080249a0 	.word	0x080249a0
 800ddd8:	08024970 	.word	0x08024970
 800dddc:	2001fa30 	.word	0x2001fa30
 800dde0:	0800dd31 	.word	0x0800dd31

0800dde4 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800dde4:	b580      	push	{r7, lr}
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	4801      	ldr	r0, [pc, #4]	; (800ddf0 <__tcf_0+0xc>)
 800ddea:	f7ff fe6d 	bl	800dac8 <_ZN8touchgfx13GeneratedFontD1Ev>
 800ddee:	bd80      	pop	{r7, pc}
 800ddf0:	2001fa60 	.word	0x2001fa60

0800ddf4 <_Z23getFont_verdana_40_4bppv>:
{
 800ddf4:	b580      	push	{r7, lr}
 800ddf6:	b08e      	sub	sp, #56	; 0x38
 800ddf8:	af0e      	add	r7, sp, #56	; 0x38
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800ddfa:	4b21      	ldr	r3, [pc, #132]	; (800de80 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800ddfc:	e8d3 3f8f 	ldab	r3, [r3]
 800de00:	b2db      	uxtb	r3, r3
 800de02:	f003 0301 	and.w	r3, r3, #1
 800de06:	2b00      	cmp	r3, #0
 800de08:	bf0c      	ite	eq
 800de0a:	2301      	moveq	r3, #1
 800de0c:	2300      	movne	r3, #0
 800de0e:	b2db      	uxtb	r3, r3
 800de10:	2b00      	cmp	r3, #0
 800de12:	d030      	beq.n	800de76 <_Z23getFont_verdana_40_4bppv+0x82>
 800de14:	481a      	ldr	r0, [pc, #104]	; (800de80 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800de16:	f013 fe56 	bl	8021ac6 <__cxa_guard_acquire>
 800de1a:	4603      	mov	r3, r0
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	bf14      	ite	ne
 800de20:	2301      	movne	r3, #1
 800de22:	2300      	moveq	r3, #0
 800de24:	b2db      	uxtb	r3, r3
 800de26:	2b00      	cmp	r3, #0
 800de28:	d025      	beq.n	800de76 <_Z23getFont_verdana_40_4bppv+0x82>
 800de2a:	2300      	movs	r3, #0
 800de2c:	930c      	str	r3, [sp, #48]	; 0x30
 800de2e:	2300      	movs	r3, #0
 800de30:	930b      	str	r3, [sp, #44]	; 0x2c
 800de32:	2300      	movs	r3, #0
 800de34:	930a      	str	r3, [sp, #40]	; 0x28
 800de36:	233f      	movs	r3, #63	; 0x3f
 800de38:	9309      	str	r3, [sp, #36]	; 0x24
 800de3a:	4b12      	ldr	r3, [pc, #72]	; (800de84 <_Z23getFont_verdana_40_4bppv+0x90>)
 800de3c:	9308      	str	r3, [sp, #32]
 800de3e:	4b12      	ldr	r3, [pc, #72]	; (800de88 <_Z23getFont_verdana_40_4bppv+0x94>)
 800de40:	9307      	str	r3, [sp, #28]
 800de42:	2300      	movs	r3, #0
 800de44:	9306      	str	r3, [sp, #24]
 800de46:	2300      	movs	r3, #0
 800de48:	9305      	str	r3, [sp, #20]
 800de4a:	2301      	movs	r3, #1
 800de4c:	9304      	str	r3, [sp, #16]
 800de4e:	2304      	movs	r3, #4
 800de50:	9303      	str	r3, [sp, #12]
 800de52:	2300      	movs	r3, #0
 800de54:	9302      	str	r3, [sp, #8]
 800de56:	2300      	movs	r3, #0
 800de58:	9301      	str	r3, [sp, #4]
 800de5a:	2328      	movs	r3, #40	; 0x28
 800de5c:	9300      	str	r3, [sp, #0]
 800de5e:	2328      	movs	r3, #40	; 0x28
 800de60:	2201      	movs	r2, #1
 800de62:	490a      	ldr	r1, [pc, #40]	; (800de8c <_Z23getFont_verdana_40_4bppv+0x98>)
 800de64:	480a      	ldr	r0, [pc, #40]	; (800de90 <_Z23getFont_verdana_40_4bppv+0x9c>)
 800de66:	f7ff fe69 	bl	800db3c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800de6a:	480a      	ldr	r0, [pc, #40]	; (800de94 <_Z23getFont_verdana_40_4bppv+0xa0>)
 800de6c:	f013 fe74 	bl	8021b58 <atexit>
 800de70:	4803      	ldr	r0, [pc, #12]	; (800de80 <_Z23getFont_verdana_40_4bppv+0x8c>)
 800de72:	f013 fe34 	bl	8021ade <__cxa_guard_release>
    return verdana_40_4bpp;
 800de76:	4b06      	ldr	r3, [pc, #24]	; (800de90 <_Z23getFont_verdana_40_4bppv+0x9c>)
}
 800de78:	4618      	mov	r0, r3
 800de7a:	46bd      	mov	sp, r7
 800de7c:	bd80      	pop	{r7, pc}
 800de7e:	bf00      	nop
 800de80:	2001fa8c 	.word	0x2001fa8c
 800de84:	08024998 	.word	0x08024998
 800de88:	080249a4 	.word	0x080249a4
 800de8c:	08024980 	.word	0x08024980
 800de90:	2001fa60 	.word	0x2001fa60
 800de94:	0800dde5 	.word	0x0800dde5

0800de98 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800de98:	b480      	push	{r7}
 800de9a:	b083      	sub	sp, #12
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	6039      	str	r1, [r7, #0]
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	4618      	mov	r0, r3
 800dea6:	370c      	adds	r7, #12
 800dea8:	46bd      	mov	sp, r7
 800deaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deae:	4770      	bx	lr

0800deb0 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     * This handler is invoked when a mouse click or display touch event has been detected
     * by the system.
     *
     * @param  event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800deb0:	b480      	push	{r7}
 800deb2:	b083      	sub	sp, #12
 800deb4:	af00      	add	r7, sp, #0
 800deb6:	6078      	str	r0, [r7, #4]
 800deb8:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800deba:	bf00      	nop
 800debc:	370c      	adds	r7, #12
 800debe:	46bd      	mov	sp, r7
 800dec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dec4:	4770      	bx	lr

0800dec6 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
    /**
     * This handler is invoked when a drag event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800dec6:	b480      	push	{r7}
 800dec8:	b083      	sub	sp, #12
 800deca:	af00      	add	r7, sp, #0
 800decc:	6078      	str	r0, [r7, #4]
 800dece:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800ded0:	bf00      	nop
 800ded2:	370c      	adds	r7, #12
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr

0800dedc <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
    /**
     * This handler is invoked when a gesture event has been detected by the system.
     *
     * @param  event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800dedc:	b480      	push	{r7}
 800dede:	b083      	sub	sp, #12
 800dee0:	af00      	add	r7, sp, #0
 800dee2:	6078      	str	r0, [r7, #4]
 800dee4:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800dee6:	bf00      	nop
 800dee8:	370c      	adds	r7, #12
 800deea:	46bd      	mov	sp, r7
 800deec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800def0:	4770      	bx	lr

0800def2 <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
    /**
     * This handler is invoked when a key (or button) event has been detected by the system.
     *
     * @param  c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 800def2:	b480      	push	{r7}
 800def4:	b083      	sub	sp, #12
 800def6:	af00      	add	r7, sp, #0
 800def8:	6078      	str	r0, [r7, #4]
 800defa:	460b      	mov	r3, r1
 800defc:	70fb      	strb	r3, [r7, #3]
    {
        (void)c; // Unused variable
    }
 800defe:	bf00      	nop
 800df00:	370c      	adds	r7, #12
 800df02:	46bd      	mov	sp, r7
 800df04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df08:	4770      	bx	lr

0800df0a <_ZN8touchgfx15UIEventListener15handleTickEventEv>:

    /**
     * This handler is invoked when a system tick event has been generated. The system tick
     * period is configured in the HAL.
     */
    virtual void handleTickEvent()
 800df0a:	b480      	push	{r7}
 800df0c:	b083      	sub	sp, #12
 800df0e:	af00      	add	r7, sp, #0
 800df10:	6078      	str	r0, [r7, #4]
    {
    }
 800df12:	bf00      	nop
 800df14:	370c      	adds	r7, #12
 800df16:	46bd      	mov	sp, r7
 800df18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1c:	4770      	bx	lr

0800df1e <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:

    /** This handler is invoked when a change screen event is pending. */
    virtual void handlePendingScreenTransition()
 800df1e:	b480      	push	{r7}
 800df20:	b083      	sub	sp, #12
 800df22:	af00      	add	r7, sp, #0
 800df24:	6078      	str	r0, [r7, #4]
    {
    }
 800df26:	bf00      	nop
 800df28:	370c      	adds	r7, #12
 800df2a:	46bd      	mov	sp, r7
 800df2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df30:	4770      	bx	lr
	...

0800df34 <_ZN8touchgfx15UIEventListenerD1Ev>:

    /** Finalizes an instance of the UIEventListener class. */
    virtual ~UIEventListener()
 800df34:	b480      	push	{r7}
 800df36:	b083      	sub	sp, #12
 800df38:	af00      	add	r7, sp, #0
 800df3a:	6078      	str	r0, [r7, #4]
    {
 800df3c:	4a04      	ldr	r2, [pc, #16]	; (800df50 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	601a      	str	r2, [r3, #0]
    }
 800df42:	687b      	ldr	r3, [r7, #4]
 800df44:	4618      	mov	r0, r3
 800df46:	370c      	adds	r7, #12
 800df48:	46bd      	mov	sp, r7
 800df4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4e:	4770      	bx	lr
 800df50:	08023928 	.word	0x08023928

0800df54 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 800df54:	b580      	push	{r7, lr}
 800df56:	b082      	sub	sp, #8
 800df58:	af00      	add	r7, sp, #0
 800df5a:	6078      	str	r0, [r7, #4]
    }
 800df5c:	6878      	ldr	r0, [r7, #4]
 800df5e:	f7ff ffe9 	bl	800df34 <_ZN8touchgfx15UIEventListenerD1Ev>
 800df62:	2104      	movs	r1, #4
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f013 fdac 	bl	8021ac2 <_ZdlPvj>
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	4618      	mov	r0, r3
 800df6e:	3708      	adds	r7, #8
 800df70:	46bd      	mov	sp, r7
 800df72:	bd80      	pop	{r7, pc}

0800df74 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     * @note The application will not make a complete restart - if
     *       your Model contains data, this will not be reset, unless
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
 800df74:	b480      	push	{r7}
 800df76:	b083      	sub	sp, #12
 800df78:	af00      	add	r7, sp, #0
 800df7a:	6078      	str	r0, [r7, #4]
    {
    }
 800df7c:	bf00      	nop
 800df7e:	370c      	adds	r7, #12
 800df80:	46bd      	mov	sp, r7
 800df82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df86:	4770      	bx	lr

0800df88 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * means to switch screen from places that does not have access to a pointer to the new
     * screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 800df88:	b480      	push	{r7}
 800df8a:	b083      	sub	sp, #12
 800df8c:	af00      	add	r7, sp, #0
 800df8e:	6078      	str	r0, [r7, #4]
 800df90:	460b      	mov	r3, r1
 800df92:	70fb      	strb	r3, [r7, #3]
    {
        (void)screenId; // Unused variable
    }
 800df94:	bf00      	nop
 800df96:	370c      	adds	r7, #12
 800df98:	46bd      	mov	sp, r7
 800df9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9e:	4770      	bx	lr

0800dfa0 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
    /**
     * An application specific function for requesting redraw of given Rect.
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
 800dfa0:	b480      	push	{r7}
 800dfa2:	b083      	sub	sp, #12
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
 800dfa8:	6039      	str	r1, [r7, #0]
    {
        redraw = rect;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	683a      	ldr	r2, [r7, #0]
 800dfae:	f503 7398 	add.w	r3, r3, #304	; 0x130
 800dfb2:	6810      	ldr	r0, [r2, #0]
 800dfb4:	6851      	ldr	r1, [r2, #4]
 800dfb6:	c303      	stmia	r3!, {r0, r1}
    }
 800dfb8:	bf00      	nop
 800dfba:	370c      	adds	r7, #12
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc2:	4770      	bx	lr

0800dfc4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
        timerWidgets.add(w);
    }

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b082      	sub	sp, #8
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
    {
        timerWidgets.clear();
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	3304      	adds	r3, #4
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f005 fbaa 	bl	801372a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    }
 800dfd6:	bf00      	nop
 800dfd8:	3708      	adds	r7, #8
 800dfda:	46bd      	mov	sp, r7
 800dfdc:	bd80      	pop	{r7, pc}
	...

0800dfe0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
template <>
class GenericCallback<void>
{
public:
    /** Finalizes an instance of the GenericCallback<void> class. */
    virtual ~GenericCallback()
 800dfe0:	b480      	push	{r7}
 800dfe2:	b083      	sub	sp, #12
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	6078      	str	r0, [r7, #4]
    {
 800dfe8:	4a04      	ldr	r2, [pc, #16]	; (800dffc <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	601a      	str	r2, [r3, #0]
    }
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	4618      	mov	r0, r3
 800dff2:	370c      	adds	r7, #12
 800dff4:	46bd      	mov	sp, r7
 800dff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffa:	4770      	bx	lr
 800dffc:	08023910 	.word	0x08023910

0800e000 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 800e000:	b580      	push	{r7, lr}
 800e002:	b082      	sub	sp, #8
 800e004:	af00      	add	r7, sp, #0
 800e006:	6078      	str	r0, [r7, #4]
    }
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f7ff ffe9 	bl	800dfe0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800e00e:	2104      	movs	r1, #4
 800e010:	6878      	ldr	r0, [r7, #4]
 800e012:	f013 fd56 	bl	8021ac2 <_ZdlPvj>
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	4618      	mov	r0, r3
 800e01a:	3708      	adds	r7, #8
 800e01c:	46bd      	mov	sp, r7
 800e01e:	bd80      	pop	{r7, pc}

0800e020 <_ZN8touchgfx3HAL11getInstanceEv>:
    /**
     * Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800e020:	b480      	push	{r7}
 800e022:	af00      	add	r7, sp, #0
    {
        return instance;
 800e024:	4b03      	ldr	r3, [pc, #12]	; (800e034 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800e026:	681b      	ldr	r3, [r3, #0]
    }
 800e028:	4618      	mov	r0, r3
 800e02a:	46bd      	mov	sp, r7
 800e02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e030:	4770      	bx	lr
 800e032:	bf00      	nop
 800e034:	2001fe88 	.word	0x2001fe88

0800e038 <_ZN8touchgfx3HAL3lcdEv>:
    /**
     * Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800e038:	b480      	push	{r7}
 800e03a:	af00      	add	r7, sp, #0
    {
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800e03c:	4b0b      	ldr	r3, [pc, #44]	; (800e06c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800e044:	2b00      	cmp	r3, #0
 800e046:	d008      	beq.n	800e05a <_ZN8touchgfx3HAL3lcdEv+0x22>
 800e048:	4b08      	ldr	r3, [pc, #32]	; (800e06c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d003      	beq.n	800e05a <_ZN8touchgfx3HAL3lcdEv+0x22>
        {
            return *instance->auxiliaryLCD;
 800e052:	4b06      	ldr	r3, [pc, #24]	; (800e06c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e058:	e002      	b.n	800e060 <_ZN8touchgfx3HAL3lcdEv+0x28>
        }
        return instance->lcdRef;
 800e05a:	4b04      	ldr	r3, [pc, #16]	; (800e06c <_ZN8touchgfx3HAL3lcdEv+0x34>)
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	689b      	ldr	r3, [r3, #8]
    }
 800e060:	4618      	mov	r0, r3
 800e062:	46bd      	mov	sp, r7
 800e064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e068:	4770      	bx	lr
 800e06a:	bf00      	nop
 800e06c:	2001fe88 	.word	0x2001fe88

0800e070 <_ZN8touchgfx10TransitionC1Ev>:
 */
class Transition
{
public:
    /** Initializes a new instance of the Transition class. */
    Transition()
 800e070:	b480      	push	{r7}
 800e072:	b083      	sub	sp, #12
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
        : screenContainer(0), done(false)
 800e078:	4a07      	ldr	r2, [pc, #28]	; (800e098 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	601a      	str	r2, [r3, #0]
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	2200      	movs	r2, #0
 800e082:	605a      	str	r2, [r3, #4]
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2200      	movs	r2, #0
 800e088:	721a      	strb	r2, [r3, #8]
    {
    }
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	4618      	mov	r0, r3
 800e08e:	370c      	adds	r7, #12
 800e090:	46bd      	mov	sp, r7
 800e092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e096:	4770      	bx	lr
 800e098:	080238ec 	.word	0x080238ec

0800e09c <_ZN8touchgfx10TransitionD1Ev>:

    /** Finalizes an instance of the Transition class. */
    virtual ~Transition()
 800e09c:	b480      	push	{r7}
 800e09e:	b083      	sub	sp, #12
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
    {
 800e0a4:	4a04      	ldr	r2, [pc, #16]	; (800e0b8 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	601a      	str	r2, [r3, #0]
    }
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	4618      	mov	r0, r3
 800e0ae:	370c      	adds	r7, #12
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0b6:	4770      	bx	lr
 800e0b8:	080238ec 	.word	0x080238ec

0800e0bc <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b082      	sub	sp, #8
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	6078      	str	r0, [r7, #4]
    }
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f7ff ffe9 	bl	800e09c <_ZN8touchgfx10TransitionD1Ev>
 800e0ca:	210c      	movs	r1, #12
 800e0cc:	6878      	ldr	r0, [r7, #4]
 800e0ce:	f013 fcf8 	bl	8021ac2 <_ZdlPvj>
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	3708      	adds	r7, #8
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}

0800e0dc <_ZN8touchgfx10Transition15handleTickEventEv>:

    /** Called for every tick when transitioning. */
    virtual void handleTickEvent()
 800e0dc:	b480      	push	{r7}
 800e0de:	b083      	sub	sp, #12
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
    {
    }
 800e0e4:	bf00      	nop
 800e0e6:	370c      	adds	r7, #12
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0ee:	4770      	bx	lr

0800e0f0 <_ZN8touchgfx10Transition8tearDownEv>:

    /**
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
 800e0f0:	b480      	push	{r7}
 800e0f2:	b083      	sub	sp, #12
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]
    {
    }
 800e0f8:	bf00      	nop
 800e0fa:	370c      	adds	r7, #12
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e102:	4770      	bx	lr

0800e104 <_ZN8touchgfx10Transition4initEv>:

    /**
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
 800e104:	b480      	push	{r7}
 800e106:	b083      	sub	sp, #12
 800e108:	af00      	add	r7, sp, #0
 800e10a:	6078      	str	r0, [r7, #4]
    {
    }
 800e10c:	bf00      	nop
 800e10e:	370c      	adds	r7, #12
 800e110:	46bd      	mov	sp, r7
 800e112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e116:	4770      	bx	lr

0800e118 <_ZN8touchgfx10Transition10invalidateEv>:
    /**
     * Invalidates the screen when starting the Transition. Default is
     * to invalidate the whole screen. Subclasses can do partial
     * invalidation.
     */
    virtual void invalidate()
 800e118:	b580      	push	{r7, lr}
 800e11a:	b082      	sub	sp, #8
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
    {
        Application::getInstance()->invalidate();
 800e120:	f005 fade 	bl	80136e0 <_ZN8touchgfx11Application11getInstanceEv>
 800e124:	4603      	mov	r3, r0
 800e126:	4618      	mov	r0, r3
 800e128:	f005 ff22 	bl	8013f70 <_ZN8touchgfx11Application10invalidateEv>
    }
 800e12c:	bf00      	nop
 800e12e:	3708      	adds	r7, #8
 800e130:	46bd      	mov	sp, r7
 800e132:	bd80      	pop	{r7, pc}

0800e134 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     * Sets the Screen Container. Is used by Screen to enable the transition to access the
     * Container.
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 800e134:	b480      	push	{r7}
 800e136:	b083      	sub	sp, #12
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
 800e13c:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	683a      	ldr	r2, [r7, #0]
 800e142:	605a      	str	r2, [r3, #4]
    }
 800e144:	bf00      	nop
 800e146:	370c      	adds	r7, #12
 800e148:	46bd      	mov	sp, r7
 800e14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e14e:	4770      	bx	lr

0800e150 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 800e150:	b580      	push	{r7, lr}
 800e152:	b082      	sub	sp, #8
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
 800e158:	4a05      	ldr	r2, [pc, #20]	; (800e170 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	601a      	str	r2, [r3, #0]
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	4618      	mov	r0, r3
 800e162:	f7ff fee7 	bl	800df34 <_ZN8touchgfx15UIEventListenerD1Ev>
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	4618      	mov	r0, r3
 800e16a:	3708      	adds	r7, #8
 800e16c:	46bd      	mov	sp, r7
 800e16e:	bd80      	pop	{r7, pc}
 800e170:	0802430c 	.word	0x0802430c

0800e174 <_ZN8touchgfx11ApplicationD0Ev>:
 800e174:	b580      	push	{r7, lr}
 800e176:	b082      	sub	sp, #8
 800e178:	af00      	add	r7, sp, #0
 800e17a:	6078      	str	r0, [r7, #4]
 800e17c:	6878      	ldr	r0, [r7, #4]
 800e17e:	f7ff ffe7 	bl	800e150 <_ZN8touchgfx11ApplicationD1Ev>
 800e182:	f44f 719e 	mov.w	r1, #316	; 0x13c
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f013 fc9b 	bl	8021ac2 <_ZdlPvj>
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	4618      	mov	r0, r3
 800e190:	3708      	adds	r7, #8
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}
	...

0800e198 <_ZN8touchgfx14MVPApplicationC1Ev>:
 */
class MVPApplication : public Application
{
public:
    /** Initializes a new instance of the MVPApplication class. */
    MVPApplication()
 800e198:	b580      	push	{r7, lr}
 800e19a:	b082      	sub	sp, #8
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
        : currentPresenter(0),
          pendingScreenTransitionCallback(0)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	f005 fb5e 	bl	8013864 <_ZN8touchgfx11ApplicationC1Ev>
 800e1a8:	4a09      	ldr	r2, [pc, #36]	; (800e1d0 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	601a      	str	r2, [r3, #0]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	2200      	movs	r2, #0
 800e1b2:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
 800e1b6:	687b      	ldr	r3, [r7, #4]
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    {
        instance = this;
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	4a04      	ldr	r2, [pc, #16]	; (800e1d4 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 800e1c2:	6013      	str	r3, [r2, #0]
    }
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	4618      	mov	r0, r3
 800e1c8:	3708      	adds	r7, #8
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}
 800e1ce:	bf00      	nop
 800e1d0:	080238a0 	.word	0x080238a0
 800e1d4:	2001fed4 	.word	0x2001fed4

0800e1d8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 800e1d8:	b580      	push	{r7, lr}
 800e1da:	b082      	sub	sp, #8
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 800e1e0:	6878      	ldr	r0, [r7, #4]
 800e1e2:	f000 f804 	bl	800e1ee <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 800e1e6:	bf00      	nop
 800e1e8:	3708      	adds	r7, #8
 800e1ea:	46bd      	mov	sp, r7
 800e1ec:	bd80      	pop	{r7, pc}

0800e1ee <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:

    /**
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 800e1ee:	b580      	push	{r7, lr}
 800e1f0:	b082      	sub	sp, #8
 800e1f2:	af00      	add	r7, sp, #0
 800e1f4:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 800e1f6:	687b      	ldr	r3, [r7, #4]
 800e1f8:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800e1fc:	2b00      	cmp	r3, #0
 800e1fe:	d00f      	beq.n	800e220 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	330c      	adds	r3, #12
 800e210:	681b      	ldr	r3, [r3, #0]
 800e212:	4610      	mov	r0, r2
 800e214:	4798      	blx	r3
 800e216:	4603      	mov	r3, r0
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d001      	beq.n	800e220 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 800e21c:	2301      	movs	r3, #1
 800e21e:	e000      	b.n	800e222 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 800e220:	2300      	movs	r3, #0
 800e222:	2b00      	cmp	r3, #0
 800e224:	d00e      	beq.n	800e244 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	3308      	adds	r3, #8
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	4610      	mov	r0, r2
 800e23a:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	2200      	movs	r2, #0
 800e240:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
        }
    }
 800e244:	bf00      	nop
 800e246:	3708      	adds	r7, #8
 800e248:	46bd      	mov	sp, r7
 800e24a:	bd80      	pop	{r7, pc}

0800e24c <_ZN5Model4bindEP13ModelListener>:
class Model
{
public:
    Model();

    void bind(ModelListener* listener)
 800e24c:	b480      	push	{r7}
 800e24e:	b083      	sub	sp, #12
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	683a      	ldr	r2, [r7, #0]
 800e25a:	601a      	str	r2, [r3, #0]
    }
 800e25c:	bf00      	nop
 800e25e:	370c      	adds	r7, #12
 800e260:	46bd      	mov	sp, r7
 800e262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e266:	4770      	bx	lr

0800e268 <_ZN8touchgfx14MVPApplicationD1Ev>:
class MVPApplication : public Application
 800e268:	b580      	push	{r7, lr}
 800e26a:	b082      	sub	sp, #8
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
 800e270:	4a05      	ldr	r2, [pc, #20]	; (800e288 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	601a      	str	r2, [r3, #0]
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	4618      	mov	r0, r3
 800e27a:	f7ff ff69 	bl	800e150 <_ZN8touchgfx11ApplicationD1Ev>
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	4618      	mov	r0, r3
 800e282:	3708      	adds	r7, #8
 800e284:	46bd      	mov	sp, r7
 800e286:	bd80      	pop	{r7, pc}
 800e288:	080238a0 	.word	0x080238a0

0800e28c <_ZN8touchgfx14MVPApplicationD0Ev>:
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b082      	sub	sp, #8
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f7ff ffe7 	bl	800e268 <_ZN8touchgfx14MVPApplicationD1Ev>
 800e29a:	f44f 71a2 	mov.w	r1, #324	; 0x144
 800e29e:	6878      	ldr	r0, [r7, #4]
 800e2a0:	f013 fc0f 	bl	8021ac2 <_ZdlPvj>
 800e2a4:	687b      	ldr	r3, [r7, #4]
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	3708      	adds	r7, #8
 800e2aa:	46bd      	mov	sp, r7
 800e2ac:	bd80      	pop	{r7, pc}
	...

0800e2b0 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 800e2b0:	b580      	push	{r7, lr}
 800e2b2:	b082      	sub	sp, #8
 800e2b4:	af00      	add	r7, sp, #0
 800e2b6:	6078      	str	r0, [r7, #4]
 800e2b8:	4a08      	ldr	r2, [pc, #32]	; (800e2dc <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	601a      	str	r2, [r3, #0]
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	f000 fac5 	bl	800e854 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	4618      	mov	r0, r3
 800e2ce:	f7ff ffcb 	bl	800e268 <_ZN8touchgfx14MVPApplicationD1Ev>
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	3708      	adds	r7, #8
 800e2d8:	46bd      	mov	sp, r7
 800e2da:	bd80      	pop	{r7, pc}
 800e2dc:	0802383c 	.word	0x0802383c

0800e2e0 <_ZN23FrontendApplicationBaseD0Ev>:
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b082      	sub	sp, #8
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	6878      	ldr	r0, [r7, #4]
 800e2ea:	f7ff ffe1 	bl	800e2b0 <_ZN23FrontendApplicationBaseD1Ev>
 800e2ee:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f013 fbe5 	bl	8021ac2 <_ZdlPvj>
 800e2f8:	687b      	ldr	r3, [r7, #4]
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3708      	adds	r7, #8
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}

0800e302 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:

    virtual void changeToStartScreen()
 800e302:	b580      	push	{r7, lr}
 800e304:	b082      	sub	sp, #8
 800e306:	af00      	add	r7, sp, #0
 800e308:	6078      	str	r0, [r7, #4]
    {
        gotoScreen1ScreenNoTransition();
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f000 f87a 	bl	800e404 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 800e310:	bf00      	nop
 800e312:	3708      	adds	r7, #8
 800e314:	46bd      	mov	sp, r7
 800e316:	bd80      	pop	{r7, pc}

0800e318 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
 */
class NoTransition : public Transition
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
 800e318:	b480      	push	{r7}
 800e31a:	b083      	sub	sp, #12
 800e31c:	af00      	add	r7, sp, #0
 800e31e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2201      	movs	r2, #1
 800e324:	721a      	strb	r2, [r3, #8]
    }
 800e326:	bf00      	nop
 800e328:	370c      	adds	r7, #12
 800e32a:	46bd      	mov	sp, r7
 800e32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e330:	4770      	bx	lr

0800e332 <_ZN13ModelListener4bindEP5Model>:
public:
    ModelListener() : model(0) {}
    
    virtual ~ModelListener() {}

    void bind(Model* m)
 800e332:	b480      	push	{r7}
 800e334:	b083      	sub	sp, #12
 800e336:	af00      	add	r7, sp, #0
 800e338:	6078      	str	r0, [r7, #4]
 800e33a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	683a      	ldr	r2, [r7, #0]
 800e340:	605a      	str	r2, [r3, #4]
    }
 800e342:	bf00      	nop
 800e344:	370c      	adds	r7, #12
 800e346:	46bd      	mov	sp, r7
 800e348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34c:	4770      	bx	lr
	...

0800e350 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

using namespace touchgfx;

FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 800e350:	b580      	push	{r7, lr}
 800e352:	b084      	sub	sp, #16
 800e354:	af00      	add	r7, sp, #0
 800e356:	60f8      	str	r0, [r7, #12]
 800e358:	60b9      	str	r1, [r7, #8]
 800e35a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	4618      	mov	r0, r3
 800e360:	f7ff ff1a 	bl	800e198 <_ZN8touchgfx14MVPApplicationC1Ev>
 800e364:	4a12      	ldr	r2, [pc, #72]	; (800e3b0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	601a      	str	r2, [r3, #0]
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800e370:	4618      	mov	r0, r3
 800e372:	f000 f89d 	bl	800e4b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 800e376:	68fb      	ldr	r3, [r7, #12]
 800e378:	687a      	ldr	r2, [r7, #4]
 800e37a:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	68ba      	ldr	r2, [r7, #8]
 800e382:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
{
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800e386:	f7ff fe4b 	bl	800e020 <_ZN8touchgfx3HAL11getInstanceEv>
 800e38a:	4603      	mov	r3, r0
 800e38c:	681a      	ldr	r2, [r3, #0]
 800e38e:	3208      	adds	r2, #8
 800e390:	6812      	ldr	r2, [r2, #0]
 800e392:	2100      	movs	r1, #0
 800e394:	4618      	mov	r0, r3
 800e396:	4790      	blx	r2
    reinterpret_cast<touchgfx::LCD16bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800e398:	f7ff fe4e 	bl	800e038 <_ZN8touchgfx3HAL3lcdEv>
 800e39c:	4603      	mov	r3, r0
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f00c fc93 	bl	801acca <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>
}
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	4618      	mov	r0, r3
 800e3a8:	3710      	adds	r7, #16
 800e3aa:	46bd      	mov	sp, r7
 800e3ac:	bd80      	pop	{r7, pc}
 800e3ae:	bf00      	nop
 800e3b0:	0802383c 	.word	0x0802383c

0800e3b4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 800e3b4:	b480      	push	{r7}
 800e3b6:	b083      	sub	sp, #12
 800e3b8:	af00      	add	r7, sp, #0
 800e3ba:	6078      	str	r0, [r7, #4]
 800e3bc:	6039      	str	r1, [r7, #0]
 800e3be:	687b      	ldr	r3, [r7, #4]
 800e3c0:	4618      	mov	r0, r3
 800e3c2:	370c      	adds	r7, #12
 800e3c4:	46bd      	mov	sp, r7
 800e3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ca:	4770      	bx	lr

0800e3cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800e3cc:	b580      	push	{r7, lr}
 800e3ce:	b082      	sub	sp, #8
 800e3d0:	af00      	add	r7, sp, #0
 800e3d2:	6078      	str	r0, [r7, #4]
 800e3d4:	6039      	str	r1, [r7, #0]
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	683a      	ldr	r2, [r7, #0]
 800e3da:	4611      	mov	r1, r2
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f7ff ffe9 	bl	800e3b4 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	685a      	ldr	r2, [r3, #4]
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	605a      	str	r2, [r3, #4]
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	683a      	ldr	r2, [r7, #0]
 800e3ee:	3308      	adds	r3, #8
 800e3f0:	3208      	adds	r2, #8
 800e3f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e3f6:	e883 0003 	stmia.w	r3, {r0, r1}
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	4618      	mov	r0, r3
 800e3fe:	3708      	adds	r7, #8
 800e400:	46bd      	mov	sp, r7
 800e402:	bd80      	pop	{r7, pc}

0800e404 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 */

// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 800e404:	b590      	push	{r4, r7, lr}
 800e406:	b089      	sub	sp, #36	; 0x24
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f503 74a2 	add.w	r4, r3, #324	; 0x144
 800e412:	4b10      	ldr	r3, [pc, #64]	; (800e454 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 800e414:	61bb      	str	r3, [r7, #24]
 800e416:	2300      	movs	r3, #0
 800e418:	61fb      	str	r3, [r7, #28]
 800e41a:	f107 0008 	add.w	r0, r7, #8
 800e41e:	f107 0318 	add.w	r3, r7, #24
 800e422:	cb0c      	ldmia	r3, {r2, r3}
 800e424:	6879      	ldr	r1, [r7, #4]
 800e426:	f000 f85f 	bl	800e4e8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 800e42a:	f107 0308 	add.w	r3, r7, #8
 800e42e:	4619      	mov	r1, r3
 800e430:	4620      	mov	r0, r4
 800e432:	f7ff ffcb 	bl	800e3cc <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 800e436:	f107 0308 	add.w	r3, r7, #8
 800e43a:	4618      	mov	r0, r3
 800e43c:	f000 fa0a 	bl	800e854 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f503 72a2 	add.w	r2, r3, #324	; 0x144
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
}
 800e44c:	bf00      	nop
 800e44e:	3724      	adds	r7, #36	; 0x24
 800e450:	46bd      	mov	sp, r7
 800e452:	bd90      	pop	{r4, r7, pc}
 800e454:	0800e459 	.word	0x0800e459

0800e458 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b084      	sub	sp, #16
 800e45c:	af02      	add	r7, sp, #8
 800e45e:	6078      	str	r0, [r7, #4]
    touchgfx::makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	f503 719e 	add.w	r1, r3, #316	; 0x13c
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800e46c:	461a      	mov	r2, r3
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800e474:	9300      	str	r3, [sp, #0]
 800e476:	4b04      	ldr	r3, [pc, #16]	; (800e488 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 800e478:	4804      	ldr	r0, [pc, #16]	; (800e48c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 800e47a:	f000 f867 	bl	800e54c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 800e47e:	bf00      	nop
 800e480:	3708      	adds	r7, #8
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}
 800e486:	bf00      	nop
 800e488:	2001fec8 	.word	0x2001fec8
 800e48c:	2001fec4 	.word	0x2001fec4

0800e490 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 800e490:	b480      	push	{r7}
 800e492:	b083      	sub	sp, #12
 800e494:	af00      	add	r7, sp, #0
 800e496:	6078      	str	r0, [r7, #4]
 800e498:	4a04      	ldr	r2, [pc, #16]	; (800e4ac <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	601a      	str	r2, [r3, #0]
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	4618      	mov	r0, r3
 800e4a2:	370c      	adds	r7, #12
 800e4a4:	46bd      	mov	sp, r7
 800e4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4aa:	4770      	bx	lr
 800e4ac:	08023910 	.word	0x08023910

0800e4b0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
{
    /** Initializes a new instance of the Callback class. */
    Callback()
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b082      	sub	sp, #8
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
        : pobject(0), pmemfun(0)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	4618      	mov	r0, r3
 800e4bc:	f7ff ffe8 	bl	800e490 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800e4c0:	4a08      	ldr	r2, [pc, #32]	; (800e4e4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	601a      	str	r2, [r3, #0]
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	605a      	str	r2, [r3, #4]
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	2200      	movs	r2, #0
 800e4d0:	609a      	str	r2, [r3, #8]
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	60da      	str	r2, [r3, #12]
    {
    }
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	4618      	mov	r0, r3
 800e4dc:	3708      	adds	r7, #8
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	bd80      	pop	{r7, pc}
 800e4e2:	bf00      	nop
 800e4e4:	08023888 	.word	0x08023888

0800e4e8 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
     *
     * @param [in] pObject   Pointer to the object on which the function should be called.
     * @param [in] pmemfun_0 Address of member function. This is the version where function takes zero
     *                       arguments.
     */
    Callback(dest_type* pObject, void (dest_type::*pmemfun_0)())
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b084      	sub	sp, #16
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	60f8      	str	r0, [r7, #12]
 800e4f0:	60b9      	str	r1, [r7, #8]
 800e4f2:	4639      	mov	r1, r7
 800e4f4:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_0)
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	4618      	mov	r0, r3
 800e4fc:	f7ff ffc8 	bl	800e490 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 800e500:	4a08      	ldr	r2, [pc, #32]	; (800e524 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	601a      	str	r2, [r3, #0]
 800e506:	68fb      	ldr	r3, [r7, #12]
 800e508:	68ba      	ldr	r2, [r7, #8]
 800e50a:	605a      	str	r2, [r3, #4]
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	3308      	adds	r3, #8
 800e510:	463a      	mov	r2, r7
 800e512:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e516:	e883 0003 	stmia.w	r3, {r0, r1}
    {
    }
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	4618      	mov	r0, r3
 800e51e:	3710      	adds	r7, #16
 800e520:	46bd      	mov	sp, r7
 800e522:	bd80      	pop	{r7, pc}
 800e524:	08023888 	.word	0x08023888

0800e528 <_ZN8touchgfx12NoTransitionC1Ev>:
class NoTransition : public Transition
 800e528:	b580      	push	{r7, lr}
 800e52a:	b082      	sub	sp, #8
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	4618      	mov	r0, r3
 800e534:	f7ff fd9c 	bl	800e070 <_ZN8touchgfx10TransitionC1Ev>
 800e538:	4a03      	ldr	r2, [pc, #12]	; (800e548 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	601a      	str	r2, [r3, #0]
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	4618      	mov	r0, r3
 800e542:	3708      	adds	r7, #8
 800e544:	46bd      	mov	sp, r7
 800e546:	bd80      	pop	{r7, pc}
 800e548:	08023818 	.word	0x08023818

0800e54c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 800e54c:	b590      	push	{r4, r7, lr}
 800e54e:	b08f      	sub	sp, #60	; 0x3c
 800e550:	af00      	add	r7, sp, #0
 800e552:	60f8      	str	r0, [r7, #12]
 800e554:	60b9      	str	r1, [r7, #8]
 800e556:	607a      	str	r2, [r7, #4]
 800e558:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	689a      	ldr	r2, [r3, #8]
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	689b      	ldr	r3, [r3, #8]
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	3320      	adds	r3, #32
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	4610      	mov	r0, r2
 800e56a:	4798      	blx	r3
 800e56c:	4603      	mov	r3, r0
 800e56e:	2bdb      	cmp	r3, #219	; 0xdb
 800e570:	d805      	bhi.n	800e57e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x32>
 800e572:	4b7e      	ldr	r3, [pc, #504]	; (800e76c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x220>)
 800e574:	4a7e      	ldr	r2, [pc, #504]	; (800e770 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800e576:	21a3      	movs	r1, #163	; 0xa3
 800e578:	487e      	ldr	r0, [pc, #504]	; (800e774 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e57a:	f013 facf 	bl	8021b1c <__assert_func>
 800e57e:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	685a      	ldr	r2, [r3, #4]
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	685b      	ldr	r3, [r3, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	3320      	adds	r3, #32
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	4610      	mov	r0, r2
 800e590:	4798      	blx	r3
 800e592:	4603      	mov	r3, r0
 800e594:	2b0f      	cmp	r3, #15
 800e596:	d805      	bhi.n	800e5a4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x58>
 800e598:	4b77      	ldr	r3, [pc, #476]	; (800e778 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x22c>)
 800e59a:	4a75      	ldr	r2, [pc, #468]	; (800e770 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800e59c:	21a4      	movs	r1, #164	; 0xa4
 800e59e:	4875      	ldr	r0, [pc, #468]	; (800e774 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e5a0:	f013 fabc 	bl	8021b1c <__assert_func>
 800e5a4:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	68da      	ldr	r2, [r3, #12]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	68db      	ldr	r3, [r3, #12]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	3320      	adds	r3, #32
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	4610      	mov	r0, r2
 800e5b6:	4798      	blx	r3
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	2b0b      	cmp	r3, #11
 800e5bc:	d805      	bhi.n	800e5ca <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x7e>
 800e5be:	4b6f      	ldr	r3, [pc, #444]	; (800e77c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x230>)
 800e5c0:	4a6b      	ldr	r2, [pc, #428]	; (800e770 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x224>)
 800e5c2:	21a5      	movs	r1, #165	; 0xa5
 800e5c4:	486b      	ldr	r0, [pc, #428]	; (800e774 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x228>)
 800e5c6:	f013 faa9 	bl	8021b1c <__assert_func>
 800e5ca:	bf00      	nop
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	62bb      	str	r3, [r7, #40]	; 0x28
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	627b      	str	r3, [r7, #36]	; 0x24
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	623b      	str	r3, [r7, #32]
    Application::getInstance()->clearAllTimerWidgets();
 800e5d8:	f005 f882 	bl	80136e0 <_ZN8touchgfx11Application11getInstanceEv>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	4618      	mov	r0, r3
 800e5e0:	f7ff fcf0 	bl	800dfc4 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
    if (*currentTrans)
 800e5e4:	6a3b      	ldr	r3, [r7, #32]
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d008      	beq.n	800e5fe <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
        (*currentTrans)->tearDown();
 800e5ec:	6a3b      	ldr	r3, [r7, #32]
 800e5ee:	681a      	ldr	r2, [r3, #0]
 800e5f0:	6a3b      	ldr	r3, [r7, #32]
 800e5f2:	681b      	ldr	r3, [r3, #0]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	330c      	adds	r3, #12
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	4610      	mov	r0, r2
 800e5fc:	4798      	blx	r3
    if (*currentTrans)
 800e5fe:	6a3b      	ldr	r3, [r7, #32]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d007      	beq.n	800e616 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xca>
        (*currentTrans)->~Transition();
 800e606:	6a3b      	ldr	r3, [r7, #32]
 800e608:	681a      	ldr	r2, [r3, #0]
 800e60a:	6a3b      	ldr	r3, [r7, #32]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	4610      	mov	r0, r2
 800e614:	4798      	blx	r3
    if (*currentScreen)
 800e616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d008      	beq.n	800e630 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe4>
        (*currentScreen)->tearDownScreen();
 800e61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e620:	681a      	ldr	r2, [r3, #0]
 800e622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e624:	681b      	ldr	r3, [r3, #0]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	3314      	adds	r3, #20
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	4610      	mov	r0, r2
 800e62e:	4798      	blx	r3
    if (*currentPresenter)
 800e630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d008      	beq.n	800e64a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xfe>
        (*currentPresenter)->deactivate();
 800e638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e63a:	681a      	ldr	r2, [r3, #0]
 800e63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e63e:	681b      	ldr	r3, [r3, #0]
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	3304      	adds	r3, #4
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	4610      	mov	r0, r2
 800e648:	4798      	blx	r3
    if (*currentScreen)
 800e64a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d007      	beq.n	800e662 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x116>
        (*currentScreen)->~Screen();
 800e652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e654:	681a      	ldr	r2, [r3, #0]
 800e656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	681b      	ldr	r3, [r3, #0]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	4610      	mov	r0, r2
 800e660:	4798      	blx	r3
    if (*currentPresenter)
 800e662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d008      	beq.n	800e67c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
        (*currentPresenter)->~Presenter();
 800e66a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e66c:	681a      	ldr	r2, [r3, #0]
 800e66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	681b      	ldr	r3, [r3, #0]
 800e674:	3308      	adds	r3, #8
 800e676:	681b      	ldr	r3, [r3, #0]
 800e678:	4610      	mov	r0, r2
 800e67a:	4798      	blx	r3
}
 800e67c:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	68db      	ldr	r3, [r3, #12]
 800e682:	2100      	movs	r1, #0
 800e684:	4618      	mov	r0, r3
 800e686:	f000 f87b 	bl	800e780 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 800e68a:	4603      	mov	r3, r0
 800e68c:	4619      	mov	r1, r3
 800e68e:	200c      	movs	r0, #12
 800e690:	f7ff fc02 	bl	800de98 <_ZnwjPv>
 800e694:	4604      	mov	r4, r0
 800e696:	4620      	mov	r0, r4
 800e698:	f7ff ff46 	bl	800e528 <_ZN8touchgfx12NoTransitionC1Ev>
 800e69c:	637c      	str	r4, [r7, #52]	; 0x34
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	689b      	ldr	r3, [r3, #8]
 800e6a2:	2100      	movs	r1, #0
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f000 f87e 	bl	800e7a6 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 800e6aa:	4603      	mov	r3, r0
 800e6ac:	4619      	mov	r1, r3
 800e6ae:	20dc      	movs	r0, #220	; 0xdc
 800e6b0:	f7ff fbf2 	bl	800de98 <_ZnwjPv>
 800e6b4:	4604      	mov	r4, r0
 800e6b6:	4620      	mov	r0, r4
 800e6b8:	f001 fa78 	bl	800fbac <_ZN11Screen1ViewC1Ev>
 800e6bc:	633c      	str	r4, [r7, #48]	; 0x30
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	685b      	ldr	r3, [r3, #4]
 800e6c2:	2100      	movs	r1, #0
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f000 f881 	bl	800e7cc <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 800e6ca:	4603      	mov	r3, r0
 800e6cc:	4619      	mov	r1, r3
 800e6ce:	2010      	movs	r0, #16
 800e6d0:	f7ff fbe2 	bl	800de98 <_ZnwjPv>
 800e6d4:	4604      	mov	r4, r0
 800e6d6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e6d8:	4620      	mov	r0, r4
 800e6da:	f001 fa11 	bl	800fb00 <_ZN16Screen1PresenterC1ER11Screen1View>
 800e6de:	62fc      	str	r4, [r7, #44]	; 0x2c
    *currentTrans = newTransition;
 800e6e0:	683b      	ldr	r3, [r7, #0]
 800e6e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e6e4:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 800e6e6:	68bb      	ldr	r3, [r7, #8]
 800e6e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e6ea:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6f0:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 800e6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d002      	beq.n	800e6fe <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b2>
 800e6f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6fa:	3304      	adds	r3, #4
 800e6fc:	e000      	b.n	800e700 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x1b4>
 800e6fe:	2300      	movs	r3, #0
 800e700:	4619      	mov	r1, r3
 800e702:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800e704:	f7ff fda2 	bl	800e24c <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 800e708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e70a:	3304      	adds	r3, #4
 800e70c:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e70e:	4618      	mov	r0, r3
 800e710:	f7ff fe0f 	bl	800e332 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 800e714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e716:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e718:	4618      	mov	r0, r3
 800e71a:	f000 f86a 	bl	800e7f2 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
 800e71e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e720:	61fb      	str	r3, [r7, #28]
 800e722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e724:	61bb      	str	r3, [r7, #24]
 800e726:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e728:	617b      	str	r3, [r7, #20]
    newScreen->setupScreen();
 800e72a:	69fb      	ldr	r3, [r7, #28]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	330c      	adds	r3, #12
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	69f8      	ldr	r0, [r7, #28]
 800e734:	4798      	blx	r3
    newPresenter->activate();
 800e736:	69bb      	ldr	r3, [r7, #24]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	681b      	ldr	r3, [r3, #0]
 800e73c:	69b8      	ldr	r0, [r7, #24]
 800e73e:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800e740:	6979      	ldr	r1, [r7, #20]
 800e742:	69f8      	ldr	r0, [r7, #28]
 800e744:	f006 fc5c 	bl	8015000 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 800e748:	697b      	ldr	r3, [r7, #20]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	3310      	adds	r3, #16
 800e74e:	681b      	ldr	r3, [r3, #0]
 800e750:	6978      	ldr	r0, [r7, #20]
 800e752:	4798      	blx	r3
    newTransition->invalidate();
 800e754:	697b      	ldr	r3, [r7, #20]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	3314      	adds	r3, #20
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	6978      	ldr	r0, [r7, #20]
 800e75e:	4798      	blx	r3
}
 800e760:	bf00      	nop

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);

    return newPresenter;
 800e762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800e764:	4618      	mov	r0, r3
 800e766:	373c      	adds	r7, #60	; 0x3c
 800e768:	46bd      	mov	sp, r7
 800e76a:	bd90      	pop	{r4, r7, pc}
 800e76c:	08022db0 	.word	0x08022db0
 800e770:	08022e40 	.word	0x08022e40
 800e774:	08022f44 	.word	0x08022f44
 800e778:	08022f88 	.word	0x08022f88
 800e77c:	0802302c 	.word	0x0802302c

0800e780 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param  index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
 800e780:	b580      	push	{r7, lr}
 800e782:	b082      	sub	sp, #8
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
 800e788:	460b      	mov	r3, r1
 800e78a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	3324      	adds	r3, #36	; 0x24
 800e792:	681b      	ldr	r3, [r3, #0]
 800e794:	887a      	ldrh	r2, [r7, #2]
 800e796:	4611      	mov	r1, r2
 800e798:	6878      	ldr	r0, [r7, #4]
 800e79a:	4798      	blx	r3
 800e79c:	4603      	mov	r3, r0
    }
 800e79e:	4618      	mov	r0, r3
 800e7a0:	3708      	adds	r7, #8
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd80      	pop	{r7, pc}

0800e7a6 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 800e7a6:	b580      	push	{r7, lr}
 800e7a8:	b082      	sub	sp, #8
 800e7aa:	af00      	add	r7, sp, #0
 800e7ac:	6078      	str	r0, [r7, #4]
 800e7ae:	460b      	mov	r3, r1
 800e7b0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	3324      	adds	r3, #36	; 0x24
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	887a      	ldrh	r2, [r7, #2]
 800e7bc:	4611      	mov	r1, r2
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	4798      	blx	r3
 800e7c2:	4603      	mov	r3, r0
    }
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	3708      	adds	r7, #8
 800e7c8:	46bd      	mov	sp, r7
 800e7ca:	bd80      	pop	{r7, pc}

0800e7cc <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b082      	sub	sp, #8
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
 800e7d4:	460b      	mov	r3, r1
 800e7d6:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	3324      	adds	r3, #36	; 0x24
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	887a      	ldrh	r2, [r7, #2]
 800e7e2:	4611      	mov	r1, r2
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	4798      	blx	r3
 800e7e8:	4603      	mov	r3, r0
    }
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3708      	adds	r7, #8
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}

0800e7f2 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     * Binds an instance of a specific Presenter type (subclass) to the View instance. This function
     * is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
 800e7f2:	b480      	push	{r7}
 800e7f4:	b083      	sub	sp, #12
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
 800e7fa:	6039      	str	r1, [r7, #0]
    {
        presenter = &newPresenter;
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	683a      	ldr	r2, [r7, #0]
 800e800:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800e802:	bf00      	nop
 800e804:	370c      	adds	r7, #12
 800e806:	46bd      	mov	sp, r7
 800e808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80c:	4770      	bx	lr
	...

0800e810 <_ZN8touchgfx12NoTransitionD1Ev>:
 800e810:	b580      	push	{r7, lr}
 800e812:	b082      	sub	sp, #8
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
 800e818:	4a05      	ldr	r2, [pc, #20]	; (800e830 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	601a      	str	r2, [r3, #0]
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	4618      	mov	r0, r3
 800e822:	f7ff fc3b 	bl	800e09c <_ZN8touchgfx10TransitionD1Ev>
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	4618      	mov	r0, r3
 800e82a:	3708      	adds	r7, #8
 800e82c:	46bd      	mov	sp, r7
 800e82e:	bd80      	pop	{r7, pc}
 800e830:	08023818 	.word	0x08023818

0800e834 <_ZN8touchgfx12NoTransitionD0Ev>:
 800e834:	b580      	push	{r7, lr}
 800e836:	b082      	sub	sp, #8
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
 800e83c:	6878      	ldr	r0, [r7, #4]
 800e83e:	f7ff ffe7 	bl	800e810 <_ZN8touchgfx12NoTransitionD1Ev>
 800e842:	210c      	movs	r1, #12
 800e844:	6878      	ldr	r0, [r7, #4]
 800e846:	f013 f93c 	bl	8021ac2 <_ZdlPvj>
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	4618      	mov	r0, r3
 800e84e:	3708      	adds	r7, #8
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}

0800e854 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 800e854:	b580      	push	{r7, lr}
 800e856:	b082      	sub	sp, #8
 800e858:	af00      	add	r7, sp, #0
 800e85a:	6078      	str	r0, [r7, #4]
 800e85c:	4a05      	ldr	r2, [pc, #20]	; (800e874 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	601a      	str	r2, [r3, #0]
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	4618      	mov	r0, r3
 800e866:	f7ff fbbb 	bl	800dfe0 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	4618      	mov	r0, r3
 800e86e:	3708      	adds	r7, #8
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}
 800e874:	08023888 	.word	0x08023888

0800e878 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 800e878:	b580      	push	{r7, lr}
 800e87a:	b082      	sub	sp, #8
 800e87c:	af00      	add	r7, sp, #0
 800e87e:	6078      	str	r0, [r7, #4]
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	f7ff ffe7 	bl	800e854 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 800e886:	2110      	movs	r1, #16
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f013 f91a 	bl	8021ac2 <_ZdlPvj>
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	4618      	mov	r0, r3
 800e892:	3708      	adds	r7, #8
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}

0800e898 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun)();
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	685b      	ldr	r3, [r3, #4]
 800e8a4:	687a      	ldr	r2, [r7, #4]
 800e8a6:	68d2      	ldr	r2, [r2, #12]
 800e8a8:	1052      	asrs	r2, r2, #1
 800e8aa:	1899      	adds	r1, r3, r2
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	68db      	ldr	r3, [r3, #12]
 800e8b0:	f003 0301 	and.w	r3, r3, #1
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	d102      	bne.n	800e8be <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	689b      	ldr	r3, [r3, #8]
 800e8bc:	e00a      	b.n	800e8d4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 800e8be:	687b      	ldr	r3, [r7, #4]
 800e8c0:	685b      	ldr	r3, [r3, #4]
 800e8c2:	687a      	ldr	r2, [r7, #4]
 800e8c4:	68d2      	ldr	r2, [r2, #12]
 800e8c6:	1052      	asrs	r2, r2, #1
 800e8c8:	4413      	add	r3, r2
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	687a      	ldr	r2, [r7, #4]
 800e8ce:	6892      	ldr	r2, [r2, #8]
 800e8d0:	4413      	add	r3, r2
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	4608      	mov	r0, r1
 800e8d6:	4798      	blx	r3
    }
 800e8d8:	bf00      	nop
 800e8da:	3708      	adds	r7, #8
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}

0800e8e0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 800e8e0:	b480      	push	{r7}
 800e8e2:	b083      	sub	sp, #12
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun != 0);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	685b      	ldr	r3, [r3, #4]
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d010      	beq.n	800e912 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	689b      	ldr	r3, [r3, #8]
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d107      	bne.n	800e908 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	68db      	ldr	r3, [r3, #12]
 800e8fc:	f003 0301 	and.w	r3, r3, #1
 800e900:	2b00      	cmp	r3, #0
 800e902:	d101      	bne.n	800e908 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 800e904:	2301      	movs	r3, #1
 800e906:	e000      	b.n	800e90a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 800e908:	2300      	movs	r3, #0
 800e90a:	2b01      	cmp	r3, #1
 800e90c:	d001      	beq.n	800e912 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 800e90e:	2301      	movs	r3, #1
 800e910:	e000      	b.n	800e914 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 800e912:	2300      	movs	r3, #0
    }
 800e914:	4618      	mov	r0, r3
 800e916:	370c      	adds	r7, #12
 800e918:	46bd      	mov	sp, r7
 800e91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91e:	4770      	bx	lr

0800e920 <_ZN8touchgfx9colortypeC1Em>:
     *
     * @param  col The color.
     *
     * @see Color::getColorFromRGB
     */
    colortype(uint32_t col)
 800e920:	b480      	push	{r7}
 800e922:	b083      	sub	sp, #12
 800e924:	af00      	add	r7, sp, #0
 800e926:	6078      	str	r0, [r7, #4]
 800e928:	6039      	str	r1, [r7, #0]
        : color(col)
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	683a      	ldr	r2, [r7, #0]
 800e92e:	601a      	str	r2, [r3, #0]
    {
    }
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	4618      	mov	r0, r3
 800e934:	370c      	adds	r7, #12
 800e936:	46bd      	mov	sp, r7
 800e938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e93c:	4770      	bx	lr

0800e93e <_ZN8touchgfx4RectC1Ev>:
/** Class representing a Rectangle with a few convenient methods. */
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
 800e93e:	b480      	push	{r7}
 800e940:	b083      	sub	sp, #12
 800e942:	af00      	add	r7, sp, #0
 800e944:	6078      	str	r0, [r7, #4]
        : x(0), y(0), width(0), height(0)
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2200      	movs	r2, #0
 800e94a:	801a      	strh	r2, [r3, #0]
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	2200      	movs	r2, #0
 800e950:	805a      	strh	r2, [r3, #2]
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	2200      	movs	r2, #0
 800e956:	809a      	strh	r2, [r3, #4]
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2200      	movs	r2, #0
 800e95c:	80da      	strh	r2, [r3, #6]
    {
    }
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	4618      	mov	r0, r3
 800e962:	370c      	adds	r7, #12
 800e964:	46bd      	mov	sp, r7
 800e966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96a:	4770      	bx	lr

0800e96c <_ZN8touchgfx6BitmapC1Et>:
     * Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
 800e96c:	b480      	push	{r7}
 800e96e:	b083      	sub	sp, #12
 800e970:	af00      	add	r7, sp, #0
 800e972:	6078      	str	r0, [r7, #4]
 800e974:	460b      	mov	r3, r1
 800e976:	807b      	strh	r3, [r7, #2]
        : bitmapId(id)
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	887a      	ldrh	r2, [r7, #2]
 800e97c:	801a      	strh	r2, [r3, #0]
    {
    }
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	4618      	mov	r0, r3
 800e982:	370c      	adds	r7, #12
 800e984:	46bd      	mov	sp, r7
 800e986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98a:	4770      	bx	lr

0800e98c <_ZN8touchgfx8DrawableC1Ev>:
 */
class Drawable
{
public:
    /** Initializes a new instance of the Drawable class. */
    Drawable()
 800e98c:	b580      	push	{r7, lr}
 800e98e:	b082      	sub	sp, #8
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
          nextSibling(0),
          nextDrawChainElement(0),
          cachedAbsX(0),
          cachedAbsY(0),
          touchable(false),
          visible(true)
 800e994:	4a14      	ldr	r2, [pc, #80]	; (800e9e8 <_ZN8touchgfx8DrawableC1Ev+0x5c>)
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	601a      	str	r2, [r3, #0]
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	3304      	adds	r3, #4
 800e99e:	4618      	mov	r0, r3
 800e9a0:	f7ff ffcd 	bl	800e93e <_ZN8touchgfx4RectC1Ev>
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	330c      	adds	r3, #12
 800e9a8:	4618      	mov	r0, r3
 800e9aa:	f7ff ffc8 	bl	800e93e <_ZN8touchgfx4RectC1Ev>
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2200      	movs	r2, #0
 800e9b2:	615a      	str	r2, [r3, #20]
 800e9b4:	687b      	ldr	r3, [r7, #4]
 800e9b6:	2200      	movs	r2, #0
 800e9b8:	619a      	str	r2, [r3, #24]
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	2200      	movs	r2, #0
 800e9be:	61da      	str	r2, [r3, #28]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	841a      	strh	r2, [r3, #32]
 800e9c6:	687b      	ldr	r3, [r7, #4]
 800e9c8:	2200      	movs	r2, #0
 800e9ca:	845a      	strh	r2, [r3, #34]	; 0x22
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	2200      	movs	r2, #0
 800e9d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	2201      	movs	r2, #1
 800e9d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    {
    }
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	4618      	mov	r0, r3
 800e9e0:	3708      	adds	r7, #8
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}
 800e9e6:	bf00      	nop
 800e9e8:	08024358 	.word	0x08024358

0800e9ec <_ZN8touchgfx8DrawableD1Ev>:

    /** Finalizes an instance of the Drawable class. */
    virtual ~Drawable()
 800e9ec:	b480      	push	{r7}
 800e9ee:	b083      	sub	sp, #12
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
    {
 800e9f4:	4a04      	ldr	r2, [pc, #16]	; (800ea08 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	601a      	str	r2, [r3, #0]
    }
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	370c      	adds	r7, #12
 800ea00:	46bd      	mov	sp, r7
 800ea02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea06:	4770      	bx	lr
 800ea08:	08024358 	.word	0x08024358

0800ea0c <_ZN8touchgfx8DrawableD0Ev>:
    virtual ~Drawable()
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b082      	sub	sp, #8
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
    }
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f7ff ffe9 	bl	800e9ec <_ZN8touchgfx8DrawableD1Ev>
 800ea1a:	2128      	movs	r1, #40	; 0x28
 800ea1c:	6878      	ldr	r0, [r7, #4]
 800ea1e:	f013 f850 	bl	8021ac2 <_ZdlPvj>
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	4618      	mov	r0, r3
 800ea26:	3708      	adds	r7, #8
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	bd80      	pop	{r7, pc}

0800ea2c <_ZNK8touchgfx8Drawable17invalidateContentEv>:
     * Tell the framework that the contents of the Drawable needs to be redrawn. If the Drawable is
     * invisible, nothing happens. Subclasses of Drawable are encouraged to implement this function
     * and invalidate as little as possible, i.e. the smallest rectangle covering the visual element(s)
     * drawn by the widget.
     */
    virtual void invalidateContent() const
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b082      	sub	sp, #8
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
    {
        // Consider checking if *this is in the draw chain
        if (visible)
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d005      	beq.n	800ea4a <_ZNK8touchgfx8Drawable17invalidateContentEv+0x1e>
        {
            invalidate();
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	681b      	ldr	r3, [r3, #0]
 800ea42:	3314      	adds	r3, #20
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	6878      	ldr	r0, [r7, #4]
 800ea48:	4798      	blx	r3
        }
    }
 800ea4a:	bf00      	nop
 800ea4c:	3708      	adds	r7, #8
 800ea4e:	46bd      	mov	sp, r7
 800ea50:	bd80      	pop	{r7, pc}

0800ea52 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * Function for obtaining the first child of this drawable if any.
     *
     * @return A pointer on the first child drawable if any.
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
 800ea52:	b480      	push	{r7}
 800ea54:	b083      	sub	sp, #12
 800ea56:	af00      	add	r7, sp, #0
 800ea58:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800ea5a:	2300      	movs	r3, #0
    }
 800ea5c:	4618      	mov	r0, r3
 800ea5e:	370c      	adds	r7, #12
 800ea60:	46bd      	mov	sp, r7
 800ea62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea66:	4770      	bx	lr

0800ea68 <_ZN8touchgfx8Drawable11setPositionEssss>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     *
     * @see setXY,setWidthHeight,setPosition(const Drawable&)
     */
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b084      	sub	sp, #16
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	60f8      	str	r0, [r7, #12]
 800ea70:	4608      	mov	r0, r1
 800ea72:	4611      	mov	r1, r2
 800ea74:	461a      	mov	r2, r3
 800ea76:	4603      	mov	r3, r0
 800ea78:	817b      	strh	r3, [r7, #10]
 800ea7a:	460b      	mov	r3, r1
 800ea7c:	813b      	strh	r3, [r7, #8]
 800ea7e:	4613      	mov	r3, r2
 800ea80:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800ea82:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800ea86:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ea8a:	4619      	mov	r1, r3
 800ea8c:	68f8      	ldr	r0, [r7, #12]
 800ea8e:	f000 f82a 	bl	800eae6 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 800ea92:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800ea96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ea9a:	4619      	mov	r1, r3
 800ea9c:	68f8      	ldr	r0, [r7, #12]
 800ea9e:	f000 f87e 	bl	800eb9e <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800eaa2:	bf00      	nop
 800eaa4:	3710      	adds	r7, #16
 800eaa6:	46bd      	mov	sp, r7
 800eaa8:	bd80      	pop	{r7, pc}

0800eaaa <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @param  x The new x value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
 800eaaa:	b480      	push	{r7}
 800eaac:	b083      	sub	sp, #12
 800eaae:	af00      	add	r7, sp, #0
 800eab0:	6078      	str	r0, [r7, #4]
 800eab2:	460b      	mov	r3, r1
 800eab4:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	887a      	ldrh	r2, [r7, #2]
 800eaba:	809a      	strh	r2, [r3, #4]
    }
 800eabc:	bf00      	nop
 800eabe:	370c      	adds	r7, #12
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr

0800eac8 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @param  y The new y value, relative to the parent. A negative value is allowed.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
 800eac8:	b480      	push	{r7}
 800eaca:	b083      	sub	sp, #12
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
 800ead0:	460b      	mov	r3, r1
 800ead2:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	887a      	ldrh	r2, [r7, #2]
 800ead8:	80da      	strh	r2, [r3, #6]
    }
 800eada:	bf00      	nop
 800eadc:	370c      	adds	r7, #12
 800eade:	46bd      	mov	sp, r7
 800eae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae4:	4770      	bx	lr

0800eae6 <_ZN8touchgfx8Drawable5setXYEss>:
     *
     * @see moveTo
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setXY(int16_t x, int16_t y)
 800eae6:	b580      	push	{r7, lr}
 800eae8:	b082      	sub	sp, #8
 800eaea:	af00      	add	r7, sp, #0
 800eaec:	6078      	str	r0, [r7, #4]
 800eaee:	460b      	mov	r3, r1
 800eaf0:	807b      	strh	r3, [r7, #2]
 800eaf2:	4613      	mov	r3, r2
 800eaf4:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	3330      	adds	r3, #48	; 0x30
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800eb02:	4611      	mov	r1, r2
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	4798      	blx	r3
        setY(y);
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	681b      	ldr	r3, [r3, #0]
 800eb0c:	3334      	adds	r3, #52	; 0x34
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	f9b7 2000 	ldrsh.w	r2, [r7]
 800eb14:	4611      	mov	r1, r2
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	4798      	blx	r3
    }
 800eb1a:	bf00      	nop
 800eb1c:	3708      	adds	r7, #8
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}

0800eb22 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @param  width The new width.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
 800eb22:	b480      	push	{r7}
 800eb24:	b083      	sub	sp, #12
 800eb26:	af00      	add	r7, sp, #0
 800eb28:	6078      	str	r0, [r7, #4]
 800eb2a:	460b      	mov	r3, r1
 800eb2c:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	887a      	ldrh	r2, [r7, #2]
 800eb32:	811a      	strh	r2, [r3, #8]
    }
 800eb34:	bf00      	nop
 800eb36:	370c      	adds	r7, #12
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb3e:	4770      	bx	lr

0800eb40 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @param  height The new height.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
 800eb40:	b480      	push	{r7}
 800eb42:	b083      	sub	sp, #12
 800eb44:	af00      	add	r7, sp, #0
 800eb46:	6078      	str	r0, [r7, #4]
 800eb48:	460b      	mov	r3, r1
 800eb4a:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800eb4c:	687b      	ldr	r3, [r7, #4]
 800eb4e:	887a      	ldrh	r2, [r7, #2]
 800eb50:	815a      	strh	r2, [r3, #10]
    }
 800eb52:	bf00      	nop
 800eb54:	370c      	adds	r7, #12
 800eb56:	46bd      	mov	sp, r7
 800eb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb5c:	4770      	bx	lr

0800eb5e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
    /**
     * This function can be called on parent nodes to signal that the size or position of
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
 800eb5e:	b480      	push	{r7}
 800eb60:	b083      	sub	sp, #12
 800eb62:	af00      	add	r7, sp, #0
 800eb64:	6078      	str	r0, [r7, #4]
    {
    }
 800eb66:	bf00      	nop
 800eb68:	370c      	adds	r7, #12
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb70:	4770      	bx	lr

0800eb72 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800eb72:	b480      	push	{r7}
 800eb74:	b083      	sub	sp, #12
 800eb76:	af00      	add	r7, sp, #0
 800eb78:	6078      	str	r0, [r7, #4]
 800eb7a:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800eb7c:	bf00      	nop
 800eb7e:	370c      	adds	r7, #12
 800eb80:	46bd      	mov	sp, r7
 800eb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb86:	4770      	bx	lr

0800eb88 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * ignores the event. The event is only received if the Drawable is touchable and
     * visible.
     *
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 800eb88:	b480      	push	{r7}
 800eb8a:	b083      	sub	sp, #12
 800eb8c:	af00      	add	r7, sp, #0
 800eb8e:	6078      	str	r0, [r7, #4]
 800eb90:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800eb92:	bf00      	nop
 800eb94:	370c      	adds	r7, #12
 800eb96:	46bd      	mov	sp, r7
 800eb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9c:	4770      	bx	lr

0800eb9e <_ZN8touchgfx8Drawable14setWidthHeightEss>:
     * coordinates).
     *
     * @param  width  The width.
     * @param  height The height.
     */
    void setWidthHeight(int16_t width, int16_t height)
 800eb9e:	b580      	push	{r7, lr}
 800eba0:	b082      	sub	sp, #8
 800eba2:	af00      	add	r7, sp, #0
 800eba4:	6078      	str	r0, [r7, #4]
 800eba6:	460b      	mov	r3, r1
 800eba8:	807b      	strh	r3, [r7, #2]
 800ebaa:	4613      	mov	r3, r2
 800ebac:	803b      	strh	r3, [r7, #0]
    {
        setWidth(width);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	3338      	adds	r3, #56	; 0x38
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800ebba:	4611      	mov	r1, r2
 800ebbc:	6878      	ldr	r0, [r7, #4]
 800ebbe:	4798      	blx	r3
        setHeight(height);
 800ebc0:	687b      	ldr	r3, [r7, #4]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	333c      	adds	r3, #60	; 0x3c
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f9b7 2000 	ldrsh.w	r2, [r7]
 800ebcc:	4611      	mov	r1, r2
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	4798      	blx	r3
    }
 800ebd2:	bf00      	nop
 800ebd4:	3708      	adds	r7, #8
 800ebd6:	46bd      	mov	sp, r7
 800ebd8:	bd80      	pop	{r7, pc}

0800ebda <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * ignores the event. The event is only received if the drawable is touchable and
     * visible.
     *
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
 800ebda:	b480      	push	{r7}
 800ebdc:	b083      	sub	sp, #12
 800ebde:	af00      	add	r7, sp, #0
 800ebe0:	6078      	str	r0, [r7, #4]
 800ebe2:	6039      	str	r1, [r7, #0]
    {
        (void)event; // Unused variable
    }
 800ebe4:	bf00      	nop
 800ebe6:	370c      	adds	r7, #12
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebee:	4770      	bx	lr

0800ebf0 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     * Called periodically by the framework if the Drawable instance has subscribed to timer
     * ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
 800ebf0:	b480      	push	{r7}
 800ebf2:	b083      	sub	sp, #12
 800ebf4:	af00      	add	r7, sp, #0
 800ebf6:	6078      	str	r0, [r7, #4]
    {
    }
 800ebf8:	bf00      	nop
 800ebfa:	370c      	adds	r7, #12
 800ebfc:	46bd      	mov	sp, r7
 800ebfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec02:	4770      	bx	lr

0800ec04 <_ZN8touchgfx8Drawable10setVisibleEb>:
     * @param  vis true if this Drawable should be visible. By default, drawables are visible
     *             unless this function has been called with false as argument.
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    void setVisible(bool vis)
 800ec04:	b480      	push	{r7}
 800ec06:	b083      	sub	sp, #12
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
 800ec0c:	460b      	mov	r3, r1
 800ec0e:	70fb      	strb	r3, [r7, #3]
    {
        visible = vis;
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	78fa      	ldrb	r2, [r7, #3]
 800ec14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800ec18:	bf00      	nop
 800ec1a:	370c      	adds	r7, #12
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec22:	4770      	bx	lr

0800ec24 <_ZN8touchgfx8Drawable12setTouchableEb>:
    /**
     * Controls whether this Drawable receives touch events or not.
     *
     * @param  touch If true it will receive touch events, if false it will not.
     */
    void setTouchable(bool touch)
 800ec24:	b480      	push	{r7}
 800ec26:	b083      	sub	sp, #12
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	6078      	str	r0, [r7, #4]
 800ec2c:	460b      	mov	r3, r1
 800ec2e:	70fb      	strb	r3, [r7, #3]
    {
        touchable = touch;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	78fa      	ldrb	r2, [r7, #3]
 800ec34:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800ec38:	bf00      	nop
 800ec3a:	370c      	adds	r7, #12
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec42:	4770      	bx	lr

0800ec44 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     *
     * @return true if the Drawable is visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800ec44:	b480      	push	{r7}
 800ec46:	b083      	sub	sp, #12
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800ec52:	4618      	mov	r0, r3
 800ec54:	370c      	adds	r7, #12
 800ec56:	46bd      	mov	sp, r7
 800ec58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5c:	4770      	bx	lr

0800ec5e <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800ec5e:	b480      	push	{r7}
 800ec60:	b083      	sub	sp, #12
 800ec62:	af00      	add	r7, sp, #0
 800ec64:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800ec6c:	4618      	mov	r0, r3
 800ec6e:	370c      	adds	r7, #12
 800ec70:	46bd      	mov	sp, r7
 800ec72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec76:	4770      	bx	lr

0800ec78 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800ec78:	b580      	push	{r7, lr}
 800ec7a:	b082      	sub	sp, #8
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
 800ec80:	460b      	mov	r3, r1
 800ec82:	807b      	strh	r3, [r7, #2]
 800ec84:	4613      	mov	r3, r2
 800ec86:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	3354      	adds	r3, #84	; 0x54
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	8879      	ldrh	r1, [r7, #2]
 800ec92:	687a      	ldr	r2, [r7, #4]
 800ec94:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800ec98:	b292      	uxth	r2, r2
 800ec9a:	1a8a      	subs	r2, r1, r2
 800ec9c:	b292      	uxth	r2, r2
 800ec9e:	b210      	sxth	r0, r2
 800eca0:	8839      	ldrh	r1, [r7, #0]
 800eca2:	687a      	ldr	r2, [r7, #4]
 800eca4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800eca8:	b292      	uxth	r2, r2
 800ecaa:	1a8a      	subs	r2, r1, r2
 800ecac:	b292      	uxth	r2, r2
 800ecae:	b212      	sxth	r2, r2
 800ecb0:	4601      	mov	r1, r0
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	4798      	blx	r3
    }
 800ecb6:	bf00      	nop
 800ecb8:	3708      	adds	r7, #8
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	bd80      	pop	{r7, pc}

0800ecbe <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     * Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800ecbe:	b480      	push	{r7}
 800ecc0:	b083      	sub	sp, #12
 800ecc2:	af00      	add	r7, sp, #0
 800ecc4:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eccc:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800ecce:	687b      	ldr	r3, [r7, #4]
 800ecd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ecd4:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ecdc:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800ecde:	bf00      	nop
 800ece0:	370c      	adds	r7, #12
 800ece2:	46bd      	mov	sp, r7
 800ece4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece8:	4770      	bx	lr

0800ecea <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @param          invalidatedArea     Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     *
     * @note For TouchGFX internal use only.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800ecea:	b580      	push	{r7, lr}
 800ecec:	b084      	sub	sp, #16
 800ecee:	af00      	add	r7, sp, #0
 800ecf0:	60f8      	str	r0, [r7, #12]
 800ecf2:	60b9      	str	r1, [r7, #8]
 800ecf4:	607a      	str	r2, [r7, #4]
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
 800ecf6:	68f8      	ldr	r0, [r7, #12]
 800ecf8:	f7ff ffe1 	bl	800ecbe <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681a      	ldr	r2, [r3, #0]
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	68fa      	ldr	r2, [r7, #12]
 800ed08:	601a      	str	r2, [r3, #0]
    }
 800ed0a:	bf00      	nop
 800ed0c:	3710      	adds	r7, #16
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
	...

0800ed14 <_ZN8touchgfx6ScreenD1Ev>:
public:
    /** Initializes a new instance of the Screen class. */
    Screen();

    /** Finalizes an instance of the Screen class. */
    virtual ~Screen()
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b082      	sub	sp, #8
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
    {
 800ed1c:	4a06      	ldr	r2, [pc, #24]	; (800ed38 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	601a      	str	r2, [r3, #0]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	3304      	adds	r3, #4
 800ed26:	4618      	mov	r0, r3
 800ed28:	f000 fb44 	bl	800f3b4 <_ZN8touchgfx9ContainerD1Ev>
    }
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	4618      	mov	r0, r3
 800ed30:	3708      	adds	r7, #8
 800ed32:	46bd      	mov	sp, r7
 800ed34:	bd80      	pop	{r7, pc}
 800ed36:	bf00      	nop
 800ed38:	0802445c 	.word	0x0802445c

0800ed3c <_ZN8touchgfx6ScreenD0Ev>:
    virtual ~Screen()
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b082      	sub	sp, #8
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	6078      	str	r0, [r7, #4]
    }
 800ed44:	6878      	ldr	r0, [r7, #4]
 800ed46:	f7ff ffe5 	bl	800ed14 <_ZN8touchgfx6ScreenD1Ev>
 800ed4a:	213c      	movs	r1, #60	; 0x3c
 800ed4c:	6878      	ldr	r0, [r7, #4]
 800ed4e:	f012 feb8 	bl	8021ac2 <_ZdlPvj>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	4618      	mov	r0, r3
 800ed56:	3708      	adds	r7, #8
 800ed58:	46bd      	mov	sp, r7
 800ed5a:	bd80      	pop	{r7, pc}

0800ed5c <_ZN8touchgfx6Screen11setupScreenEv>:
     * version does nothing, but place any screen specific initialization code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
 800ed5c:	b480      	push	{r7}
 800ed5e:	b083      	sub	sp, #12
 800ed60:	af00      	add	r7, sp, #0
 800ed62:	6078      	str	r0, [r7, #4]
    {
    }
 800ed64:	bf00      	nop
 800ed66:	370c      	adds	r7, #12
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6e:	4770      	bx	lr

0800ed70 <_ZN8touchgfx6Screen15afterTransitionEv>:
     * version does nothing, but override to do screen specific initialization code that has
     * to be done after the transition to the screen.
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
 800ed70:	b480      	push	{r7}
 800ed72:	b083      	sub	sp, #12
 800ed74:	af00      	add	r7, sp, #0
 800ed76:	6078      	str	r0, [r7, #4]
    {
    }
 800ed78:	bf00      	nop
 800ed7a:	370c      	adds	r7, #12
 800ed7c:	46bd      	mov	sp, r7
 800ed7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed82:	4770      	bx	lr

0800ed84 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     * Base version does nothing, but place any screen specific cleanup code in an
     * overridden version.
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
 800ed84:	b480      	push	{r7}
 800ed86:	b083      	sub	sp, #12
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
    {
    }
 800ed8c:	bf00      	nop
 800ed8e:	370c      	adds	r7, #12
 800ed90:	46bd      	mov	sp, r7
 800ed92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed96:	4770      	bx	lr

0800ed98 <_ZN8touchgfx6Screen15handleTickEventEv>:

    /**
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 800ed98:	b480      	push	{r7}
 800ed9a:	b083      	sub	sp, #12
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
    {
    }
 800eda0:	bf00      	nop
 800eda2:	370c      	adds	r7, #12
 800eda4:	46bd      	mov	sp, r7
 800eda6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edaa:	4770      	bx	lr

0800edac <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * Called by the Application on the reception of a "key", the meaning of which is
     * platform/application specific. Default implementation does nothing.
     *
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 800edac:	b480      	push	{r7}
 800edae:	b083      	sub	sp, #12
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	460b      	mov	r3, r1
 800edb6:	70fb      	strb	r3, [r7, #3]
    {
        (void)key; // Unused variable
    }
 800edb8:	bf00      	nop
 800edba:	370c      	adds	r7, #12
 800edbc:	46bd      	mov	sp, r7
 800edbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edc2:	4770      	bx	lr

0800edc4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @param [in] d The Drawable to add.
     *
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b082      	sub	sp, #8
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
 800edcc:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	3304      	adds	r3, #4
 800edd2:	6839      	ldr	r1, [r7, #0]
 800edd4:	4618      	mov	r0, r3
 800edd6:	f002 f96f 	bl	80110b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800edda:	bf00      	nop
 800eddc:	3708      	adds	r7, #8
 800edde:	46bd      	mov	sp, r7
 800ede0:	bd80      	pop	{r7, pc}

0800ede2 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     * Since a Widget is only one Drawable, Widget::getLastChild simply yields itself as
     * result, but only if the Widget isVisible and isTouchable.
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
 800ede2:	b580      	push	{r7, lr}
 800ede4:	b084      	sub	sp, #16
 800ede6:	af00      	add	r7, sp, #0
 800ede8:	60f8      	str	r0, [r7, #12]
 800edea:	607b      	str	r3, [r7, #4]
 800edec:	460b      	mov	r3, r1
 800edee:	817b      	strh	r3, [r7, #10]
 800edf0:	4613      	mov	r3, r2
 800edf2:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	4618      	mov	r0, r3
 800edf8:	f7ff ff24 	bl	800ec44 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d008      	beq.n	800ee14 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7ff ff2a 	bl	800ec5e <_ZNK8touchgfx8Drawable11isTouchableEv>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d001      	beq.n	800ee14 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800ee10:	2301      	movs	r3, #1
 800ee12:	e000      	b.n	800ee16 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800ee14:	2300      	movs	r3, #0
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d002      	beq.n	800ee20 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800ee1a:	68fa      	ldr	r2, [r7, #12]
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	601a      	str	r2, [r3, #0]
        }
    }
 800ee20:	bf00      	nop
 800ee22:	3710      	adds	r7, #16
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <_ZN8touchgfx6WidgetC1Ev>:
class Widget : public Drawable
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b082      	sub	sp, #8
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	4618      	mov	r0, r3
 800ee34:	f7ff fdaa 	bl	800e98c <_ZN8touchgfx8DrawableC1Ev>
 800ee38:	4a03      	ldr	r2, [pc, #12]	; (800ee48 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	601a      	str	r2, [r3, #0]
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	4618      	mov	r0, r3
 800ee42:	3708      	adds	r7, #8
 800ee44:	46bd      	mov	sp, r7
 800ee46:	bd80      	pop	{r7, pc}
 800ee48:	080239e8 	.word	0x080239e8

0800ee4c <_ZN8touchgfx6WidgetD1Ev>:
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b082      	sub	sp, #8
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	4a05      	ldr	r2, [pc, #20]	; (800ee6c <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	601a      	str	r2, [r3, #0]
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	f7ff fdc5 	bl	800e9ec <_ZN8touchgfx8DrawableD1Ev>
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	4618      	mov	r0, r3
 800ee66:	3708      	adds	r7, #8
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	bd80      	pop	{r7, pc}
 800ee6c:	080239e8 	.word	0x080239e8

0800ee70 <_ZN8touchgfx6WidgetD0Ev>:
 800ee70:	b580      	push	{r7, lr}
 800ee72:	b082      	sub	sp, #8
 800ee74:	af00      	add	r7, sp, #0
 800ee76:	6078      	str	r0, [r7, #4]
 800ee78:	6878      	ldr	r0, [r7, #4]
 800ee7a:	f7ff ffe7 	bl	800ee4c <_ZN8touchgfx6WidgetD1Ev>
 800ee7e:	2128      	movs	r1, #40	; 0x28
 800ee80:	6878      	ldr	r0, [r7, #4]
 800ee82:	f012 fe1e 	bl	8021ac2 <_ZdlPvj>
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	4618      	mov	r0, r3
 800ee8a:	3708      	adds	r7, #8
 800ee8c:	46bd      	mov	sp, r7
 800ee8e:	bd80      	pop	{r7, pc}

0800ee90 <_ZN8touchgfx3BoxC1Ev>:
 */
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
 800ee90:	b580      	push	{r7, lr}
 800ee92:	b082      	sub	sp, #8
 800ee94:	af00      	add	r7, sp, #0
 800ee96:	6078      	str	r0, [r7, #4]
        : Widget(), alpha(255), color(0)
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	2326      	movs	r3, #38	; 0x26
 800ee9e:	461a      	mov	r2, r3
 800eea0:	2100      	movs	r1, #0
 800eea2:	f012 ffc0 	bl	8021e26 <memset>
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7ff ffbd 	bl	800ee28 <_ZN8touchgfx6WidgetC1Ev>
 800eeae:	4a09      	ldr	r2, [pc, #36]	; (800eed4 <_ZN8touchgfx3BoxC1Ev+0x44>)
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	601a      	str	r2, [r3, #0]
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	22ff      	movs	r2, #255	; 0xff
 800eeb8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	3328      	adds	r3, #40	; 0x28
 800eec0:	2100      	movs	r1, #0
 800eec2:	4618      	mov	r0, r3
 800eec4:	f7ff fd2c 	bl	800e920 <_ZN8touchgfx9colortypeC1Em>
    {
    }
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	4618      	mov	r0, r3
 800eecc:	3708      	adds	r7, #8
 800eece:	46bd      	mov	sp, r7
 800eed0:	bd80      	pop	{r7, pc}
 800eed2:	bf00      	nop
 800eed4:	0802416c 	.word	0x0802416c

0800eed8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     * @param  newColor The color of the box.
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
 800eed8:	b480      	push	{r7}
 800eeda:	b083      	sub	sp, #12
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
 800eee0:	6039      	str	r1, [r7, #0]
    {
        color = newColor;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	683a      	ldr	r2, [r7, #0]
 800eee6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800eee8:	bf00      	nop
 800eeea:	370c      	adds	r7, #12
 800eeec:	46bd      	mov	sp, r7
 800eeee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eef2:	4770      	bx	lr

0800eef4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
 800eef4:	b580      	push	{r7, lr}
 800eef6:	b082      	sub	sp, #8
 800eef8:	af00      	add	r7, sp, #0
 800eefa:	6078      	str	r0, [r7, #4]
 800eefc:	6039      	str	r1, [r7, #0]
        : Widget(), bitmap(bmp), alpha(255)
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	4618      	mov	r0, r3
 800ef02:	2326      	movs	r3, #38	; 0x26
 800ef04:	461a      	mov	r2, r3
 800ef06:	2100      	movs	r1, #0
 800ef08:	f012 ff8d 	bl	8021e26 <memset>
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	4618      	mov	r0, r3
 800ef10:	f7ff ff8a 	bl	800ee28 <_ZN8touchgfx6WidgetC1Ev>
 800ef14:	4a09      	ldr	r2, [pc, #36]	; (800ef3c <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x48>)
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	601a      	str	r2, [r3, #0]
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	683a      	ldr	r2, [r7, #0]
 800ef1e:	8812      	ldrh	r2, [r2, #0]
 800ef20:	84da      	strh	r2, [r3, #38]	; 0x26
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	22ff      	movs	r2, #255	; 0xff
 800ef26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        Image::setBitmap(bmp);
 800ef2a:	6839      	ldr	r1, [r7, #0]
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f003 fb4f 	bl	80125d0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	4618      	mov	r0, r3
 800ef36:	3708      	adds	r7, #8
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}
 800ef3c:	08024248 	.word	0x08024248

0800ef40 <_ZN8touchgfx14AbstractButtonC1Ev>:
 */
class AbstractButton : public Widget
{
public:
    /** Sets this Widget touchable so the user can interact with buttons. */
    AbstractButton()
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b082      	sub	sp, #8
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
        : Widget(), action(), pressed(false)
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	2326      	movs	r3, #38	; 0x26
 800ef4e:	461a      	mov	r2, r3
 800ef50:	2100      	movs	r1, #0
 800ef52:	f012 ff68 	bl	8021e26 <memset>
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	4618      	mov	r0, r3
 800ef5a:	f7ff ff65 	bl	800ee28 <_ZN8touchgfx6WidgetC1Ev>
 800ef5e:	4a0a      	ldr	r2, [pc, #40]	; (800ef88 <_ZN8touchgfx14AbstractButtonC1Ev+0x48>)
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	601a      	str	r2, [r3, #0]
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	2200      	movs	r2, #0
 800ef68:	629a      	str	r2, [r3, #40]	; 0x28
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	2200      	movs	r2, #0
 800ef6e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	2101      	movs	r1, #1
 800ef76:	4618      	mov	r0, r3
 800ef78:	f7ff fe54 	bl	800ec24 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3708      	adds	r7, #8
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}
 800ef86:	bf00      	nop
 800ef88:	080240fc 	.word	0x080240fc

0800ef8c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param  callback The callback to be executed. The callback will be executed with a
     *                  reference to the AbstractButton.
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
 800ef8c:	b480      	push	{r7}
 800ef8e:	b083      	sub	sp, #12
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	683a      	ldr	r2, [r7, #0]
 800ef9a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800ef9c:	bf00      	nop
 800ef9e:	370c      	adds	r7, #12
 800efa0:	46bd      	mov	sp, r7
 800efa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efa6:	4770      	bx	lr

0800efa8 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b082      	sub	sp, #8
 800efac:	af00      	add	r7, sp, #0
 800efae:	6078      	str	r0, [r7, #4]
 800efb0:	4a05      	ldr	r2, [pc, #20]	; (800efc8 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	601a      	str	r2, [r3, #0]
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	4618      	mov	r0, r3
 800efba:	f7ff ff47 	bl	800ee4c <_ZN8touchgfx6WidgetD1Ev>
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	4618      	mov	r0, r3
 800efc2:	3708      	adds	r7, #8
 800efc4:	46bd      	mov	sp, r7
 800efc6:	bd80      	pop	{r7, pc}
 800efc8:	080240fc 	.word	0x080240fc

0800efcc <_ZN8touchgfx14AbstractButtonD0Ev>:
 800efcc:	b580      	push	{r7, lr}
 800efce:	b082      	sub	sp, #8
 800efd0:	af00      	add	r7, sp, #0
 800efd2:	6078      	str	r0, [r7, #4]
 800efd4:	6878      	ldr	r0, [r7, #4]
 800efd6:	f7ff ffe7 	bl	800efa8 <_ZN8touchgfx14AbstractButtonD1Ev>
 800efda:	2130      	movs	r1, #48	; 0x30
 800efdc:	6878      	ldr	r0, [r7, #4]
 800efde:	f012 fd70 	bl	8021ac2 <_ZdlPvj>
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	4618      	mov	r0, r3
 800efe6:	3708      	adds	r7, #8
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd80      	pop	{r7, pc}

0800efec <_ZN8touchgfx6ButtonC1Ev>:
 * pressed state.
 */
class Button : public AbstractButton
{
public:
    Button()
 800efec:	b580      	push	{r7, lr}
 800efee:	b082      	sub	sp, #8
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	6078      	str	r0, [r7, #4]
        : AbstractButton(), up(), down(), alpha(255)
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	4618      	mov	r0, r3
 800eff8:	f7ff ffa2 	bl	800ef40 <_ZN8touchgfx14AbstractButtonC1Ev>
 800effc:	4a0c      	ldr	r2, [pc, #48]	; (800f030 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800effe:	687b      	ldr	r3, [r7, #4]
 800f000:	601a      	str	r2, [r3, #0]
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	332e      	adds	r3, #46	; 0x2e
 800f006:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f00a:	4618      	mov	r0, r3
 800f00c:	f7ff fcae 	bl	800e96c <_ZN8touchgfx6BitmapC1Et>
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	3330      	adds	r3, #48	; 0x30
 800f014:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f018:	4618      	mov	r0, r3
 800f01a:	f7ff fca7 	bl	800e96c <_ZN8touchgfx6BitmapC1Et>
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	22ff      	movs	r2, #255	; 0xff
 800f022:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
    {
    }
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	4618      	mov	r0, r3
 800f02a:	3708      	adds	r7, #8
 800f02c:	46bd      	mov	sp, r7
 800f02e:	bd80      	pop	{r7, pc}
 800f030:	080241d4 	.word	0x080241d4

0800f034 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 800f034:	b580      	push	{r7, lr}
 800f036:	b082      	sub	sp, #8
 800f038:	af00      	add	r7, sp, #0
 800f03a:	6078      	str	r0, [r7, #4]
 800f03c:	4a05      	ldr	r2, [pc, #20]	; (800f054 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	601a      	str	r2, [r3, #0]
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	4618      	mov	r0, r3
 800f046:	f7ff fe65 	bl	800ed14 <_ZN8touchgfx6ScreenD1Ev>
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	4618      	mov	r0, r3
 800f04e:	3708      	adds	r7, #8
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}
 800f054:	0802399c 	.word	0x0802399c

0800f058 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 800f058:	b580      	push	{r7, lr}
 800f05a:	b082      	sub	sp, #8
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
 800f060:	6878      	ldr	r0, [r7, #4]
 800f062:	f7ff ffe7 	bl	800f034 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 800f066:	2140      	movs	r1, #64	; 0x40
 800f068:	6878      	ldr	r0, [r7, #4]
 800f06a:	f012 fd2a 	bl	8021ac2 <_ZdlPvj>
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	4618      	mov	r0, r3
 800f072:	3708      	adds	r7, #8
 800f074:	46bd      	mov	sp, r7
 800f076:	bd80      	pop	{r7, pc}

0800f078 <_ZN15Screen1ViewBaseC1Ev>:
/*********************************************************************************/
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <images/BitmapDatabase.hpp>

Screen1ViewBase::Screen1ViewBase() :
 800f078:	b590      	push	{r4, r7, lr}
 800f07a:	b08d      	sub	sp, #52	; 0x34
 800f07c:	af02      	add	r7, sp, #8
 800f07e:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	4618      	mov	r0, r3
 800f084:	f000 f90e 	bl	800f2a4 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 800f088:	4a57      	ldr	r2, [pc, #348]	; (800f1e8 <_ZN15Screen1ViewBaseC1Ev+0x170>)
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	601a      	str	r2, [r3, #0]
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	3340      	adds	r3, #64	; 0x40
 800f092:	4618      	mov	r0, r3
 800f094:	f7ff fefc 	bl	800ee90 <_ZN8touchgfx3BoxC1Ev>
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800f09e:	f107 0308 	add.w	r3, r7, #8
 800f0a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7ff fc60 	bl	800e96c <_ZN8touchgfx6BitmapC1Et>
 800f0ac:	f107 0308 	add.w	r3, r7, #8
 800f0b0:	4619      	mov	r1, r3
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	f7ff ff1e 	bl	800eef4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	3398      	adds	r3, #152	; 0x98
 800f0bc:	4618      	mov	r0, r3
 800f0be:	f7ff ff95 	bl	800efec <_ZN8touchgfx6ButtonC1Ev>
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	f103 00cc 	add.w	r0, r3, #204	; 0xcc
 800f0c8:	4b48      	ldr	r3, [pc, #288]	; (800f1ec <_ZN15Screen1ViewBaseC1Ev+0x174>)
 800f0ca:	60fb      	str	r3, [r7, #12]
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	613b      	str	r3, [r7, #16]
 800f0d0:	f107 030c 	add.w	r3, r7, #12
 800f0d4:	cb0c      	ldmia	r3, {r2, r3}
 800f0d6:	6879      	ldr	r1, [r7, #4]
 800f0d8:	f000 f90a 	bl	800f2f0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    __background.setPosition(0, 0, 240, 240);
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	f103 0040 	add.w	r0, r3, #64	; 0x40
 800f0e2:	23f0      	movs	r3, #240	; 0xf0
 800f0e4:	9300      	str	r3, [sp, #0]
 800f0e6:	23f0      	movs	r3, #240	; 0xf0
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	2100      	movs	r1, #0
 800f0ec:	f7ff fcbc 	bl	800ea68 <_ZN8touchgfx8Drawable11setPositionEssss>
    __background.setColor(touchgfx::Color::getColorFromRGB(0, 0, 0));
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800f0fc:	2300      	movs	r3, #0
 800f0fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800f102:	2300      	movs	r3, #0
 800f104:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
     *
     * @return The color representation depending on LCD color format.
     */
    FORCE_INLINE_FUNCTION static colortype getColorFromRGB(uint8_t red, uint8_t green, uint8_t blue)
    {
        return 0xFF000000 | (red << 16) | (green << 8) | (blue);
 800f108:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f10c:	041b      	lsls	r3, r3, #16
 800f10e:	461a      	mov	r2, r3
 800f110:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800f114:	021b      	lsls	r3, r3, #8
 800f116:	431a      	orrs	r2, r3
 800f118:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800f11c:	4313      	orrs	r3, r2
 800f11e:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 800f122:	f107 0320 	add.w	r3, r7, #32
 800f126:	4611      	mov	r1, r2
 800f128:	4618      	mov	r0, r3
 800f12a:	f7ff fbf9 	bl	800e920 <_ZN8touchgfx9colortypeC1Em>
 800f12e:	6a3b      	ldr	r3, [r7, #32]
 800f130:	4619      	mov	r1, r3
 800f132:	4620      	mov	r0, r4
 800f134:	f7ff fed0 	bl	800eed8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>
    add(__background);
 800f138:	687a      	ldr	r2, [r7, #4]
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	3340      	adds	r3, #64	; 0x40
 800f13e:	4619      	mov	r1, r3
 800f140:	4610      	mov	r0, r2
 800f142:	f7ff fe3f 	bl	800edc4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    image2.setXY(0, 0);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	336c      	adds	r3, #108	; 0x6c
 800f14a:	2200      	movs	r2, #0
 800f14c:	2100      	movs	r1, #0
 800f14e:	4618      	mov	r0, r3
 800f150:	f7ff fcc9 	bl	800eae6 <_ZN8touchgfx8Drawable5setXYEss>
    image2.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_240X240_GRADIENT_LIGHT_ID));
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f103 046c 	add.w	r4, r3, #108	; 0x6c
 800f15a:	f107 0314 	add.w	r3, r7, #20
 800f15e:	2100      	movs	r1, #0
 800f160:	4618      	mov	r0, r3
 800f162:	f7ff fc03 	bl	800e96c <_ZN8touchgfx6BitmapC1Et>
 800f166:	f107 0314 	add.w	r3, r7, #20
 800f16a:	4619      	mov	r1, r3
 800f16c:	4620      	mov	r0, r4
 800f16e:	f003 fa2f 	bl	80125d0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    add(image2);
 800f172:	687a      	ldr	r2, [r7, #4]
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	336c      	adds	r3, #108	; 0x6c
 800f178:	4619      	mov	r1, r3
 800f17a:	4610      	mov	r0, r2
 800f17c:	f7ff fe22 	bl	800edc4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>

    image1.setXY(0, 0);
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	3398      	adds	r3, #152	; 0x98
 800f184:	2200      	movs	r2, #0
 800f186:	2100      	movs	r1, #0
 800f188:	4618      	mov	r0, r3
 800f18a:	f7ff fcac 	bl	800eae6 <_ZN8touchgfx8Drawable5setXYEss>
    image1.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_240X240_POLY_ID));
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f103 0498 	add.w	r4, r3, #152	; 0x98
 800f194:	f107 0318 	add.w	r3, r7, #24
 800f198:	2101      	movs	r1, #1
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7ff fbe6 	bl	800e96c <_ZN8touchgfx6BitmapC1Et>
 800f1a0:	f107 031c 	add.w	r3, r7, #28
 800f1a4:	2102      	movs	r1, #2
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f7ff fbe0 	bl	800e96c <_ZN8touchgfx6BitmapC1Et>
 800f1ac:	f107 021c 	add.w	r2, r7, #28
 800f1b0:	f107 0318 	add.w	r3, r7, #24
 800f1b4:	4619      	mov	r1, r3
 800f1b6:	4620      	mov	r0, r4
 800f1b8:	f003 f956 	bl	8012468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    add(image1);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	f103 0298 	add.w	r2, r3, #152	; 0x98
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	33cc      	adds	r3, #204	; 0xcc
 800f1c6:	4619      	mov	r1, r3
 800f1c8:	4610      	mov	r0, r2
 800f1ca:	f7ff fedf 	bl	800ef8c <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

 800f1ce:	687a      	ldr	r2, [r7, #4]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	3398      	adds	r3, #152	; 0x98
 800f1d4:	4619      	mov	r1, r3
 800f1d6:	4610      	mov	r0, r2
 800f1d8:	f7ff fdf4 	bl	800edc4 <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    button1.setXY(0, 0);
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	4618      	mov	r0, r3
 800f1e0:	372c      	adds	r7, #44	; 0x2c
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd90      	pop	{r4, r7, pc}
 800f1e6:	bf00      	nop
 800f1e8:	08023950 	.word	0x08023950
 800f1ec:	0800f271 	.word	0x0800f271

0800f1f0 <_ZN15Screen1ViewBaseD1Ev>:
    button1.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
    button1.setAction(buttonCallback);
 800f1f0:	b580      	push	{r7, lr}
 800f1f2:	b082      	sub	sp, #8
 800f1f4:	af00      	add	r7, sp, #0
 800f1f6:	6078      	str	r0, [r7, #4]
 800f1f8:	4a0f      	ldr	r2, [pc, #60]	; (800f238 <_ZN15Screen1ViewBaseD1Ev+0x48>)
 800f1fa:	687b      	ldr	r3, [r7, #4]
 800f1fc:	601a      	str	r2, [r3, #0]
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	33cc      	adds	r3, #204	; 0xcc
 800f202:	4618      	mov	r0, r3
 800f204:	f000 f8b4 	bl	800f370 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	3398      	adds	r3, #152	; 0x98
 800f20c:	4618      	mov	r0, r3
 800f20e:	f000 f937 	bl	800f480 <_ZN8touchgfx6ButtonD1Ev>
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	336c      	adds	r3, #108	; 0x6c
 800f216:	4618      	mov	r0, r3
 800f218:	f000 f910 	bl	800f43c <_ZN8touchgfx5ImageD1Ev>
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	3340      	adds	r3, #64	; 0x40
 800f220:	4618      	mov	r0, r3
 800f222:	f000 f8e9 	bl	800f3f8 <_ZN8touchgfx3BoxD1Ev>
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	4618      	mov	r0, r3
 800f22a:	f7ff ff03 	bl	800f034 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
    add(button1);
}

 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	4618      	mov	r0, r3
 800f232:	3708      	adds	r7, #8
 800f234:	46bd      	mov	sp, r7
 800f236:	bd80      	pop	{r7, pc}
 800f238:	08023950 	.word	0x08023950

0800f23c <_ZN15Screen1ViewBaseD0Ev>:
    button1.setAction(buttonCallback);
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b082      	sub	sp, #8
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]

 800f244:	6878      	ldr	r0, [r7, #4]
 800f246:	f7ff ffd3 	bl	800f1f0 <_ZN15Screen1ViewBaseD1Ev>
 800f24a:	21dc      	movs	r1, #220	; 0xdc
 800f24c:	6878      	ldr	r0, [r7, #4]
 800f24e:	f012 fc38 	bl	8021ac2 <_ZdlPvj>
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	4618      	mov	r0, r3
 800f256:	3708      	adds	r7, #8
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}

0800f25c <_ZN15Screen1ViewBase11setupScreenEv>:
Screen1ViewBase::~Screen1ViewBase()
{

 800f25c:	b480      	push	{r7}
 800f25e:	b083      	sub	sp, #12
 800f260:	af00      	add	r7, sp, #0
 800f262:	6078      	str	r0, [r7, #4]
}

 800f264:	bf00      	nop
 800f266:	370c      	adds	r7, #12
 800f268:	46bd      	mov	sp, r7
 800f26a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f26e:	4770      	bx	lr

0800f270 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:
void Screen1ViewBase::setupScreen()
{

 800f270:	b580      	push	{r7, lr}
 800f272:	b082      	sub	sp, #8
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
 800f278:	6039      	str	r1, [r7, #0]
}
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	3398      	adds	r3, #152	; 0x98
 800f27e:	683a      	ldr	r2, [r7, #0]
 800f280:	429a      	cmp	r2, r3
 800f282:	d10a      	bne.n	800f29a <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x2a>

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &button1)
    {
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	3398      	adds	r3, #152	; 0x98
 800f288:	2100      	movs	r1, #0
 800f28a:	4618      	mov	r0, r3
 800f28c:	f7ff fcba 	bl	800ec04 <_ZN8touchgfx8Drawable10setVisibleEb>
        //Interaction1
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	3398      	adds	r3, #152	; 0x98
 800f294:	4618      	mov	r0, r3
 800f296:	f005 fa67 	bl	8014768 <_ZNK8touchgfx8Drawable10invalidateEv>
        //When button1 clicked hide image1
        //Hide image1
 800f29a:	bf00      	nop
 800f29c:	3708      	adds	r7, #8
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}
	...

0800f2a4 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View()
 800f2a4:	b580      	push	{r7, lr}
 800f2a6:	b082      	sub	sp, #8
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
        : presenter(0)
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	4618      	mov	r0, r3
 800f2b0:	f005 fcfa 	bl	8014ca8 <_ZN8touchgfx6ScreenC1Ev>
 800f2b4:	4a05      	ldr	r2, [pc, #20]	; (800f2cc <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	601a      	str	r2, [r3, #0]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	2200      	movs	r2, #0
 800f2be:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	4618      	mov	r0, r3
 800f2c4:	3708      	adds	r7, #8
 800f2c6:	46bd      	mov	sp, r7
 800f2c8:	bd80      	pop	{r7, pc}
 800f2ca:	bf00      	nop
 800f2cc:	0802399c 	.word	0x0802399c

0800f2d0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800f2d0:	b480      	push	{r7}
 800f2d2:	b083      	sub	sp, #12
 800f2d4:	af00      	add	r7, sp, #0
 800f2d6:	6078      	str	r0, [r7, #4]
 800f2d8:	4a04      	ldr	r2, [pc, #16]	; (800f2ec <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	601a      	str	r2, [r3, #0]
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	370c      	adds	r7, #12
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ea:	4770      	bx	lr
 800f2ec:	080239d0 	.word	0x080239d0

0800f2f0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pObject, void (dest_type::*pmemfun_1)(T1))
 800f2f0:	b580      	push	{r7, lr}
 800f2f2:	b084      	sub	sp, #16
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	60f8      	str	r0, [r7, #12]
 800f2f8:	60b9      	str	r1, [r7, #8]
 800f2fa:	4639      	mov	r1, r7
 800f2fc:	e881 000c 	stmia.w	r1, {r2, r3}
        : pobject(pObject), pmemfun(pmemfun_1)
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	4618      	mov	r0, r3
 800f304:	f7ff ffe4 	bl	800f2d0 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 800f308:	4a08      	ldr	r2, [pc, #32]	; (800f32c <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 800f30a:	68fb      	ldr	r3, [r7, #12]
 800f30c:	601a      	str	r2, [r3, #0]
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	68ba      	ldr	r2, [r7, #8]
 800f312:	605a      	str	r2, [r3, #4]
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	3308      	adds	r3, #8
 800f318:	463a      	mov	r2, r7
 800f31a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f31e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 800f322:	68fb      	ldr	r3, [r7, #12]
 800f324:	4618      	mov	r0, r3
 800f326:	3710      	adds	r7, #16
 800f328:	46bd      	mov	sp, r7
 800f32a:	bd80      	pop	{r7, pc}
 800f32c:	08023984 	.word	0x08023984

0800f330 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800f330:	b480      	push	{r7}
 800f332:	b083      	sub	sp, #12
 800f334:	af00      	add	r7, sp, #0
 800f336:	6078      	str	r0, [r7, #4]
    }
 800f338:	4a04      	ldr	r2, [pc, #16]	; (800f34c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	601a      	str	r2, [r3, #0]
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	4618      	mov	r0, r3
 800f342:	370c      	adds	r7, #12
 800f344:	46bd      	mov	sp, r7
 800f346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34a:	4770      	bx	lr
 800f34c:	080239d0 	.word	0x080239d0

0800f350 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800f350:	b580      	push	{r7, lr}
 800f352:	b082      	sub	sp, #8
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
    }
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f7ff ffe9 	bl	800f330 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800f35e:	2104      	movs	r1, #4
 800f360:	6878      	ldr	r0, [r7, #4]
 800f362:	f012 fbae 	bl	8021ac2 <_ZdlPvj>
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	4618      	mov	r0, r3
 800f36a:	3708      	adds	r7, #8
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd80      	pop	{r7, pc}

0800f370 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 800f370:	b580      	push	{r7, lr}
 800f372:	b082      	sub	sp, #8
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
 800f378:	4a05      	ldr	r2, [pc, #20]	; (800f390 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	601a      	str	r2, [r3, #0]
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	4618      	mov	r0, r3
 800f382:	f7ff ffd5 	bl	800f330 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	4618      	mov	r0, r3
 800f38a:	3708      	adds	r7, #8
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}
 800f390:	08023984 	.word	0x08023984

0800f394 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800f394:	b580      	push	{r7, lr}
 800f396:	b082      	sub	sp, #8
 800f398:	af00      	add	r7, sp, #0
 800f39a:	6078      	str	r0, [r7, #4]
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	f7ff ffe7 	bl	800f370 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 800f3a2:	2110      	movs	r1, #16
 800f3a4:	6878      	ldr	r0, [r7, #4]
 800f3a6:	f012 fb8c 	bl	8021ac2 <_ZdlPvj>
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	3708      	adds	r7, #8
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	bd80      	pop	{r7, pc}

0800f3b4 <_ZN8touchgfx9ContainerD1Ev>:
 * intersect with the geometry of the container will be visible (e.g. setting a
 * container's width to 0 will render all children invisible).
 *
 * @see Drawable
 */
class Container : public Drawable
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b082      	sub	sp, #8
 800f3b8:	af00      	add	r7, sp, #0
 800f3ba:	6078      	str	r0, [r7, #4]
 800f3bc:	4a05      	ldr	r2, [pc, #20]	; (800f3d4 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	601a      	str	r2, [r3, #0]
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f7ff fb11 	bl	800e9ec <_ZN8touchgfx8DrawableD1Ev>
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	3708      	adds	r7, #8
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}
 800f3d4:	08023f14 	.word	0x08023f14

0800f3d8 <_ZN8touchgfx9ContainerD0Ev>:
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b082      	sub	sp, #8
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f7ff ffe7 	bl	800f3b4 <_ZN8touchgfx9ContainerD1Ev>
 800f3e6:	212c      	movs	r1, #44	; 0x2c
 800f3e8:	6878      	ldr	r0, [r7, #4]
 800f3ea:	f012 fb6a 	bl	8021ac2 <_ZdlPvj>
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	4618      	mov	r0, r3
 800f3f2:	3708      	adds	r7, #8
 800f3f4:	46bd      	mov	sp, r7
 800f3f6:	bd80      	pop	{r7, pc}

0800f3f8 <_ZN8touchgfx3BoxD1Ev>:
class Box : public Widget
 800f3f8:	b580      	push	{r7, lr}
 800f3fa:	b082      	sub	sp, #8
 800f3fc:	af00      	add	r7, sp, #0
 800f3fe:	6078      	str	r0, [r7, #4]
 800f400:	4a05      	ldr	r2, [pc, #20]	; (800f418 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	601a      	str	r2, [r3, #0]
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	4618      	mov	r0, r3
 800f40a:	f7ff fd1f 	bl	800ee4c <_ZN8touchgfx6WidgetD1Ev>
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	4618      	mov	r0, r3
 800f412:	3708      	adds	r7, #8
 800f414:	46bd      	mov	sp, r7
 800f416:	bd80      	pop	{r7, pc}
 800f418:	0802416c 	.word	0x0802416c

0800f41c <_ZN8touchgfx3BoxD0Ev>:
 800f41c:	b580      	push	{r7, lr}
 800f41e:	b082      	sub	sp, #8
 800f420:	af00      	add	r7, sp, #0
 800f422:	6078      	str	r0, [r7, #4]
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f7ff ffe7 	bl	800f3f8 <_ZN8touchgfx3BoxD1Ev>
 800f42a:	212c      	movs	r1, #44	; 0x2c
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f012 fb48 	bl	8021ac2 <_ZdlPvj>
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	4618      	mov	r0, r3
 800f436:	3708      	adds	r7, #8
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}

0800f43c <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b082      	sub	sp, #8
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
 800f444:	4a05      	ldr	r2, [pc, #20]	; (800f45c <_ZN8touchgfx5ImageD1Ev+0x20>)
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	601a      	str	r2, [r3, #0]
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	4618      	mov	r0, r3
 800f44e:	f7ff fcfd 	bl	800ee4c <_ZN8touchgfx6WidgetD1Ev>
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	4618      	mov	r0, r3
 800f456:	3708      	adds	r7, #8
 800f458:	46bd      	mov	sp, r7
 800f45a:	bd80      	pop	{r7, pc}
 800f45c:	08024248 	.word	0x08024248

0800f460 <_ZN8touchgfx5ImageD0Ev>:
 800f460:	b580      	push	{r7, lr}
 800f462:	b082      	sub	sp, #8
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f7ff ffe7 	bl	800f43c <_ZN8touchgfx5ImageD1Ev>
 800f46e:	212c      	movs	r1, #44	; 0x2c
 800f470:	6878      	ldr	r0, [r7, #4]
 800f472:	f012 fb26 	bl	8021ac2 <_ZdlPvj>
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	4618      	mov	r0, r3
 800f47a:	3708      	adds	r7, #8
 800f47c:	46bd      	mov	sp, r7
 800f47e:	bd80      	pop	{r7, pc}

0800f480 <_ZN8touchgfx6ButtonD1Ev>:
class Button : public AbstractButton
 800f480:	b580      	push	{r7, lr}
 800f482:	b082      	sub	sp, #8
 800f484:	af00      	add	r7, sp, #0
 800f486:	6078      	str	r0, [r7, #4]
 800f488:	4a05      	ldr	r2, [pc, #20]	; (800f4a0 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	601a      	str	r2, [r3, #0]
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	4618      	mov	r0, r3
 800f492:	f7ff fd89 	bl	800efa8 <_ZN8touchgfx14AbstractButtonD1Ev>
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	4618      	mov	r0, r3
 800f49a:	3708      	adds	r7, #8
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd80      	pop	{r7, pc}
 800f4a0:	080241d4 	.word	0x080241d4

0800f4a4 <_ZN8touchgfx6ButtonD0Ev>:
 800f4a4:	b580      	push	{r7, lr}
 800f4a6:	b082      	sub	sp, #8
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f7ff ffe7 	bl	800f480 <_ZN8touchgfx6ButtonD1Ev>
 800f4b2:	2134      	movs	r1, #52	; 0x34
 800f4b4:	6878      	ldr	r0, [r7, #4]
 800f4b6:	f012 fb04 	bl	8021ac2 <_ZdlPvj>
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	4618      	mov	r0, r3
 800f4be:	3708      	adds	r7, #8
 800f4c0:	46bd      	mov	sp, r7
 800f4c2:	bd80      	pop	{r7, pc}

0800f4c4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 800f4c4:	b580      	push	{r7, lr}
 800f4c6:	b082      	sub	sp, #8
 800f4c8:	af00      	add	r7, sp, #0
 800f4ca:	6078      	str	r0, [r7, #4]
 800f4cc:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun)(t1);
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	685b      	ldr	r3, [r3, #4]
 800f4d2:	687a      	ldr	r2, [r7, #4]
 800f4d4:	68d2      	ldr	r2, [r2, #12]
 800f4d6:	1052      	asrs	r2, r2, #1
 800f4d8:	1898      	adds	r0, r3, r2
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	68db      	ldr	r3, [r3, #12]
 800f4de:	f003 0301 	and.w	r3, r3, #1
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d102      	bne.n	800f4ec <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	689b      	ldr	r3, [r3, #8]
 800f4ea:	e00a      	b.n	800f502 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	685b      	ldr	r3, [r3, #4]
 800f4f0:	687a      	ldr	r2, [r7, #4]
 800f4f2:	68d2      	ldr	r2, [r2, #12]
 800f4f4:	1052      	asrs	r2, r2, #1
 800f4f6:	4413      	add	r3, r2
 800f4f8:	681b      	ldr	r3, [r3, #0]
 800f4fa:	687a      	ldr	r2, [r7, #4]
 800f4fc:	6892      	ldr	r2, [r2, #8]
 800f4fe:	4413      	add	r3, r2
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	6839      	ldr	r1, [r7, #0]
 800f504:	4798      	blx	r3
    }
 800f506:	bf00      	nop
 800f508:	3708      	adds	r7, #8
 800f50a:	46bd      	mov	sp, r7
 800f50c:	bd80      	pop	{r7, pc}

0800f50e <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 800f50e:	b480      	push	{r7}
 800f510:	b083      	sub	sp, #12
 800f512:	af00      	add	r7, sp, #0
 800f514:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun != 0);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	685b      	ldr	r3, [r3, #4]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d010      	beq.n	800f540 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	689b      	ldr	r3, [r3, #8]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d107      	bne.n	800f536 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	68db      	ldr	r3, [r3, #12]
 800f52a:	f003 0301 	and.w	r3, r3, #1
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d101      	bne.n	800f536 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 800f532:	2301      	movs	r3, #1
 800f534:	e000      	b.n	800f538 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 800f536:	2300      	movs	r3, #0
 800f538:	2b01      	cmp	r3, #1
 800f53a:	d001      	beq.n	800f540 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 800f53c:	2301      	movs	r3, #1
 800f53e:	e000      	b.n	800f542 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 800f540:	2300      	movs	r3, #0
    }
 800f542:	4618      	mov	r0, r3
 800f544:	370c      	adds	r7, #12
 800f546:	46bd      	mov	sp, r7
 800f548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f54c:	4770      	bx	lr
	...

0800f550 <_ZN14BitmapDatabase11getInstanceEv>:
    { image_alternate_theme_images_widgets_button_regular_height_50_medium_rounded_normal, 0, 240, 50, 5, 0, 230, ((uint8_t)touchgfx::Bitmap::ARGB8888) >> 3, 50, ((uint8_t)touchgfx::Bitmap::ARGB8888) & 0x7 },
    { image_alternate_theme_images_widgets_button_regular_height_50_medium_rounded_pressed, 0, 240, 50, 5, 0, 230, ((uint8_t)touchgfx::Bitmap::ARGB8888) >> 3, 50, ((uint8_t)touchgfx::Bitmap::ARGB8888) & 0x7 }
};

namespace BitmapDatabase
{
 800f550:	b480      	push	{r7}
 800f552:	af00      	add	r7, sp, #0
const touchgfx::Bitmap::BitmapData* getInstance()
 800f554:	4b02      	ldr	r3, [pc, #8]	; (800f560 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
{
 800f556:	4618      	mov	r0, r3
 800f558:	46bd      	mov	sp, r7
 800f55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f55e:	4770      	bx	lr
 800f560:	08023a48 	.word	0x08023a48

0800f564 <_ZN14BitmapDatabase15getInstanceSizeEv>:
    return bitmap_database;
}

 800f564:	b480      	push	{r7}
 800f566:	af00      	add	r7, sp, #0
uint16_t getInstanceSize()
 800f568:	2303      	movs	r3, #3
{
 800f56a:	4618      	mov	r0, r3
 800f56c:	46bd      	mov	sp, r7
 800f56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f572:	4770      	bx	lr

0800f574 <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
     * @param  prevChar The Unicode value of the previous character.
     * @param  glyph    the glyph object for the current character.
     *
     * @return The kerning distance between prevChar and glyph char.
     */
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
 800f574:	b480      	push	{r7}
 800f576:	b085      	sub	sp, #20
 800f578:	af00      	add	r7, sp, #0
 800f57a:	60f8      	str	r0, [r7, #12]
 800f57c:	460b      	mov	r3, r1
 800f57e:	607a      	str	r2, [r7, #4]
 800f580:	817b      	strh	r3, [r7, #10]
    {
        (void)prevChar; // Unused variable
        (void)glyph;    // Unused variable
        return 0;
 800f582:	2300      	movs	r3, #0
    }
 800f584:	4618      	mov	r0, r3
 800f586:	3714      	adds	r7, #20
 800f588:	46bd      	mov	sp, r7
 800f58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58e:	4770      	bx	lr

0800f590 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    /**
     * Gets GSUB table. Currently only used for Devanagari fonts.
     *
     * @return The GSUB table or null if font has GSUB no table.
     */
    virtual const uint16_t* getGSUBTable() const
 800f590:	b480      	push	{r7}
 800f592:	b083      	sub	sp, #12
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800f598:	2300      	movs	r3, #0
    }
 800f59a:	4618      	mov	r0, r3
 800f59c:	370c      	adds	r7, #12
 800f59e:	46bd      	mov	sp, r7
 800f5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a4:	4770      	bx	lr

0800f5a6 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    /**
     * Gets the contextual forms table used in arabic fonts.
     *
     * @return The FontContextualFormsTable or null if the font has no table.
     */
    virtual const FontContextualFormsTable* getContextualFormsTable() const
 800f5a6:	b480      	push	{r7}
 800f5a8:	b083      	sub	sp, #12
 800f5aa:	af00      	add	r7, sp, #0
 800f5ac:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800f5ae:	2300      	movs	r3, #0
    }
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	370c      	adds	r7, #12
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ba:	4770      	bx	lr

0800f5bc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
     *
     * @param  data A reference to the TypedTextData storage array.
     * @param  f    The fonts associated with the array.
     * @param  n    The number of typed texts in the array.
     */
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 800f5bc:	b480      	push	{r7}
 800f5be:	b085      	sub	sp, #20
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	60f8      	str	r0, [r7, #12]
 800f5c4:	60b9      	str	r1, [r7, #8]
 800f5c6:	4613      	mov	r3, r2
 800f5c8:	80fb      	strh	r3, [r7, #6]
    {
        typedTexts = data;
 800f5ca:	4a07      	ldr	r2, [pc, #28]	; (800f5e8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	6013      	str	r3, [r2, #0]
        fonts = f;
 800f5d0:	4a06      	ldr	r2, [pc, #24]	; (800f5ec <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 800f5d2:	68bb      	ldr	r3, [r7, #8]
 800f5d4:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 800f5d6:	4a06      	ldr	r2, [pc, #24]	; (800f5f0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 800f5d8:	88fb      	ldrh	r3, [r7, #6]
 800f5da:	8013      	strh	r3, [r2, #0]
    }
 800f5dc:	bf00      	nop
 800f5de:	3714      	adds	r7, #20
 800f5e0:	46bd      	mov	sp, r7
 800f5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e6:	4770      	bx	lr
 800f5e8:	2001fed8 	.word	0x2001fed8
 800f5ec:	2001fee0 	.word	0x2001fee0
 800f5f0:	2001fedc 	.word	0x2001fedc

0800f5f4 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800f5f4:	b40e      	push	{r1, r2, r3}
 800f5f6:	b580      	push	{r7, lr}
 800f5f8:	b085      	sub	sp, #20
 800f5fa:	af00      	add	r7, sp, #0
 800f5fc:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, text);
 800f5fe:	f107 0320 	add.w	r3, r7, #32
 800f602:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800f604:	68bb      	ldr	r3, [r7, #8]
 800f606:	69fa      	ldr	r2, [r7, #28]
 800f608:	2100      	movs	r1, #0
 800f60a:	6878      	ldr	r0, [r7, #4]
 800f60c:	f004 ff82 	bl	8014514 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800f610:	4603      	mov	r3, r0
 800f612:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800f614:	89fb      	ldrh	r3, [r7, #14]
}
 800f616:	4618      	mov	r0, r3
 800f618:	3714      	adds	r7, #20
 800f61a:	46bd      	mov	sp, r7
 800f61c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f620:	b003      	add	sp, #12
 800f622:	4770      	bx	lr

0800f624 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800f624:	b40c      	push	{r2, r3}
 800f626:	b580      	push	{r7, lr}
 800f628:	b084      	sub	sp, #16
 800f62a:	af00      	add	r7, sp, #0
 800f62c:	6078      	str	r0, [r7, #4]
 800f62e:	460b      	mov	r3, r1
 800f630:	70fb      	strb	r3, [r7, #3]
    va_list pArg;
    va_start(pArg, text);
 800f632:	f107 031c 	add.w	r3, r7, #28
 800f636:	60bb      	str	r3, [r7, #8]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800f638:	78f9      	ldrb	r1, [r7, #3]
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	69ba      	ldr	r2, [r7, #24]
 800f63e:	6878      	ldr	r0, [r7, #4]
 800f640:	f004 ff68 	bl	8014514 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
 800f644:	4603      	mov	r3, r0
 800f646:	81fb      	strh	r3, [r7, #14]
    va_end(pArg);
    return width;
 800f648:	89fb      	ldrh	r3, [r7, #14]
}
 800f64a:	4618      	mov	r0, r3
 800f64c:	3710      	adds	r7, #16
 800f64e:	46bd      	mov	sp, r7
 800f650:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f654:	b002      	add	sp, #8
 800f656:	4770      	bx	lr

0800f658 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b08a      	sub	sp, #40	; 0x28
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
 800f660:	460b      	mov	r3, r1
 800f662:	70fb      	strb	r3, [r7, #3]
    if (fontGsubTable && nextCharacters.peekChar())
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d016      	beq.n	800f69a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	3322      	adds	r3, #34	; 0x22
 800f670:	627b      	str	r3, [r7, #36]	; 0x24
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800f672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f674:	8adb      	ldrh	r3, [r3, #22]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d105      	bne.n	800f686 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x2e>
 800f67a:	4b43      	ldr	r3, [pc, #268]	; (800f788 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800f67c:	4a43      	ldr	r2, [pc, #268]	; (800f78c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800f67e:	21c5      	movs	r1, #197	; 0xc5
 800f680:	4843      	ldr	r0, [pc, #268]	; (800f790 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f682:	f012 fa4b 	bl	8021b1c <__assert_func>
            return buffer[pos];
 800f686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f688:	8a9b      	ldrh	r3, [r3, #20]
 800f68a:	461a      	mov	r2, r3
 800f68c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f68e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d001      	beq.n	800f69a <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x42>
 800f696:	2301      	movs	r3, #1
 800f698:	e000      	b.n	800f69c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x44>
 800f69a:	2300      	movs	r3, #0
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d06a      	beq.n	800f776 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
    {
        substituteGlyphs();
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f006 f974 	bl	801598e <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800f6a6:	687b      	ldr	r3, [r7, #4]
 800f6a8:	3322      	adds	r3, #34	; 0x22
 800f6aa:	623b      	str	r3, [r7, #32]
 800f6ac:	2301      	movs	r3, #1
 800f6ae:	83fb      	strh	r3, [r7, #30]
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800f6b0:	6a3b      	ldr	r3, [r7, #32]
 800f6b2:	8adb      	ldrh	r3, [r3, #22]
 800f6b4:	8bfa      	ldrh	r2, [r7, #30]
 800f6b6:	429a      	cmp	r2, r3
 800f6b8:	d305      	bcc.n	800f6c6 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x6e>
 800f6ba:	4b36      	ldr	r3, [pc, #216]	; (800f794 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x13c>)
 800f6bc:	4a36      	ldr	r2, [pc, #216]	; (800f798 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x140>)
 800f6be:	21cb      	movs	r1, #203	; 0xcb
 800f6c0:	4833      	ldr	r0, [pc, #204]	; (800f790 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f6c2:	f012 fa2b 	bl	8021b1c <__assert_func>
            const uint16_t index = pos + offset;
 800f6c6:	6a3b      	ldr	r3, [r7, #32]
 800f6c8:	8a9a      	ldrh	r2, [r3, #20]
 800f6ca:	8bfb      	ldrh	r3, [r7, #30]
 800f6cc:	4413      	add	r3, r2
 800f6ce:	83bb      	strh	r3, [r7, #28]
            return buffer[index < size ? index : index - size];
 800f6d0:	8bbb      	ldrh	r3, [r7, #28]
 800f6d2:	2b09      	cmp	r3, #9
 800f6d4:	d801      	bhi.n	800f6da <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x82>
 800f6d6:	8bbb      	ldrh	r3, [r7, #28]
 800f6d8:	e001      	b.n	800f6de <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x86>
 800f6da:	8bbb      	ldrh	r3, [r7, #28]
 800f6dc:	3b0a      	subs	r3, #10
 800f6de:	6a3a      	ldr	r2, [r7, #32]
 800f6e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f6e4:	f640 123f 	movw	r2, #2367	; 0x93f
 800f6e8:	4293      	cmp	r3, r2
 800f6ea:	bf0c      	ite	eq
 800f6ec:	2301      	moveq	r3, #1
 800f6ee:	2300      	movne	r3, #0
 800f6f0:	b2db      	uxtb	r3, r3
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d03f      	beq.n	800f776 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x11e>
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	3322      	adds	r3, #34	; 0x22
 800f6fa:	687a      	ldr	r2, [r7, #4]
 800f6fc:	3222      	adds	r2, #34	; 0x22
 800f6fe:	60ba      	str	r2, [r7, #8]
            assert(used > 0);
 800f700:	68ba      	ldr	r2, [r7, #8]
 800f702:	8ad2      	ldrh	r2, [r2, #22]
 800f704:	2a00      	cmp	r2, #0
 800f706:	d105      	bne.n	800f714 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xbc>
 800f708:	4b1f      	ldr	r3, [pc, #124]	; (800f788 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x130>)
 800f70a:	4a20      	ldr	r2, [pc, #128]	; (800f78c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x134>)
 800f70c:	21c5      	movs	r1, #197	; 0xc5
 800f70e:	4820      	ldr	r0, [pc, #128]	; (800f790 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f710:	f012 fa04 	bl	8021b1c <__assert_func>
            return buffer[pos];
 800f714:	68ba      	ldr	r2, [r7, #8]
 800f716:	8a92      	ldrh	r2, [r2, #20]
 800f718:	4611      	mov	r1, r2
 800f71a:	68ba      	ldr	r2, [r7, #8]
 800f71c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800f720:	613b      	str	r3, [r7, #16]
 800f722:	4613      	mov	r3, r2
 800f724:	81fb      	strh	r3, [r7, #14]
            buffer[pos] = newChar;
        }

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
 800f726:	693b      	ldr	r3, [r7, #16]
 800f728:	8adb      	ldrh	r3, [r3, #22]
 800f72a:	2b01      	cmp	r3, #1
 800f72c:	d806      	bhi.n	800f73c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xe4>
 800f72e:	4b1b      	ldr	r3, [pc, #108]	; (800f79c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x144>)
 800f730:	4a1b      	ldr	r2, [pc, #108]	; (800f7a0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x148>)
 800f732:	f44f 718e 	mov.w	r1, #284	; 0x11c
 800f736:	4816      	ldr	r0, [pc, #88]	; (800f790 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x138>)
 800f738:	f012 f9f0 	bl	8021b1c <__assert_func>
            const uint16_t index = pos + 1;
 800f73c:	693b      	ldr	r3, [r7, #16]
 800f73e:	8a9b      	ldrh	r3, [r3, #20]
 800f740:	3301      	adds	r3, #1
 800f742:	81bb      	strh	r3, [r7, #12]
            buffer[index < size ? index : 0] = newChar;
 800f744:	89bb      	ldrh	r3, [r7, #12]
 800f746:	2b09      	cmp	r3, #9
 800f748:	d801      	bhi.n	800f74e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf6>
 800f74a:	89bb      	ldrh	r3, [r7, #12]
 800f74c:	e000      	b.n	800f750 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0xf8>
 800f74e:	2300      	movs	r3, #0
 800f750:	693a      	ldr	r2, [r7, #16]
 800f752:	89f9      	ldrh	r1, [r7, #14]
 800f754:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        }
 800f758:	bf00      	nop
            nextCharacters.replaceAt0(0x093F);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	3322      	adds	r3, #34	; 0x22
 800f75e:	61bb      	str	r3, [r7, #24]
 800f760:	f640 133f 	movw	r3, #2367	; 0x93f
 800f764:	82fb      	strh	r3, [r7, #22]
            buffer[pos] = newChar;
 800f766:	69bb      	ldr	r3, [r7, #24]
 800f768:	8a9b      	ldrh	r3, [r3, #20]
 800f76a:	4619      	mov	r1, r3
 800f76c:	69bb      	ldr	r3, [r7, #24]
 800f76e:	8afa      	ldrh	r2, [r7, #22]
 800f770:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
        }
 800f774:	bf00      	nop
        }
    }
    return getNextChar();
 800f776:	6878      	ldr	r0, [r7, #4]
 800f778:	f006 f80c 	bl	8015794 <_ZN8touchgfx12TextProvider11getNextCharEv>
 800f77c:	4603      	mov	r3, r0
}
 800f77e:	4618      	mov	r0, r3
 800f780:	3728      	adds	r7, #40	; 0x28
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}
 800f786:	bf00      	nop
 800f788:	080230d0 	.word	0x080230d0
 800f78c:	080230dc 	.word	0x080230dc
 800f790:	08023188 	.word	0x08023188
 800f794:	080231d0 	.word	0x080231d0
 800f798:	080231e0 	.word	0x080231e0
 800f79c:	080232b4 	.word	0x080232b4
 800f7a0:	080232c0 	.word	0x080232c0

0800f7a4 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b082      	sub	sp, #8
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
    fillInputBuffer();
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f005 ffb8 	bl	8015722 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
}
 800f7b2:	bf00      	nop
 800f7b4:	3708      	adds	r7, #8
 800f7b6:	46bd      	mov	sp, r7
 800f7b8:	bd80      	pop	{r7, pc}
	...

0800f7bc <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 800f7bc:	b590      	push	{r4, r7, lr}
 800f7be:	b085      	sub	sp, #20
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	80fb      	strh	r3, [r7, #6]
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	60fb      	str	r3, [r7, #12]
    if (id < 1)
 800f7ca:	88fb      	ldrh	r3, [r7, #6]
 800f7cc:	2b00      	cmp	r3, #0
 800f7ce:	d127      	bne.n	800f820 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
    {
        if (languagesArray[id] != 0)
 800f7d0:	88fb      	ldrh	r3, [r7, #6]
 800f7d2:	4a1e      	ldr	r2, [pc, #120]	; (800f84c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800f7d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d016      	beq.n	800f80a <_ZN8touchgfx5Texts11setLanguageEt+0x4e>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
 800f7dc:	88fb      	ldrh	r3, [r7, #6]
 800f7de:	4a1b      	ldr	r2, [pc, #108]	; (800f84c <_ZN8touchgfx5Texts11setLanguageEt+0x90>)
 800f7e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f7e4:	60bb      	str	r3, [r7, #8]
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800f7e6:	68bb      	ldr	r3, [r7, #8]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	68ba      	ldr	r2, [r7, #8]
 800f7ec:	4413      	add	r3, r2
 800f7ee:	4a18      	ldr	r2, [pc, #96]	; (800f850 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800f7f0:	6013      	str	r3, [r2, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 800f7f2:	68bb      	ldr	r3, [r7, #8]
 800f7f4:	685b      	ldr	r3, [r3, #4]
 800f7f6:	68ba      	ldr	r2, [r7, #8]
 800f7f8:	4413      	add	r3, r2
 800f7fa:	4a16      	ldr	r2, [pc, #88]	; (800f854 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800f7fc:	6013      	str	r3, [r2, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800f7fe:	68bb      	ldr	r3, [r7, #8]
 800f800:	689b      	ldr	r3, [r3, #8]
 800f802:	68ba      	ldr	r2, [r7, #8]
 800f804:	4413      	add	r3, r2
 800f806:	60fb      	str	r3, [r7, #12]
 800f808:	e00a      	b.n	800f820 <_ZN8touchgfx5Texts11setLanguageEt+0x64>
        }
        else
        {
            // Compiled and linked in languages
            currentLanguagePtr = texts_all_languages;
 800f80a:	4b11      	ldr	r3, [pc, #68]	; (800f850 <_ZN8touchgfx5Texts11setLanguageEt+0x94>)
 800f80c:	4a12      	ldr	r2, [pc, #72]	; (800f858 <_ZN8touchgfx5Texts11setLanguageEt+0x9c>)
 800f80e:	601a      	str	r2, [r3, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800f810:	4a12      	ldr	r2, [pc, #72]	; (800f85c <_ZN8touchgfx5Texts11setLanguageEt+0xa0>)
 800f812:	4b10      	ldr	r3, [pc, #64]	; (800f854 <_ZN8touchgfx5Texts11setLanguageEt+0x98>)
 800f814:	601a      	str	r2, [r3, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 800f816:	88fb      	ldrh	r3, [r7, #6]
 800f818:	4a11      	ldr	r2, [pc, #68]	; (800f860 <_ZN8touchgfx5Texts11setLanguageEt+0xa4>)
 800f81a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f81e:	60fb      	str	r3, [r7, #12]
        }
    }

    if (currentLanguageTypedText)
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d00d      	beq.n	800f842 <_ZN8touchgfx5Texts11setLanguageEt+0x86>
    {
        currentLanguage = id;
 800f826:	4a0f      	ldr	r2, [pc, #60]	; (800f864 <_ZN8touchgfx5Texts11setLanguageEt+0xa8>)
 800f828:	88fb      	ldrh	r3, [r7, #6]
 800f82a:	8013      	strh	r3, [r2, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 800f82c:	f000 f824 	bl	800f878 <_ZN17TypedTextDatabase8getFontsEv>
 800f830:	4604      	mov	r4, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800f832:	f000 f819 	bl	800f868 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 800f836:	4603      	mov	r3, r0
 800f838:	461a      	mov	r2, r3
 800f83a:	4621      	mov	r1, r4
 800f83c:	68f8      	ldr	r0, [r7, #12]
 800f83e:	f7ff febd 	bl	800f5bc <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
    }
}
 800f842:	bf00      	nop
 800f844:	3714      	adds	r7, #20
 800f846:	46bd      	mov	sp, r7
 800f848:	bd90      	pop	{r4, r7, pc}
 800f84a:	bf00      	nop
 800f84c:	2001fa90 	.word	0x2001fa90
 800f850:	2001fa98 	.word	0x2001fa98
 800f854:	2001fa9c 	.word	0x2001fa9c
 800f858:	080582ac 	.word	0x080582ac
 800f85c:	080582a8 	.word	0x080582a8
 800f860:	080582b4 	.word	0x080582b4
 800f864:	2001fa94 	.word	0x2001fa94

0800f868 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
{
    return typedTextDatabaseArray[id];
}

uint16_t getInstanceSize()
{
 800f868:	b480      	push	{r7}
 800f86a:	af00      	add	r7, sp, #0
    return 0;
 800f86c:	2300      	movs	r3, #0
}
 800f86e:	4618      	mov	r0, r3
 800f870:	46bd      	mov	sp, r7
 800f872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f876:	4770      	bx	lr

0800f878 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
 800f878:	b480      	push	{r7}
 800f87a:	af00      	add	r7, sp, #0
    return touchgfx_fonts;
 800f87c:	4b02      	ldr	r3, [pc, #8]	; (800f888 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 800f87e:	4618      	mov	r0, r3
 800f880:	46bd      	mov	sp, r7
 800f882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f886:	4770      	bx	lr
 800f888:	2001faa0 	.word	0x2001faa0

0800f88c <_Z41__static_initialization_and_destruction_0ii>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b082      	sub	sp, #8
 800f890:	af00      	add	r7, sp, #0
 800f892:	6078      	str	r0, [r7, #4]
 800f894:	6039      	str	r1, [r7, #0]
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	2b01      	cmp	r3, #1
 800f89a:	d113      	bne.n	800f8c4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800f89c:	683b      	ldr	r3, [r7, #0]
 800f89e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8a2:	4293      	cmp	r3, r2
 800f8a4:	d10e      	bne.n	800f8c4 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 800f8a6:	f7fe fa4b 	bl	800dd40 <_Z23getFont_verdana_20_4bppv>
 800f8aa:	4603      	mov	r3, r0
};
 800f8ac:	4a07      	ldr	r2, [pc, #28]	; (800f8cc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800f8ae:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 800f8b0:	f7fe faa0 	bl	800ddf4 <_Z23getFont_verdana_40_4bppv>
 800f8b4:	4603      	mov	r3, r0
};
 800f8b6:	4a05      	ldr	r2, [pc, #20]	; (800f8cc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800f8b8:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 800f8ba:	f7fe f9e7 	bl	800dc8c <_Z23getFont_verdana_10_4bppv>
 800f8be:	4603      	mov	r3, r0
};
 800f8c0:	4a02      	ldr	r2, [pc, #8]	; (800f8cc <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800f8c2:	6093      	str	r3, [r2, #8]
} // namespace TypedTextDatabase
 800f8c4:	bf00      	nop
 800f8c6:	3708      	adds	r7, #8
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}
 800f8cc:	2001faa0 	.word	0x2001faa0

0800f8d0 <_GLOBAL__sub_I_touchgfx_fonts>:
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	af00      	add	r7, sp, #0
 800f8d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f8d8:	2001      	movs	r0, #1
 800f8da:	f7ff ffd7 	bl	800f88c <_Z41__static_initialization_and_destruction_0ii>
 800f8de:	bd80      	pop	{r7, pc}

0800f8e0 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 800f8e0:	b580      	push	{r7, lr}
 800f8e2:	b082      	sub	sp, #8
 800f8e4:	af00      	add	r7, sp, #0
 800f8e6:	6078      	str	r0, [r7, #4]
 800f8e8:	4a05      	ldr	r2, [pc, #20]	; (800f900 <_ZN19FrontendApplicationD1Ev+0x20>)
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	601a      	str	r2, [r3, #0]
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	4618      	mov	r0, r3
 800f8f2:	f7fe fcdd 	bl	800e2b0 <_ZN23FrontendApplicationBaseD1Ev>
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	4618      	mov	r0, r3
 800f8fa:	3708      	adds	r7, #8
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	bd80      	pop	{r7, pc}
 800f900:	08023ae8 	.word	0x08023ae8

0800f904 <_ZN19FrontendApplicationD0Ev>:
 800f904:	b580      	push	{r7, lr}
 800f906:	b082      	sub	sp, #8
 800f908:	af00      	add	r7, sp, #0
 800f90a:	6078      	str	r0, [r7, #4]
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f7ff ffe7 	bl	800f8e0 <_ZN19FrontendApplicationD1Ev>
 800f912:	f44f 71ae 	mov.w	r1, #348	; 0x15c
 800f916:	6878      	ldr	r0, [r7, #4]
 800f918:	f012 f8d3 	bl	8021ac2 <_ZdlPvj>
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	4618      	mov	r0, r3
 800f920:	3708      	adds	r7, #8
 800f922:	46bd      	mov	sp, r7
 800f924:	bd80      	pop	{r7, pc}

0800f926 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 800f926:	b580      	push	{r7, lr}
 800f928:	b082      	sub	sp, #8
 800f92a:	af00      	add	r7, sp, #0
 800f92c:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	f8d3 3158 	ldr.w	r3, [r3, #344]	; 0x158
 800f934:	4618      	mov	r0, r3
 800f936:	f000 f82d 	bl	800f994 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	4618      	mov	r0, r3
 800f93e:	f003 ff51 	bl	80137e4 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 800f942:	bf00      	nop
 800f944:	3708      	adds	r7, #8
 800f946:	46bd      	mov	sp, r7
 800f948:	bd80      	pop	{r7, pc}
	...

0800f94c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800f94c:	b580      	push	{r7, lr}
 800f94e:	b084      	sub	sp, #16
 800f950:	af00      	add	r7, sp, #0
 800f952:	60f8      	str	r0, [r7, #12]
 800f954:	60b9      	str	r1, [r7, #8]
 800f956:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	687a      	ldr	r2, [r7, #4]
 800f95c:	68b9      	ldr	r1, [r7, #8]
 800f95e:	4618      	mov	r0, r3
 800f960:	f7fe fcf6 	bl	800e350 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800f964:	4a03      	ldr	r2, [pc, #12]	; (800f974 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	601a      	str	r2, [r3, #0]
{

}
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	4618      	mov	r0, r3
 800f96e:	3710      	adds	r7, #16
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}
 800f974:	08023ae8 	.word	0x08023ae8

0800f978 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 800f978:	b480      	push	{r7}
 800f97a:	b083      	sub	sp, #12
 800f97c:	af00      	add	r7, sp, #0
 800f97e:	6078      	str	r0, [r7, #4]
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	2200      	movs	r2, #0
 800f984:	601a      	str	r2, [r3, #0]
{

}
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	4618      	mov	r0, r3
 800f98a:	370c      	adds	r7, #12
 800f98c:	46bd      	mov	sp, r7
 800f98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f992:	4770      	bx	lr

0800f994 <_ZN5Model4tickEv>:

void Model::tick()
{
 800f994:	b480      	push	{r7}
 800f996:	b083      	sub	sp, #12
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]

}
 800f99c:	bf00      	nop
 800f99e:	370c      	adds	r7, #12
 800f9a0:	46bd      	mov	sp, r7
 800f9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a6:	4770      	bx	lr

0800f9a8 <_ZN8touchgfx9Presenter8activateEv>:
     * Place initialization code for the Presenter here.
     *
     * The activate function is called automatically when a screen transition causes this
     * Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 800f9a8:	b480      	push	{r7}
 800f9aa:	b083      	sub	sp, #12
 800f9ac:	af00      	add	r7, sp, #0
 800f9ae:	6078      	str	r0, [r7, #4]
    {
    }
 800f9b0:	bf00      	nop
 800f9b2:	370c      	adds	r7, #12
 800f9b4:	46bd      	mov	sp, r7
 800f9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ba:	4770      	bx	lr

0800f9bc <_ZN8touchgfx9Presenter10deactivateEv>:
     * Place cleanup code for the Presenter here.
     *
     * The deactivate function is called automatically when a screen transition causes this
     * Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 800f9bc:	b480      	push	{r7}
 800f9be:	b083      	sub	sp, #12
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
    {
    }
 800f9c4:	bf00      	nop
 800f9c6:	370c      	adds	r7, #12
 800f9c8:	46bd      	mov	sp, r7
 800f9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ce:	4770      	bx	lr

0800f9d0 <_ZN8touchgfx9PresenterD1Ev>:

    /** Finalizes an instance of the Presenter class. */
    virtual ~Presenter()
 800f9d0:	b480      	push	{r7}
 800f9d2:	b083      	sub	sp, #12
 800f9d4:	af00      	add	r7, sp, #0
 800f9d6:	6078      	str	r0, [r7, #4]
    {
 800f9d8:	4a04      	ldr	r2, [pc, #16]	; (800f9ec <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 800f9da:	687b      	ldr	r3, [r7, #4]
 800f9dc:	601a      	str	r2, [r3, #0]
    }
 800f9de:	687b      	ldr	r3, [r7, #4]
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	370c      	adds	r7, #12
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ea:	4770      	bx	lr
 800f9ec:	08023b6c 	.word	0x08023b6c

0800f9f0 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 800f9f0:	b580      	push	{r7, lr}
 800f9f2:	b082      	sub	sp, #8
 800f9f4:	af00      	add	r7, sp, #0
 800f9f6:	6078      	str	r0, [r7, #4]
    }
 800f9f8:	6878      	ldr	r0, [r7, #4]
 800f9fa:	f7ff ffe9 	bl	800f9d0 <_ZN8touchgfx9PresenterD1Ev>
 800f9fe:	2104      	movs	r1, #4
 800fa00:	6878      	ldr	r0, [r7, #4]
 800fa02:	f012 f85e 	bl	8021ac2 <_ZdlPvj>
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	4618      	mov	r0, r3
 800fa0a:	3708      	adds	r7, #8
 800fa0c:	46bd      	mov	sp, r7
 800fa0e:	bd80      	pop	{r7, pc}

0800fa10 <_ZN8touchgfx9PresenterC1Ev>:

protected:
    /** Initializes a new instance of the Presenter class. */
    Presenter()
 800fa10:	b480      	push	{r7}
 800fa12:	b083      	sub	sp, #12
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
    {
 800fa18:	4a04      	ldr	r2, [pc, #16]	; (800fa2c <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	601a      	str	r2, [r3, #0]
    }
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	4618      	mov	r0, r3
 800fa22:	370c      	adds	r7, #12
 800fa24:	46bd      	mov	sp, r7
 800fa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2a:	4770      	bx	lr
 800fa2c:	08023b6c 	.word	0x08023b6c

0800fa30 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 800fa30:	b480      	push	{r7}
 800fa32:	b083      	sub	sp, #12
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	4a06      	ldr	r2, [pc, #24]	; (800fa54 <_ZN13ModelListenerC1Ev+0x24>)
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	601a      	str	r2, [r3, #0]
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	2200      	movs	r2, #0
 800fa42:	605a      	str	r2, [r3, #4]
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	4618      	mov	r0, r3
 800fa48:	370c      	adds	r7, #12
 800fa4a:	46bd      	mov	sp, r7
 800fa4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa50:	4770      	bx	lr
 800fa52:	bf00      	nop
 800fa54:	08023b5c 	.word	0x08023b5c

0800fa58 <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 800fa58:	b480      	push	{r7}
 800fa5a:	b083      	sub	sp, #12
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
 800fa60:	4a04      	ldr	r2, [pc, #16]	; (800fa74 <_ZN13ModelListenerD1Ev+0x1c>)
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	601a      	str	r2, [r3, #0]
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	4618      	mov	r0, r3
 800fa6a:	370c      	adds	r7, #12
 800fa6c:	46bd      	mov	sp, r7
 800fa6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa72:	4770      	bx	lr
 800fa74:	08023b5c 	.word	0x08023b5c

0800fa78 <_ZN13ModelListenerD0Ev>:
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b082      	sub	sp, #8
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	6878      	ldr	r0, [r7, #4]
 800fa82:	f7ff ffe9 	bl	800fa58 <_ZN13ModelListenerD1Ev>
 800fa86:	2108      	movs	r1, #8
 800fa88:	6878      	ldr	r0, [r7, #4]
 800fa8a:	f012 f81a 	bl	8021ac2 <_ZdlPvj>
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	4618      	mov	r0, r3
 800fa92:	3708      	adds	r7, #8
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}

0800fa98 <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	4a09      	ldr	r2, [pc, #36]	; (800fac8 <_ZN16Screen1PresenterD1Ev+0x30>)
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	601a      	str	r2, [r3, #0]
 800faa6:	4a09      	ldr	r2, [pc, #36]	; (800facc <_ZN16Screen1PresenterD1Ev+0x34>)
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	605a      	str	r2, [r3, #4]
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	3304      	adds	r3, #4
 800fab0:	4618      	mov	r0, r3
 800fab2:	f7ff ffd1 	bl	800fa58 <_ZN13ModelListenerD1Ev>
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	4618      	mov	r0, r3
 800faba:	f7ff ff89 	bl	800f9d0 <_ZN8touchgfx9PresenterD1Ev>
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	4618      	mov	r0, r3
 800fac2:	3708      	adds	r7, #8
 800fac4:	46bd      	mov	sp, r7
 800fac6:	bd80      	pop	{r7, pc}
 800fac8:	08023b34 	.word	0x08023b34
 800facc:	08023b4c 	.word	0x08023b4c

0800fad0 <_ZThn4_N16Screen1PresenterD1Ev>:
 800fad0:	f1a0 0004 	sub.w	r0, r0, #4
 800fad4:	e7e0      	b.n	800fa98 <_ZN16Screen1PresenterD1Ev>
 800fad6:	bf00      	nop

0800fad8 <_ZN16Screen1PresenterD0Ev>:
 800fad8:	b580      	push	{r7, lr}
 800fada:	b082      	sub	sp, #8
 800fadc:	af00      	add	r7, sp, #0
 800fade:	6078      	str	r0, [r7, #4]
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f7ff ffd9 	bl	800fa98 <_ZN16Screen1PresenterD1Ev>
 800fae6:	2110      	movs	r1, #16
 800fae8:	6878      	ldr	r0, [r7, #4]
 800faea:	f011 ffea 	bl	8021ac2 <_ZdlPvj>
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	4618      	mov	r0, r3
 800faf2:	3708      	adds	r7, #8
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}

0800faf8 <_ZThn4_N16Screen1PresenterD0Ev>:
 800faf8:	f1a0 0004 	sub.w	r0, r0, #4
 800fafc:	e7ec      	b.n	800fad8 <_ZN16Screen1PresenterD0Ev>
	...

0800fb00 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b082      	sub	sp, #8
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
 800fb08:	6039      	str	r1, [r7, #0]
    : view(v)
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	4618      	mov	r0, r3
 800fb0e:	f7ff ff7f 	bl	800fa10 <_ZN8touchgfx9PresenterC1Ev>
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	3304      	adds	r3, #4
 800fb16:	4618      	mov	r0, r3
 800fb18:	f7ff ff8a 	bl	800fa30 <_ZN13ModelListenerC1Ev>
 800fb1c:	4a06      	ldr	r2, [pc, #24]	; (800fb38 <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 800fb1e:	687b      	ldr	r3, [r7, #4]
 800fb20:	601a      	str	r2, [r3, #0]
 800fb22:	4a06      	ldr	r2, [pc, #24]	; (800fb3c <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	605a      	str	r2, [r3, #4]
 800fb28:	687b      	ldr	r3, [r7, #4]
 800fb2a:	683a      	ldr	r2, [r7, #0]
 800fb2c:	60da      	str	r2, [r3, #12]
{

}
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	4618      	mov	r0, r3
 800fb32:	3708      	adds	r7, #8
 800fb34:	46bd      	mov	sp, r7
 800fb36:	bd80      	pop	{r7, pc}
 800fb38:	08023b34 	.word	0x08023b34
 800fb3c:	08023b4c 	.word	0x08023b4c

0800fb40 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 800fb40:	b480      	push	{r7}
 800fb42:	b083      	sub	sp, #12
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]

}
 800fb48:	bf00      	nop
 800fb4a:	370c      	adds	r7, #12
 800fb4c:	46bd      	mov	sp, r7
 800fb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb52:	4770      	bx	lr

0800fb54 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 800fb54:	b480      	push	{r7}
 800fb56:	b083      	sub	sp, #12
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	6078      	str	r0, [r7, #4]

}
 800fb5c:	bf00      	nop
 800fb5e:	370c      	adds	r7, #12
 800fb60:	46bd      	mov	sp, r7
 800fb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb66:	4770      	bx	lr

0800fb68 <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b082      	sub	sp, #8
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
 800fb70:	4a05      	ldr	r2, [pc, #20]	; (800fb88 <_ZN11Screen1ViewD1Ev+0x20>)
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	601a      	str	r2, [r3, #0]
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	4618      	mov	r0, r3
 800fb7a:	f7ff fb39 	bl	800f1f0 <_ZN15Screen1ViewBaseD1Ev>
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	4618      	mov	r0, r3
 800fb82:	3708      	adds	r7, #8
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}
 800fb88:	08023b84 	.word	0x08023b84

0800fb8c <_ZN11Screen1ViewD0Ev>:
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b082      	sub	sp, #8
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	6078      	str	r0, [r7, #4]
 800fb94:	6878      	ldr	r0, [r7, #4]
 800fb96:	f7ff ffe7 	bl	800fb68 <_ZN11Screen1ViewD1Ev>
 800fb9a:	21dc      	movs	r1, #220	; 0xdc
 800fb9c:	6878      	ldr	r0, [r7, #4]
 800fb9e:	f011 ff90 	bl	8021ac2 <_ZdlPvj>
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	4618      	mov	r0, r3
 800fba6:	3708      	adds	r7, #8
 800fba8:	46bd      	mov	sp, r7
 800fbaa:	bd80      	pop	{r7, pc}

0800fbac <_ZN11Screen1ViewC1Ev>:
#include <gui/screen1_screen/Screen1View.hpp>

Screen1View::Screen1View()
 800fbac:	b580      	push	{r7, lr}
 800fbae:	b082      	sub	sp, #8
 800fbb0:	af00      	add	r7, sp, #0
 800fbb2:	6078      	str	r0, [r7, #4]
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	4618      	mov	r0, r3
 800fbb8:	f7ff fa5e 	bl	800f078 <_ZN15Screen1ViewBaseC1Ev>
 800fbbc:	4a03      	ldr	r2, [pc, #12]	; (800fbcc <_ZN11Screen1ViewC1Ev+0x20>)
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	601a      	str	r2, [r3, #0]
{

}
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	3708      	adds	r7, #8
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bd80      	pop	{r7, pc}
 800fbcc:	08023b84 	.word	0x08023b84

0800fbd0 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 800fbd0:	b580      	push	{r7, lr}
 800fbd2:	b082      	sub	sp, #8
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 800fbd8:	687b      	ldr	r3, [r7, #4]
 800fbda:	4618      	mov	r0, r3
 800fbdc:	f7ff fb3e 	bl	800f25c <_ZN15Screen1ViewBase11setupScreenEv>
}
 800fbe0:	bf00      	nop
 800fbe2:	3708      	adds	r7, #8
 800fbe4:	46bd      	mov	sp, r7
 800fbe6:	bd80      	pop	{r7, pc}

0800fbe8 <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 800fbe8:	b580      	push	{r7, lr}
 800fbea:	b082      	sub	sp, #8
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f7ff f8c6 	bl	800ed84 <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 800fbf8:	bf00      	nop
 800fbfa:	3708      	adds	r7, #8
 800fbfc:	46bd      	mov	sp, r7
 800fbfe:	bd80      	pop	{r7, pc}

0800fc00 <_ZN8touchgfx15TouchControllerD1Ev>:
/** Basic Touch Controller interface. */
class TouchController
{
public:
    /** Finalizes an instance of the TouchController class. */
    virtual ~TouchController()
 800fc00:	b480      	push	{r7}
 800fc02:	b083      	sub	sp, #12
 800fc04:	af00      	add	r7, sp, #0
 800fc06:	6078      	str	r0, [r7, #4]
    {
 800fc08:	4a04      	ldr	r2, [pc, #16]	; (800fc1c <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	601a      	str	r2, [r3, #0]
    }
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	4618      	mov	r0, r3
 800fc12:	370c      	adds	r7, #12
 800fc14:	46bd      	mov	sp, r7
 800fc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1a:	4770      	bx	lr
 800fc1c:	08023bd0 	.word	0x08023bd0

0800fc20 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b082      	sub	sp, #8
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
    }
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f7ff ffe9 	bl	800fc00 <_ZN8touchgfx15TouchControllerD1Ev>
 800fc2e:	2104      	movs	r1, #4
 800fc30:	6878      	ldr	r0, [r7, #4]
 800fc32:	f011 ff46 	bl	8021ac2 <_ZdlPvj>
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	4618      	mov	r0, r3
 800fc3a:	3708      	adds	r7, #8
 800fc3c:	46bd      	mov	sp, r7
 800fc3e:	bd80      	pop	{r7, pc}

0800fc40 <_ZN20STM32TouchController4initEv>:
/* USER CODE BEGIN STM32TouchController */

#include <STM32TouchController.hpp>

void STM32TouchController::init()
{
 800fc40:	b480      	push	{r7}
 800fc42:	b083      	sub	sp, #12
 800fc44:	af00      	add	r7, sp, #0
 800fc46:	6078      	str	r0, [r7, #4]
    /**
     * Initialize touch controller and driver
     *
     */
}
 800fc48:	bf00      	nop
 800fc4a:	370c      	adds	r7, #12
 800fc4c:	46bd      	mov	sp, r7
 800fc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc52:	4770      	bx	lr

0800fc54 <_ZN20STM32TouchController11sampleTouchERlS0_>:

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 800fc54:	b480      	push	{r7}
 800fc56:	b085      	sub	sp, #20
 800fc58:	af00      	add	r7, sp, #0
 800fc5a:	60f8      	str	r0, [r7, #12]
 800fc5c:	60b9      	str	r1, [r7, #8]
 800fc5e:	607a      	str	r2, [r7, #4]
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    return false;
 800fc60:	2300      	movs	r3, #0
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	3714      	adds	r7, #20
 800fc66:	46bd      	mov	sp, r7
 800fc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6c:	4770      	bx	lr
	...

0800fc70 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 800fc70:	b580      	push	{r7, lr}
 800fc72:	b082      	sub	sp, #8
 800fc74:	af00      	add	r7, sp, #0
 800fc76:	6078      	str	r0, [r7, #4]
 800fc78:	4a05      	ldr	r2, [pc, #20]	; (800fc90 <_ZN20STM32TouchControllerD1Ev+0x20>)
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	601a      	str	r2, [r3, #0]
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	4618      	mov	r0, r3
 800fc82:	f7ff ffbd 	bl	800fc00 <_ZN8touchgfx15TouchControllerD1Ev>
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	4618      	mov	r0, r3
 800fc8a:	3708      	adds	r7, #8
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}
 800fc90:	08023bb8 	.word	0x08023bb8

0800fc94 <_ZN20STM32TouchControllerD0Ev>:
 800fc94:	b580      	push	{r7, lr}
 800fc96:	b082      	sub	sp, #8
 800fc98:	af00      	add	r7, sp, #0
 800fc9a:	6078      	str	r0, [r7, #4]
 800fc9c:	6878      	ldr	r0, [r7, #4]
 800fc9e:	f7ff ffe7 	bl	800fc70 <_ZN20STM32TouchControllerD1Ev>
 800fca2:	2104      	movs	r1, #4
 800fca4:	6878      	ldr	r0, [r7, #4]
 800fca6:	f011 ff0c 	bl	8021ac2 <_ZdlPvj>
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	4618      	mov	r0, r3
 800fcae:	3708      	adds	r7, #8
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	bd80      	pop	{r7, pc}

0800fcb4 <_ZN8touchgfx4GPIO4initEv>:

/*
 * Perform configuration of IO pins.
 */
void GPIO::init()
{
 800fcb4:	b480      	push	{r7}
 800fcb6:	af00      	add	r7, sp, #0

}
 800fcb8:	bf00      	nop
 800fcba:	46bd      	mov	sp, r7
 800fcbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc0:	4770      	bx	lr
	...

0800fcc4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
 800fcc4:	b480      	push	{r7}
 800fcc6:	b083      	sub	sp, #12
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	4603      	mov	r3, r0
 800fccc:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800fcce:	79fb      	ldrb	r3, [r7, #7]
 800fcd0:	2b03      	cmp	r3, #3
 800fcd2:	d80c      	bhi.n	800fcee <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x2a>
 800fcd4:	a201      	add	r2, pc, #4	; (adr r2, 800fcdc <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>)
 800fcd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcda:	bf00      	nop
 800fcdc:	0800fced 	.word	0x0800fced
 800fce0:	0800fced 	.word	0x0800fced
 800fce4:	0800fced 	.word	0x0800fced
 800fce8:	0800fced 	.word	0x0800fced
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_SET);
#endif
        break;
 800fcec:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_SET);
#endif
        break;
    }
}
 800fcee:	bf00      	nop
 800fcf0:	370c      	adds	r7, #12
 800fcf2:	46bd      	mov	sp, r7
 800fcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf8:	4770      	bx	lr
 800fcfa:	bf00      	nop

0800fcfc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
 800fcfc:	b480      	push	{r7}
 800fcfe:	b083      	sub	sp, #12
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	4603      	mov	r3, r0
 800fd04:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800fd06:	79fb      	ldrb	r3, [r7, #7]
 800fd08:	2b03      	cmp	r3, #3
 800fd0a:	d80c      	bhi.n	800fd26 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x2a>
 800fd0c:	a201      	add	r2, pc, #4	; (adr r2, 800fd14 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>)
 800fd0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd12:	bf00      	nop
 800fd14:	0800fd25 	.word	0x0800fd25
 800fd18:	0800fd25 	.word	0x0800fd25
 800fd1c:	0800fd25 	.word	0x0800fd25
 800fd20:	0800fd25 	.word	0x0800fd25
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, GPIO_PIN_RESET);
#endif
        break;
 800fd24:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
#endif
        break;
    }
}
 800fd26:	bf00      	nop
 800fd28:	370c      	adds	r7, #12
 800fd2a:	46bd      	mov	sp, r7
 800fd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd30:	4770      	bx	lr
 800fd32:	bf00      	nop

0800fd34 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
 800fd34:	b480      	push	{r7}
 800fd36:	b083      	sub	sp, #12
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	71fb      	strb	r3, [r7, #7]
    switch (id)
 800fd3e:	79fb      	ldrb	r3, [r7, #7]
 800fd40:	2b03      	cmp	r3, #3
 800fd42:	d80c      	bhi.n	800fd5e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2a>
 800fd44:	a201      	add	r2, pc, #4	; (adr r2, 800fd4c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x18>)
 800fd46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd4a:	bf00      	nop
 800fd4c:	0800fd5d 	.word	0x0800fd5d
 800fd50:	0800fd5d 	.word	0x0800fd5d
 800fd54:	0800fd5d 	.word	0x0800fd5d
 800fd58:	0800fd5d 	.word	0x0800fd5d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
#endif
        break;
 800fd5c:	bf00      	nop
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
#endif
        break;
    }
}
 800fd5e:	bf00      	nop
 800fd60:	370c      	adds	r7, #12
 800fd62:	46bd      	mov	sp, r7
 800fd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd68:	4770      	bx	lr
 800fd6a:	bf00      	nop

0800fd6c <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL()
 800fd6c:	b480      	push	{r7}
 800fd6e:	b083      	sub	sp, #12
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	6078      	str	r0, [r7, #4]
    {
 800fd74:	4a04      	ldr	r2, [pc, #16]	; (800fd88 <_ZN8touchgfx3HALD1Ev+0x1c>)
 800fd76:	687b      	ldr	r3, [r7, #4]
 800fd78:	601a      	str	r2, [r3, #0]
    }
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	370c      	adds	r7, #12
 800fd80:	46bd      	mov	sp, r7
 800fd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd86:	4770      	bx	lr
 800fd88:	08023fb0 	.word	0x08023fb0

0800fd8c <_ZN8touchgfx3HALD0Ev>:
    virtual ~HAL()
 800fd8c:	b580      	push	{r7, lr}
 800fd8e:	b082      	sub	sp, #8
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
    }
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	f7ff ffe9 	bl	800fd6c <_ZN8touchgfx3HALD1Ev>
 800fd9a:	217c      	movs	r1, #124	; 0x7c
 800fd9c:	6878      	ldr	r0, [r7, #4]
 800fd9e:	f011 fe90 	bl	8021ac2 <_ZdlPvj>
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	4618      	mov	r0, r3
 800fda6:	3708      	adds	r7, #8
 800fda8:	46bd      	mov	sp, r7
 800fdaa:	bd80      	pop	{r7, pc}

0800fdac <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 800fdac:	b480      	push	{r7}
 800fdae:	b083      	sub	sp, #12
 800fdb0:	af00      	add	r7, sp, #0
 800fdb2:	6078      	str	r0, [r7, #4]
 800fdb4:	460b      	mov	r3, r1
 800fdb6:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	78fa      	ldrb	r2, [r7, #3]
 800fdbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
        displayOrientationChangeRequested = true;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	2201      	movs	r2, #1
 800fdc4:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
    }
 800fdc8:	bf00      	nop
 800fdca:	370c      	adds	r7, #12
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd2:	4770      	bx	lr

0800fdd4 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 800fdd4:	b580      	push	{r7, lr}
 800fdd6:	b082      	sub	sp, #8
 800fdd8:	af00      	add	r7, sp, #0
 800fdda:	6078      	str	r0, [r7, #4]
 800fddc:	460b      	mov	r3, r1
 800fdde:	807b      	strh	r3, [r7, #2]
 800fde0:	4613      	mov	r3, r2
 800fde2:	803b      	strh	r3, [r7, #0]
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 800fde4:	4b0c      	ldr	r3, [pc, #48]	; (800fe18 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x44>)
 800fde6:	881b      	ldrh	r3, [r3, #0]
 800fde8:	887a      	ldrh	r2, [r7, #2]
 800fdea:	429a      	cmp	r2, r3
 800fdec:	d304      	bcc.n	800fdf8 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x24>
 800fdee:	4b0b      	ldr	r3, [pc, #44]	; (800fe1c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x48>)
 800fdf0:	881b      	ldrh	r3, [r3, #0]
 800fdf2:	883a      	ldrh	r2, [r7, #0]
 800fdf4:	429a      	cmp	r2, r3
 800fdf6:	d205      	bcs.n	800fe04 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>
 800fdf8:	4b09      	ldr	r3, [pc, #36]	; (800fe20 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x4c>)
 800fdfa:	4a0a      	ldr	r2, [pc, #40]	; (800fe24 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x50>)
 800fdfc:	219e      	movs	r1, #158	; 0x9e
 800fdfe:	480a      	ldr	r0, [pc, #40]	; (800fe28 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x54>)
 800fe00:	f011 fe8c 	bl	8021b1c <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 800fe04:	4a09      	ldr	r2, [pc, #36]	; (800fe2c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x58>)
 800fe06:	887b      	ldrh	r3, [r7, #2]
 800fe08:	8013      	strh	r3, [r2, #0]
        FRAME_BUFFER_HEIGHT = height;
 800fe0a:	4a09      	ldr	r2, [pc, #36]	; (800fe30 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x5c>)
 800fe0c:	883b      	ldrh	r3, [r7, #0]
 800fe0e:	8013      	strh	r3, [r2, #0]
    }
 800fe10:	bf00      	nop
 800fe12:	3708      	adds	r7, #8
 800fe14:	46bd      	mov	sp, r7
 800fe16:	bd80      	pop	{r7, pc}
 800fe18:	2001fe7c 	.word	0x2001fe7c
 800fe1c:	2001fe7e 	.word	0x2001fe7e
 800fe20:	08023374 	.word	0x08023374
 800fe24:	080233d8 	.word	0x080233d8
 800fe28:	0802341c 	.word	0x0802341c
 800fe2c:	2001fe82 	.word	0x2001fe82
 800fe30:	2001fe84 	.word	0x2001fe84

0800fe34 <_ZN8touchgfx3HAL11getBlitCapsEv>:
     *
     * @return a bitmask of the supported blitcaps.
     *
     * @see enableDMAAcceleration
     */
    virtual BlitOperations getBlitCaps()
 800fe34:	b580      	push	{r7, lr}
 800fe36:	b082      	sub	sp, #8
 800fe38:	af00      	add	r7, sp, #0
 800fe3a:	6078      	str	r0, [r7, #4]
    {
        if (useDMAAcceleration)
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d009      	beq.n	800fe5a <_ZN8touchgfx3HAL11getBlitCapsEv+0x26>
        {
            return dma.getBlitCaps();
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	685a      	ldr	r2, [r3, #4]
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	685b      	ldr	r3, [r3, #4]
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	4610      	mov	r0, r2
 800fe54:	4798      	blx	r3
 800fe56:	4603      	mov	r3, r0
 800fe58:	e000      	b.n	800fe5c <_ZN8touchgfx3HAL11getBlitCapsEv+0x28>
        }
        return static_cast<BlitOperations>(0);
 800fe5a:	2300      	movs	r3, #0
    }
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	3708      	adds	r7, #8
 800fe60:	46bd      	mov	sp, r7
 800fe62:	bd80      	pop	{r7, pc}

0800fe64 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    /**
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     *
     * Has to be called from within the LCD IRQ rutine when the Back Porch Exit is reached.
     */
    virtual void backPorchExited()
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b082      	sub	sp, #8
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
    {
        swapFrameBuffers();
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f002 f949 	bl	8012104 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	33ac      	adds	r3, #172	; 0xac
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	4798      	blx	r3
    }
 800fe7e:	bf00      	nop
 800fe80:	3708      	adds	r7, #8
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}

0800fe86 <_ZN8touchgfx3HAL9sampleKeyERh>:
     * @param [out] key Output parameter that will be set to the key value if a keypress was
     *                  detected.
     *
     * @return True if a keypress was detected and the "key" parameter is set to a value.
     */
    virtual bool sampleKey(uint8_t& key)
 800fe86:	b480      	push	{r7}
 800fe88:	b083      	sub	sp, #12
 800fe8a:	af00      	add	r7, sp, #0
 800fe8c:	6078      	str	r0, [r7, #4]
 800fe8e:	6039      	str	r1, [r7, #0]
    {
        (void)key; // Unused variable
        return false;
 800fe90:	2300      	movs	r3, #0
    }
 800fe92:	4618      	mov	r0, r3
 800fe94:	370c      	adds	r7, #12
 800fe96:	46bd      	mov	sp, r7
 800fe98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9c:	4770      	bx	lr
	...

0800fea0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setAnimationStorage
     */
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b084      	sub	sp, #16
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	60f8      	str	r0, [r7, #12]
 800fea8:	60b9      	str	r1, [r7, #8]
 800feaa:	607a      	str	r2, [r7, #4]
 800feac:	603b      	str	r3, [r7, #0]
    {
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 800feae:	68bb      	ldr	r3, [r7, #8]
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d106      	bne.n	800fec2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 800feb4:	4b0f      	ldr	r3, [pc, #60]	; (800fef4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x54>)
 800feb6:	4a10      	ldr	r2, [pc, #64]	; (800fef8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x58>)
 800feb8:	f240 21d2 	movw	r1, #722	; 0x2d2
 800febc:	480f      	ldr	r0, [pc, #60]	; (800fefc <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 800febe:	f011 fe2d 	bl	8021b1c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	68ba      	ldr	r2, [r7, #8]
 800fec6:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	687a      	ldr	r2, [r7, #4]
 800fecc:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	bf14      	ite	ne
 800fed4:	2301      	movne	r3, #1
 800fed6:	2300      	moveq	r3, #0
 800fed8:	b2da      	uxtb	r2, r3
 800feda:	4b09      	ldr	r3, [pc, #36]	; (800ff00 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 800fedc:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	338c      	adds	r3, #140	; 0x8c
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	6839      	ldr	r1, [r7, #0]
 800fee8:	68f8      	ldr	r0, [r7, #12]
 800feea:	4798      	blx	r3
    }
 800feec:	bf00      	nop
 800feee:	3710      	adds	r7, #16
 800fef0:	46bd      	mov	sp, r7
 800fef2:	bd80      	pop	{r7, pc}
 800fef4:	08023460 	.word	0x08023460
 800fef8:	08023498 	.word	0x08023498
 800fefc:	0802341c 	.word	0x0802341c
 800ff00:	2001fe86 	.word	0x2001fe86

0800ff04 <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     * @param [in] animationStorage If non-null, the animation storage. If null animation storage
     *                              is disabled.
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
 800ff04:	b480      	push	{r7}
 800ff06:	b083      	sub	sp, #12
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	6078      	str	r0, [r7, #4]
 800ff0c:	6039      	str	r1, [r7, #0]
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	683a      	ldr	r2, [r7, #0]
 800ff12:	645a      	str	r2, [r3, #68]	; 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 800ff14:	683b      	ldr	r3, [r7, #0]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	bf14      	ite	ne
 800ff1a:	2301      	movne	r3, #1
 800ff1c:	2300      	moveq	r3, #0
 800ff1e:	b2da      	uxtb	r2, r3
 800ff20:	4b03      	ldr	r3, [pc, #12]	; (800ff30 <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x2c>)
 800ff22:	701a      	strb	r2, [r3, #0]
    }
 800ff24:	bf00      	nop
 800ff26:	370c      	adds	r7, #12
 800ff28:	46bd      	mov	sp, r7
 800ff2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff2e:	4770      	bx	lr
 800ff30:	2001fe87 	.word	0x2001fe87

0800ff34 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * Gets the flash data reader. This method must be implemented in
     * subclasses that uses a FlashDataReader object.
     *
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
 800ff34:	b480      	push	{r7}
 800ff36:	b083      	sub	sp, #12
 800ff38:	af00      	add	r7, sp, #0
 800ff3a:	6078      	str	r0, [r7, #4]
    {
        return 0;
 800ff3c:	2300      	movs	r3, #0
    }
 800ff3e:	4618      	mov	r0, r3
 800ff40:	370c      	adds	r7, #12
 800ff42:	46bd      	mov	sp, r7
 800ff44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff48:	4770      	bx	lr

0800ff4a <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param  ms Number of milliseconds to wait.
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
 800ff4a:	b580      	push	{r7, lr}
 800ff4c:	b082      	sub	sp, #8
 800ff4e:	af00      	add	r7, sp, #0
 800ff50:	6078      	str	r0, [r7, #4]
 800ff52:	460b      	mov	r3, r1
 800ff54:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d004      	beq.n	800ff68 <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff62:	887a      	ldrh	r2, [r7, #2]
 800ff64:	4610      	mov	r0, r2
 800ff66:	4798      	blx	r3
        }
    }
 800ff68:	bf00      	nop
 800ff6a:	3708      	adds	r7, #8
 800ff6c:	46bd      	mov	sp, r7
 800ff6e:	bd80      	pop	{r7, pc}

0800ff70 <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     * getTFTCurrentLine function is never called and can be disregarded.
     *
     * @return In this default implementation, 0xFFFF is returned to signify "not
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
 800ff70:	b480      	push	{r7}
 800ff72:	b083      	sub	sp, #12
 800ff74:	af00      	add	r7, sp, #0
 800ff76:	6078      	str	r0, [r7, #4]
    {
        return 0xFFFFu;
 800ff78:	f64f 73ff 	movw	r3, #65535	; 0xffff
    }
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	370c      	adds	r7, #12
 800ff80:	46bd      	mov	sp, r7
 800ff82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff86:	4770      	bx	lr

0800ff88 <_ZN8touchgfx3HAL10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA implementation. As default,
     * will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b082      	sub	sp, #8
 800ff8c:	af00      	add	r7, sp, #0
 800ff8e:	6078      	str	r0, [r7, #4]
    {
        return dma.getDMAType();
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	685a      	ldr	r2, [r3, #4]
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	685b      	ldr	r3, [r3, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	3318      	adds	r3, #24
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	4610      	mov	r0, r2
 800ffa0:	4798      	blx	r3
 800ffa2:	4603      	mov	r3, r0
    }
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	3708      	adds	r7, #8
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}

0800ffac <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:

    /** Called by the touch driver to indicate that no touch is currently detected. */
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
 800ffac:	b480      	push	{r7}
 800ffae:	b085      	sub	sp, #20
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ffc0:	429a      	cmp	r2, r3
 800ffc2:	d011      	beq.n	800ffe8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>
        {
            if (DISPLAY_ROTATION == rotate0)
 800ffc4:	4b14      	ldr	r3, [pc, #80]	; (8010018 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d11e      	bne.n	801000a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 800ffcc:	4b13      	ldr	r3, [pc, #76]	; (801001c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800ffce:	881b      	ldrh	r3, [r3, #0]
 800ffd0:	81bb      	strh	r3, [r7, #12]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800ffd2:	4b13      	ldr	r3, [pc, #76]	; (8010020 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800ffd4:	881a      	ldrh	r2, [r3, #0]
 800ffd6:	4b11      	ldr	r3, [pc, #68]	; (801001c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800ffd8:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = tmp;
 800ffda:	4a11      	ldr	r2, [pc, #68]	; (8010020 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800ffdc:	89bb      	ldrh	r3, [r7, #12]
 800ffde:	8013      	strh	r3, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 800ffe0:	4b0d      	ldr	r3, [pc, #52]	; (8010018 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800ffe2:	2201      	movs	r2, #1
 800ffe4:	701a      	strb	r2, [r3, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
        }
    }
 800ffe6:	e010      	b.n	801000a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
        else if (DISPLAY_ROTATION != rotate0)
 800ffe8:	4b0b      	ldr	r3, [pc, #44]	; (8010018 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 800ffea:	781b      	ldrb	r3, [r3, #0]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d00c      	beq.n	801000a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x5e>
            const uint16_t tmp = DISPLAY_HEIGHT;
 800fff0:	4b0a      	ldr	r3, [pc, #40]	; (801001c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800fff2:	881b      	ldrh	r3, [r3, #0]
 800fff4:	81fb      	strh	r3, [r7, #14]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800fff6:	4b0a      	ldr	r3, [pc, #40]	; (8010020 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 800fff8:	881a      	ldrh	r2, [r3, #0]
 800fffa:	4b08      	ldr	r3, [pc, #32]	; (801001c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x70>)
 800fffc:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = tmp;
 800fffe:	4a08      	ldr	r2, [pc, #32]	; (8010020 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x74>)
 8010000:	89fb      	ldrh	r3, [r7, #14]
 8010002:	8013      	strh	r3, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8010004:	4b04      	ldr	r3, [pc, #16]	; (8010018 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x6c>)
 8010006:	2200      	movs	r2, #0
 8010008:	701a      	strb	r2, [r3, #0]
    }
 801000a:	bf00      	nop
 801000c:	3714      	adds	r7, #20
 801000e:	46bd      	mov	sp, r7
 8010010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010014:	4770      	bx	lr
 8010016:	bf00      	nop
 8010018:	2001fe80 	.word	0x2001fe80
 801001c:	2001fe7e 	.word	0x2001fe7e
 8010020:	2001fe7c 	.word	0x2001fe7c

08010024 <_ZN8touchgfx3HAL15InvalidateCacheEv>:
     * Invalidate D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Hardware to Software indicating the cache should be invalidated.
     */
    virtual void InvalidateCache()
 8010024:	b480      	push	{r7}
 8010026:	b083      	sub	sp, #12
 8010028:	af00      	add	r7, sp, #0
 801002a:	6078      	str	r0, [r7, #4]
    {
    }
 801002c:	bf00      	nop
 801002e:	370c      	adds	r7, #12
 8010030:	46bd      	mov	sp, r7
 8010032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010036:	4770      	bx	lr

08010038 <_ZN8touchgfx3HAL10FlushCacheEv>:
     * Flush D-Cache.
     *
     * Called by setRenderingMethod when changing rendering method
     * from Software to Hardware indicating the cache should be invalidated.
     */
    virtual void FlushCache()
 8010038:	b480      	push	{r7}
 801003a:	b083      	sub	sp, #12
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
    {
    }
 8010040:	bf00      	nop
 8010042:	370c      	adds	r7, #12
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr

0801004c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 801004c:	b580      	push	{r7, lr}
 801004e:	b082      	sub	sp, #8
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	4618      	mov	r0, r3
 8010058:	f001 fab8 	bl	80115cc <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 801005c:	bf00      	nop
 801005e:	3708      	adds	r7, #8
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}

08010064 <_ZN20TouchGFXGeneratedHALD1Ev>:
class TouchGFXGeneratedHAL : public touchgfx::HAL
 8010064:	b580      	push	{r7, lr}
 8010066:	b082      	sub	sp, #8
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
 801006c:	4a05      	ldr	r2, [pc, #20]	; (8010084 <_ZN20TouchGFXGeneratedHALD1Ev+0x20>)
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	601a      	str	r2, [r3, #0]
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	4618      	mov	r0, r3
 8010076:	f7ff fe79 	bl	800fd6c <_ZN8touchgfx3HALD1Ev>
 801007a:	687b      	ldr	r3, [r7, #4]
 801007c:	4618      	mov	r0, r3
 801007e:	3708      	adds	r7, #8
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}
 8010084:	08023e08 	.word	0x08023e08

08010088 <_ZN20TouchGFXGeneratedHALD0Ev>:
 8010088:	b580      	push	{r7, lr}
 801008a:	b082      	sub	sp, #8
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
 8010090:	6878      	ldr	r0, [r7, #4]
 8010092:	f7ff ffe7 	bl	8010064 <_ZN20TouchGFXGeneratedHALD1Ev>
 8010096:	217c      	movs	r1, #124	; 0x7c
 8010098:	6878      	ldr	r0, [r7, #4]
 801009a:	f011 fd12 	bl	8021ac2 <_ZdlPvj>
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	4618      	mov	r0, r3
 80100a2:	3708      	adds	r7, #8
 80100a4:	46bd      	mov	sp, r7
 80100a6:	bd80      	pop	{r7, pc}

080100a8 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b082      	sub	sp, #8
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
    {
        TouchGFXGeneratedHAL::flushFrameBuffer();
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	4618      	mov	r0, r3
 80100b4:	f7ff ffca 	bl	801004c <_ZN20TouchGFXGeneratedHAL16flushFrameBufferEv>
    }
 80100b8:	bf00      	nop
 80100ba:	3708      	adds	r7, #8
 80100bc:	46bd      	mov	sp, r7
 80100be:	bd80      	pop	{r7, pc}

080100c0 <_ZN11TouchGFXHAL10initializeEv>:
/* USER CODE BEGIN TouchGFXHAL.cpp */

using namespace touchgfx;

void TouchGFXHAL::initialize()
{
 80100c0:	b580      	push	{r7, lr}
 80100c2:	b082      	sub	sp, #8
 80100c4:	af00      	add	r7, sp, #0
 80100c6:	6078      	str	r0, [r7, #4]
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.
    // Please note, HAL::initialize() must be called to initialize the framework.

    TouchGFXGeneratedHAL::initialize();
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	4618      	mov	r0, r3
 80100cc:	f000 ff1e 	bl	8010f0c <_ZN20TouchGFXGeneratedHAL10initializeEv>
}
 80100d0:	bf00      	nop
 80100d2:	3708      	adds	r7, #8
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}

080100d8 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
 * Gets the frame buffer address used by the TFT controller.
 *
 * @return The address of the frame buffer currently being displayed on the TFT.
 */
uint16_t* TouchGFXHAL::getTFTFrameBuffer() const
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b082      	sub	sp, #8
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of getTFTFrameBuffer().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    return TouchGFXGeneratedHAL::getTFTFrameBuffer();
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	4618      	mov	r0, r3
 80100e4:	f000 ff76 	bl	8010fd4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>
 80100e8:	4603      	mov	r3, r0
}
 80100ea:	4618      	mov	r0, r3
 80100ec:	3708      	adds	r7, #8
 80100ee:	46bd      	mov	sp, r7
 80100f0:	bd80      	pop	{r7, pc}

080100f2 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
 * Sets the frame buffer address used by the TFT controller.
 *
 * @param [in] address New frame buffer address.
 */
void TouchGFXHAL::setTFTFrameBuffer(uint16_t* address)
{
 80100f2:	b580      	push	{r7, lr}
 80100f4:	b082      	sub	sp, #8
 80100f6:	af00      	add	r7, sp, #0
 80100f8:	6078      	str	r0, [r7, #4]
 80100fa:	6039      	str	r1, [r7, #0]
    // Calling parent implementation of setTFTFrameBuffer(uint16_t* address).
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	6839      	ldr	r1, [r7, #0]
 8010100:	4618      	mov	r0, r3
 8010102:	f000 ff75 	bl	8010ff0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>
}
 8010106:	bf00      	nop
 8010108:	3708      	adds	r7, #8
 801010a:	46bd      	mov	sp, r7
 801010c:	bd80      	pop	{r7, pc}

0801010e <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
 * @param rect The area of the screen that has been drawn, expressed in absolute coordinates.
 *
 * @see flushFrameBuffer().
 */
void TouchGFXHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 801010e:	b580      	push	{r7, lr}
 8010110:	b082      	sub	sp, #8
 8010112:	af00      	add	r7, sp, #0
 8010114:	6078      	str	r0, [r7, #4]
 8010116:	6039      	str	r1, [r7, #0]
    // be called to notify the touchgfx framework that flush has been performed.
    // To calculate he start adress of rect,
    // use advanceFrameBufferToRect(uint8_t* fbPtr, const touchgfx::Rect& rect)
    // defined in TouchGFXGeneratedHAL.cpp

    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	6839      	ldr	r1, [r7, #0]
 801011c:	4618      	mov	r0, r3
 801011e:	f000 ff72 	bl	8011006 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>
}
 8010122:	bf00      	nop
 8010124:	3708      	adds	r7, #8
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}

0801012a <_ZN11TouchGFXHAL9blockCopyEPvPKvm>:

bool TouchGFXHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 801012a:	b580      	push	{r7, lr}
 801012c:	b084      	sub	sp, #16
 801012e:	af00      	add	r7, sp, #0
 8010130:	60f8      	str	r0, [r7, #12]
 8010132:	60b9      	str	r1, [r7, #8]
 8010134:	607a      	str	r2, [r7, #4]
 8010136:	603b      	str	r3, [r7, #0]
    return TouchGFXGeneratedHAL::blockCopy(dest, src, numBytes);
 8010138:	68f8      	ldr	r0, [r7, #12]
 801013a:	683b      	ldr	r3, [r7, #0]
 801013c:	687a      	ldr	r2, [r7, #4]
 801013e:	68b9      	ldr	r1, [r7, #8]
 8010140:	f000 ff6f 	bl	8011022 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>
 8010144:	4603      	mov	r3, r0
}
 8010146:	4618      	mov	r0, r3
 8010148:	3710      	adds	r7, #16
 801014a:	46bd      	mov	sp, r7
 801014c:	bd80      	pop	{r7, pc}

0801014e <_ZN11TouchGFXHAL19configureInterruptsEv>:
/**
 * Configures the interrupts relevant for TouchGFX. This primarily entails setting
 * the interrupt priorities for the DMA and LCD interrupts.
 */
void TouchGFXHAL::configureInterrupts()
{
 801014e:	b580      	push	{r7, lr}
 8010150:	b082      	sub	sp, #8
 8010152:	af00      	add	r7, sp, #0
 8010154:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of configureInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::configureInterrupts();
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	4618      	mov	r0, r3
 801015a:	f000 fef9 	bl	8010f50 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>
}
 801015e:	bf00      	nop
 8010160:	3708      	adds	r7, #8
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}

08010166 <_ZN11TouchGFXHAL16enableInterruptsEv>:

/**
 * Used for enabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::enableInterrupts()
{
 8010166:	b580      	push	{r7, lr}
 8010168:	b082      	sub	sp, #8
 801016a:	af00      	add	r7, sp, #0
 801016c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableInterrupts();
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	4618      	mov	r0, r3
 8010172:	f000 fef7 	bl	8010f64 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>
}
 8010176:	bf00      	nop
 8010178:	3708      	adds	r7, #8
 801017a:	46bd      	mov	sp, r7
 801017c:	bd80      	pop	{r7, pc}

0801017e <_ZN11TouchGFXHAL17disableInterruptsEv>:

/**
 * Used for disabling interrupts set in configureInterrupts()
 */
void TouchGFXHAL::disableInterrupts()
{
 801017e:	b580      	push	{r7, lr}
 8010180:	b082      	sub	sp, #8
 8010182:	af00      	add	r7, sp, #0
 8010184:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of disableInterrupts().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::disableInterrupts();
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	4618      	mov	r0, r3
 801018a:	f000 fef5 	bl	8010f78 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
}
 801018e:	bf00      	nop
 8010190:	3708      	adds	r7, #8
 8010192:	46bd      	mov	sp, r7
 8010194:	bd80      	pop	{r7, pc}

08010196 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
/**
 * Configure the LCD controller to fire interrupts at VSYNC. Called automatically
 * once TouchGFX initialization has completed.
 */
void TouchGFXHAL::enableLCDControllerInterrupt()
{
 8010196:	b580      	push	{r7, lr}
 8010198:	b082      	sub	sp, #8
 801019a:	af00      	add	r7, sp, #0
 801019c:	6078      	str	r0, [r7, #4]
    // Calling parent implementation of enableLCDControllerInterrupt().
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    TouchGFXGeneratedHAL::enableLCDControllerInterrupt();
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	4618      	mov	r0, r3
 80101a2:	f000 fef3 	bl	8010f8c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>
}
 80101a6:	bf00      	nop
 80101a8:	3708      	adds	r7, #8
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}

080101ae <_ZN11TouchGFXHAL10beginFrameEv>:

bool TouchGFXHAL::beginFrame()
{
 80101ae:	b580      	push	{r7, lr}
 80101b0:	b082      	sub	sp, #8
 80101b2:	af00      	add	r7, sp, #0
 80101b4:	6078      	str	r0, [r7, #4]
    return TouchGFXGeneratedHAL::beginFrame();
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	4618      	mov	r0, r3
 80101ba:	f000 fef1 	bl	8010fa0 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>
 80101be:	4603      	mov	r3, r0
}
 80101c0:	4618      	mov	r0, r3
 80101c2:	3708      	adds	r7, #8
 80101c4:	46bd      	mov	sp, r7
 80101c6:	bd80      	pop	{r7, pc}

080101c8 <_ZN11TouchGFXHAL8endFrameEv>:

void TouchGFXHAL::endFrame()
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b082      	sub	sp, #8
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
    TouchGFXGeneratedHAL::endFrame();
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	4618      	mov	r0, r3
 80101d4:	f000 fef1 	bl	8010fba <_ZN20TouchGFXGeneratedHAL8endFrameEv>
}
 80101d8:	bf00      	nop
 80101da:	3708      	adds	r7, #8
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}

080101e0 <_ZN11TouchGFXHALD1Ev>:
class TouchGFXHAL : public TouchGFXGeneratedHAL
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b082      	sub	sp, #8
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
 80101e8:	4a05      	ldr	r2, [pc, #20]	; (8010200 <_ZN11TouchGFXHALD1Ev+0x20>)
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	601a      	str	r2, [r3, #0]
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	4618      	mov	r0, r3
 80101f2:	f7ff ff37 	bl	8010064 <_ZN20TouchGFXGeneratedHALD1Ev>
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	4618      	mov	r0, r3
 80101fa:	3708      	adds	r7, #8
 80101fc:	46bd      	mov	sp, r7
 80101fe:	bd80      	pop	{r7, pc}
 8010200:	08023be8 	.word	0x08023be8

08010204 <_ZN11TouchGFXHALD0Ev>:
 8010204:	b580      	push	{r7, lr}
 8010206:	b082      	sub	sp, #8
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
 801020c:	6878      	ldr	r0, [r7, #4]
 801020e:	f7ff ffe7 	bl	80101e0 <_ZN11TouchGFXHALD1Ev>
 8010212:	217c      	movs	r1, #124	; 0x7c
 8010214:	6878      	ldr	r0, [r7, #4]
 8010216:	f011 fc54 	bl	8021ac2 <_ZdlPvj>
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	4618      	mov	r0, r3
 801021e:	3708      	adds	r7, #8
 8010220:	46bd      	mov	sp, r7
 8010222:	bd80      	pop	{r7, pc}

08010224 <_ZN8touchgfx10OSWrappers10initializeEv>:

/*
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
 8010224:	b580      	push	{r7, lr}
 8010226:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8010228:	2200      	movs	r2, #0
 801022a:	2101      	movs	r1, #1
 801022c:	2001      	movs	r0, #1
 801022e:	f7fa fb96 	bl	800a95e <osSemaphoreNew>
 8010232:	4603      	mov	r3, r0
 8010234:	4a0f      	ldr	r2, [pc, #60]	; (8010274 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8010236:	6013      	str	r3, [r2, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8010238:	4b0e      	ldr	r3, [pc, #56]	; (8010274 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	2b00      	cmp	r3, #0
 801023e:	d105      	bne.n	801024c <_ZN8touchgfx10OSWrappers10initializeEv+0x28>
 8010240:	4b0d      	ldr	r3, [pc, #52]	; (8010278 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8010242:	4a0e      	ldr	r2, [pc, #56]	; (801027c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8010244:	2128      	movs	r1, #40	; 0x28
 8010246:	480e      	ldr	r0, [pc, #56]	; (8010280 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 8010248:	f011 fc68 	bl	8021b1c <__assert_func>

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 801024c:	2200      	movs	r2, #0
 801024e:	2104      	movs	r1, #4
 8010250:	2001      	movs	r0, #1
 8010252:	f7fa fc9b 	bl	800ab8c <osMessageQueueNew>
 8010256:	4603      	mov	r3, r0
 8010258:	4a0a      	ldr	r2, [pc, #40]	; (8010284 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 801025a:	6013      	str	r3, [r2, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 801025c:	4b09      	ldr	r3, [pc, #36]	; (8010284 <_ZN8touchgfx10OSWrappers10initializeEv+0x60>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	2b00      	cmp	r3, #0
 8010262:	d105      	bne.n	8010270 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>
 8010264:	4b08      	ldr	r3, [pc, #32]	; (8010288 <_ZN8touchgfx10OSWrappers10initializeEv+0x64>)
 8010266:	4a05      	ldr	r2, [pc, #20]	; (801027c <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8010268:	212c      	movs	r1, #44	; 0x2c
 801026a:	4805      	ldr	r0, [pc, #20]	; (8010280 <_ZN8touchgfx10OSWrappers10initializeEv+0x5c>)
 801026c:	f011 fc56 	bl	8021b1c <__assert_func>
}
 8010270:	bf00      	nop
 8010272:	bd80      	pop	{r7, pc}
 8010274:	2001faac 	.word	0x2001faac
 8010278:	080234e8 	.word	0x080234e8
 801027c:	08023534 	.word	0x08023534
 8010280:	08023564 	.word	0x08023564
 8010284:	2001fab0 	.word	0x2001fab0
 8010288:	08023590 	.word	0x08023590

0801028c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
 801028c:	b580      	push	{r7, lr}
 801028e:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8010290:	4b04      	ldr	r3, [pc, #16]	; (80102a4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>)
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	f04f 31ff 	mov.w	r1, #4294967295
 8010298:	4618      	mov	r0, r3
 801029a:	f7fa fbe9 	bl	800aa70 <osSemaphoreAcquire>
}
 801029e:	bf00      	nop
 80102a0:	bd80      	pop	{r7, pc}
 80102a2:	bf00      	nop
 80102a4:	2001faac 	.word	0x2001faac

080102a8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80102ac:	4b03      	ldr	r3, [pc, #12]	; (80102bc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x14>)
 80102ae:	681b      	ldr	r3, [r3, #0]
 80102b0:	4618      	mov	r0, r3
 80102b2:	f7fa fc2b 	bl	800ab0c <osSemaphoreRelease>
}
 80102b6:	bf00      	nop
 80102b8:	bd80      	pop	{r7, pc}
 80102ba:	bf00      	nop
 80102bc:	2001faac 	.word	0x2001faac

080102c0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 *
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
 80102c0:	b580      	push	{r7, lr}
 80102c2:	af00      	add	r7, sp, #0
    osSemaphoreAcquire(frame_buffer_sem, 0);
 80102c4:	4b03      	ldr	r3, [pc, #12]	; (80102d4 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x14>)
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	2100      	movs	r1, #0
 80102ca:	4618      	mov	r0, r3
 80102cc:	f7fa fbd0 	bl	800aa70 <osSemaphoreAcquire>
}
 80102d0:	bf00      	nop
 80102d2:	bd80      	pop	{r7, pc}
 80102d4:	2001faac 	.word	0x2001faac

080102d8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 80102d8:	b580      	push	{r7, lr}
 80102da:	af00      	add	r7, sp, #0
    osSemaphoreRelease(frame_buffer_sem);
 80102dc:	4b03      	ldr	r3, [pc, #12]	; (80102ec <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x14>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	4618      	mov	r0, r3
 80102e2:	f7fa fc13 	bl	800ab0c <osSemaphoreRelease>
}
 80102e6:	bf00      	nop
 80102e8:	bd80      	pop	{r7, pc}
 80102ea:	bf00      	nop
 80102ec:	2001faac 	.word	0x2001faac

080102f0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 80102f0:	b580      	push	{r7, lr}
 80102f2:	b082      	sub	sp, #8
 80102f4:	af00      	add	r7, sp, #0
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 80102f6:	4b09      	ldr	r3, [pc, #36]	; (801031c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 80102f8:	6818      	ldr	r0, [r3, #0]
 80102fa:	1d39      	adds	r1, r7, #4
 80102fc:	2300      	movs	r3, #0
 80102fe:	2200      	movs	r2, #0
 8010300:	f7fa fcb8 	bl	800ac74 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8010304:	4b05      	ldr	r3, [pc, #20]	; (801031c <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2c>)
 8010306:	6818      	ldr	r0, [r3, #0]
 8010308:	1d39      	adds	r1, r7, #4
 801030a:	f04f 33ff 	mov.w	r3, #4294967295
 801030e:	2200      	movs	r2, #0
 8010310:	f7fa fcb0 	bl	800ac74 <osMessageQueueGet>
}
 8010314:	bf00      	nop
 8010316:	3708      	adds	r7, #8
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}
 801031c:	2001fab0 	.word	0x2001fab0

08010320 <_ZN8touchgfx9colortypeC1Ev>:
    colortype()
 8010320:	b480      	push	{r7}
 8010322:	b083      	sub	sp, #12
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
        : color(0)
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	2200      	movs	r2, #0
 801032c:	601a      	str	r2, [r3, #0]
    }
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	4618      	mov	r0, r3
 8010332:	370c      	adds	r7, #12
 8010334:	46bd      	mov	sp, r7
 8010336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033a:	4770      	bx	lr

0801033c <_ZN8touchgfx9DMA_QueueD1Ev>:
     * @param  op The blitop to add.
     */
    virtual void pushCopyOf(const BlitOp& op) = 0;

    /** Finalizes an instance of the DMA_Queue class. */
    virtual ~DMA_Queue()
 801033c:	b480      	push	{r7}
 801033e:	b083      	sub	sp, #12
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
    {
 8010344:	4a04      	ldr	r2, [pc, #16]	; (8010358 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	601a      	str	r2, [r3, #0]
    }
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	4618      	mov	r0, r3
 801034e:	370c      	adds	r7, #12
 8010350:	46bd      	mov	sp, r7
 8010352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010356:	4770      	bx	lr
 8010358:	08023d10 	.word	0x08023d10

0801035c <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 801035c:	b580      	push	{r7, lr}
 801035e:	b082      	sub	sp, #8
 8010360:	af00      	add	r7, sp, #0
 8010362:	6078      	str	r0, [r7, #4]
    }
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	f7ff ffe9 	bl	801033c <_ZN8touchgfx9DMA_QueueD1Ev>
 801036a:	2104      	movs	r1, #4
 801036c:	6878      	ldr	r0, [r7, #4]
 801036e:	f011 fba8 	bl	8021ac2 <_ZdlPvj>
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	4618      	mov	r0, r3
 8010376:	3708      	adds	r7, #8
 8010378:	46bd      	mov	sp, r7
 801037a:	bd80      	pop	{r7, pc}

0801037c <_ZN8touchgfx13DMA_Interface10initializeEv>:
    {
        waitForFrameBufferSemaphore();
    }

    /** Perform initialization. Does nothing in this base class. */
    virtual void initialize()
 801037c:	b480      	push	{r7}
 801037e:	b083      	sub	sp, #12
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
    {
    }
 8010384:	bf00      	nop
 8010386:	370c      	adds	r7, #12
 8010388:	46bd      	mov	sp, r7
 801038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801038e:	4770      	bx	lr

08010390 <_ZN8touchgfx13DMA_Interface10getDMATypeEv>:
     * Function for obtaining the DMA type of the concrete DMA_Interface implementation. As
     * default, will return DMA_TYPE_GENERIC type value.
     *
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual DMAType getDMAType()
 8010390:	b480      	push	{r7}
 8010392:	b083      	sub	sp, #12
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
    {
        return DMA_TYPE_GENERIC;
 8010398:	2300      	movs	r3, #0
    }
 801039a:	4618      	mov	r0, r3
 801039c:	370c      	adds	r7, #12
 801039e:	46bd      	mov	sp, r7
 80103a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103a4:	4770      	bx	lr
	...

080103a8 <_ZN8touchgfx13DMA_InterfaceD1Ev>:

    /** Finalizes an instance of the DMA_Interface class. */
    virtual ~DMA_Interface()
 80103a8:	b480      	push	{r7}
 80103aa:	b083      	sub	sp, #12
 80103ac:	af00      	add	r7, sp, #0
 80103ae:	6078      	str	r0, [r7, #4]
    {
 80103b0:	4a04      	ldr	r2, [pc, #16]	; (80103c4 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	601a      	str	r2, [r3, #0]
    }
 80103b6:	687b      	ldr	r3, [r7, #4]
 80103b8:	4618      	mov	r0, r3
 80103ba:	370c      	adds	r7, #12
 80103bc:	46bd      	mov	sp, r7
 80103be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103c2:	4770      	bx	lr
 80103c4:	08024088 	.word	0x08024088

080103c8 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 80103c8:	b580      	push	{r7, lr}
 80103ca:	b082      	sub	sp, #8
 80103cc:	af00      	add	r7, sp, #0
 80103ce:	6078      	str	r0, [r7, #4]
    }
 80103d0:	6878      	ldr	r0, [r7, #4]
 80103d2:	f7ff ffe9 	bl	80103a8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 80103d6:	210c      	movs	r1, #12
 80103d8:	6878      	ldr	r0, [r7, #4]
 80103da:	f011 fb72 	bl	8021ac2 <_ZdlPvj>
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	4618      	mov	r0, r3
 80103e2:	3708      	adds	r7, #8
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}

080103e8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
    /**
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 80103e8:	b480      	push	{r7}
 80103ea:	b083      	sub	sp, #12
 80103ec:	af00      	add	r7, sp, #0
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 80103f2:	4a09      	ldr	r2, [pc, #36]	; (8010418 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	601a      	str	r2, [r3, #0]
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	683a      	ldr	r2, [r7, #0]
 80103fc:	605a      	str	r2, [r3, #4]
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2200      	movs	r2, #0
 8010402:	721a      	strb	r2, [r3, #8]
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	2200      	movs	r2, #0
 8010408:	725a      	strb	r2, [r3, #9]
    {
    }
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	4618      	mov	r0, r3
 801040e:	370c      	adds	r7, #12
 8010410:	46bd      	mov	sp, r7
 8010412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010416:	4770      	bx	lr
 8010418:	08024088 	.word	0x08024088

0801041c <_ZN8STM32DMA18signalDMAInterruptEv>:
    /**
     * @fn virtual void STM32DMA::signalDMAInterrupt();
     *
     * @brief Does nothing.
     */
    virtual void signalDMAInterrupt()
 801041c:	b480      	push	{r7}
 801041e:	b083      	sub	sp, #12
 8010420:	af00      	add	r7, sp, #0
 8010422:	6078      	str	r0, [r7, #4]
    {
    }
 8010424:	bf00      	nop
 8010426:	370c      	adds	r7, #12
 8010428:	46bd      	mov	sp, r7
 801042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042e:	4770      	bx	lr

08010430 <_ZN8STM32DMA5flushEv>:
     * @fn virtual void STM32DMA::flush();
     *
     * @brief Block until all DMA transfers are complete. Since this particular DMA does not do
     * anything, return immediately.
     */
    virtual void flush()
 8010430:	b480      	push	{r7}
 8010432:	b083      	sub	sp, #12
 8010434:	af00      	add	r7, sp, #0
 8010436:	6078      	str	r0, [r7, #4]
    {
    }
 8010438:	bf00      	nop
 801043a:	370c      	adds	r7, #12
 801043c:	46bd      	mov	sp, r7
 801043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010442:	4770      	bx	lr

08010444 <_ZN8touchgfx6BlitOpC1Ev>:

/**
 * BlitOp instances carry the required information for performing operations on the LCD
 * (framebuffer) using DMA.
 */
struct BlitOp
 8010444:	b580      	push	{r7, lr}
 8010446:	b082      	sub	sp, #8
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
 801044c:	687b      	ldr	r3, [r7, #4]
 801044e:	330c      	adds	r3, #12
 8010450:	4618      	mov	r0, r3
 8010452:	f7ff ff65 	bl	8010320 <_ZN8touchgfx9colortypeC1Ev>
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	4618      	mov	r0, r3
 801045a:	3708      	adds	r7, #8
 801045c:	46bd      	mov	sp, r7
 801045e:	bd80      	pop	{r7, pc}

08010460 <_ZN8STM32DMAC1Ev>:
  */

#include <STM32DMA.hpp>
#include <assert.h>

STM32DMA::STM32DMA()
 8010460:	b580      	push	{r7, lr}
 8010462:	b082      	sub	sp, #8
 8010464:	af00      	add	r7, sp, #0
 8010466:	6078      	str	r0, [r7, #4]
    : DMA_Interface(q), q(&b, 1)
 8010468:	687a      	ldr	r2, [r7, #4]
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	330c      	adds	r3, #12
 801046e:	4619      	mov	r1, r3
 8010470:	4610      	mov	r0, r2
 8010472:	f7ff ffb9 	bl	80103e8 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8010476:	4a0b      	ldr	r2, [pc, #44]	; (80104a4 <_ZN8STM32DMAC1Ev+0x44>)
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	601a      	str	r2, [r3, #0]
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	f103 000c 	add.w	r0, r3, #12
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	3320      	adds	r3, #32
 8010486:	2201      	movs	r2, #1
 8010488:	4619      	mov	r1, r3
 801048a:	f001 ff75 	bl	8012378 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 801048e:	687b      	ldr	r3, [r7, #4]
 8010490:	3320      	adds	r3, #32
 8010492:	4618      	mov	r0, r3
 8010494:	f7ff ffd6 	bl	8010444 <_ZN8touchgfx6BlitOpC1Ev>
{
}
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	4618      	mov	r0, r3
 801049c:	3708      	adds	r7, #8
 801049e:	46bd      	mov	sp, r7
 80104a0:	bd80      	pop	{r7, pc}
 80104a2:	bf00      	nop
 80104a4:	08023cc0 	.word	0x08023cc0

080104a8 <_ZN8STM32DMA11getBlitCapsEv>:

touchgfx::BlitOperations STM32DMA::getBlitCaps()
{
 80104a8:	b480      	push	{r7}
 80104aa:	b083      	sub	sp, #12
 80104ac:	af00      	add	r7, sp, #0
 80104ae:	6078      	str	r0, [r7, #4]
    return static_cast<touchgfx::BlitOperations>(0);
 80104b0:	2300      	movs	r3, #0
}
 80104b2:	4618      	mov	r0, r3
 80104b4:	370c      	adds	r7, #12
 80104b6:	46bd      	mov	sp, r7
 80104b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104bc:	4770      	bx	lr
	...

080104c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32DMA::setupDataCopy(const touchgfx::BlitOp& blitOp)
{
 80104c0:	b580      	push	{r7, lr}
 80104c2:	b082      	sub	sp, #8
 80104c4:	af00      	add	r7, sp, #0
 80104c6:	6078      	str	r0, [r7, #4]
 80104c8:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 80104ca:	4b03      	ldr	r3, [pc, #12]	; (80104d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x18>)
 80104cc:	4a03      	ldr	r2, [pc, #12]	; (80104dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1c>)
 80104ce:	2122      	movs	r1, #34	; 0x22
 80104d0:	4803      	ldr	r0, [pc, #12]	; (80104e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x20>)
 80104d2:	f011 fb23 	bl	8021b1c <__assert_func>
 80104d6:	bf00      	nop
 80104d8:	080235d4 	.word	0x080235d4
 80104dc:	080235f8 	.word	0x080235f8
 80104e0:	08023638 	.word	0x08023638

080104e4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
}

void STM32DMA::setupDataFill(const touchgfx::BlitOp& blitOp)
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b082      	sub	sp, #8
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
 80104ec:	6039      	str	r1, [r7, #0]
    assert(0 && "DMA operation not supported");
 80104ee:	4b03      	ldr	r3, [pc, #12]	; (80104fc <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x18>)
 80104f0:	4a03      	ldr	r2, [pc, #12]	; (8010500 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1c>)
 80104f2:	2127      	movs	r1, #39	; 0x27
 80104f4:	4803      	ldr	r0, [pc, #12]	; (8010504 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x20>)
 80104f6:	f011 fb11 	bl	8021b1c <__assert_func>
 80104fa:	bf00      	nop
 80104fc:	080235d4 	.word	0x080235d4
 8010500:	08023664 	.word	0x08023664
 8010504:	08023638 	.word	0x08023638

08010508 <_ZN8STM32DMAD1Ev>:
class STM32DMA : public touchgfx::DMA_Interface
 8010508:	b580      	push	{r7, lr}
 801050a:	b082      	sub	sp, #8
 801050c:	af00      	add	r7, sp, #0
 801050e:	6078      	str	r0, [r7, #4]
 8010510:	4a08      	ldr	r2, [pc, #32]	; (8010534 <_ZN8STM32DMAD1Ev+0x2c>)
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	601a      	str	r2, [r3, #0]
 8010516:	687b      	ldr	r3, [r7, #4]
 8010518:	330c      	adds	r3, #12
 801051a:	4618      	mov	r0, r3
 801051c:	f000 f81c 	bl	8010558 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	4618      	mov	r0, r3
 8010524:	f7ff ff40 	bl	80103a8 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	4618      	mov	r0, r3
 801052c:	3708      	adds	r7, #8
 801052e:	46bd      	mov	sp, r7
 8010530:	bd80      	pop	{r7, pc}
 8010532:	bf00      	nop
 8010534:	08023cc0 	.word	0x08023cc0

08010538 <_ZN8STM32DMAD0Ev>:
 8010538:	b580      	push	{r7, lr}
 801053a:	b082      	sub	sp, #8
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f7ff ffe1 	bl	8010508 <_ZN8STM32DMAD1Ev>
 8010546:	2144      	movs	r1, #68	; 0x44
 8010548:	6878      	ldr	r0, [r7, #4]
 801054a:	f011 faba 	bl	8021ac2 <_ZdlPvj>
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	4618      	mov	r0, r3
 8010552:	3708      	adds	r7, #8
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}

08010558 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 8010558:	b580      	push	{r7, lr}
 801055a:	b082      	sub	sp, #8
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
 8010560:	4a05      	ldr	r2, [pc, #20]	; (8010578 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	601a      	str	r2, [r3, #0]
 8010566:	687b      	ldr	r3, [r7, #4]
 8010568:	4618      	mov	r0, r3
 801056a:	f7ff fee7 	bl	801033c <_ZN8touchgfx9DMA_QueueD1Ev>
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	4618      	mov	r0, r3
 8010572:	3708      	adds	r7, #8
 8010574:	46bd      	mov	sp, r7
 8010576:	bd80      	pop	{r7, pc}
 8010578:	080240d8 	.word	0x080240d8

0801057c <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 801057c:	b580      	push	{r7, lr}
 801057e:	b082      	sub	sp, #8
 8010580:	af00      	add	r7, sp, #0
 8010582:	6078      	str	r0, [r7, #4]
 8010584:	6878      	ldr	r0, [r7, #4]
 8010586:	f7ff ffe7 	bl	8010558 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801058a:	2114      	movs	r1, #20
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	f011 fa98 	bl	8021ac2 <_ZdlPvj>
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	4618      	mov	r0, r3
 8010596:	3708      	adds	r7, #8
 8010598:	46bd      	mov	sp, r7
 801059a:	bd80      	pop	{r7, pc}

0801059c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
     * Registers an array of texts. This function is called automatically from
     * touchgfx_generic_init(). Should not be called under normal circumstances.
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
 801059c:	b480      	push	{r7}
 801059e:	b083      	sub	sp, #12
 80105a0:	af00      	add	r7, sp, #0
 80105a2:	6078      	str	r0, [r7, #4]
    {
        texts = t;
 80105a4:	4a04      	ldr	r2, [pc, #16]	; (80105b8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	6013      	str	r3, [r2, #0]
    }
 80105aa:	bf00      	nop
 80105ac:	370c      	adds	r7, #12
 80105ae:	46bd      	mov	sp, r7
 80105b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b4:	4770      	bx	lr
 80105b6:	bf00      	nop
 80105b8:	2001fee4 	.word	0x2001fee4

080105bc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 80105bc:	b480      	push	{r7}
 80105be:	b085      	sub	sp, #20
 80105c0:	af00      	add	r7, sp, #0
 80105c2:	60f8      	str	r0, [r7, #12]
 80105c4:	60b9      	str	r1, [r7, #8]
 80105c6:	607a      	str	r2, [r7, #4]
 80105c8:	603b      	str	r3, [r7, #0]
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 80105ca:	4a0b      	ldr	r2, [pc, #44]	; (80105f8 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	601a      	str	r2, [r3, #0]
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	68ba      	ldr	r2, [r7, #8]
 80105d4:	605a      	str	r2, [r3, #4]
 80105d6:	68fb      	ldr	r3, [r7, #12]
 80105d8:	687a      	ldr	r2, [r7, #4]
 80105da:	609a      	str	r2, [r3, #8]
 80105dc:	68fb      	ldr	r3, [r7, #12]
 80105de:	683a      	ldr	r2, [r7, #0]
 80105e0:	60da      	str	r2, [r3, #12]
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	69ba      	ldr	r2, [r7, #24]
 80105e6:	611a      	str	r2, [r3, #16]
    {
    }
 80105e8:	68fb      	ldr	r3, [r7, #12]
 80105ea:	4618      	mov	r0, r3
 80105ec:	3714      	adds	r7, #20
 80105ee:	46bd      	mov	sp, r7
 80105f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f4:	4770      	bx	lr
 80105f6:	bf00      	nop
 80105f8:	08023df8 	.word	0x08023df8

080105fc <_ZN8touchgfx7MVPHeapD1Ev>:

    /** Finalizes an instance of the MVPHeap class. */
    virtual ~MVPHeap()
 80105fc:	b480      	push	{r7}
 80105fe:	b083      	sub	sp, #12
 8010600:	af00      	add	r7, sp, #0
 8010602:	6078      	str	r0, [r7, #4]
    {
 8010604:	4a04      	ldr	r2, [pc, #16]	; (8010618 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	601a      	str	r2, [r3, #0]
    }
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	4618      	mov	r0, r3
 801060e:	370c      	adds	r7, #12
 8010610:	46bd      	mov	sp, r7
 8010612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010616:	4770      	bx	lr
 8010618:	08023df8 	.word	0x08023df8

0801061c <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 801061c:	b580      	push	{r7, lr}
 801061e:	b082      	sub	sp, #8
 8010620:	af00      	add	r7, sp, #0
 8010622:	6078      	str	r0, [r7, #4]
    }
 8010624:	6878      	ldr	r0, [r7, #4]
 8010626:	f7ff ffe9 	bl	80105fc <_ZN8touchgfx7MVPHeapD1Ev>
 801062a:	2114      	movs	r1, #20
 801062c:	6878      	ldr	r0, [r7, #4]
 801062e:	f011 fa48 	bl	8021ac2 <_ZdlPvj>
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	4618      	mov	r0, r3
 8010636:	3708      	adds	r7, #8
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}

0801063c <_ZN8touchgfx3LCDD1Ev>:
        : textureMapperClass(0)
    {
    }

    /** Finalizes an instance of the LCD class. */
    virtual ~LCD()
 801063c:	b480      	push	{r7}
 801063e:	b083      	sub	sp, #12
 8010640:	af00      	add	r7, sp, #0
 8010642:	6078      	str	r0, [r7, #4]
    {
 8010644:	4a04      	ldr	r2, [pc, #16]	; (8010658 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	601a      	str	r2, [r3, #0]
    }
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	4618      	mov	r0, r3
 801064e:	370c      	adds	r7, #12
 8010650:	46bd      	mov	sp, r7
 8010652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010656:	4770      	bx	lr
 8010658:	080242b4 	.word	0x080242b4

0801065c <_ZN8touchgfx3LCDD0Ev>:
    virtual ~LCD()
 801065c:	b580      	push	{r7, lr}
 801065e:	b082      	sub	sp, #8
 8010660:	af00      	add	r7, sp, #0
 8010662:	6078      	str	r0, [r7, #4]
    }
 8010664:	6878      	ldr	r0, [r7, #4]
 8010666:	f7ff ffe9 	bl	801063c <_ZN8touchgfx3LCDD1Ev>
 801066a:	2108      	movs	r1, #8
 801066c:	6878      	ldr	r0, [r7, #4]
 801066e:	f011 fa28 	bl	8021ac2 <_ZdlPvj>
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	4618      	mov	r0, r3
 8010676:	3708      	adds	r7, #8
 8010678:	46bd      	mov	sp, r7
 801067a:	bd80      	pop	{r7, pc}

0801067c <_ZN8touchgfx8Gestures9DragStateC1Ev>:
    static const uint8_t MIN_VELOCITY_AT_RELEASE_BEFORE_SWIPE = 3;

    /** Defines the state of a drag. */
    struct DragState
    {
        DragState()
 801067c:	b480      	push	{r7}
 801067e:	b083      	sub	sp, #12
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
              inProgress(false)
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	2200      	movs	r2, #0
 8010688:	801a      	strh	r2, [r3, #0]
 801068a:	687b      	ldr	r3, [r7, #4]
 801068c:	2200      	movs	r2, #0
 801068e:	805a      	strh	r2, [r3, #2]
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	2200      	movs	r2, #0
 8010694:	809a      	strh	r2, [r3, #4]
 8010696:	687b      	ldr	r3, [r7, #4]
 8010698:	2200      	movs	r2, #0
 801069a:	80da      	strh	r2, [r3, #6]
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	2200      	movs	r2, #0
 80106a0:	811a      	strh	r2, [r3, #8]
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	2200      	movs	r2, #0
 80106a6:	815a      	strh	r2, [r3, #10]
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	2200      	movs	r2, #0
 80106ac:	819a      	strh	r2, [r3, #12]
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	2200      	movs	r2, #0
 80106b2:	739a      	strb	r2, [r3, #14]
        {
        }
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	4618      	mov	r0, r3
 80106b8:	370c      	adds	r7, #12
 80106ba:	46bd      	mov	sp, r7
 80106bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c0:	4770      	bx	lr

080106c2 <_ZN8touchgfx8GesturesC1Ev>:
        bool inProgress;    ///< Whether a drag is in progress or not
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
 80106c2:	b580      	push	{r7, lr}
 80106c4:	b082      	sub	sp, #8
 80106c6:	af00      	add	r7, sp, #0
 80106c8:	6078      	str	r0, [r7, #4]
        : drag(), listener(0), dragThresholdValue(0)
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	4618      	mov	r0, r3
 80106ce:	f7ff ffd5 	bl	801067c <_ZN8touchgfx8Gestures9DragStateC1Ev>
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	2200      	movs	r2, #0
 80106d6:	611a      	str	r2, [r3, #16]
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	2200      	movs	r2, #0
 80106dc:	829a      	strh	r2, [r3, #20]
    {
    }
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	4618      	mov	r0, r3
 80106e2:	3708      	adds	r7, #8
 80106e4:	46bd      	mov	sp, r7
 80106e6:	bd80      	pop	{r7, pc}

080106e8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height)
 80106e8:	b580      	push	{r7, lr}
 80106ea:	b084      	sub	sp, #16
 80106ec:	af00      	add	r7, sp, #0
 80106ee:	60f8      	str	r0, [r7, #12]
 80106f0:	60b9      	str	r1, [r7, #8]
 80106f2:	607a      	str	r2, [r7, #4]
 80106f4:	603b      	str	r3, [r7, #0]
          lastRenderMethod(HARDWARE)
 80106f6:	4a55      	ldr	r2, [pc, #340]	; (801084c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x164>)
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	601a      	str	r2, [r3, #0]
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	68ba      	ldr	r2, [r7, #8]
 8010700:	605a      	str	r2, [r3, #4]
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	687a      	ldr	r2, [r7, #4]
 8010706:	609a      	str	r2, [r3, #8]
 8010708:	68fb      	ldr	r3, [r7, #12]
 801070a:	683a      	ldr	r2, [r7, #0]
 801070c:	60da      	str	r2, [r3, #12]
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	2200      	movs	r2, #0
 8010712:	611a      	str	r2, [r3, #16]
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	2200      	movs	r2, #0
 8010718:	615a      	str	r2, [r3, #20]
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	2200      	movs	r2, #0
 801071e:	619a      	str	r2, [r3, #24]
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	331c      	adds	r3, #28
 8010724:	4618      	mov	r0, r3
 8010726:	f7ff ffcc 	bl	80106c2 <_ZN8touchgfx8GesturesC1Ev>
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	2200      	movs	r2, #0
 801072e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 8010732:	68fb      	ldr	r3, [r7, #12]
 8010734:	2200      	movs	r2, #0
 8010736:	639a      	str	r2, [r3, #56]	; 0x38
 8010738:	68fb      	ldr	r3, [r7, #12]
 801073a:	2200      	movs	r2, #0
 801073c:	63da      	str	r2, [r3, #60]	; 0x3c
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	2200      	movs	r2, #0
 8010742:	641a      	str	r2, [r3, #64]	; 0x40
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	2200      	movs	r2, #0
 8010748:	645a      	str	r2, [r3, #68]	; 0x44
 801074a:	68fb      	ldr	r3, [r7, #12]
 801074c:	2200      	movs	r2, #0
 801074e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	2201      	movs	r2, #1
 8010756:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	2200      	movs	r2, #0
 801075e:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	2200      	movs	r2, #0
 8010766:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	2200      	movs	r2, #0
 801076e:	64da      	str	r2, [r3, #76]	; 0x4c
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	3350      	adds	r3, #80	; 0x50
 8010774:	4618      	mov	r0, r3
 8010776:	f7fe f8e2 	bl	800e93e <_ZN8touchgfx4RectC1Ev>
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	2200      	movs	r2, #0
 801077e:	659a      	str	r2, [r3, #88]	; 0x58
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	2200      	movs	r2, #0
 8010784:	65da      	str	r2, [r3, #92]	; 0x5c
 8010786:	68fb      	ldr	r3, [r7, #12]
 8010788:	2200      	movs	r2, #0
 801078a:	661a      	str	r2, [r3, #96]	; 0x60
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	2201      	movs	r2, #1
 8010790:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	2200      	movs	r2, #0
 8010798:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	2200      	movs	r2, #0
 80107a0:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
 80107a4:	68fb      	ldr	r3, [r7, #12]
 80107a6:	2201      	movs	r2, #1
 80107a8:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
 80107ac:	68fb      	ldr	r3, [r7, #12]
 80107ae:	2200      	movs	r2, #0
 80107b0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	2200      	movs	r2, #0
 80107b8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	2200      	movs	r2, #0
 80107c0:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	2200      	movs	r2, #0
 80107c8:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	2200      	movs	r2, #0
 80107d0:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	2200      	movs	r2, #0
 80107d8:	671a      	str	r2, [r3, #112]	; 0x70
 80107da:	68fb      	ldr	r3, [r7, #12]
 80107dc:	2200      	movs	r2, #0
 80107de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 80107e2:	68fb      	ldr	r3, [r7, #12]
 80107e4:	2200      	movs	r2, #0
 80107e6:	f883 2075 	strb.w	r2, [r3, #117]	; 0x75
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	2200      	movs	r2, #0
 80107ee:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
 80107f2:	68fb      	ldr	r3, [r7, #12]
 80107f4:	2201      	movs	r2, #1
 80107f6:	f883 2077 	strb.w	r2, [r3, #119]	; 0x77
 80107fa:	68fb      	ldr	r3, [r7, #12]
 80107fc:	2201      	movs	r2, #1
 80107fe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
        instance = this;
 8010802:	4a13      	ldr	r2, [pc, #76]	; (8010850 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x168>)
 8010804:	68fb      	ldr	r3, [r7, #12]
 8010806:	6013      	str	r3, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8010808:	4a12      	ldr	r2, [pc, #72]	; (8010854 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 801080a:	8b3b      	ldrh	r3, [r7, #24]
 801080c:	8013      	strh	r3, [r2, #0]
 801080e:	4b11      	ldr	r3, [pc, #68]	; (8010854 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x16c>)
 8010810:	881a      	ldrh	r2, [r3, #0]
 8010812:	4b11      	ldr	r3, [pc, #68]	; (8010858 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x170>)
 8010814:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8010816:	4a11      	ldr	r2, [pc, #68]	; (801085c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 8010818:	8bbb      	ldrh	r3, [r7, #28]
 801081a:	8013      	strh	r3, [r2, #0]
 801081c:	4b0f      	ldr	r3, [pc, #60]	; (801085c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x174>)
 801081e:	881a      	ldrh	r2, [r3, #0]
 8010820:	4b0f      	ldr	r3, [pc, #60]	; (8010860 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x178>)
 8010822:	801a      	strh	r2, [r3, #0]
        DISPLAY_ROTATION = rotate0;
 8010824:	4b0f      	ldr	r3, [pc, #60]	; (8010864 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x17c>)
 8010826:	2200      	movs	r2, #0
 8010828:	701a      	strb	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 801082a:	8b3a      	ldrh	r2, [r7, #24]
 801082c:	8bbb      	ldrh	r3, [r7, #28]
 801082e:	429a      	cmp	r2, r3
 8010830:	bf34      	ite	cc
 8010832:	2301      	movcc	r3, #1
 8010834:	2300      	movcs	r3, #0
 8010836:	b2db      	uxtb	r3, r3
 8010838:	461a      	mov	r2, r3
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	4618      	mov	r0, r3
 8010844:	3710      	adds	r7, #16
 8010846:	46bd      	mov	sp, r7
 8010848:	bd80      	pop	{r7, pc}
 801084a:	bf00      	nop
 801084c:	08023fb0 	.word	0x08023fb0
 8010850:	2001fe88 	.word	0x2001fe88
 8010854:	2001fe7c 	.word	0x2001fe7c
 8010858:	2001fe82 	.word	0x2001fe82
 801085c:	2001fe7e 	.word	0x2001fe7e
 8010860:	2001fe84 	.word	0x2001fe84
 8010864:	2001fe80 	.word	0x2001fe80

08010868 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8010868:	b580      	push	{r7, lr}
 801086a:	b082      	sub	sp, #8
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
 8010870:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8010872:	683b      	ldr	r3, [r7, #0]
 8010874:	4618      	mov	r0, r3
 8010876:	f7fd fdc5 	bl	800e404 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 801087a:	bf00      	nop
 801087c:	3708      	adds	r7, #8
 801087e:	46bd      	mov	sp, r7
 8010880:	bd80      	pop	{r7, pc}
	...

08010884 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(touchgfx::AbstractPartition& presenters, touchgfx::AbstractPartition& views, touchgfx::AbstractPartition& transitions, FrontendApplication& app)
 8010884:	b580      	push	{r7, lr}
 8010886:	b086      	sub	sp, #24
 8010888:	af02      	add	r7, sp, #8
 801088a:	60f8      	str	r0, [r7, #12]
 801088c:	60b9      	str	r1, [r7, #8]
 801088e:	607a      	str	r2, [r7, #4]
 8010890:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8010892:	68f8      	ldr	r0, [r7, #12]
 8010894:	69bb      	ldr	r3, [r7, #24]
 8010896:	9300      	str	r3, [sp, #0]
 8010898:	683b      	ldr	r3, [r7, #0]
 801089a:	687a      	ldr	r2, [r7, #4]
 801089c:	68b9      	ldr	r1, [r7, #8]
 801089e:	f7ff fe8d 	bl	80105bc <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 80108a2:	4a04      	ldr	r2, [pc, #16]	; (80108b4 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 80108a4:	68fb      	ldr	r3, [r7, #12]
 80108a6:	601a      	str	r2, [r3, #0]
    {

    }
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	4618      	mov	r0, r3
 80108ac:	3710      	adds	r7, #16
 80108ae:	46bd      	mov	sp, r7
 80108b0:	bd80      	pop	{r7, pc}
 80108b2:	bf00      	nop
 80108b4:	08023de4 	.word	0x08023de4

080108b8 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80108b8:	b580      	push	{r7, lr}
 80108ba:	af00      	add	r7, sp, #0
 80108bc:	4801      	ldr	r0, [pc, #4]	; (80108c4 <__tcf_0+0xc>)
 80108be:	f000 f95b 	bl	8010b78 <_ZN12FrontendHeapD1Ev>
 80108c2:	bd80      	pop	{r7, pc}
 80108c4:	2001fab4 	.word	0x2001fab4

080108c8 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 80108c8:	b580      	push	{r7, lr}
 80108ca:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 80108cc:	4b11      	ldr	r3, [pc, #68]	; (8010914 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 80108ce:	e8d3 3f8f 	ldab	r3, [r3]
 80108d2:	b2db      	uxtb	r3, r3
 80108d4:	f003 0301 	and.w	r3, r3, #1
 80108d8:	2b00      	cmp	r3, #0
 80108da:	bf0c      	ite	eq
 80108dc:	2301      	moveq	r3, #1
 80108de:	2300      	movne	r3, #0
 80108e0:	b2db      	uxtb	r3, r3
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d013      	beq.n	801090e <_ZN12FrontendHeap11getInstanceEv+0x46>
 80108e6:	480b      	ldr	r0, [pc, #44]	; (8010914 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 80108e8:	f011 f8ed 	bl	8021ac6 <__cxa_guard_acquire>
 80108ec:	4603      	mov	r3, r0
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	bf14      	ite	ne
 80108f2:	2301      	movne	r3, #1
 80108f4:	2300      	moveq	r3, #0
 80108f6:	b2db      	uxtb	r3, r3
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	d008      	beq.n	801090e <_ZN12FrontendHeap11getInstanceEv+0x46>
 80108fc:	4806      	ldr	r0, [pc, #24]	; (8010918 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 80108fe:	f000 f867 	bl	80109d0 <_ZN12FrontendHeapC1Ev>
 8010902:	4806      	ldr	r0, [pc, #24]	; (801091c <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8010904:	f011 f928 	bl	8021b58 <atexit>
 8010908:	4802      	ldr	r0, [pc, #8]	; (8010914 <_ZN12FrontendHeap11getInstanceEv+0x4c>)
 801090a:	f011 f8e8 	bl	8021ade <__cxa_guard_release>
        return instance;
 801090e:	4b02      	ldr	r3, [pc, #8]	; (8010918 <_ZN12FrontendHeap11getInstanceEv+0x50>)
    }
 8010910:	4618      	mov	r0, r3
 8010912:	bd80      	pop	{r7, pc}
 8010914:	2001fd38 	.word	0x2001fd38
 8010918:	2001fab4 	.word	0x2001fab4
 801091c:	080108b9 	.word	0x080108b9

08010920 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public touchgfx::MVPHeap
 8010920:	b580      	push	{r7, lr}
 8010922:	b082      	sub	sp, #8
 8010924:	af00      	add	r7, sp, #0
 8010926:	6078      	str	r0, [r7, #4]
 8010928:	4a05      	ldr	r2, [pc, #20]	; (8010940 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	601a      	str	r2, [r3, #0]
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	4618      	mov	r0, r3
 8010932:	f7ff fe63 	bl	80105fc <_ZN8touchgfx7MVPHeapD1Ev>
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	4618      	mov	r0, r3
 801093a:	3708      	adds	r7, #8
 801093c:	46bd      	mov	sp, r7
 801093e:	bd80      	pop	{r7, pc}
 8010940:	08023de4 	.word	0x08023de4

08010944 <_ZN16FrontendHeapBaseD0Ev>:
 8010944:	b580      	push	{r7, lr}
 8010946:	b082      	sub	sp, #8
 8010948:	af00      	add	r7, sp, #0
 801094a:	6078      	str	r0, [r7, #4]
 801094c:	6878      	ldr	r0, [r7, #4]
 801094e:	f7ff ffe7 	bl	8010920 <_ZN16FrontendHeapBaseD1Ev>
 8010952:	2114      	movs	r1, #20
 8010954:	6878      	ldr	r0, [r7, #4]
 8010956:	f011 f8b4 	bl	8021ac2 <_ZdlPvj>
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	4618      	mov	r0, r3
 801095e:	3708      	adds	r7, #8
 8010960:	46bd      	mov	sp, r7
 8010962:	bd80      	pop	{r7, pc}

08010964 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 * @tparam NUMBER_OF_ELEMENTS Type of the number of elements.
 *
 * @see AbstractPartition
 */
template <typename ListOfTypes, uint16_t NUMBER_OF_ELEMENTS>
class Partition : public AbstractPartition
 8010964:	b580      	push	{r7, lr}
 8010966:	b082      	sub	sp, #8
 8010968:	af00      	add	r7, sp, #0
 801096a:	6078      	str	r0, [r7, #4]
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	4618      	mov	r0, r3
 8010970:	f000 fb8e 	bl	8011090 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8010974:	4a03      	ldr	r2, [pc, #12]	; (8010984 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 8010976:	687b      	ldr	r3, [r7, #4]
 8010978:	601a      	str	r2, [r3, #0]
 801097a:	687b      	ldr	r3, [r7, #4]
 801097c:	4618      	mov	r0, r3
 801097e:	3708      	adds	r7, #8
 8010980:	46bd      	mov	sp, r7
 8010982:	bd80      	pop	{r7, pc}
 8010984:	08023db0 	.word	0x08023db0

08010988 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 8010988:	b580      	push	{r7, lr}
 801098a:	b082      	sub	sp, #8
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	4618      	mov	r0, r3
 8010994:	f000 fb7c 	bl	8011090 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8010998:	4a03      	ldr	r2, [pc, #12]	; (80109a8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	601a      	str	r2, [r3, #0]
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	4618      	mov	r0, r3
 80109a2:	3708      	adds	r7, #8
 80109a4:	46bd      	mov	sp, r7
 80109a6:	bd80      	pop	{r7, pc}
 80109a8:	08023d7c 	.word	0x08023d7c

080109ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>:
 80109ac:	b580      	push	{r7, lr}
 80109ae:	b082      	sub	sp, #8
 80109b0:	af00      	add	r7, sp, #0
 80109b2:	6078      	str	r0, [r7, #4]
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	4618      	mov	r0, r3
 80109b8:	f000 fb6a 	bl	8011090 <_ZN8touchgfx17AbstractPartitionC1Ev>
 80109bc:	4a03      	ldr	r2, [pc, #12]	; (80109cc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	601a      	str	r2, [r3, #0]
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	4618      	mov	r0, r3
 80109c6:	3708      	adds	r7, #8
 80109c8:	46bd      	mov	sp, r7
 80109ca:	bd80      	pop	{r7, pc}
 80109cc:	08023d48 	.word	0x08023d48

080109d0 <_ZN12FrontendHeapC1Ev>:
    touchgfx::Partition< CombinedTransitionTypes, 1 > transitions;
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80109d0:	b590      	push	{r4, r7, lr}
 80109d2:	b085      	sub	sp, #20
 80109d4:	af02      	add	r7, sp, #8
 80109d6:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 80109d8:	6878      	ldr	r0, [r7, #4]
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	f103 0114 	add.w	r1, r3, #20
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	f503 7488 	add.w	r4, r3, #272	; 0x110
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	f503 7394 	add.w	r3, r3, #296	; 0x128
                     app(model, *this)
 80109f2:	9300      	str	r3, [sp, #0]
 80109f4:	4623      	mov	r3, r4
 80109f6:	f7ff ff45 	bl	8010884 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 80109fa:	4a18      	ldr	r2, [pc, #96]	; (8010a5c <_ZN12FrontendHeapC1Ev+0x8c>)
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	601a      	str	r2, [r3, #0]
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	3314      	adds	r3, #20
 8010a04:	4618      	mov	r0, r3
 8010a06:	f7ff ffad 	bl	8010964 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	332c      	adds	r3, #44	; 0x2c
 8010a0e:	4618      	mov	r0, r3
 8010a10:	f7ff ffba 	bl	8010988 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8010a1a:	4618      	mov	r0, r3
 8010a1c:	f7ff ffc6 	bl	80109ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8010a26:	4618      	mov	r0, r3
 8010a28:	f7fe ffa6 	bl	800f978 <_ZN5ModelC1Ev>
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	f503 7094 	add.w	r0, r3, #296	; 0x128
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8010a38:	687a      	ldr	r2, [r7, #4]
 8010a3a:	4619      	mov	r1, r3
 8010a3c:	f7fe ff86 	bl	800f94c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
    {
        gotoStartScreen(app);
 8010a40:	687a      	ldr	r2, [r7, #4]
 8010a42:	687b      	ldr	r3, [r7, #4]
 8010a44:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010a48:	4619      	mov	r1, r3
 8010a4a:	4610      	mov	r0, r2
 8010a4c:	f7ff ff0c 	bl	8010868 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	4618      	mov	r0, r3
 8010a54:	370c      	adds	r7, #12
 8010a56:	46bd      	mov	sp, r7
 8010a58:	bd90      	pop	{r4, r7, pc}
 8010a5a:	bf00      	nop
 8010a5c:	08023d34 	.word	0x08023d34

08010a60 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXGeneratedHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) :
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b086      	sub	sp, #24
 8010a64:	af02      	add	r7, sp, #8
 8010a66:	60f8      	str	r0, [r7, #12]
 8010a68:	60b9      	str	r1, [r7, #8]
 8010a6a:	607a      	str	r2, [r7, #4]
 8010a6c:	603b      	str	r3, [r7, #0]
        touchgfx::HAL(dma, display, tc, width, height)
 8010a6e:	68f8      	ldr	r0, [r7, #12]
 8010a70:	8bbb      	ldrh	r3, [r7, #28]
 8010a72:	9301      	str	r3, [sp, #4]
 8010a74:	8b3b      	ldrh	r3, [r7, #24]
 8010a76:	9300      	str	r3, [sp, #0]
 8010a78:	683b      	ldr	r3, [r7, #0]
 8010a7a:	687a      	ldr	r2, [r7, #4]
 8010a7c:	68b9      	ldr	r1, [r7, #8]
 8010a7e:	f7ff fe33 	bl	80106e8 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8010a82:	4a04      	ldr	r2, [pc, #16]	; (8010a94 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	601a      	str	r2, [r3, #0]
    }
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	4618      	mov	r0, r3
 8010a8c:	3710      	adds	r7, #16
 8010a8e:	46bd      	mov	sp, r7
 8010a90:	bd80      	pop	{r7, pc}
 8010a92:	bf00      	nop
 8010a94:	08023e08 	.word	0x08023e08

08010a98 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
    TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : TouchGFXGeneratedHAL(dma, display, tc, width, height)
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b086      	sub	sp, #24
 8010a9c:	af02      	add	r7, sp, #8
 8010a9e:	60f8      	str	r0, [r7, #12]
 8010aa0:	60b9      	str	r1, [r7, #8]
 8010aa2:	607a      	str	r2, [r7, #4]
 8010aa4:	603b      	str	r3, [r7, #0]
 8010aa6:	68f8      	ldr	r0, [r7, #12]
 8010aa8:	8bbb      	ldrh	r3, [r7, #28]
 8010aaa:	9301      	str	r3, [sp, #4]
 8010aac:	8b3b      	ldrh	r3, [r7, #24]
 8010aae:	9300      	str	r3, [sp, #0]
 8010ab0:	683b      	ldr	r3, [r7, #0]
 8010ab2:	687a      	ldr	r2, [r7, #4]
 8010ab4:	68b9      	ldr	r1, [r7, #8]
 8010ab6:	f7ff ffd3 	bl	8010a60 <_ZN20TouchGFXGeneratedHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8010aba:	4a04      	ldr	r2, [pc, #16]	; (8010acc <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	601a      	str	r2, [r3, #0]
    }
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	3710      	adds	r7, #16
 8010ac6:	46bd      	mov	sp, r7
 8010ac8:	bd80      	pop	{r7, pc}
 8010aca:	bf00      	nop
 8010acc:	08023be8 	.word	0x08023be8

08010ad0 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8010ad0:	b480      	push	{r7}
 8010ad2:	b083      	sub	sp, #12
 8010ad4:	af00      	add	r7, sp, #0
 8010ad6:	6078      	str	r0, [r7, #4]
 8010ad8:	4a04      	ldr	r2, [pc, #16]	; (8010aec <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	601a      	str	r2, [r3, #0]
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	4618      	mov	r0, r3
 8010ae2:	370c      	adds	r7, #12
 8010ae4:	46bd      	mov	sp, r7
 8010ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aea:	4770      	bx	lr
 8010aec:	08023bd0 	.word	0x08023bd0

08010af0 <_ZN20STM32TouchControllerC1Ev>:
{
public:

    STM32TouchController() {}
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b082      	sub	sp, #8
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	4618      	mov	r0, r3
 8010afc:	f7ff ffe8 	bl	8010ad0 <_ZN8touchgfx15TouchControllerC1Ev>
 8010b00:	4a03      	ldr	r2, [pc, #12]	; (8010b10 <_ZN20STM32TouchControllerC1Ev+0x20>)
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	601a      	str	r2, [r3, #0]
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	4618      	mov	r0, r3
 8010b0a:	3708      	adds	r7, #8
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	bd80      	pop	{r7, pc}
 8010b10:	08023bb8 	.word	0x08023bb8

08010b14 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 240, 240);

void touchgfx_init()
{
 8010b14:	b590      	push	{r4, r7, lr}
 8010b16:	b085      	sub	sp, #20
 8010b18:	af02      	add	r7, sp, #8
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 8010b1a:	f7fe fd19 	bl	800f550 <_ZN14BitmapDatabase11getInstanceEv>
 8010b1e:	4604      	mov	r4, r0
 8010b20:	f7fe fd20 	bl	800f564 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8010b24:	4603      	mov	r3, r0
 8010b26:	4619      	mov	r1, r3
 8010b28:	2300      	movs	r3, #0
 8010b2a:	9300      	str	r3, [sp, #0]
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	2200      	movs	r2, #0
 8010b30:	4620      	mov	r0, r4
 8010b32:	f005 fa01 	bl	8015f38 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
    TypedText::registerTexts(&texts);
 8010b36:	4809      	ldr	r0, [pc, #36]	; (8010b5c <touchgfx_init+0x48>)
 8010b38:	f7ff fd30 	bl	801059c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8010b3c:	2000      	movs	r0, #0
 8010b3e:	f7fe fe3d 	bl	800f7bc <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 8010b42:	4807      	ldr	r0, [pc, #28]	; (8010b60 <touchgfx_init+0x4c>)
 8010b44:	f005 f960 	bl	8015e08 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8010b48:	f7ff febe 	bl	80108c8 <_ZN12FrontendHeap11getInstanceEv>
 8010b4c:	6078      	str	r0, [r7, #4]
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8010b4e:	4805      	ldr	r0, [pc, #20]	; (8010b64 <touchgfx_init+0x50>)
 8010b50:	f7ff fab6 	bl	80100c0 <_ZN11TouchGFXHAL10initializeEv>
}
 8010b54:	bf00      	nop
 8010b56:	370c      	adds	r7, #12
 8010b58:	46bd      	mov	sp, r7
 8010b5a:	bd90      	pop	{r4, r7, pc}
 8010b5c:	2001fdfc 	.word	0x2001fdfc
 8010b60:	20000074 	.word	0x20000074
 8010b64:	2001fe00 	.word	0x2001fe00

08010b68 <touchgfx_components_init>:

void touchgfx_components_init()
{
 8010b68:	b480      	push	{r7}
 8010b6a:	af00      	add	r7, sp, #0
}
 8010b6c:	bf00      	nop
 8010b6e:	46bd      	mov	sp, r7
 8010b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b74:	4770      	bx	lr
	...

08010b78 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8010b78:	b580      	push	{r7, lr}
 8010b7a:	b082      	sub	sp, #8
 8010b7c:	af00      	add	r7, sp, #0
 8010b7e:	6078      	str	r0, [r7, #4]
 8010b80:	4a10      	ldr	r2, [pc, #64]	; (8010bc4 <_ZN12FrontendHeapD1Ev+0x4c>)
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	601a      	str	r2, [r3, #0]
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f7fe fea7 	bl	800f8e0 <_ZN19FrontendApplicationD1Ev>
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8010b98:	4618      	mov	r0, r3
 8010b9a:	f000 f827 	bl	8010bec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	332c      	adds	r3, #44	; 0x2c
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	f000 f844 	bl	8010c30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	3314      	adds	r3, #20
 8010bac:	4618      	mov	r0, r3
 8010bae:	f000 f861 	bl	8010c74 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f7ff feb3 	bl	8010920 <_ZN16FrontendHeapBaseD1Ev>
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	4618      	mov	r0, r3
 8010bbe:	3708      	adds	r7, #8
 8010bc0:	46bd      	mov	sp, r7
 8010bc2:	bd80      	pop	{r7, pc}
 8010bc4:	08023d34 	.word	0x08023d34

08010bc8 <_ZN12FrontendHeapD0Ev>:
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b082      	sub	sp, #8
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
 8010bd0:	6878      	ldr	r0, [r7, #4]
 8010bd2:	f7ff ffd1 	bl	8010b78 <_ZN12FrontendHeapD1Ev>
 8010bd6:	f44f 7121 	mov.w	r1, #644	; 0x284
 8010bda:	6878      	ldr	r0, [r7, #4]
 8010bdc:	f010 ff71 	bl	8021ac2 <_ZdlPvj>
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	4618      	mov	r0, r3
 8010be4:	3708      	adds	r7, #8
 8010be6:	46bd      	mov	sp, r7
 8010be8:	bd80      	pop	{r7, pc}
	...

08010bec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8010bec:	b580      	push	{r7, lr}
 8010bee:	b082      	sub	sp, #8
 8010bf0:	af00      	add	r7, sp, #0
 8010bf2:	6078      	str	r0, [r7, #4]
 8010bf4:	4a05      	ldr	r2, [pc, #20]	; (8010c0c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	601a      	str	r2, [r3, #0]
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	4618      	mov	r0, r3
 8010bfe:	f000 fa45 	bl	801108c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8010c02:	687b      	ldr	r3, [r7, #4]
 8010c04:	4618      	mov	r0, r3
 8010c06:	3708      	adds	r7, #8
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	bd80      	pop	{r7, pc}
 8010c0c:	08023d48 	.word	0x08023d48

08010c10 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b082      	sub	sp, #8
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]
 8010c18:	6878      	ldr	r0, [r7, #4]
 8010c1a:	f7ff ffe7 	bl	8010bec <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8010c1e:	2114      	movs	r1, #20
 8010c20:	6878      	ldr	r0, [r7, #4]
 8010c22:	f010 ff4e 	bl	8021ac2 <_ZdlPvj>
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3708      	adds	r7, #8
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	bd80      	pop	{r7, pc}

08010c30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b082      	sub	sp, #8
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
 8010c38:	4a05      	ldr	r2, [pc, #20]	; (8010c50 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	601a      	str	r2, [r3, #0]
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	4618      	mov	r0, r3
 8010c42:	f000 fa23 	bl	801108c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	4618      	mov	r0, r3
 8010c4a:	3708      	adds	r7, #8
 8010c4c:	46bd      	mov	sp, r7
 8010c4e:	bd80      	pop	{r7, pc}
 8010c50:	08023d7c 	.word	0x08023d7c

08010c54 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8010c54:	b580      	push	{r7, lr}
 8010c56:	b082      	sub	sp, #8
 8010c58:	af00      	add	r7, sp, #0
 8010c5a:	6078      	str	r0, [r7, #4]
 8010c5c:	6878      	ldr	r0, [r7, #4]
 8010c5e:	f7ff ffe7 	bl	8010c30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8010c62:	21e4      	movs	r1, #228	; 0xe4
 8010c64:	6878      	ldr	r0, [r7, #4]
 8010c66:	f010 ff2c 	bl	8021ac2 <_ZdlPvj>
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	3708      	adds	r7, #8
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}

08010c74 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b082      	sub	sp, #8
 8010c78:	af00      	add	r7, sp, #0
 8010c7a:	6078      	str	r0, [r7, #4]
 8010c7c:	4a05      	ldr	r2, [pc, #20]	; (8010c94 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	601a      	str	r2, [r3, #0]
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	4618      	mov	r0, r3
 8010c86:	f000 fa01 	bl	801108c <_ZN8touchgfx17AbstractPartitionD1Ev>
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	3708      	adds	r7, #8
 8010c90:	46bd      	mov	sp, r7
 8010c92:	bd80      	pop	{r7, pc}
 8010c94:	08023db0 	.word	0x08023db0

08010c98 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8010c98:	b580      	push	{r7, lr}
 8010c9a:	b082      	sub	sp, #8
 8010c9c:	af00      	add	r7, sp, #0
 8010c9e:	6078      	str	r0, [r7, #4]
 8010ca0:	6878      	ldr	r0, [r7, #4]
 8010ca2:	f7ff ffe7 	bl	8010c74 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8010ca6:	2118      	movs	r1, #24
 8010ca8:	6878      	ldr	r0, [r7, #4]
 8010caa:	f010 ff0a 	bl	8021ac2 <_ZdlPvj>
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	3708      	adds	r7, #8
 8010cb4:	46bd      	mov	sp, r7
 8010cb6:	bd80      	pop	{r7, pc}

08010cb8 <_ZN8touchgfx8LCD16bppD1Ev>:
 *
 * @see LCD
 *
 * @note All coordinates are expected to be in absolute coordinates!
 */
class LCD16bpp : public LCD
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b082      	sub	sp, #8
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
 8010cc0:	4a05      	ldr	r2, [pc, #20]	; (8010cd8 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	601a      	str	r2, [r3, #0]
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f7ff fcb7 	bl	801063c <_ZN8touchgfx3LCDD1Ev>
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	3708      	adds	r7, #8
 8010cd4:	46bd      	mov	sp, r7
 8010cd6:	bd80      	pop	{r7, pc}
 8010cd8:	080246c0 	.word	0x080246c0

08010cdc <_ZN8touchgfx8LCD16bppD0Ev>:
 8010cdc:	b580      	push	{r7, lr}
 8010cde:	b082      	sub	sp, #8
 8010ce0:	af00      	add	r7, sp, #0
 8010ce2:	6078      	str	r0, [r7, #4]
 8010ce4:	6878      	ldr	r0, [r7, #4]
 8010ce6:	f7ff ffe7 	bl	8010cb8 <_ZN8touchgfx8LCD16bppD1Ev>
 8010cea:	2178      	movs	r1, #120	; 0x78
 8010cec:	6878      	ldr	r0, [r7, #4]
 8010cee:	f010 fee8 	bl	8021ac2 <_ZdlPvj>
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	4618      	mov	r0, r3
 8010cf6:	3708      	adds	r7, #8
 8010cf8:	46bd      	mov	sp, r7
 8010cfa:	bd80      	pop	{r7, pc}

08010cfc <_Z41__static_initialization_and_destruction_0ii>:
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
}
 8010cfc:	b580      	push	{r7, lr}
 8010cfe:	b084      	sub	sp, #16
 8010d00:	af02      	add	r7, sp, #8
 8010d02:	6078      	str	r0, [r7, #4]
 8010d04:	6039      	str	r1, [r7, #0]
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	2b01      	cmp	r3, #1
 8010d0a:	d117      	bne.n	8010d3c <_Z41__static_initialization_and_destruction_0ii+0x40>
 8010d0c:	683b      	ldr	r3, [r7, #0]
 8010d0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d12:	4293      	cmp	r3, r2
 8010d14:	d112      	bne.n	8010d3c <_Z41__static_initialization_and_destruction_0ii+0x40>
static STM32TouchController tc;
 8010d16:	4817      	ldr	r0, [pc, #92]	; (8010d74 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8010d18:	f7ff feea 	bl	8010af0 <_ZN20STM32TouchControllerC1Ev>
static STM32DMA dma;
 8010d1c:	4816      	ldr	r0, [pc, #88]	; (8010d78 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8010d1e:	f7ff fb9f 	bl	8010460 <_ZN8STM32DMAC1Ev>
static LCD16bpp display;
 8010d22:	4816      	ldr	r0, [pc, #88]	; (8010d7c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8010d24:	f008 fa08 	bl	8019138 <_ZN8touchgfx8LCD16bppC1Ev>
static TouchGFXHAL hal(dma, display, tc, 240, 240);
 8010d28:	23f0      	movs	r3, #240	; 0xf0
 8010d2a:	9301      	str	r3, [sp, #4]
 8010d2c:	23f0      	movs	r3, #240	; 0xf0
 8010d2e:	9300      	str	r3, [sp, #0]
 8010d30:	4b10      	ldr	r3, [pc, #64]	; (8010d74 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8010d32:	4a12      	ldr	r2, [pc, #72]	; (8010d7c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8010d34:	4910      	ldr	r1, [pc, #64]	; (8010d78 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8010d36:	4812      	ldr	r0, [pc, #72]	; (8010d80 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8010d38:	f7ff feae 	bl	8010a98 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d113      	bne.n	8010d6a <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8010d42:	683b      	ldr	r3, [r7, #0]
 8010d44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d48:	4293      	cmp	r3, r2
 8010d4a:	d10e      	bne.n	8010d6a <_Z41__static_initialization_and_destruction_0ii+0x6e>
 8010d4c:	480c      	ldr	r0, [pc, #48]	; (8010d80 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8010d4e:	f7ff fa47 	bl	80101e0 <_ZN11TouchGFXHALD1Ev>
static ApplicationFontProvider fontProvider;
 8010d52:	480c      	ldr	r0, [pc, #48]	; (8010d84 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8010d54:	f7fc fde6 	bl	800d924 <_ZN23ApplicationFontProviderD1Ev>
static LCD16bpp display;
 8010d58:	4808      	ldr	r0, [pc, #32]	; (8010d7c <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8010d5a:	f7ff ffad 	bl	8010cb8 <_ZN8touchgfx8LCD16bppD1Ev>
static STM32DMA dma;
 8010d5e:	4806      	ldr	r0, [pc, #24]	; (8010d78 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8010d60:	f7ff fbd2 	bl	8010508 <_ZN8STM32DMAD1Ev>
static STM32TouchController tc;
 8010d64:	4803      	ldr	r0, [pc, #12]	; (8010d74 <_Z41__static_initialization_and_destruction_0ii+0x78>)
 8010d66:	f7fe ff83 	bl	800fc70 <_ZN20STM32TouchControllerD1Ev>
}
 8010d6a:	bf00      	nop
 8010d6c:	3708      	adds	r7, #8
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	bd80      	pop	{r7, pc}
 8010d72:	bf00      	nop
 8010d74:	2001fd3c 	.word	0x2001fd3c
 8010d78:	2001fd40 	.word	0x2001fd40
 8010d7c:	2001fd84 	.word	0x2001fd84
 8010d80:	2001fe00 	.word	0x2001fe00
 8010d84:	20000074 	.word	0x20000074

08010d88 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    {
        INTS_PR_ELEMENT = (sizeof(typename meta::select_type_maxsize<SupportedTypesList>::type) + sizeof(int) - 1) / sizeof(int),
        SIZE_OF_ELEMENT = INTS_PR_ELEMENT * sizeof(int)
    };

    virtual uint16_t capacity() const
 8010d88:	b480      	push	{r7}
 8010d8a:	b083      	sub	sp, #12
 8010d8c:	af00      	add	r7, sp, #0
 8010d8e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8010d90:	2301      	movs	r3, #1
    }
 8010d92:	4618      	mov	r0, r3
 8010d94:	370c      	adds	r7, #12
 8010d96:	46bd      	mov	sp, r7
 8010d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d9c:	4770      	bx	lr

08010d9e <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
 8010d9e:	b480      	push	{r7}
 8010da0:	b083      	sub	sp, #12
 8010da2:	af00      	add	r7, sp, #0
 8010da4:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8010da6:	230c      	movs	r3, #12
    }
 8010da8:	4618      	mov	r0, r3
 8010daa:	370c      	adds	r7, #12
 8010dac:	46bd      	mov	sp, r7
 8010dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010db2:	4770      	bx	lr

08010db4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
 8010db4:	b480      	push	{r7}
 8010db6:	b083      	sub	sp, #12
 8010db8:	af00      	add	r7, sp, #0
 8010dba:	6078      	str	r0, [r7, #4]
 8010dbc:	460b      	mov	r3, r1
 8010dbe:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8010dc0:	887a      	ldrh	r2, [r7, #2]
 8010dc2:	4613      	mov	r3, r2
 8010dc4:	005b      	lsls	r3, r3, #1
 8010dc6:	4413      	add	r3, r2
 8010dc8:	009b      	lsls	r3, r3, #2
 8010dca:	3308      	adds	r3, #8
 8010dcc:	687a      	ldr	r2, [r7, #4]
 8010dce:	4413      	add	r3, r2
    }
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	370c      	adds	r7, #12
 8010dd4:	46bd      	mov	sp, r7
 8010dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dda:	4770      	bx	lr

08010ddc <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
 8010ddc:	b480      	push	{r7}
 8010dde:	b083      	sub	sp, #12
 8010de0:	af00      	add	r7, sp, #0
 8010de2:	6078      	str	r0, [r7, #4]
 8010de4:	460b      	mov	r3, r1
 8010de6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8010de8:	887a      	ldrh	r2, [r7, #2]
 8010dea:	4613      	mov	r3, r2
 8010dec:	005b      	lsls	r3, r3, #1
 8010dee:	4413      	add	r3, r2
 8010df0:	009b      	lsls	r3, r3, #2
 8010df2:	3308      	adds	r3, #8
 8010df4:	687a      	ldr	r2, [r7, #4]
 8010df6:	4413      	add	r3, r2
    }
 8010df8:	4618      	mov	r0, r3
 8010dfa:	370c      	adds	r7, #12
 8010dfc:	46bd      	mov	sp, r7
 8010dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e02:	4770      	bx	lr

08010e04 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8010e04:	b480      	push	{r7}
 8010e06:	b083      	sub	sp, #12
 8010e08:	af00      	add	r7, sp, #0
 8010e0a:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8010e0c:	2301      	movs	r3, #1
    }
 8010e0e:	4618      	mov	r0, r3
 8010e10:	370c      	adds	r7, #12
 8010e12:	46bd      	mov	sp, r7
 8010e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e18:	4770      	bx	lr

08010e1a <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8010e1a:	b480      	push	{r7}
 8010e1c:	b083      	sub	sp, #12
 8010e1e:	af00      	add	r7, sp, #0
 8010e20:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8010e22:	23dc      	movs	r3, #220	; 0xdc
    }
 8010e24:	4618      	mov	r0, r3
 8010e26:	370c      	adds	r7, #12
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2e:	4770      	bx	lr

08010e30 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8010e30:	b480      	push	{r7}
 8010e32:	b083      	sub	sp, #12
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
 8010e38:	460b      	mov	r3, r1
 8010e3a:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8010e3c:	887b      	ldrh	r3, [r7, #2]
 8010e3e:	22dc      	movs	r2, #220	; 0xdc
 8010e40:	fb02 f303 	mul.w	r3, r2, r3
 8010e44:	3308      	adds	r3, #8
 8010e46:	687a      	ldr	r2, [r7, #4]
 8010e48:	4413      	add	r3, r2
    }
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	370c      	adds	r7, #12
 8010e4e:	46bd      	mov	sp, r7
 8010e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e54:	4770      	bx	lr

08010e56 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8010e56:	b480      	push	{r7}
 8010e58:	b083      	sub	sp, #12
 8010e5a:	af00      	add	r7, sp, #0
 8010e5c:	6078      	str	r0, [r7, #4]
 8010e5e:	460b      	mov	r3, r1
 8010e60:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8010e62:	887b      	ldrh	r3, [r7, #2]
 8010e64:	22dc      	movs	r2, #220	; 0xdc
 8010e66:	fb02 f303 	mul.w	r3, r2, r3
 8010e6a:	3308      	adds	r3, #8
 8010e6c:	687a      	ldr	r2, [r7, #4]
 8010e6e:	4413      	add	r3, r2
    }
 8010e70:	4618      	mov	r0, r3
 8010e72:	370c      	adds	r7, #12
 8010e74:	46bd      	mov	sp, r7
 8010e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e7a:	4770      	bx	lr

08010e7c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8010e7c:	b480      	push	{r7}
 8010e7e:	b083      	sub	sp, #12
 8010e80:	af00      	add	r7, sp, #0
 8010e82:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8010e84:	2301      	movs	r3, #1
    }
 8010e86:	4618      	mov	r0, r3
 8010e88:	370c      	adds	r7, #12
 8010e8a:	46bd      	mov	sp, r7
 8010e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e90:	4770      	bx	lr

08010e92 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8010e92:	b480      	push	{r7}
 8010e94:	b083      	sub	sp, #12
 8010e96:	af00      	add	r7, sp, #0
 8010e98:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8010e9a:	2310      	movs	r3, #16
    }
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	370c      	adds	r7, #12
 8010ea0:	46bd      	mov	sp, r7
 8010ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ea6:	4770      	bx	lr

08010ea8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8010ea8:	b480      	push	{r7}
 8010eaa:	b083      	sub	sp, #12
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	6078      	str	r0, [r7, #4]
 8010eb0:	460b      	mov	r3, r1
 8010eb2:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8010eb4:	887b      	ldrh	r3, [r7, #2]
 8010eb6:	011b      	lsls	r3, r3, #4
 8010eb8:	3308      	adds	r3, #8
 8010eba:	687a      	ldr	r2, [r7, #4]
 8010ebc:	4413      	add	r3, r2
    }
 8010ebe:	4618      	mov	r0, r3
 8010ec0:	370c      	adds	r7, #12
 8010ec2:	46bd      	mov	sp, r7
 8010ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ec8:	4770      	bx	lr

08010eca <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen1PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 8010eca:	b480      	push	{r7}
 8010ecc:	b083      	sub	sp, #12
 8010ece:	af00      	add	r7, sp, #0
 8010ed0:	6078      	str	r0, [r7, #4]
 8010ed2:	460b      	mov	r3, r1
 8010ed4:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8010ed6:	887b      	ldrh	r3, [r7, #2]
 8010ed8:	011b      	lsls	r3, r3, #4
 8010eda:	3308      	adds	r3, #8
 8010edc:	687a      	ldr	r2, [r7, #4]
 8010ede:	4413      	add	r3, r2
    }
 8010ee0:	4618      	mov	r0, r3
 8010ee2:	370c      	adds	r7, #12
 8010ee4:	46bd      	mov	sp, r7
 8010ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eea:	4770      	bx	lr

08010eec <_GLOBAL__sub_I_touchgfx_init>:
 8010eec:	b580      	push	{r7, lr}
 8010eee:	af00      	add	r7, sp, #0
 8010ef0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010ef4:	2001      	movs	r0, #1
 8010ef6:	f7ff ff01 	bl	8010cfc <_Z41__static_initialization_and_destruction_0ii>
 8010efa:	bd80      	pop	{r7, pc}

08010efc <_GLOBAL__sub_D_touchgfx_init>:
 8010efc:	b580      	push	{r7, lr}
 8010efe:	af00      	add	r7, sp, #0
 8010f00:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010f04:	2000      	movs	r0, #0
 8010f06:	f7ff fef9 	bl	8010cfc <_Z41__static_initialization_and_destruction_0ii>
 8010f0a:	bd80      	pop	{r7, pc}

08010f0c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
    LOCATION_PRAGMA_NOLOAD("TouchGFX_Framebuffer")
    uint32_t frameBuf[(240 * 240 * 2 + 3) / 4] LOCATION_ATTRIBUTE_NOLOAD("TouchGFX_Framebuffer");
}

void TouchGFXGeneratedHAL::initialize()
{
 8010f0c:	b5b0      	push	{r4, r5, r7, lr}
 8010f0e:	b082      	sub	sp, #8
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
    HAL::initialize();
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	4618      	mov	r0, r3
 8010f18:	f000 fbad 	bl	8011676 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8010f1c:	687d      	ldr	r5, [r7, #4]
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	681b      	ldr	r3, [r3, #0]
 8010f22:	3364      	adds	r3, #100	; 0x64
 8010f24:	681c      	ldr	r4, [r3, #0]
 8010f26:	f002 fbdb 	bl	80136e0 <_ZN8touchgfx11Application11getInstanceEv>
 8010f2a:	4603      	mov	r3, r0
 8010f2c:	4619      	mov	r1, r3
 8010f2e:	4628      	mov	r0, r5
 8010f30:	47a0      	blx	r4
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8010f32:	6878      	ldr	r0, [r7, #4]
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	681b      	ldr	r3, [r3, #0]
 8010f38:	3388      	adds	r3, #136	; 0x88
 8010f3a:	681c      	ldr	r4, [r3, #0]
 8010f3c:	2300      	movs	r3, #0
 8010f3e:	2200      	movs	r2, #0
 8010f40:	4902      	ldr	r1, [pc, #8]	; (8010f4c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8010f42:	47a0      	blx	r4
}
 8010f44:	bf00      	nop
 8010f46:	3708      	adds	r7, #8
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	bdb0      	pop	{r4, r5, r7, pc}
 8010f4c:	20000158 	.word	0x20000158

08010f50 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:

void TouchGFXGeneratedHAL::configureInterrupts()
{
 8010f50:	b480      	push	{r7}
 8010f52:	b083      	sub	sp, #12
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	6078      	str	r0, [r7, #4]
}
 8010f58:	bf00      	nop
 8010f5a:	370c      	adds	r7, #12
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f62:	4770      	bx	lr

08010f64 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:

void TouchGFXGeneratedHAL::enableInterrupts()
{
 8010f64:	b480      	push	{r7}
 8010f66:	b083      	sub	sp, #12
 8010f68:	af00      	add	r7, sp, #0
 8010f6a:	6078      	str	r0, [r7, #4]
}
 8010f6c:	bf00      	nop
 8010f6e:	370c      	adds	r7, #12
 8010f70:	46bd      	mov	sp, r7
 8010f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f76:	4770      	bx	lr

08010f78 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:

void TouchGFXGeneratedHAL::disableInterrupts()
{
 8010f78:	b480      	push	{r7}
 8010f7a:	b083      	sub	sp, #12
 8010f7c:	af00      	add	r7, sp, #0
 8010f7e:	6078      	str	r0, [r7, #4]
}
 8010f80:	bf00      	nop
 8010f82:	370c      	adds	r7, #12
 8010f84:	46bd      	mov	sp, r7
 8010f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8a:	4770      	bx	lr

08010f8c <_ZN20TouchGFXGeneratedHAL28enableLCDControllerInterruptEv>:

void TouchGFXGeneratedHAL::enableLCDControllerInterrupt()
{
 8010f8c:	b480      	push	{r7}
 8010f8e:	b083      	sub	sp, #12
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
}
 8010f94:	bf00      	nop
 8010f96:	370c      	adds	r7, #12
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9e:	4770      	bx	lr

08010fa0 <_ZN20TouchGFXGeneratedHAL10beginFrameEv>:

bool TouchGFXGeneratedHAL::beginFrame()
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b082      	sub	sp, #8
 8010fa4:	af00      	add	r7, sp, #0
 8010fa6:	6078      	str	r0, [r7, #4]
    return HAL::beginFrame();
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	4618      	mov	r0, r3
 8010fac:	f000 fb4a 	bl	8011644 <_ZN8touchgfx3HAL10beginFrameEv>
 8010fb0:	4603      	mov	r3, r0
}
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	3708      	adds	r7, #8
 8010fb6:	46bd      	mov	sp, r7
 8010fb8:	bd80      	pop	{r7, pc}

08010fba <_ZN20TouchGFXGeneratedHAL8endFrameEv>:

void TouchGFXGeneratedHAL::endFrame()
{
 8010fba:	b580      	push	{r7, lr}
 8010fbc:	b082      	sub	sp, #8
 8010fbe:	af00      	add	r7, sp, #0
 8010fc0:	6078      	str	r0, [r7, #4]
    HAL::endFrame();
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f000 fb49 	bl	801165c <_ZN8touchgfx3HAL8endFrameEv>
}
 8010fca:	bf00      	nop
 8010fcc:	3708      	adds	r7, #8
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	bd80      	pop	{r7, pc}
	...

08010fd4 <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv>:

uint16_t* TouchGFXGeneratedHAL::getTFTFrameBuffer() const
{
 8010fd4:	b480      	push	{r7}
 8010fd6:	b083      	sub	sp, #12
 8010fd8:	af00      	add	r7, sp, #0
 8010fda:	6078      	str	r0, [r7, #4]
    return (uint16_t*)frameBuf;
 8010fdc:	4b03      	ldr	r3, [pc, #12]	; (8010fec <_ZNK20TouchGFXGeneratedHAL17getTFTFrameBufferEv+0x18>)
}
 8010fde:	4618      	mov	r0, r3
 8010fe0:	370c      	adds	r7, #12
 8010fe2:	46bd      	mov	sp, r7
 8010fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fe8:	4770      	bx	lr
 8010fea:	bf00      	nop
 8010fec:	20000158 	.word	0x20000158

08010ff0 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
 8010ff0:	b480      	push	{r7}
 8010ff2:	b083      	sub	sp, #12
 8010ff4:	af00      	add	r7, sp, #0
 8010ff6:	6078      	str	r0, [r7, #4]
 8010ff8:	6039      	str	r1, [r7, #0]
    //setTFTFrameBuffer() not used for selected display interface
}
 8010ffa:	bf00      	nop
 8010ffc:	370c      	adds	r7, #12
 8010ffe:	46bd      	mov	sp, r7
 8011000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011004:	4770      	bx	lr

08011006 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8011006:	b580      	push	{r7, lr}
 8011008:	b082      	sub	sp, #8
 801100a:	af00      	add	r7, sp, #0
 801100c:	6078      	str	r0, [r7, #4]
 801100e:	6039      	str	r1, [r7, #0]
    HAL::flushFrameBuffer(rect);
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	6839      	ldr	r1, [r7, #0]
 8011014:	4618      	mov	r0, r3
 8011016:	f000 fadf 	bl	80115d8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 801101a:	bf00      	nop
 801101c:	3708      	adds	r7, #8
 801101e:	46bd      	mov	sp, r7
 8011020:	bd80      	pop	{r7, pc}

08011022 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
 8011022:	b580      	push	{r7, lr}
 8011024:	b084      	sub	sp, #16
 8011026:	af00      	add	r7, sp, #0
 8011028:	60f8      	str	r0, [r7, #12]
 801102a:	60b9      	str	r1, [r7, #8]
 801102c:	607a      	str	r2, [r7, #4]
 801102e:	603b      	str	r3, [r7, #0]
    return HAL::blockCopy(dest, src, numBytes);
 8011030:	68f8      	ldr	r0, [r7, #12]
 8011032:	683b      	ldr	r3, [r7, #0]
 8011034:	687a      	ldr	r2, [r7, #4]
 8011036:	68b9      	ldr	r1, [r7, #8]
 8011038:	f000 fc39 	bl	80118ae <_ZN8touchgfx3HAL9blockCopyEPvPKvm>
 801103c:	4603      	mov	r3, r0
}
 801103e:	4618      	mov	r0, r3
 8011040:	3710      	adds	r7, #16
 8011042:	46bd      	mov	sp, r7
 8011044:	bd80      	pop	{r7, pc}

08011046 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 8011046:	8880      	ldrh	r0, [r0, #4]
 8011048:	4770      	bx	lr

0801104a <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801104a:	b570      	push	{r4, r5, r6, lr}
 801104c:	6803      	ldr	r3, [r0, #0]
 801104e:	4605      	mov	r5, r0
 8011050:	460c      	mov	r4, r1
 8011052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011054:	2100      	movs	r1, #0
 8011056:	4798      	blx	r3
 8011058:	682b      	ldr	r3, [r5, #0]
 801105a:	4606      	mov	r6, r0
 801105c:	6a1b      	ldr	r3, [r3, #32]
 801105e:	4628      	mov	r0, r5
 8011060:	4798      	blx	r3
 8011062:	1ba4      	subs	r4, r4, r6
 8011064:	b2a4      	uxth	r4, r4
 8011066:	fbb4 f0f0 	udiv	r0, r4, r0
 801106a:	bd70      	pop	{r4, r5, r6, pc}

0801106c <_ZN8touchgfx17AbstractPartition5clearEv>:
 801106c:	2300      	movs	r3, #0
 801106e:	8083      	strh	r3, [r0, #4]
 8011070:	4770      	bx	lr

08011072 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 8011072:	b510      	push	{r4, lr}
 8011074:	4604      	mov	r4, r0
 8011076:	6803      	ldr	r3, [r0, #0]
 8011078:	8881      	ldrh	r1, [r0, #4]
 801107a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801107c:	4798      	blx	r3
 801107e:	88a3      	ldrh	r3, [r4, #4]
 8011080:	3301      	adds	r3, #1
 8011082:	80a3      	strh	r3, [r4, #4]
 8011084:	bd10      	pop	{r4, pc}

08011086 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 8011086:	6803      	ldr	r3, [r0, #0]
 8011088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801108a:	4718      	bx	r3

0801108c <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801108c:	4770      	bx	lr
	...

08011090 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 8011090:	4a02      	ldr	r2, [pc, #8]	; (801109c <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 8011092:	6002      	str	r2, [r0, #0]
 8011094:	2200      	movs	r2, #0
 8011096:	8082      	strh	r2, [r0, #4]
 8011098:	4770      	bx	lr
 801109a:	bf00      	nop
 801109c:	08023ee0 	.word	0x08023ee0

080110a0 <_ZN8touchgfx9Container13getFirstChildEv>:
 80110a0:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80110a2:	4770      	bx	lr

080110a4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 80110a4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80110a6:	2000      	movs	r0, #0
 80110a8:	b12b      	cbz	r3, 80110b6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80110aa:	b920      	cbnz	r0, 80110b6 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 80110ac:	1a5a      	subs	r2, r3, r1
 80110ae:	4250      	negs	r0, r2
 80110b0:	4150      	adcs	r0, r2
 80110b2:	699b      	ldr	r3, [r3, #24]
 80110b4:	e7f8      	b.n	80110a8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 80110b6:	4770      	bx	lr

080110b8 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 80110b8:	2300      	movs	r3, #0
 80110ba:	6148      	str	r0, [r1, #20]
 80110bc:	618b      	str	r3, [r1, #24]
 80110be:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80110c0:	b913      	cbnz	r3, 80110c8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 80110c2:	6281      	str	r1, [r0, #40]	; 0x28
 80110c4:	4770      	bx	lr
 80110c6:	4613      	mov	r3, r2
 80110c8:	699a      	ldr	r2, [r3, #24]
 80110ca:	2a00      	cmp	r2, #0
 80110cc:	d1fb      	bne.n	80110c6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 80110ce:	6199      	str	r1, [r3, #24]
 80110d0:	4770      	bx	lr

080110d2 <_ZN8touchgfx9Container9removeAllEv>:
 80110d2:	2200      	movs	r2, #0
 80110d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80110d6:	b123      	cbz	r3, 80110e2 <_ZN8touchgfx9Container9removeAllEv+0x10>
 80110d8:	6999      	ldr	r1, [r3, #24]
 80110da:	6281      	str	r1, [r0, #40]	; 0x28
 80110dc:	e9c3 2205 	strd	r2, r2, [r3, #20]
 80110e0:	e7f8      	b.n	80110d4 <_ZN8touchgfx9Container9removeAllEv+0x2>
 80110e2:	4770      	bx	lr

080110e4 <_ZN8touchgfx9Container6unlinkEv>:
 80110e4:	2300      	movs	r3, #0
 80110e6:	6283      	str	r3, [r0, #40]	; 0x28
 80110e8:	4770      	bx	lr

080110ea <_ZNK8touchgfx9Container12getSolidRectEv>:
 80110ea:	2200      	movs	r2, #0
 80110ec:	8002      	strh	r2, [r0, #0]
 80110ee:	8042      	strh	r2, [r0, #2]
 80110f0:	8082      	strh	r2, [r0, #4]
 80110f2:	80c2      	strh	r2, [r0, #6]
 80110f4:	4770      	bx	lr

080110f6 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 80110f6:	b570      	push	{r4, r5, r6, lr}
 80110f8:	460d      	mov	r5, r1
 80110fa:	4616      	mov	r6, r2
 80110fc:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80110fe:	b13c      	cbz	r4, 8011110 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 8011100:	6823      	ldr	r3, [r4, #0]
 8011102:	4620      	mov	r0, r4
 8011104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011106:	4632      	mov	r2, r6
 8011108:	4629      	mov	r1, r5
 801110a:	4798      	blx	r3
 801110c:	69a4      	ldr	r4, [r4, #24]
 801110e:	e7f6      	b.n	80110fe <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 8011110:	bd70      	pop	{r4, r5, r6, pc}

08011112 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 8011112:	b538      	push	{r3, r4, r5, lr}
 8011114:	460d      	mov	r5, r1
 8011116:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8011118:	b134      	cbz	r4, 8011128 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 801111a:	682b      	ldr	r3, [r5, #0]
 801111c:	4621      	mov	r1, r4
 801111e:	689b      	ldr	r3, [r3, #8]
 8011120:	4628      	mov	r0, r5
 8011122:	4798      	blx	r3
 8011124:	69a4      	ldr	r4, [r4, #24]
 8011126:	e7f7      	b.n	8011118 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 8011128:	bd38      	pop	{r3, r4, r5, pc}

0801112a <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 801112a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801112c:	b19b      	cbz	r3, 8011156 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 801112e:	428b      	cmp	r3, r1
 8011130:	d109      	bne.n	8011146 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 8011132:	2100      	movs	r1, #0
 8011134:	699a      	ldr	r2, [r3, #24]
 8011136:	6159      	str	r1, [r3, #20]
 8011138:	6282      	str	r2, [r0, #40]	; 0x28
 801113a:	b902      	cbnz	r2, 801113e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 801113c:	4770      	bx	lr
 801113e:	6199      	str	r1, [r3, #24]
 8011140:	4770      	bx	lr
 8011142:	4613      	mov	r3, r2
 8011144:	b13a      	cbz	r2, 8011156 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 8011146:	699a      	ldr	r2, [r3, #24]
 8011148:	428a      	cmp	r2, r1
 801114a:	d1fa      	bne.n	8011142 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 801114c:	698a      	ldr	r2, [r1, #24]
 801114e:	619a      	str	r2, [r3, #24]
 8011150:	2300      	movs	r3, #0
 8011152:	e9c1 3305 	strd	r3, r3, [r1, #20]
 8011156:	4770      	bx	lr

08011158 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 8011158:	b410      	push	{r4}
 801115a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801115c:	4604      	mov	r4, r0
 801115e:	b92b      	cbnz	r3, 801116c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 8011160:	6803      	ldr	r3, [r0, #0]
 8011162:	4611      	mov	r1, r2
 8011164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8011166:	f85d 4b04 	ldr.w	r4, [sp], #4
 801116a:	4718      	bx	r3
 801116c:	b941      	cbnz	r1, 8011180 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 801116e:	6193      	str	r3, [r2, #24]
 8011170:	6282      	str	r2, [r0, #40]	; 0x28
 8011172:	6154      	str	r4, [r2, #20]
 8011174:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011178:	4770      	bx	lr
 801117a:	4603      	mov	r3, r0
 801117c:	2800      	cmp	r0, #0
 801117e:	d0f9      	beq.n	8011174 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 8011180:	4299      	cmp	r1, r3
 8011182:	6998      	ldr	r0, [r3, #24]
 8011184:	d1f9      	bne.n	801117a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 8011186:	6190      	str	r0, [r2, #24]
 8011188:	618a      	str	r2, [r1, #24]
 801118a:	e7f2      	b.n	8011172 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0801118c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 801118c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011190:	461f      	mov	r7, r3
 8011192:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8011196:	460d      	mov	r5, r1
 8011198:	4616      	mov	r6, r2
 801119a:	b103      	cbz	r3, 801119e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 801119c:	6038      	str	r0, [r7, #0]
 801119e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80111a0:	b314      	cbz	r4, 80111e8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 80111a2:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 80111a6:	b1eb      	cbz	r3, 80111e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80111a8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80111ac:	428d      	cmp	r5, r1
 80111ae:	db19      	blt.n	80111e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80111b0:	8923      	ldrh	r3, [r4, #8]
 80111b2:	b289      	uxth	r1, r1
 80111b4:	440b      	add	r3, r1
 80111b6:	b21b      	sxth	r3, r3
 80111b8:	429d      	cmp	r5, r3
 80111ba:	da13      	bge.n	80111e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80111bc:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80111c0:	4296      	cmp	r6, r2
 80111c2:	db0f      	blt.n	80111e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80111c4:	8963      	ldrh	r3, [r4, #10]
 80111c6:	b292      	uxth	r2, r2
 80111c8:	4413      	add	r3, r2
 80111ca:	b21b      	sxth	r3, r3
 80111cc:	429e      	cmp	r6, r3
 80111ce:	da09      	bge.n	80111e4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 80111d0:	6823      	ldr	r3, [r4, #0]
 80111d2:	1ab2      	subs	r2, r6, r2
 80111d4:	1a69      	subs	r1, r5, r1
 80111d6:	f8d3 8024 	ldr.w	r8, [r3, #36]	; 0x24
 80111da:	b212      	sxth	r2, r2
 80111dc:	463b      	mov	r3, r7
 80111de:	b209      	sxth	r1, r1
 80111e0:	4620      	mov	r0, r4
 80111e2:	47c0      	blx	r8
 80111e4:	69a4      	ldr	r4, [r4, #24]
 80111e6:	e7db      	b.n	80111a0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 80111e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080111ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 80111ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111f0:	4c6c      	ldr	r4, [pc, #432]	; (80113a4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b8>)
 80111f2:	b0a1      	sub	sp, #132	; 0x84
 80111f4:	6824      	ldr	r4, [r4, #0]
 80111f6:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 80111f8:	f894 9049 	ldrb.w	r9, [r4, #73]	; 0x49
 80111fc:	2400      	movs	r4, #0
 80111fe:	802c      	strh	r4, [r5, #0]
 8011200:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8011202:	4606      	mov	r6, r0
 8011204:	802c      	strh	r4, [r5, #0]
 8011206:	601c      	str	r4, [r3, #0]
 8011208:	e9cd 1201 	strd	r1, r2, [sp, #4]
 801120c:	9303      	str	r3, [sp, #12]
 801120e:	f7ff ffbd 	bl	801118c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 8011212:	f1b9 0f03 	cmp.w	r9, #3
 8011216:	f340 80bf 	ble.w	8011398 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1ac>
 801121a:	4631      	mov	r1, r6
 801121c:	a80c      	add	r0, sp, #48	; 0x30
 801121e:	f003 fb3f 	bl	80148a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011222:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8011226:	9306      	str	r3, [sp, #24]
 8011228:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801122c:	9307      	str	r3, [sp, #28]
 801122e:	9b03      	ldr	r3, [sp, #12]
 8011230:	f8d3 a000 	ldr.w	sl, [r3]
 8011234:	f1ba 0f00 	cmp.w	sl, #0
 8011238:	f000 80b1 	beq.w	801139e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b2>
 801123c:	4651      	mov	r1, sl
 801123e:	a810      	add	r0, sp, #64	; 0x40
 8011240:	f003 fb2e 	bl	80148a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8011244:	2002      	movs	r0, #2
 8011246:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	; 0x44
 801124a:	9b01      	ldr	r3, [sp, #4]
 801124c:	fb91 f1f0 	sdiv	r1, r1, r0
 8011250:	9a06      	ldr	r2, [sp, #24]
 8011252:	189d      	adds	r5, r3, r2
 8011254:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8011258:	9a07      	ldr	r2, [sp, #28]
 801125a:	4419      	add	r1, r3
 801125c:	9b02      	ldr	r3, [sp, #8]
 801125e:	1a6d      	subs	r5, r5, r1
 8011260:	4413      	add	r3, r2
 8011262:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	; 0x46
 8011266:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	; 0x42
 801126a:	fb92 f2f0 	sdiv	r2, r2, r0
 801126e:	440a      	add	r2, r1
 8011270:	1a9b      	subs	r3, r3, r2
 8011272:	435b      	muls	r3, r3
 8011274:	fb05 3505 	mla	r5, r5, r5, r3
 8011278:	4f4b      	ldr	r7, [pc, #300]	; (80113a8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 801127a:	ac10      	add	r4, sp, #64	; 0x40
 801127c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 801127e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011280:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011282:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011284:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8011286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011288:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 801128c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8011290:	2303      	movs	r3, #3
 8011292:	f1b9 0f0c 	cmp.w	r9, #12
 8011296:	bfda      	itte	le
 8011298:	f109 32ff 	addle.w	r2, r9, #4294967295
 801129c:	fb92 f8f3 	sdivle	r8, r2, r3
 80112a0:	4698      	movgt	r8, r3
 80112a2:	2400      	movs	r4, #0
 80112a4:	f8cd 9000 	str.w	r9, [sp]
 80112a8:	1c63      	adds	r3, r4, #1
 80112aa:	9308      	str	r3, [sp, #32]
 80112ac:	9b00      	ldr	r3, [sp, #0]
 80112ae:	f04f 0b00 	mov.w	fp, #0
 80112b2:	fb93 f3f8 	sdiv	r3, r3, r8
 80112b6:	f004 0401 	and.w	r4, r4, #1
 80112ba:	aa10      	add	r2, sp, #64	; 0x40
 80112bc:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 80112c0:	b29b      	uxth	r3, r3
 80112c2:	3404      	adds	r4, #4
 80112c4:	9304      	str	r3, [sp, #16]
 80112c6:	9a04      	ldr	r2, [sp, #16]
 80112c8:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80112cc:	fb13 f302 	smulbb	r3, r3, r2
 80112d0:	9a01      	ldr	r2, [sp, #4]
 80112d2:	b29b      	uxth	r3, r3
 80112d4:	1899      	adds	r1, r3, r2
 80112d6:	9305      	str	r3, [sp, #20]
 80112d8:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80112dc:	b209      	sxth	r1, r1
 80112de:	4299      	cmp	r1, r3
 80112e0:	db4d      	blt.n	801137e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 80112e2:	8932      	ldrh	r2, [r6, #8]
 80112e4:	4413      	add	r3, r2
 80112e6:	b21b      	sxth	r3, r3
 80112e8:	4299      	cmp	r1, r3
 80112ea:	da48      	bge.n	801137e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 80112ec:	9b04      	ldr	r3, [sp, #16]
 80112ee:	6827      	ldr	r7, [r4, #0]
 80112f0:	fb17 f703 	smulbb	r7, r7, r3
 80112f4:	9b02      	ldr	r3, [sp, #8]
 80112f6:	b2bf      	uxth	r7, r7
 80112f8:	18fa      	adds	r2, r7, r3
 80112fa:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80112fe:	b212      	sxth	r2, r2
 8011300:	429a      	cmp	r2, r3
 8011302:	db3c      	blt.n	801137e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8011304:	8970      	ldrh	r0, [r6, #10]
 8011306:	4403      	add	r3, r0
 8011308:	b21b      	sxth	r3, r3
 801130a:	429a      	cmp	r2, r3
 801130c:	da37      	bge.n	801137e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 801130e:	2300      	movs	r3, #0
 8011310:	4630      	mov	r0, r6
 8011312:	930b      	str	r3, [sp, #44]	; 0x2c
 8011314:	ab0b      	add	r3, sp, #44	; 0x2c
 8011316:	f7ff ff39 	bl	801118c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801131a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801131c:	b37a      	cbz	r2, 801137e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 801131e:	4552      	cmp	r2, sl
 8011320:	d02d      	beq.n	801137e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x192>
 8011322:	4611      	mov	r1, r2
 8011324:	a80e      	add	r0, sp, #56	; 0x38
 8011326:	9209      	str	r2, [sp, #36]	; 0x24
 8011328:	f003 faba 	bl	80148a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801132c:	f04f 0e02 	mov.w	lr, #2
 8011330:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	; 0x3c
 8011334:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	; 0x3e
 8011338:	fb91 f1fe 	sdiv	r1, r1, lr
 801133c:	fb9c fcfe 	sdiv	ip, ip, lr
 8011340:	9a06      	ldr	r2, [sp, #24]
 8011342:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 8011346:	9b01      	ldr	r3, [sp, #4]
 8011348:	4401      	add	r1, r0
 801134a:	4413      	add	r3, r2
 801134c:	1a58      	subs	r0, r3, r1
 801134e:	9a07      	ldr	r2, [sp, #28]
 8011350:	9b02      	ldr	r3, [sp, #8]
 8011352:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 8011356:	4413      	add	r3, r2
 8011358:	448c      	add	ip, r1
 801135a:	eba3 030c 	sub.w	r3, r3, ip
 801135e:	435b      	muls	r3, r3
 8011360:	fb00 3300 	mla	r3, r0, r0, r3
 8011364:	42ab      	cmp	r3, r5
 8011366:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011368:	d208      	bcs.n	801137c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x190>
 801136a:	461d      	mov	r5, r3
 801136c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801136e:	9803      	ldr	r0, [sp, #12]
 8011370:	6001      	str	r1, [r0, #0]
 8011372:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8011374:	9805      	ldr	r0, [sp, #20]
 8011376:	8008      	strh	r0, [r1, #0]
 8011378:	992b      	ldr	r1, [sp, #172]	; 0xac
 801137a:	800f      	strh	r7, [r1, #0]
 801137c:	4692      	mov	sl, r2
 801137e:	f10b 0b01 	add.w	fp, fp, #1
 8011382:	f1bb 0f04 	cmp.w	fp, #4
 8011386:	f104 0408 	add.w	r4, r4, #8
 801138a:	d19c      	bne.n	80112c6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xda>
 801138c:	9b00      	ldr	r3, [sp, #0]
 801138e:	9c08      	ldr	r4, [sp, #32]
 8011390:	444b      	add	r3, r9
 8011392:	4544      	cmp	r4, r8
 8011394:	9300      	str	r3, [sp, #0]
 8011396:	d187      	bne.n	80112a8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xbc>
 8011398:	b021      	add	sp, #132	; 0x84
 801139a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801139e:	f04f 35ff 	mov.w	r5, #4294967295
 80113a2:	e769      	b.n	8011278 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 80113a4:	2001fe88 	.word	0x2001fe88
 80113a8:	080236a4 	.word	0x080236a4

080113ac <_ZN8touchgfx4RectaNERKS0_>:
 80113ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80113b0:	f9b1 7000 	ldrsh.w	r7, [r1]
 80113b4:	888c      	ldrh	r4, [r1, #4]
 80113b6:	f9b0 9000 	ldrsh.w	r9, [r0]
 80113ba:	443c      	add	r4, r7
 80113bc:	b2a4      	uxth	r4, r4
 80113be:	fa0f f884 	sxth.w	r8, r4
 80113c2:	45c1      	cmp	r9, r8
 80113c4:	da2f      	bge.n	8011426 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80113c6:	8882      	ldrh	r2, [r0, #4]
 80113c8:	444a      	add	r2, r9
 80113ca:	b292      	uxth	r2, r2
 80113cc:	fa0f fe82 	sxth.w	lr, r2
 80113d0:	4577      	cmp	r7, lr
 80113d2:	da28      	bge.n	8011426 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80113d4:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80113d8:	88cb      	ldrh	r3, [r1, #6]
 80113da:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80113de:	442b      	add	r3, r5
 80113e0:	b21b      	sxth	r3, r3
 80113e2:	429e      	cmp	r6, r3
 80113e4:	da1f      	bge.n	8011426 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80113e6:	88c3      	ldrh	r3, [r0, #6]
 80113e8:	4433      	add	r3, r6
 80113ea:	b29b      	uxth	r3, r3
 80113ec:	fa0f fc83 	sxth.w	ip, r3
 80113f0:	4565      	cmp	r5, ip
 80113f2:	da18      	bge.n	8011426 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 80113f4:	454f      	cmp	r7, r9
 80113f6:	bfb8      	it	lt
 80113f8:	464f      	movlt	r7, r9
 80113fa:	42b5      	cmp	r5, r6
 80113fc:	bfb8      	it	lt
 80113fe:	4635      	movlt	r5, r6
 8011400:	45f0      	cmp	r8, lr
 8011402:	bfd8      	it	le
 8011404:	4622      	movle	r2, r4
 8011406:	1bd2      	subs	r2, r2, r7
 8011408:	8082      	strh	r2, [r0, #4]
 801140a:	884a      	ldrh	r2, [r1, #2]
 801140c:	88c9      	ldrh	r1, [r1, #6]
 801140e:	8007      	strh	r7, [r0, #0]
 8011410:	440a      	add	r2, r1
 8011412:	b292      	uxth	r2, r2
 8011414:	b211      	sxth	r1, r2
 8011416:	458c      	cmp	ip, r1
 8011418:	bfa8      	it	ge
 801141a:	4613      	movge	r3, r2
 801141c:	1b5b      	subs	r3, r3, r5
 801141e:	80c3      	strh	r3, [r0, #6]
 8011420:	8045      	strh	r5, [r0, #2]
 8011422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011426:	2300      	movs	r3, #0
 8011428:	8003      	strh	r3, [r0, #0]
 801142a:	8043      	strh	r3, [r0, #2]
 801142c:	8083      	strh	r3, [r0, #4]
 801142e:	80c3      	strh	r3, [r0, #6]
 8011430:	e7f7      	b.n	8011422 <_ZN8touchgfx4RectaNERKS0_+0x76>

08011432 <_ZNK8touchgfx4Rect7isEmptyEv>:
 8011432:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8011436:	2b00      	cmp	r3, #0
 8011438:	dd06      	ble.n	8011448 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 801143a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 801143e:	2800      	cmp	r0, #0
 8011440:	bfcc      	ite	gt
 8011442:	2000      	movgt	r0, #0
 8011444:	2001      	movle	r0, #1
 8011446:	4770      	bx	lr
 8011448:	2001      	movs	r0, #1
 801144a:	4770      	bx	lr

0801144c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 801144c:	2300      	movs	r3, #0
 801144e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011452:	4604      	mov	r4, r0
 8011454:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 8011456:	8003      	strh	r3, [r0, #0]
 8011458:	8043      	strh	r3, [r0, #2]
 801145a:	8083      	strh	r3, [r0, #4]
 801145c:	80c3      	strh	r3, [r0, #6]
 801145e:	2d00      	cmp	r5, #0
 8011460:	d040      	beq.n	80114e4 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 8011462:	1d28      	adds	r0, r5, #4
 8011464:	f7ff ffe5 	bl	8011432 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011468:	b988      	cbnz	r0, 801148e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801146a:	4620      	mov	r0, r4
 801146c:	f7ff ffe1 	bl	8011432 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011470:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8011474:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8011478:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 801147c:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 8011480:	b138      	cbz	r0, 8011492 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 8011482:	8022      	strh	r2, [r4, #0]
 8011484:	8063      	strh	r3, [r4, #2]
 8011486:	f8a4 e004 	strh.w	lr, [r4, #4]
 801148a:	f8a4 c006 	strh.w	ip, [r4, #6]
 801148e:	69ad      	ldr	r5, [r5, #24]
 8011490:	e7e5      	b.n	801145e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 8011492:	f9b4 0000 	ldrsh.w	r0, [r4]
 8011496:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801149a:	4290      	cmp	r0, r2
 801149c:	4607      	mov	r7, r0
 801149e:	bfa8      	it	ge
 80114a0:	4617      	movge	r7, r2
 80114a2:	4299      	cmp	r1, r3
 80114a4:	460e      	mov	r6, r1
 80114a6:	bfa8      	it	ge
 80114a8:	461e      	movge	r6, r3
 80114aa:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80114ae:	4472      	add	r2, lr
 80114b0:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 80114b4:	4440      	add	r0, r8
 80114b6:	4471      	add	r1, lr
 80114b8:	4463      	add	r3, ip
 80114ba:	b200      	sxth	r0, r0
 80114bc:	b212      	sxth	r2, r2
 80114be:	b209      	sxth	r1, r1
 80114c0:	b21b      	sxth	r3, r3
 80114c2:	4290      	cmp	r0, r2
 80114c4:	bfac      	ite	ge
 80114c6:	ebc7 0200 	rsbge	r2, r7, r0
 80114ca:	ebc7 0202 	rsblt	r2, r7, r2
 80114ce:	4299      	cmp	r1, r3
 80114d0:	bfac      	ite	ge
 80114d2:	ebc6 0301 	rsbge	r3, r6, r1
 80114d6:	ebc6 0303 	rsblt	r3, r6, r3
 80114da:	8027      	strh	r7, [r4, #0]
 80114dc:	8066      	strh	r6, [r4, #2]
 80114de:	80a2      	strh	r2, [r4, #4]
 80114e0:	80e3      	strh	r3, [r4, #6]
 80114e2:	e7d4      	b.n	801148e <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 80114e4:	4620      	mov	r0, r4
 80114e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080114ea <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 80114ea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80114ee:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 80114f2:	b383      	cbz	r3, 8011556 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80114f4:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80114f6:	b374      	cbz	r4, 8011556 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 80114f8:	f9b1 5000 	ldrsh.w	r5, [r1]
 80114fc:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8011500:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 8011504:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8011508:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 801150c:	b303      	cbz	r3, 8011550 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801150e:	4668      	mov	r0, sp
 8011510:	1d21      	adds	r1, r4, #4
 8011512:	f8ad 5000 	strh.w	r5, [sp]
 8011516:	f8ad 6002 	strh.w	r6, [sp, #2]
 801151a:	f8ad 7004 	strh.w	r7, [sp, #4]
 801151e:	f8ad 8006 	strh.w	r8, [sp, #6]
 8011522:	f7ff ff43 	bl	80113ac <_ZN8touchgfx4RectaNERKS0_>
 8011526:	4668      	mov	r0, sp
 8011528:	f7ff ff83 	bl	8011432 <_ZNK8touchgfx4Rect7isEmptyEv>
 801152c:	b980      	cbnz	r0, 8011550 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 801152e:	f8bd 3000 	ldrh.w	r3, [sp]
 8011532:	88a2      	ldrh	r2, [r4, #4]
 8011534:	4669      	mov	r1, sp
 8011536:	1a9b      	subs	r3, r3, r2
 8011538:	f8ad 3000 	strh.w	r3, [sp]
 801153c:	88e2      	ldrh	r2, [r4, #6]
 801153e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011542:	4620      	mov	r0, r4
 8011544:	1a9b      	subs	r3, r3, r2
 8011546:	f8ad 3002 	strh.w	r3, [sp, #2]
 801154a:	6823      	ldr	r3, [r4, #0]
 801154c:	689b      	ldr	r3, [r3, #8]
 801154e:	4798      	blx	r3
 8011550:	69a4      	ldr	r4, [r4, #24]
 8011552:	2c00      	cmp	r4, #0
 8011554:	d1d8      	bne.n	8011508 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 8011556:	b002      	add	sp, #8
 8011558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801155c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 801155c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801155e:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8011562:	460d      	mov	r5, r1
 8011564:	4616      	mov	r6, r2
 8011566:	b323      	cbz	r3, 80115b2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 8011568:	6a84      	ldr	r4, [r0, #40]	; 0x28
 801156a:	b314      	cbz	r4, 80115b2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 801156c:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8011570:	b1eb      	cbz	r3, 80115ae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 8011572:	466b      	mov	r3, sp
 8011574:	6828      	ldr	r0, [r5, #0]
 8011576:	6869      	ldr	r1, [r5, #4]
 8011578:	c303      	stmia	r3!, {r0, r1}
 801157a:	4668      	mov	r0, sp
 801157c:	1d21      	adds	r1, r4, #4
 801157e:	f7ff ff15 	bl	80113ac <_ZN8touchgfx4RectaNERKS0_>
 8011582:	4668      	mov	r0, sp
 8011584:	f7ff ff55 	bl	8011432 <_ZNK8touchgfx4Rect7isEmptyEv>
 8011588:	b988      	cbnz	r0, 80115ae <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 801158a:	f8bd 3000 	ldrh.w	r3, [sp]
 801158e:	88a2      	ldrh	r2, [r4, #4]
 8011590:	4669      	mov	r1, sp
 8011592:	1a9b      	subs	r3, r3, r2
 8011594:	f8ad 3000 	strh.w	r3, [sp]
 8011598:	88e2      	ldrh	r2, [r4, #6]
 801159a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801159e:	4620      	mov	r0, r4
 80115a0:	1a9b      	subs	r3, r3, r2
 80115a2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80115a6:	6823      	ldr	r3, [r4, #0]
 80115a8:	4632      	mov	r2, r6
 80115aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80115ac:	4798      	blx	r3
 80115ae:	69a4      	ldr	r4, [r4, #24]
 80115b0:	e7db      	b.n	801156a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 80115b2:	b002      	add	sp, #8
 80115b4:	bd70      	pop	{r4, r5, r6, pc}

080115b6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 80115b6:	b513      	push	{r0, r1, r4, lr}
 80115b8:	6803      	ldr	r3, [r0, #0]
 80115ba:	f8d3 40a8 	ldr.w	r4, [r3, #168]	; 0xa8
 80115be:	2300      	movs	r3, #0
 80115c0:	e9cd 3300 	strd	r3, r3, [sp]
 80115c4:	466b      	mov	r3, sp
 80115c6:	47a0      	blx	r4
 80115c8:	b002      	add	sp, #8
 80115ca:	bd10      	pop	{r4, pc}

080115cc <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 80115cc:	2301      	movs	r3, #1
 80115ce:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80115d2:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80115d6:	4770      	bx	lr

080115d8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 80115d8:	2301      	movs	r3, #1
 80115da:	f880 304b 	strb.w	r3, [r0, #75]	; 0x4b
 80115de:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
 80115e2:	4770      	bx	lr

080115e4 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 80115e4:	2201      	movs	r2, #1
 80115e6:	6843      	ldr	r3, [r0, #4]
 80115e8:	725a      	strb	r2, [r3, #9]
 80115ea:	6840      	ldr	r0, [r0, #4]
 80115ec:	6803      	ldr	r3, [r0, #0]
 80115ee:	691b      	ldr	r3, [r3, #16]
 80115f0:	4718      	bx	r3

080115f2 <_ZN8touchgfx3HAL8flushDMAEv>:
 80115f2:	6840      	ldr	r0, [r0, #4]
 80115f4:	6803      	ldr	r3, [r0, #0]
 80115f6:	689b      	ldr	r3, [r3, #8]
 80115f8:	4718      	bx	r3

080115fa <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 80115fa:	b530      	push	{r4, r5, lr}
 80115fc:	b08b      	sub	sp, #44	; 0x2c
 80115fe:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 8011602:	6804      	ldr	r4, [r0, #0]
 8011604:	9509      	str	r5, [sp, #36]	; 0x24
 8011606:	f89d 5054 	ldrb.w	r5, [sp, #84]	; 0x54
 801160a:	9508      	str	r5, [sp, #32]
 801160c:	f89d 5050 	ldrb.w	r5, [sp, #80]	; 0x50
 8011610:	9507      	str	r5, [sp, #28]
 8011612:	f8bd 504c 	ldrh.w	r5, [sp, #76]	; 0x4c
 8011616:	9506      	str	r5, [sp, #24]
 8011618:	f89d 5048 	ldrb.w	r5, [sp, #72]	; 0x48
 801161c:	9505      	str	r5, [sp, #20]
 801161e:	f89d 5044 	ldrb.w	r5, [sp, #68]	; 0x44
 8011622:	9504      	str	r5, [sp, #16]
 8011624:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 8011628:	9503      	str	r5, [sp, #12]
 801162a:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801162e:	9502      	str	r5, [sp, #8]
 8011630:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
 8011634:	e9cd 3500 	strd	r3, r5, [sp]
 8011638:	4613      	mov	r3, r2
 801163a:	6be4      	ldr	r4, [r4, #60]	; 0x3c
 801163c:	2200      	movs	r2, #0
 801163e:	47a0      	blx	r4
 8011640:	b00b      	add	sp, #44	; 0x2c
 8011642:	bd30      	pop	{r4, r5, pc}

08011644 <_ZN8touchgfx3HAL10beginFrameEv>:
 8011644:	4b04      	ldr	r3, [pc, #16]	; (8011658 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 8011646:	781b      	ldrb	r3, [r3, #0]
 8011648:	b123      	cbz	r3, 8011654 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801164a:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 801164e:	f080 0001 	eor.w	r0, r0, #1
 8011652:	4770      	bx	lr
 8011654:	2001      	movs	r0, #1
 8011656:	4770      	bx	lr
 8011658:	2001fe86 	.word	0x2001fe86

0801165c <_ZN8touchgfx3HAL8endFrameEv>:
 801165c:	b510      	push	{r4, lr}
 801165e:	4604      	mov	r4, r0
 8011660:	6840      	ldr	r0, [r0, #4]
 8011662:	6803      	ldr	r3, [r0, #0]
 8011664:	689b      	ldr	r3, [r3, #8]
 8011666:	4798      	blx	r3
 8011668:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
 801166c:	b113      	cbz	r3, 8011674 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801166e:	2301      	movs	r3, #1
 8011670:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 8011674:	bd10      	pop	{r4, pc}

08011676 <_ZN8touchgfx3HAL10initializeEv>:
 8011676:	b510      	push	{r4, lr}
 8011678:	4604      	mov	r4, r0
 801167a:	f7fe fdd3 	bl	8010224 <_ZN8touchgfx10OSWrappers10initializeEv>
 801167e:	f7fe fb19 	bl	800fcb4 <_ZN8touchgfx4GPIO4initEv>
 8011682:	6860      	ldr	r0, [r4, #4]
 8011684:	6803      	ldr	r3, [r0, #0]
 8011686:	68db      	ldr	r3, [r3, #12]
 8011688:	4798      	blx	r3
 801168a:	68e0      	ldr	r0, [r4, #12]
 801168c:	6803      	ldr	r3, [r0, #0]
 801168e:	689b      	ldr	r3, [r3, #8]
 8011690:	4798      	blx	r3
 8011692:	6823      	ldr	r3, [r4, #0]
 8011694:	4620      	mov	r0, r4
 8011696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801169a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801169c:	4718      	bx	r3

0801169e <_ZN8touchgfx3HAL9taskEntryEv>:
 801169e:	4604      	mov	r4, r0
 80116a0:	b508      	push	{r3, lr}
 80116a2:	6803      	ldr	r3, [r0, #0]
 80116a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80116a8:	4798      	blx	r3
 80116aa:	6823      	ldr	r3, [r4, #0]
 80116ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80116ae:	4620      	mov	r0, r4
 80116b0:	4798      	blx	r3
 80116b2:	f7fe fe1d 	bl	80102f0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 80116b6:	6823      	ldr	r3, [r4, #0]
 80116b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116ba:	e7f8      	b.n	80116ae <_ZN8touchgfx3HAL9taskEntryEv+0x10>

080116bc <_ZN8touchgfx3HAL4tickEv>:
 80116bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80116be:	6803      	ldr	r3, [r0, #0]
 80116c0:	4604      	mov	r4, r0
 80116c2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80116c6:	4798      	blx	r3
 80116c8:	4d59      	ldr	r5, [pc, #356]	; (8011830 <_ZN8touchgfx3HAL4tickEv+0x174>)
 80116ca:	2800      	cmp	r0, #0
 80116cc:	f000 8095 	beq.w	80117fa <_ZN8touchgfx3HAL4tickEv+0x13e>
 80116d0:	2600      	movs	r6, #0
 80116d2:	2001      	movs	r0, #1
 80116d4:	f7fe faf6 	bl	800fcc4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80116d8:	f894 3066 	ldrb.w	r3, [r4, #102]	; 0x66
 80116dc:	f884 604b 	strb.w	r6, [r4, #75]	; 0x4b
 80116e0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 80116e4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
 80116e8:	f884 6066 	strb.w	r6, [r4, #102]	; 0x66
 80116ec:	b133      	cbz	r3, 80116fc <_ZN8touchgfx3HAL4tickEv+0x40>
 80116ee:	6823      	ldr	r3, [r4, #0]
 80116f0:	4620      	mov	r0, r4
 80116f2:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80116f6:	4798      	blx	r3
 80116f8:	f884 6075 	strb.w	r6, [r4, #117]	; 0x75
 80116fc:	2601      	movs	r6, #1
 80116fe:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
 8011702:	6862      	ldr	r2, [r4, #4]
 8011704:	f083 0301 	eor.w	r3, r3, #1
 8011708:	7253      	strb	r3, [r2, #9]
 801170a:	702e      	strb	r6, [r5, #0]
 801170c:	f001 ffe8 	bl	80136e0 <_ZN8touchgfx11Application11getInstanceEv>
 8011710:	6803      	ldr	r3, [r0, #0]
 8011712:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011714:	4798      	blx	r3
 8011716:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 801171a:	b90b      	cbnz	r3, 8011720 <_ZN8touchgfx3HAL4tickEv+0x64>
 801171c:	f884 6067 	strb.w	r6, [r4, #103]	; 0x67
 8011720:	f001 ffde 	bl	80136e0 <_ZN8touchgfx11Application11getInstanceEv>
 8011724:	6803      	ldr	r3, [r0, #0]
 8011726:	695b      	ldr	r3, [r3, #20]
 8011728:	4798      	blx	r3
 801172a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801172c:	6803      	ldr	r3, [r0, #0]
 801172e:	691b      	ldr	r3, [r3, #16]
 8011730:	4798      	blx	r3
 8011732:	f894 3067 	ldrb.w	r3, [r4, #103]	; 0x67
 8011736:	f894 2068 	ldrb.w	r2, [r4, #104]	; 0x68
 801173a:	3b01      	subs	r3, #1
 801173c:	b2db      	uxtb	r3, r3
 801173e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
 8011742:	b10a      	cbz	r2, 8011748 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8011744:	2b00      	cmp	r3, #0
 8011746:	d1eb      	bne.n	8011720 <_ZN8touchgfx3HAL4tickEv+0x64>
 8011748:	4a3a      	ldr	r2, [pc, #232]	; (8011834 <_ZN8touchgfx3HAL4tickEv+0x178>)
 801174a:	f994 1064 	ldrsb.w	r1, [r4, #100]	; 0x64
 801174e:	7813      	ldrb	r3, [r2, #0]
 8011750:	3301      	adds	r3, #1
 8011752:	b25b      	sxtb	r3, r3
 8011754:	4299      	cmp	r1, r3
 8011756:	7013      	strb	r3, [r2, #0]
 8011758:	dc10      	bgt.n	801177c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801175a:	2300      	movs	r3, #0
 801175c:	68e0      	ldr	r0, [r4, #12]
 801175e:	7013      	strb	r3, [r2, #0]
 8011760:	6803      	ldr	r3, [r0, #0]
 8011762:	aa03      	add	r2, sp, #12
 8011764:	68db      	ldr	r3, [r3, #12]
 8011766:	a902      	add	r1, sp, #8
 8011768:	4798      	blx	r3
 801176a:	6823      	ldr	r3, [r4, #0]
 801176c:	2800      	cmp	r0, #0
 801176e:	d050      	beq.n	8011812 <_ZN8touchgfx3HAL4tickEv+0x156>
 8011770:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8011774:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8011778:	4620      	mov	r0, r4
 801177a:	4798      	blx	r3
 801177c:	2300      	movs	r3, #0
 801177e:	6960      	ldr	r0, [r4, #20]
 8011780:	f88d 3007 	strb.w	r3, [sp, #7]
 8011784:	b158      	cbz	r0, 801179e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8011786:	6803      	ldr	r3, [r0, #0]
 8011788:	f10d 0107 	add.w	r1, sp, #7
 801178c:	68db      	ldr	r3, [r3, #12]
 801178e:	4798      	blx	r3
 8011790:	b128      	cbz	r0, 801179e <_ZN8touchgfx3HAL4tickEv+0xe2>
 8011792:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011794:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011798:	6803      	ldr	r3, [r0, #0]
 801179a:	68db      	ldr	r3, [r3, #12]
 801179c:	4798      	blx	r3
 801179e:	f104 001c 	add.w	r0, r4, #28
 80117a2:	f010 f8d9 	bl	8021958 <_ZN8touchgfx8Gestures4tickEv>
 80117a6:	f894 306c 	ldrb.w	r3, [r4, #108]	; 0x6c
 80117aa:	b30b      	cbz	r3, 80117f0 <_ZN8touchgfx3HAL4tickEv+0x134>
 80117ac:	6920      	ldr	r0, [r4, #16]
 80117ae:	6803      	ldr	r3, [r0, #0]
 80117b0:	691b      	ldr	r3, [r3, #16]
 80117b2:	4798      	blx	r3
 80117b4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80117b6:	4606      	mov	r6, r0
 80117b8:	b903      	cbnz	r3, 80117bc <_ZN8touchgfx3HAL4tickEv+0x100>
 80117ba:	6720      	str	r0, [r4, #112]	; 0x70
 80117bc:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80117be:	4a1e      	ldr	r2, [pc, #120]	; (8011838 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 80117c0:	1af3      	subs	r3, r6, r3
 80117c2:	4293      	cmp	r3, r2
 80117c4:	d914      	bls.n	80117f0 <_ZN8touchgfx3HAL4tickEv+0x134>
 80117c6:	6920      	ldr	r0, [r4, #16]
 80117c8:	6803      	ldr	r3, [r0, #0]
 80117ca:	699b      	ldr	r3, [r3, #24]
 80117cc:	4798      	blx	r3
 80117ce:	2264      	movs	r2, #100	; 0x64
 80117d0:	6f23      	ldr	r3, [r4, #112]	; 0x70
 80117d2:	1af3      	subs	r3, r6, r3
 80117d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80117d8:	fbb0 f0f3 	udiv	r0, r0, r3
 80117dc:	2800      	cmp	r0, #0
 80117de:	dc1d      	bgt.n	801181c <_ZN8touchgfx3HAL4tickEv+0x160>
 80117e0:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
 80117e4:	6920      	ldr	r0, [r4, #16]
 80117e6:	2100      	movs	r1, #0
 80117e8:	6803      	ldr	r3, [r0, #0]
 80117ea:	69db      	ldr	r3, [r3, #28]
 80117ec:	4798      	blx	r3
 80117ee:	6726      	str	r6, [r4, #112]	; 0x70
 80117f0:	f001 ff76 	bl	80136e0 <_ZN8touchgfx11Application11getInstanceEv>
 80117f4:	6803      	ldr	r3, [r0, #0]
 80117f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117f8:	4798      	blx	r3
 80117fa:	6823      	ldr	r3, [r4, #0]
 80117fc:	4620      	mov	r0, r4
 80117fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8011802:	4798      	blx	r3
 8011804:	2001      	movs	r0, #1
 8011806:	f7fe fa79 	bl	800fcfc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801180a:	2300      	movs	r3, #0
 801180c:	702b      	strb	r3, [r5, #0]
 801180e:	b004      	add	sp, #16
 8011810:	bd70      	pop	{r4, r5, r6, pc}
 8011812:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8011816:	4620      	mov	r0, r4
 8011818:	4798      	blx	r3
 801181a:	e7af      	b.n	801177c <_ZN8touchgfx3HAL4tickEv+0xc0>
 801181c:	2863      	cmp	r0, #99	; 0x63
 801181e:	bfcb      	itete	gt
 8011820:	2300      	movgt	r3, #0
 8011822:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 8011826:	f884 3065 	strbgt.w	r3, [r4, #101]	; 0x65
 801182a:	f884 0065 	strble.w	r0, [r4, #101]	; 0x65
 801182e:	e7d9      	b.n	80117e4 <_ZN8touchgfx3HAL4tickEv+0x128>
 8011830:	2001fe8c 	.word	0x2001fe8c
 8011834:	2001fe8d 	.word	0x2001fe8d
 8011838:	05f5e100 	.word	0x05f5e100

0801183c <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801183c:	f7fe bd34 	b.w	80102a8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08011840 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8011840:	6581      	str	r1, [r0, #88]	; 0x58
 8011842:	301c      	adds	r0, #28
 8011844:	f010 b886 	b.w	8021954 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

08011848 <_ZN8touchgfx3HAL5touchEll>:
 8011848:	b530      	push	{r4, r5, lr}
 801184a:	4604      	mov	r4, r0
 801184c:	b087      	sub	sp, #28
 801184e:	a804      	add	r0, sp, #16
 8011850:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8011854:	f001 fd4e 	bl	80132f4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 8011858:	9b04      	ldr	r3, [sp, #16]
 801185a:	a906      	add	r1, sp, #24
 801185c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8011860:	9b05      	ldr	r3, [sp, #20]
 8011862:	a803      	add	r0, sp, #12
 8011864:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 8011868:	f001 fd96 	bl	8013398 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801186c:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
 8011870:	f104 001c 	add.w	r0, r4, #28
 8011874:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 8011878:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 801187c:	b189      	cbz	r1, 80118a2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 801187e:	f8b4 5060 	ldrh.w	r5, [r4, #96]	; 0x60
 8011882:	9300      	str	r3, [sp, #0]
 8011884:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8011888:	4613      	mov	r3, r2
 801188a:	462a      	mov	r2, r5
 801188c:	f010 f872 	bl	8021974 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 8011890:	b128      	cbz	r0, 801189e <_ZN8touchgfx3HAL5touchEll+0x56>
 8011892:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8011896:	65e3      	str	r3, [r4, #92]	; 0x5c
 8011898:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801189c:	6623      	str	r3, [r4, #96]	; 0x60
 801189e:	b007      	add	sp, #28
 80118a0:	bd30      	pop	{r4, r5, pc}
 80118a2:	f010 f8a7 	bl	80219f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80118a6:	2301      	movs	r3, #1
 80118a8:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 80118ac:	e7f1      	b.n	8011892 <_ZN8touchgfx3HAL5touchEll+0x4a>

080118ae <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 80118ae:	b510      	push	{r4, lr}
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d046      	beq.n	8011942 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80118b4:	ea81 0002 	eor.w	r0, r1, r2
 80118b8:	07c4      	lsls	r4, r0, #31
 80118ba:	d508      	bpl.n	80118ce <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 80118bc:	440b      	add	r3, r1
 80118be:	3a01      	subs	r2, #1
 80118c0:	428b      	cmp	r3, r1
 80118c2:	d93e      	bls.n	8011942 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 80118c4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 80118c8:	f801 0b01 	strb.w	r0, [r1], #1
 80118cc:	e7f8      	b.n	80118c0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 80118ce:	07d0      	lsls	r0, r2, #31
 80118d0:	bf42      	ittt	mi
 80118d2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 80118d6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 80118da:	f801 0b01 	strbmi.w	r0, [r1], #1
 80118de:	2b01      	cmp	r3, #1
 80118e0:	d911      	bls.n	8011906 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 80118e2:	ea81 0402 	eor.w	r4, r1, r2
 80118e6:	07a4      	lsls	r4, r4, #30
 80118e8:	4610      	mov	r0, r2
 80118ea:	d022      	beq.n	8011932 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 80118ec:	f023 0401 	bic.w	r4, r3, #1
 80118f0:	440c      	add	r4, r1
 80118f2:	428c      	cmp	r4, r1
 80118f4:	4602      	mov	r2, r0
 80118f6:	d904      	bls.n	8011902 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 80118f8:	8812      	ldrh	r2, [r2, #0]
 80118fa:	3002      	adds	r0, #2
 80118fc:	f821 2b02 	strh.w	r2, [r1], #2
 8011900:	e7f7      	b.n	80118f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 8011902:	f003 0301 	and.w	r3, r3, #1
 8011906:	f023 0003 	bic.w	r0, r3, #3
 801190a:	4408      	add	r0, r1
 801190c:	4288      	cmp	r0, r1
 801190e:	4614      	mov	r4, r2
 8011910:	d904      	bls.n	801191c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 8011912:	6824      	ldr	r4, [r4, #0]
 8011914:	3204      	adds	r2, #4
 8011916:	f841 4b04 	str.w	r4, [r1], #4
 801191a:	e7f7      	b.n	801190c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 801191c:	f003 0303 	and.w	r3, r3, #3
 8011920:	440b      	add	r3, r1
 8011922:	3a01      	subs	r2, #1
 8011924:	428b      	cmp	r3, r1
 8011926:	d90c      	bls.n	8011942 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8011928:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801192c:	f801 0b01 	strb.w	r0, [r1], #1
 8011930:	e7f8      	b.n	8011924 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 8011932:	0790      	lsls	r0, r2, #30
 8011934:	d0e7      	beq.n	8011906 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8011936:	f832 0b02 	ldrh.w	r0, [r2], #2
 801193a:	3b02      	subs	r3, #2
 801193c:	f821 0b02 	strh.w	r0, [r1], #2
 8011940:	e7e1      	b.n	8011906 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 8011942:	2001      	movs	r0, #1
 8011944:	bd10      	pop	{r4, pc}

08011946 <_ZN8touchgfx3HAL7noTouchEv>:
 8011946:	b510      	push	{r4, lr}
 8011948:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
 801194c:	4604      	mov	r4, r0
 801194e:	b153      	cbz	r3, 8011966 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 8011950:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
 8011954:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
 8011958:	2101      	movs	r1, #1
 801195a:	301c      	adds	r0, #28
 801195c:	f010 f84a 	bl	80219f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 8011960:	2300      	movs	r3, #0
 8011962:	f884 306b 	strb.w	r3, [r4, #107]	; 0x6b
 8011966:	bd10      	pop	{r4, pc}

08011968 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 8011968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801196c:	4604      	mov	r4, r0
 801196e:	2000      	movs	r0, #0
 8011970:	b085      	sub	sp, #20
 8011972:	ad04      	add	r5, sp, #16
 8011974:	f845 0d04 	str.w	r0, [r5, #-4]!
 8011978:	69a0      	ldr	r0, [r4, #24]
 801197a:	4699      	mov	r9, r3
 801197c:	6806      	ldr	r6, [r0, #0]
 801197e:	9501      	str	r5, [sp, #4]
 8011980:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
 8011984:	460f      	mov	r7, r1
 8011986:	9500      	str	r5, [sp, #0]
 8011988:	6835      	ldr	r5, [r6, #0]
 801198a:	4690      	mov	r8, r2
 801198c:	47a8      	blx	r5
 801198e:	4d10      	ldr	r5, [pc, #64]	; (80119d0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 8011990:	4606      	mov	r6, r0
 8011992:	f8a5 9000 	strh.w	r9, [r5]
 8011996:	f7fc fb4f 	bl	800e038 <_ZN8touchgfx3HAL3lcdEv>
 801199a:	6803      	ldr	r3, [r0, #0]
 801199c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801199e:	4798      	blx	r3
 80119a0:	b128      	cbz	r0, 80119ae <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80119a2:	2801      	cmp	r0, #1
 80119a4:	d00b      	beq.n	80119be <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80119a6:	4630      	mov	r0, r6
 80119a8:	b005      	add	sp, #20
 80119aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80119ae:	882b      	ldrh	r3, [r5, #0]
 80119b0:	fb08 7203 	mla	r2, r8, r3, r7
 80119b4:	9b03      	ldr	r3, [sp, #12]
 80119b6:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 80119ba:	63e3      	str	r3, [r4, #60]	; 0x3c
 80119bc:	e7f3      	b.n	80119a6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80119be:	882a      	ldrh	r2, [r5, #0]
 80119c0:	9b03      	ldr	r3, [sp, #12]
 80119c2:	fb08 7202 	mla	r2, r8, r2, r7
 80119c6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80119ca:	1a9a      	subs	r2, r3, r2
 80119cc:	63e2      	str	r2, [r4, #60]	; 0x3c
 80119ce:	e7ea      	b.n	80119a6 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 80119d0:	2001fe82 	.word	0x2001fe82

080119d4 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 80119d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80119d6:	b08b      	sub	sp, #44	; 0x2c
 80119d8:	4617      	mov	r7, r2
 80119da:	4604      	mov	r4, r0
 80119dc:	460e      	mov	r6, r1
 80119de:	461d      	mov	r5, r3
 80119e0:	f7fc fb2a 	bl	800e038 <_ZN8touchgfx3HAL3lcdEv>
 80119e4:	6803      	ldr	r3, [r0, #0]
 80119e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119e8:	4798      	blx	r3
 80119ea:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 80119ee:	9007      	str	r0, [sp, #28]
 80119f0:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80119f4:	4b0d      	ldr	r3, [pc, #52]	; (8011a2c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 80119f6:	6822      	ldr	r2, [r4, #0]
 80119f8:	881b      	ldrh	r3, [r3, #0]
 80119fa:	4631      	mov	r1, r6
 80119fc:	9306      	str	r3, [sp, #24]
 80119fe:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8011a02:	4620      	mov	r0, r4
 8011a04:	9305      	str	r3, [sp, #20]
 8011a06:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8011a0a:	9304      	str	r3, [sp, #16]
 8011a0c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011a10:	9303      	str	r3, [sp, #12]
 8011a12:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8011a16:	9302      	str	r3, [sp, #8]
 8011a18:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8011a1c:	e9cd 5300 	strd	r5, r3, [sp]
 8011a20:	463b      	mov	r3, r7
 8011a22:	6bd5      	ldr	r5, [r2, #60]	; 0x3c
 8011a24:	2200      	movs	r2, #0
 8011a26:	47a8      	blx	r5
 8011a28:	b00b      	add	sp, #44	; 0x2c
 8011a2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011a2c:	2001fe82 	.word	0x2001fe82

08011a30 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8011a30:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a34:	4698      	mov	r8, r3
 8011a36:	6803      	ldr	r3, [r0, #0]
 8011a38:	b08b      	sub	sp, #44	; 0x2c
 8011a3a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8011a3c:	4b14      	ldr	r3, [pc, #80]	; (8011a90 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 8011a3e:	4617      	mov	r7, r2
 8011a40:	f8b3 9000 	ldrh.w	r9, [r3]
 8011a44:	460e      	mov	r6, r1
 8011a46:	4604      	mov	r4, r0
 8011a48:	f7fc faf6 	bl	800e038 <_ZN8touchgfx3HAL3lcdEv>
 8011a4c:	6803      	ldr	r3, [r0, #0]
 8011a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a50:	4798      	blx	r3
 8011a52:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8011a56:	2200      	movs	r2, #0
 8011a58:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8011a5c:	2302      	movs	r3, #2
 8011a5e:	e9cd 9306 	strd	r9, r3, [sp, #24]
 8011a62:	2301      	movs	r3, #1
 8011a64:	9305      	str	r3, [sp, #20]
 8011a66:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8011a6a:	4631      	mov	r1, r6
 8011a6c:	9304      	str	r3, [sp, #16]
 8011a6e:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8011a72:	4620      	mov	r0, r4
 8011a74:	9303      	str	r3, [sp, #12]
 8011a76:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8011a7a:	9302      	str	r3, [sp, #8]
 8011a7c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011a80:	e9cd 8300 	strd	r8, r3, [sp]
 8011a84:	463b      	mov	r3, r7
 8011a86:	47a8      	blx	r5
 8011a88:	b00b      	add	sp, #44	; 0x2c
 8011a8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011a8e:	bf00      	nop
 8011a90:	2001fe82 	.word	0x2001fe82

08011a94 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 8011a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011a98:	4698      	mov	r8, r3
 8011a9a:	6803      	ldr	r3, [r0, #0]
 8011a9c:	b087      	sub	sp, #28
 8011a9e:	6d9d      	ldr	r5, [r3, #88]	; 0x58
 8011aa0:	4b10      	ldr	r3, [pc, #64]	; (8011ae4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 8011aa2:	460e      	mov	r6, r1
 8011aa4:	f8b3 9000 	ldrh.w	r9, [r3]
 8011aa8:	4617      	mov	r7, r2
 8011aaa:	4604      	mov	r4, r0
 8011aac:	f7fc fac4 	bl	800e038 <_ZN8touchgfx3HAL3lcdEv>
 8011ab0:	6803      	ldr	r3, [r0, #0]
 8011ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ab4:	4798      	blx	r3
 8011ab6:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8011aba:	f8cd 900c 	str.w	r9, [sp, #12]
 8011abe:	e9cd 0304 	strd	r0, r3, [sp, #16]
 8011ac2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 8011ac6:	463a      	mov	r2, r7
 8011ac8:	9302      	str	r3, [sp, #8]
 8011aca:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8011ace:	4631      	mov	r1, r6
 8011ad0:	9301      	str	r3, [sp, #4]
 8011ad2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8011ad6:	4620      	mov	r0, r4
 8011ad8:	9300      	str	r3, [sp, #0]
 8011ada:	4643      	mov	r3, r8
 8011adc:	47a8      	blx	r5
 8011ade:	b007      	add	sp, #28
 8011ae0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011ae4:	2001fe82 	.word	0x2001fe82

08011ae8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8011ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011aec:	4604      	mov	r4, r0
 8011aee:	b08f      	sub	sp, #60	; 0x3c
 8011af0:	4610      	mov	r0, r2
 8011af2:	460d      	mov	r5, r1
 8011af4:	4691      	mov	r9, r2
 8011af6:	461e      	mov	r6, r3
 8011af8:	f004 f99e 	bl	8015e38 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8011afc:	2800      	cmp	r0, #0
 8011afe:	f000 809d 	beq.w	8011c3c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 8011b02:	6823      	ldr	r3, [r4, #0]
 8011b04:	4620      	mov	r0, r4
 8011b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011b08:	4798      	blx	r3
 8011b0a:	6823      	ldr	r3, [r4, #0]
 8011b0c:	f8df b190 	ldr.w	fp, [pc, #400]	; 8011ca0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8011b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011b12:	4620      	mov	r0, r4
 8011b14:	4798      	blx	r3
 8011b16:	f8df a18c 	ldr.w	sl, [pc, #396]	; 8011ca4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8011b1a:	f8bb 3000 	ldrh.w	r3, [fp]
 8011b1e:	4f5d      	ldr	r7, [pc, #372]	; (8011c94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8011b20:	9301      	str	r3, [sp, #4]
 8011b22:	f8ba 3000 	ldrh.w	r3, [sl]
 8011b26:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8011b2a:	9302      	str	r3, [sp, #8]
 8011b2c:	883b      	ldrh	r3, [r7, #0]
 8011b2e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8011b32:	9303      	str	r3, [sp, #12]
 8011b34:	4b58      	ldr	r3, [pc, #352]	; (8011c98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8011b36:	4640      	mov	r0, r8
 8011b38:	881a      	ldrh	r2, [r3, #0]
 8011b3a:	9305      	str	r3, [sp, #20]
 8011b3c:	9204      	str	r2, [sp, #16]
 8011b3e:	f004 fa0f 	bl	8015f60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8011b42:	8038      	strh	r0, [r7, #0]
 8011b44:	4640      	mov	r0, r8
 8011b46:	f004 fa3f 	bl	8015fc8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8011b4a:	9b05      	ldr	r3, [sp, #20]
 8011b4c:	b280      	uxth	r0, r0
 8011b4e:	8018      	strh	r0, [r3, #0]
 8011b50:	4b52      	ldr	r3, [pc, #328]	; (8011c9c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 8011b52:	781b      	ldrb	r3, [r3, #0]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d174      	bne.n	8011c42 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 8011b58:	883b      	ldrh	r3, [r7, #0]
 8011b5a:	f8aa 0000 	strh.w	r0, [sl]
 8011b5e:	f8ab 3000 	strh.w	r3, [fp]
 8011b62:	4648      	mov	r0, r9
 8011b64:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	; 0x3c
 8011b68:	f004 f966 	bl	8015e38 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	e9c4 000f 	strd	r0, r0, [r4, #60]	; 0x3c
 8011b72:	4611      	mov	r1, r2
 8011b74:	4628      	mov	r0, r5
 8011b76:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 8011b7a:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 8011b7e:	f7fc ffb2 	bl	800eae6 <_ZN8touchgfx8Drawable5setXYEss>
 8011b82:	2301      	movs	r3, #1
 8011b84:	f895 b025 	ldrb.w	fp, [r5, #37]	; 0x25
 8011b88:	f885 3025 	strb.w	r3, [r5, #37]	; 0x25
 8011b8c:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	dd5c      	ble.n	8011c4e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8011b94:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	dd58      	ble.n	8011c4e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 8011b9c:	462a      	mov	r2, r5
 8011b9e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8011ba2:	ab0a      	add	r3, sp, #40	; 0x28
 8011ba4:	6851      	ldr	r1, [r2, #4]
 8011ba6:	c303      	stmia	r3!, {r0, r1}
 8011ba8:	4631      	mov	r1, r6
 8011baa:	a80a      	add	r0, sp, #40	; 0x28
 8011bac:	f7ff fbfe 	bl	80113ac <_ZN8touchgfx4RectaNERKS0_>
 8011bb0:	2100      	movs	r1, #0
 8011bb2:	4b38      	ldr	r3, [pc, #224]	; (8011c94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8011bb4:	910c      	str	r1, [sp, #48]	; 0x30
 8011bb6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011bba:	4b37      	ldr	r3, [pc, #220]	; (8011c98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8011bbc:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
 8011bc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011bc4:	aa0a      	add	r2, sp, #40	; 0x28
 8011bc6:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8011bca:	ab08      	add	r3, sp, #32
 8011bcc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011bd0:	e883 0003 	stmia.w	r3, {r0, r1}
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	a90c      	add	r1, sp, #48	; 0x30
 8011bd8:	f7ff fbe8 	bl	80113ac <_ZN8touchgfx4RectaNERKS0_>
 8011bdc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d13c      	bne.n	8011c5c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 8011be2:	2000      	movs	r0, #0
 8011be4:	2600      	movs	r6, #0
 8011be6:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
 8011bea:	696b      	ldr	r3, [r5, #20]
 8011bec:	682a      	ldr	r2, [r5, #0]
 8011bee:	616e      	str	r6, [r5, #20]
 8011bf0:	9305      	str	r3, [sp, #20]
 8011bf2:	6892      	ldr	r2, [r2, #8]
 8011bf4:	a908      	add	r1, sp, #32
 8011bf6:	4628      	mov	r0, r5
 8011bf8:	4790      	blx	r2
 8011bfa:	9b05      	ldr	r3, [sp, #20]
 8011bfc:	4652      	mov	r2, sl
 8011bfe:	616b      	str	r3, [r5, #20]
 8011c00:	4649      	mov	r1, r9
 8011c02:	f884 6076 	strb.w	r6, [r4, #118]	; 0x76
 8011c06:	4628      	mov	r0, r5
 8011c08:	f885 b025 	strb.w	fp, [r5, #37]	; 0x25
 8011c0c:	f7fc ff6b 	bl	800eae6 <_ZN8touchgfx8Drawable5setXYEss>
 8011c10:	9a01      	ldr	r2, [sp, #4]
 8011c12:	4b23      	ldr	r3, [pc, #140]	; (8011ca0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 8011c14:	e9c4 870f 	strd	r8, r7, [r4, #60]	; 0x3c
 8011c18:	801a      	strh	r2, [r3, #0]
 8011c1a:	9a02      	ldr	r2, [sp, #8]
 8011c1c:	4b21      	ldr	r3, [pc, #132]	; (8011ca4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8011c1e:	4620      	mov	r0, r4
 8011c20:	801a      	strh	r2, [r3, #0]
 8011c22:	9a03      	ldr	r2, [sp, #12]
 8011c24:	4b1b      	ldr	r3, [pc, #108]	; (8011c94 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 8011c26:	801a      	strh	r2, [r3, #0]
 8011c28:	4b1b      	ldr	r3, [pc, #108]	; (8011c98 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8011c2a:	9a04      	ldr	r2, [sp, #16]
 8011c2c:	801a      	strh	r2, [r3, #0]
 8011c2e:	6823      	ldr	r3, [r4, #0]
 8011c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011c32:	4798      	blx	r3
 8011c34:	6823      	ldr	r3, [r4, #0]
 8011c36:	4620      	mov	r0, r4
 8011c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c3a:	4798      	blx	r3
 8011c3c:	b00f      	add	sp, #60	; 0x3c
 8011c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c42:	883b      	ldrh	r3, [r7, #0]
 8011c44:	f8ab 0000 	strh.w	r0, [fp]
 8011c48:	f8aa 3000 	strh.w	r3, [sl]
 8011c4c:	e789      	b.n	8011b62 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 8011c4e:	462a      	mov	r2, r5
 8011c50:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8011c54:	ab0a      	add	r3, sp, #40	; 0x28
 8011c56:	6851      	ldr	r1, [r2, #4]
 8011c58:	c303      	stmia	r3!, {r0, r1}
 8011c5a:	e7a9      	b.n	8011bb0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 8011c5c:	a807      	add	r0, sp, #28
 8011c5e:	f004 faef 	bl	8016240 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8011c62:	4606      	mov	r6, r0
 8011c64:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8011c66:	6803      	ldr	r3, [r0, #0]
 8011c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c6a:	4798      	blx	r3
 8011c6c:	4286      	cmp	r6, r0
 8011c6e:	d1b8      	bne.n	8011be2 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 8011c70:	f7fc f9e2 	bl	800e038 <_ZN8touchgfx3HAL3lcdEv>
 8011c74:	6803      	ldr	r3, [r0, #0]
 8011c76:	4606      	mov	r6, r0
 8011c78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011c7a:	a807      	add	r0, sp, #28
 8011c7c:	9305      	str	r3, [sp, #20]
 8011c7e:	f004 fadf 	bl	8016240 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8011c82:	9b05      	ldr	r3, [sp, #20]
 8011c84:	4601      	mov	r1, r0
 8011c86:	4630      	mov	r0, r6
 8011c88:	4798      	blx	r3
 8011c8a:	f080 0001 	eor.w	r0, r0, #1
 8011c8e:	b2c0      	uxtb	r0, r0
 8011c90:	e7a8      	b.n	8011be4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 8011c92:	bf00      	nop
 8011c94:	2001fe7c 	.word	0x2001fe7c
 8011c98:	2001fe7e 	.word	0x2001fe7e
 8011c9c:	2001fe80 	.word	0x2001fe80
 8011ca0:	2001fe82 	.word	0x2001fe82
 8011ca4:	2001fe84 	.word	0x2001fe84

08011ca8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8011ca8:	b510      	push	{r4, lr}
 8011caa:	4b07      	ldr	r3, [pc, #28]	; (8011cc8 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8011cac:	4604      	mov	r4, r0
 8011cae:	781b      	ldrb	r3, [r3, #0]
 8011cb0:	b13b      	cbz	r3, 8011cc2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8011cb2:	6803      	ldr	r3, [r0, #0]
 8011cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011cb6:	4798      	blx	r3
 8011cb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8011cba:	4283      	cmp	r3, r0
 8011cbc:	d101      	bne.n	8011cc2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8011cbe:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8011cc0:	bd10      	pop	{r4, pc}
 8011cc2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8011cc4:	e7fc      	b.n	8011cc0 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 8011cc6:	bf00      	nop
 8011cc8:	2001fe86 	.word	0x2001fe86

08011ccc <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8011ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cd0:	461d      	mov	r5, r3
 8011cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011cd6:	2400      	movs	r4, #0
 8011cd8:	b08a      	sub	sp, #40	; 0x28
 8011cda:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011cde:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8011ce2:	4690      	mov	r8, r2
 8011ce4:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011ce8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8011cec:	f8bd 604c 	ldrh.w	r6, [sp, #76]	; 0x4c
 8011cf0:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011cf4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011cf8:	4607      	mov	r7, r0
 8011cfa:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011cfe:	9404      	str	r4, [sp, #16]
 8011d00:	f88d 4020 	strb.w	r4, [sp, #32]
 8011d04:	f7ff ffd0 	bl	8011ca8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011d08:	fb06 8505 	mla	r5, r6, r5, r8
 8011d0c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8011d10:	6878      	ldr	r0, [r7, #4]
 8011d12:	9505      	str	r5, [sp, #20]
 8011d14:	f8ad 601e 	strh.w	r6, [sp, #30]
 8011d18:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8011d1c:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8011d20:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8011d24:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8011d28:	6803      	ldr	r3, [r0, #0]
 8011d2a:	a901      	add	r1, sp, #4
 8011d2c:	685b      	ldr	r3, [r3, #4]
 8011d2e:	4798      	blx	r3
 8011d30:	b00a      	add	sp, #40	; 0x28
 8011d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011d36 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 8011d36:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011d3a:	2400      	movs	r4, #0
 8011d3c:	461d      	mov	r5, r3
 8011d3e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011d42:	4691      	mov	r9, r2
 8011d44:	b08b      	sub	sp, #44	; 0x2c
 8011d46:	4688      	mov	r8, r1
 8011d48:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 8011d4c:	4607      	mov	r7, r0
 8011d4e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011d52:	9404      	str	r4, [sp, #16]
 8011d54:	f7ff ffa8 	bl	8011ca8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011d58:	fb06 9505 	mla	r5, r6, r5, r9
 8011d5c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011d60:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8011d64:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011d68:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8011d6c:	6878      	ldr	r0, [r7, #4]
 8011d6e:	9505      	str	r5, [sp, #20]
 8011d70:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011d74:	f8ad 401c 	strh.w	r4, [sp, #28]
 8011d78:	f8ad 601e 	strh.w	r6, [sp, #30]
 8011d7c:	f8cd 8010 	str.w	r8, [sp, #16]
 8011d80:	f8ad 4020 	strh.w	r4, [sp, #32]
 8011d84:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8011d88:	f88d 4023 	strb.w	r4, [sp, #35]	; 0x23
 8011d8c:	f88d 4024 	strb.w	r4, [sp, #36]	; 0x24
 8011d90:	6803      	ldr	r3, [r0, #0]
 8011d92:	a901      	add	r1, sp, #4
 8011d94:	685b      	ldr	r3, [r3, #4]
 8011d96:	4798      	blx	r3
 8011d98:	b00b      	add	sp, #44	; 0x2c
 8011d9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08011da0 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 8011da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011da4:	4698      	mov	r8, r3
 8011da6:	2300      	movs	r3, #0
 8011da8:	b08a      	sub	sp, #40	; 0x28
 8011daa:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 8011dae:	4606      	mov	r6, r0
 8011db0:	2d0b      	cmp	r5, #11
 8011db2:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 8011db6:	f89d c054 	ldrb.w	ip, [sp, #84]	; 0x54
 8011dba:	f8bd 7058 	ldrh.w	r7, [sp, #88]	; 0x58
 8011dbe:	f89d 4060 	ldrb.w	r4, [sp, #96]	; 0x60
 8011dc2:	9304      	str	r3, [sp, #16]
 8011dc4:	d137      	bne.n	8011e36 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 8011dc6:	2380      	movs	r3, #128	; 0x80
 8011dc8:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011dcc:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8011dd0:	f88d 0020 	strb.w	r0, [sp, #32]
 8011dd4:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011dd8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011ddc:	4630      	mov	r0, r6
 8011dde:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011de2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8011de6:	9203      	str	r2, [sp, #12]
 8011de8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011dec:	f7ff ff5c 	bl	8011ca8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011df0:	2c0b      	cmp	r4, #11
 8011df2:	bf8c      	ite	hi
 8011df4:	2100      	movhi	r1, #0
 8011df6:	4b1b      	ldrls	r3, [pc, #108]	; (8011e64 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8011df8:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 8011dfc:	bf98      	it	ls
 8011dfe:	5d19      	ldrbls	r1, [r3, r4]
 8011e00:	fb02 8307 	mla	r3, r2, r7, r8
 8011e04:	10c9      	asrs	r1, r1, #3
 8011e06:	fb01 0003 	mla	r0, r1, r3, r0
 8011e0a:	f89d 3064 	ldrb.w	r3, [sp, #100]	; 0x64
 8011e0e:	9005      	str	r0, [sp, #20]
 8011e10:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8011e14:	2300      	movs	r3, #0
 8011e16:	6870      	ldr	r0, [r6, #4]
 8011e18:	f8ad 701e 	strh.w	r7, [sp, #30]
 8011e1c:	f88d 5021 	strb.w	r5, [sp, #33]	; 0x21
 8011e20:	f88d 4022 	strb.w	r4, [sp, #34]	; 0x22
 8011e24:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8011e28:	6803      	ldr	r3, [r0, #0]
 8011e2a:	a901      	add	r1, sp, #4
 8011e2c:	685b      	ldr	r3, [r3, #4]
 8011e2e:	4798      	blx	r3
 8011e30:	b00a      	add	sp, #40	; 0x28
 8011e32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e36:	2d02      	cmp	r5, #2
 8011e38:	d109      	bne.n	8011e4e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8011e3a:	28ff      	cmp	r0, #255	; 0xff
 8011e3c:	d105      	bne.n	8011e4a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8011e3e:	f1bc 0f00 	cmp.w	ip, #0
 8011e42:	bf14      	ite	ne
 8011e44:	2340      	movne	r3, #64	; 0x40
 8011e46:	2320      	moveq	r3, #32
 8011e48:	e7be      	b.n	8011dc8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011e4a:	2340      	movs	r3, #64	; 0x40
 8011e4c:	e7bc      	b.n	8011dc8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011e4e:	28ff      	cmp	r0, #255	; 0xff
 8011e50:	d105      	bne.n	8011e5e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 8011e52:	f1bc 0f00 	cmp.w	ip, #0
 8011e56:	bf14      	ite	ne
 8011e58:	2304      	movne	r3, #4
 8011e5a:	2301      	moveq	r3, #1
 8011e5c:	e7b4      	b.n	8011dc8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011e5e:	2304      	movs	r3, #4
 8011e60:	e7b2      	b.n	8011dc8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 8011e62:	bf00      	nop
 8011e64:	08023f9c 	.word	0x08023f9c

08011e68 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 8011e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e6c:	b08b      	sub	sp, #44	; 0x2c
 8011e6e:	f89d 9058 	ldrb.w	r9, [sp, #88]	; 0x58
 8011e72:	461d      	mov	r5, r3
 8011e74:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8011e78:	bf14      	ite	ne
 8011e7a:	2308      	movne	r3, #8
 8011e7c:	2302      	moveq	r3, #2
 8011e7e:	2400      	movs	r4, #0
 8011e80:	f89d 6060 	ldrb.w	r6, [sp, #96]	; 0x60
 8011e84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011e88:	4688      	mov	r8, r1
 8011e8a:	4693      	mov	fp, r2
 8011e8c:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8011e90:	9404      	str	r4, [sp, #16]
 8011e92:	4607      	mov	r7, r0
 8011e94:	f7ff ff08 	bl	8011ca8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011e98:	2e0b      	cmp	r6, #11
 8011e9a:	bf98      	it	ls
 8011e9c:	4b15      	ldrls	r3, [pc, #84]	; (8011ef4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8011e9e:	fb05 b50a 	mla	r5, r5, sl, fp
 8011ea2:	bf98      	it	ls
 8011ea4:	5d9c      	ldrbls	r4, [r3, r6]
 8011ea6:	f8bd 3050 	ldrh.w	r3, [sp, #80]	; 0x50
 8011eaa:	10e4      	asrs	r4, r4, #3
 8011eac:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011eb0:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8011eb4:	fb04 0405 	mla	r4, r4, r5, r0
 8011eb8:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8011ec2:	6878      	ldr	r0, [r7, #4]
 8011ec4:	9405      	str	r4, [sp, #20]
 8011ec6:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011eca:	f8ad a01e 	strh.w	sl, [sp, #30]
 8011ece:	f8cd 8010 	str.w	r8, [sp, #16]
 8011ed2:	f88d 9020 	strb.w	r9, [sp, #32]
 8011ed6:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 8011eda:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8011ede:	f88d 6021 	strb.w	r6, [sp, #33]	; 0x21
 8011ee2:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
 8011ee6:	6803      	ldr	r3, [r0, #0]
 8011ee8:	a901      	add	r1, sp, #4
 8011eea:	685b      	ldr	r3, [r3, #4]
 8011eec:	4798      	blx	r3
 8011eee:	b00b      	add	sp, #44	; 0x2c
 8011ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ef4:	08023f9c 	.word	0x08023f9c

08011ef8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8011ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011efc:	461e      	mov	r6, r3
 8011efe:	4b0a      	ldr	r3, [pc, #40]	; (8011f28 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8011f00:	460f      	mov	r7, r1
 8011f02:	881d      	ldrh	r5, [r3, #0]
 8011f04:	4690      	mov	r8, r2
 8011f06:	f7fc f897 	bl	800e038 <_ZN8touchgfx3HAL3lcdEv>
 8011f0a:	6803      	ldr	r3, [r0, #0]
 8011f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f0e:	4798      	blx	r3
 8011f10:	280b      	cmp	r0, #11
 8011f12:	bf8e      	itee	hi
 8011f14:	2400      	movhi	r4, #0
 8011f16:	4b05      	ldrls	r3, [pc, #20]	; (8011f2c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8011f18:	5c1c      	ldrbls	r4, [r3, r0]
 8011f1a:	fb08 7005 	mla	r0, r8, r5, r7
 8011f1e:	10e4      	asrs	r4, r4, #3
 8011f20:	fb04 6000 	mla	r0, r4, r0, r6
 8011f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f28:	2001fe82 	.word	0x2001fe82
 8011f2c:	08023f9c 	.word	0x08023f9c

08011f30 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8011f30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011f32:	2500      	movs	r5, #0
 8011f34:	b08b      	sub	sp, #44	; 0x2c
 8011f36:	461f      	mov	r7, r3
 8011f38:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 8011f3c:	4604      	mov	r4, r0
 8011f3e:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8011f42:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8011f46:	4616      	mov	r6, r2
 8011f48:	f8ad 3018 	strh.w	r3, [sp, #24]
 8011f4c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 8011f50:	9504      	str	r5, [sp, #16]
 8011f52:	f8ad 301a 	strh.w	r3, [sp, #26]
 8011f56:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8011f5a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8011f5e:	f89d 3050 	ldrb.w	r3, [sp, #80]	; 0x50
 8011f62:	f88d 3020 	strb.w	r3, [sp, #32]
 8011f66:	f7ff fe9f 	bl	8011ca8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8011f6a:	463a      	mov	r2, r7
 8011f6c:	4631      	mov	r1, r6
 8011f6e:	4603      	mov	r3, r0
 8011f70:	4620      	mov	r0, r4
 8011f72:	f7ff ffc1 	bl	8011ef8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011f76:	4b0e      	ldr	r3, [pc, #56]	; (8011fb0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8011f78:	9005      	str	r0, [sp, #20]
 8011f7a:	881b      	ldrh	r3, [r3, #0]
 8011f7c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8011f80:	f7fc f85a 	bl	800e038 <_ZN8touchgfx3HAL3lcdEv>
 8011f84:	6803      	ldr	r3, [r0, #0]
 8011f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011f88:	4798      	blx	r3
 8011f8a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8011f8c:	f88d 0022 	strb.w	r0, [sp, #34]	; 0x22
 8011f90:	9304      	str	r3, [sp, #16]
 8011f92:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8011f96:	f88d 0021 	strb.w	r0, [sp, #33]	; 0x21
 8011f9a:	6860      	ldr	r0, [r4, #4]
 8011f9c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
 8011fa0:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
 8011fa4:	6803      	ldr	r3, [r0, #0]
 8011fa6:	a901      	add	r1, sp, #4
 8011fa8:	685b      	ldr	r3, [r3, #4]
 8011faa:	4798      	blx	r3
 8011fac:	b00b      	add	sp, #44	; 0x2c
 8011fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fb0:	2001fe82 	.word	0x2001fe82

08011fb4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8011fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fb6:	b08d      	sub	sp, #52	; 0x34
 8011fb8:	466b      	mov	r3, sp
 8011fba:	e883 0006 	stmia.w	r3, {r1, r2}
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	2501      	movs	r5, #1
 8011fc2:	9306      	str	r3, [sp, #24]
 8011fc4:	6803      	ldr	r3, [r0, #0]
 8011fc6:	9503      	str	r5, [sp, #12]
 8011fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011fca:	4604      	mov	r4, r0
 8011fcc:	f8bd 6000 	ldrh.w	r6, [sp]
 8011fd0:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8011fd4:	4798      	blx	r3
 8011fd6:	463a      	mov	r2, r7
 8011fd8:	4631      	mov	r1, r6
 8011fda:	4603      	mov	r3, r0
 8011fdc:	4620      	mov	r0, r4
 8011fde:	f7ff ff8b 	bl	8011ef8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8011fe2:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8011fe4:	9004      	str	r0, [sp, #16]
 8011fe6:	9307      	str	r3, [sp, #28]
 8011fe8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8011fec:	f8ad 3020 	strh.w	r3, [sp, #32]
 8011ff0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8011ff4:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8011ff8:	4b0e      	ldr	r3, [pc, #56]	; (8012034 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8011ffa:	881b      	ldrh	r3, [r3, #0]
 8011ffc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8012000:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 8012004:	f7fc f818 	bl	800e038 <_ZN8touchgfx3HAL3lcdEv>
 8012008:	6803      	ldr	r3, [r0, #0]
 801200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801200c:	4798      	blx	r3
 801200e:	23ff      	movs	r3, #255	; 0xff
 8012010:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 8012014:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 8012018:	6860      	ldr	r0, [r4, #4]
 801201a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 801201e:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 8012022:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 8012026:	6803      	ldr	r3, [r0, #0]
 8012028:	a903      	add	r1, sp, #12
 801202a:	685b      	ldr	r3, [r3, #4]
 801202c:	4798      	blx	r3
 801202e:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8012030:	b00d      	add	sp, #52	; 0x34
 8012032:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012034:	2001fe82 	.word	0x2001fe82

08012038 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8012038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801203c:	b08c      	sub	sp, #48	; 0x30
 801203e:	466d      	mov	r5, sp
 8012040:	461e      	mov	r6, r3
 8012042:	2300      	movs	r3, #0
 8012044:	e885 0006 	stmia.w	r5, {r1, r2}
 8012048:	2501      	movs	r5, #1
 801204a:	9306      	str	r3, [sp, #24]
 801204c:	6803      	ldr	r3, [r0, #0]
 801204e:	9503      	str	r5, [sp, #12]
 8012050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012052:	4604      	mov	r4, r0
 8012054:	f8bd 7000 	ldrh.w	r7, [sp]
 8012058:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 801205c:	4798      	blx	r3
 801205e:	4642      	mov	r2, r8
 8012060:	4639      	mov	r1, r7
 8012062:	4603      	mov	r3, r0
 8012064:	4620      	mov	r0, r4
 8012066:	f7ff ff47 	bl	8011ef8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801206a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801206e:	9004      	str	r0, [sp, #16]
 8012070:	f8ad 3020 	strh.w	r3, [sp, #32]
 8012074:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8012078:	9607      	str	r6, [sp, #28]
 801207a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 801207e:	4b10      	ldr	r3, [pc, #64]	; (80120c0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8012080:	881b      	ldrh	r3, [r3, #0]
 8012082:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
 8012086:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8012088:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
 801208c:	f7fb ffd4 	bl	800e038 <_ZN8touchgfx3HAL3lcdEv>
 8012090:	6803      	ldr	r3, [r0, #0]
 8012092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012094:	4798      	blx	r3
 8012096:	23ff      	movs	r3, #255	; 0xff
 8012098:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
 801209c:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
 80120a0:	6860      	ldr	r0, [r4, #4]
 80120a2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 80120a6:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 80120aa:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
 80120ae:	6803      	ldr	r3, [r0, #0]
 80120b0:	a903      	add	r1, sp, #12
 80120b2:	685b      	ldr	r3, [r3, #4]
 80120b4:	4798      	blx	r3
 80120b6:	4630      	mov	r0, r6
 80120b8:	b00c      	add	sp, #48	; 0x30
 80120ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120be:	bf00      	nop
 80120c0:	2001fe82 	.word	0x2001fe82

080120c4 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 80120c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80120c6:	b085      	sub	sp, #20
 80120c8:	ac02      	add	r4, sp, #8
 80120ca:	e884 0006 	stmia.w	r4, {r1, r2}
 80120ce:	4605      	mov	r5, r0
 80120d0:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 80120d4:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 80120d8:	f7ff fde6 	bl	8011ca8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80120dc:	463a      	mov	r2, r7
 80120de:	4603      	mov	r3, r0
 80120e0:	4631      	mov	r1, r6
 80120e2:	4628      	mov	r0, r5
 80120e4:	f7ff ff08 	bl	8011ef8 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 80120e8:	4a05      	ldr	r2, [pc, #20]	; (8012100 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 80120ea:	682b      	ldr	r3, [r5, #0]
 80120ec:	8812      	ldrh	r2, [r2, #0]
 80120ee:	9200      	str	r2, [sp, #0]
 80120f0:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 80120f2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80120f6:	4603      	mov	r3, r0
 80120f8:	4628      	mov	r0, r5
 80120fa:	47b0      	blx	r6
 80120fc:	b005      	add	sp, #20
 80120fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012100:	2001fe82 	.word	0x2001fe82

08012104 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8012104:	b570      	push	{r4, r5, r6, lr}
 8012106:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 801210a:	4604      	mov	r4, r0
 801210c:	b19b      	cbz	r3, 8012136 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801210e:	2002      	movs	r0, #2
 8012110:	f7fd fe10 	bl	800fd34 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8012114:	2300      	movs	r3, #0
 8012116:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
 801211a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
 801211e:	6823      	ldr	r3, [r4, #0]
 8012120:	4620      	mov	r0, r4
 8012122:	f8d3 50b8 	ldr.w	r5, [r3, #184]	; 0xb8
 8012126:	f7ff fdbf 	bl	8011ca8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801212a:	462b      	mov	r3, r5
 801212c:	4601      	mov	r1, r0
 801212e:	4620      	mov	r0, r4
 8012130:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012134:	4718      	bx	r3
 8012136:	bd70      	pop	{r4, r5, r6, pc}

08012138 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8012138:	b538      	push	{r3, r4, r5, lr}
 801213a:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
 801213e:	4604      	mov	r4, r0
 8012140:	428b      	cmp	r3, r1
 8012142:	460d      	mov	r5, r1
 8012144:	d006      	beq.n	8012154 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8012146:	6803      	ldr	r3, [r0, #0]
 8012148:	b929      	cbnz	r1, 8012156 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 801214a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 801214e:	4798      	blx	r3
 8012150:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
 8012154:	bd38      	pop	{r3, r4, r5, pc}
 8012156:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 801215a:	e7f8      	b.n	801214e <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0801215c <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801215c:	b510      	push	{r4, lr}
 801215e:	4b0d      	ldr	r3, [pc, #52]	; (8012194 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8012160:	4604      	mov	r4, r0
 8012162:	781b      	ldrb	r3, [r3, #0]
 8012164:	b95b      	cbnz	r3, 801217e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8012166:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 801216a:	2b02      	cmp	r3, #2
 801216c:	d007      	beq.n	801217e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801216e:	6840      	ldr	r0, [r0, #4]
 8012170:	f000 f90e 	bl	8012390 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8012174:	b118      	cbz	r0, 801217e <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8012176:	6862      	ldr	r2, [r4, #4]
 8012178:	7a53      	ldrb	r3, [r2, #9]
 801217a:	2b00      	cmp	r3, #0
 801217c:	d0fc      	beq.n	8012178 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 801217e:	f7fe f885 	bl	801028c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8012182:	4620      	mov	r0, r4
 8012184:	2100      	movs	r1, #0
 8012186:	f7ff ffd7 	bl	8012138 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 801218a:	4620      	mov	r0, r4
 801218c:	f7ff fd8c 	bl	8011ca8 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8012190:	bd10      	pop	{r4, pc}
 8012192:	bf00      	nop
 8012194:	2001fe86 	.word	0x2001fe86

08012198 <_ZN8touchgfx13DMA_Interface5flushEv>:
 8012198:	6803      	ldr	r3, [r0, #0]
 801219a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801219c:	4718      	bx	r3

0801219e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801219e:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 80121a2:	1a13      	subs	r3, r2, r0
 80121a4:	4258      	negs	r0, r3
 80121a6:	4158      	adcs	r0, r3
 80121a8:	4770      	bx	lr

080121aa <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 80121aa:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 80121ae:	1a9b      	subs	r3, r3, r2
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	bfdc      	itt	le
 80121b4:	6882      	ldrle	r2, [r0, #8]
 80121b6:	189b      	addle	r3, r3, r2
 80121b8:	2b01      	cmp	r3, #1
 80121ba:	bfcc      	ite	gt
 80121bc:	2000      	movgt	r0, #0
 80121be:	2001      	movle	r0, #1
 80121c0:	4770      	bx	lr

080121c2 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 80121c2:	6902      	ldr	r2, [r0, #16]
 80121c4:	6843      	ldr	r3, [r0, #4]
 80121c6:	2024      	movs	r0, #36	; 0x24
 80121c8:	fb00 3002 	mla	r0, r0, r2, r3
 80121cc:	4770      	bx	lr

080121ce <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 80121ce:	6803      	ldr	r3, [r0, #0]
 80121d0:	691b      	ldr	r3, [r3, #16]
 80121d2:	4718      	bx	r3

080121d4 <_ZN8touchgfx13DMA_Interface7executeEv>:
 80121d4:	2301      	movs	r3, #1
 80121d6:	b570      	push	{r4, r5, r6, lr}
 80121d8:	7203      	strb	r3, [r0, #8]
 80121da:	4604      	mov	r4, r0
 80121dc:	6840      	ldr	r0, [r0, #4]
 80121de:	6803      	ldr	r3, [r0, #0]
 80121e0:	699b      	ldr	r3, [r3, #24]
 80121e2:	4798      	blx	r3
 80121e4:	6803      	ldr	r3, [r0, #0]
 80121e6:	4605      	mov	r5, r0
 80121e8:	2b40      	cmp	r3, #64	; 0x40
 80121ea:	d00c      	beq.n	8012206 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80121ec:	d810      	bhi.n	8012210 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 80121ee:	2b04      	cmp	r3, #4
 80121f0:	d01d      	beq.n	801222e <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 80121f2:	d804      	bhi.n	80121fe <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 80121f4:	2b01      	cmp	r3, #1
 80121f6:	d006      	beq.n	8012206 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 80121f8:	2b02      	cmp	r3, #2
 80121fa:	d02c      	beq.n	8012256 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 80121fc:	bd70      	pop	{r4, r5, r6, pc}
 80121fe:	2b08      	cmp	r3, #8
 8012200:	d01d      	beq.n	801223e <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8012202:	2b20      	cmp	r3, #32
 8012204:	d1fa      	bne.n	80121fc <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8012206:	6823      	ldr	r3, [r4, #0]
 8012208:	4620      	mov	r0, r4
 801220a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801220c:	4798      	blx	r3
 801220e:	e013      	b.n	8012238 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8012210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012214:	d0f7      	beq.n	8012206 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012216:	d804      	bhi.n	8012222 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8012218:	2b80      	cmp	r3, #128	; 0x80
 801221a:	d0f4      	beq.n	8012206 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801221c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012220:	e7f0      	b.n	8012204 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8012222:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012226:	d0ee      	beq.n	8012206 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8012228:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801222c:	e7e5      	b.n	80121fa <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 801222e:	6823      	ldr	r3, [r4, #0]
 8012230:	7f01      	ldrb	r1, [r0, #28]
 8012232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012234:	4620      	mov	r0, r4
 8012236:	4798      	blx	r3
 8012238:	6823      	ldr	r3, [r4, #0]
 801223a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801223c:	e006      	b.n	801224c <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801223e:	6823      	ldr	r3, [r4, #0]
 8012240:	7f01      	ldrb	r1, [r0, #28]
 8012242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012244:	4620      	mov	r0, r4
 8012246:	4798      	blx	r3
 8012248:	6823      	ldr	r3, [r4, #0]
 801224a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801224c:	4629      	mov	r1, r5
 801224e:	4620      	mov	r0, r4
 8012250:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012254:	4718      	bx	r3
 8012256:	6823      	ldr	r3, [r4, #0]
 8012258:	4620      	mov	r0, r4
 801225a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801225c:	4798      	blx	r3
 801225e:	e7f3      	b.n	8012248 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08012260 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8012260:	4770      	bx	lr

08012262 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8012262:	4770      	bx	lr

08012264 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8012264:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8012268:	1ad2      	subs	r2, r2, r3
 801226a:	2a00      	cmp	r2, #0
 801226c:	b510      	push	{r4, lr}
 801226e:	bfdc      	itt	le
 8012270:	6884      	ldrle	r4, [r0, #8]
 8012272:	1912      	addle	r2, r2, r4
 8012274:	2a01      	cmp	r2, #1
 8012276:	dd16      	ble.n	80122a6 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8012278:	2424      	movs	r4, #36	; 0x24
 801227a:	6842      	ldr	r2, [r0, #4]
 801227c:	fb04 2303 	mla	r3, r4, r3, r2
 8012280:	f101 0220 	add.w	r2, r1, #32
 8012284:	f851 4b04 	ldr.w	r4, [r1], #4
 8012288:	4291      	cmp	r1, r2
 801228a:	f843 4b04 	str.w	r4, [r3], #4
 801228e:	d1f9      	bne.n	8012284 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8012290:	780a      	ldrb	r2, [r1, #0]
 8012292:	701a      	strb	r2, [r3, #0]
 8012294:	68c3      	ldr	r3, [r0, #12]
 8012296:	6882      	ldr	r2, [r0, #8]
 8012298:	3301      	adds	r3, #1
 801229a:	429a      	cmp	r2, r3
 801229c:	bfd8      	it	le
 801229e:	1a9b      	suble	r3, r3, r2
 80122a0:	f3bf 8f5b 	dmb	ish
 80122a4:	60c3      	str	r3, [r0, #12]
 80122a6:	bd10      	pop	{r4, pc}

080122a8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 80122a8:	6903      	ldr	r3, [r0, #16]
 80122aa:	6882      	ldr	r2, [r0, #8]
 80122ac:	3301      	adds	r3, #1
 80122ae:	429a      	cmp	r2, r3
 80122b0:	bfd8      	it	le
 80122b2:	1a9b      	suble	r3, r3, r2
 80122b4:	f3bf 8f5b 	dmb	ish
 80122b8:	6103      	str	r3, [r0, #16]
 80122ba:	4770      	bx	lr

080122bc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 80122bc:	b570      	push	{r4, r5, r6, lr}
 80122be:	4604      	mov	r4, r0
 80122c0:	460e      	mov	r6, r1
 80122c2:	6860      	ldr	r0, [r4, #4]
 80122c4:	6803      	ldr	r3, [r0, #0]
 80122c6:	685b      	ldr	r3, [r3, #4]
 80122c8:	4798      	blx	r3
 80122ca:	2800      	cmp	r0, #0
 80122cc:	d1f9      	bne.n	80122c2 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 80122ce:	4d0d      	ldr	r5, [pc, #52]	; (8012304 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 80122d0:	6828      	ldr	r0, [r5, #0]
 80122d2:	6803      	ldr	r3, [r0, #0]
 80122d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80122d6:	4798      	blx	r3
 80122d8:	f7fd fff2 	bl	80102c0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 80122dc:	6828      	ldr	r0, [r5, #0]
 80122de:	2101      	movs	r1, #1
 80122e0:	f7ff ff2a 	bl	8012138 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 80122e4:	6860      	ldr	r0, [r4, #4]
 80122e6:	4631      	mov	r1, r6
 80122e8:	6803      	ldr	r3, [r0, #0]
 80122ea:	689b      	ldr	r3, [r3, #8]
 80122ec:	4798      	blx	r3
 80122ee:	6823      	ldr	r3, [r4, #0]
 80122f0:	4620      	mov	r0, r4
 80122f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80122f4:	4798      	blx	r3
 80122f6:	6828      	ldr	r0, [r5, #0]
 80122f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80122fc:	6803      	ldr	r3, [r0, #0]
 80122fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012300:	4718      	bx	r3
 8012302:	bf00      	nop
 8012304:	2001fe88 	.word	0x2001fe88

08012308 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8012308:	b508      	push	{r3, lr}
 801230a:	f7fd ffbf 	bl	801028c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801230e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8012312:	f7fd bfc9 	b.w	80102a8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08012316 <_ZN8touchgfx13DMA_Interface5startEv>:
 8012316:	b510      	push	{r4, lr}
 8012318:	4604      	mov	r4, r0
 801231a:	6840      	ldr	r0, [r0, #4]
 801231c:	6803      	ldr	r3, [r0, #0]
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	4798      	blx	r3
 8012322:	b948      	cbnz	r0, 8012338 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8012324:	7a63      	ldrb	r3, [r4, #9]
 8012326:	b13b      	cbz	r3, 8012338 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 8012328:	7a23      	ldrb	r3, [r4, #8]
 801232a:	b92b      	cbnz	r3, 8012338 <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801232c:	6823      	ldr	r3, [r4, #0]
 801232e:	4620      	mov	r0, r4
 8012330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012336:	4718      	bx	r3
 8012338:	bd10      	pop	{r4, pc}

0801233a <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801233a:	b570      	push	{r4, r5, r6, lr}
 801233c:	4604      	mov	r4, r0
 801233e:	6840      	ldr	r0, [r0, #4]
 8012340:	6803      	ldr	r3, [r0, #0]
 8012342:	681b      	ldr	r3, [r3, #0]
 8012344:	4798      	blx	r3
 8012346:	4605      	mov	r5, r0
 8012348:	b930      	cbnz	r0, 8012358 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801234a:	7a23      	ldrb	r3, [r4, #8]
 801234c:	b123      	cbz	r3, 8012358 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 801234e:	6860      	ldr	r0, [r4, #4]
 8012350:	6803      	ldr	r3, [r0, #0]
 8012352:	695b      	ldr	r3, [r3, #20]
 8012354:	4798      	blx	r3
 8012356:	7225      	strb	r5, [r4, #8]
 8012358:	6860      	ldr	r0, [r4, #4]
 801235a:	6803      	ldr	r3, [r0, #0]
 801235c:	681b      	ldr	r3, [r3, #0]
 801235e:	4798      	blx	r3
 8012360:	b928      	cbnz	r0, 801236e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8012362:	6823      	ldr	r3, [r4, #0]
 8012364:	4620      	mov	r0, r4
 8012366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801236a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801236c:	4718      	bx	r3
 801236e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8012372:	f7fd bfb1 	b.w	80102d8 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
	...

08012378 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8012378:	6082      	str	r2, [r0, #8]
 801237a:	2200      	movs	r2, #0
 801237c:	b510      	push	{r4, lr}
 801237e:	4c03      	ldr	r4, [pc, #12]	; (801238c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8012380:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8012384:	e9c0 4100 	strd	r4, r1, [r0]
 8012388:	bd10      	pop	{r4, pc}
 801238a:	bf00      	nop
 801238c:	080240d8 	.word	0x080240d8

08012390 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8012390:	6840      	ldr	r0, [r0, #4]
 8012392:	6803      	ldr	r3, [r0, #0]
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	4718      	bx	r3

08012398 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8012398:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 801239c:	4770      	bx	lr

0801239e <_ZN8touchgfx14AbstractButton13executeActionEv>:
 801239e:	b510      	push	{r4, lr}
 80123a0:	4604      	mov	r4, r0
 80123a2:	6a80      	ldr	r0, [r0, #40]	; 0x28
 80123a4:	b150      	cbz	r0, 80123bc <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80123a6:	6803      	ldr	r3, [r0, #0]
 80123a8:	68db      	ldr	r3, [r3, #12]
 80123aa:	4798      	blx	r3
 80123ac:	b130      	cbz	r0, 80123bc <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 80123ae:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80123b0:	4621      	mov	r1, r4
 80123b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80123b6:	6803      	ldr	r3, [r0, #0]
 80123b8:	689b      	ldr	r3, [r3, #8]
 80123ba:	4718      	bx	r3
 80123bc:	bd10      	pop	{r4, pc}

080123be <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 80123be:	790b      	ldrb	r3, [r1, #4]
 80123c0:	b570      	push	{r4, r5, r6, lr}
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	bf0c      	ite	eq
 80123c6:	2301      	moveq	r3, #1
 80123c8:	2300      	movne	r3, #0
 80123ca:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 80123ce:	4604      	mov	r4, r0
 80123d0:	460e      	mov	r6, r1
 80123d2:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
 80123d6:	d109      	bne.n	80123ec <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 80123d8:	b14d      	cbz	r5, 80123ee <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 80123da:	7933      	ldrb	r3, [r6, #4]
 80123dc:	2b01      	cmp	r3, #1
 80123de:	d10c      	bne.n	80123fa <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80123e0:	6823      	ldr	r3, [r4, #0]
 80123e2:	4620      	mov	r0, r4
 80123e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80123e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80123ea:	4718      	bx	r3
 80123ec:	b12d      	cbz	r5, 80123fa <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 80123ee:	6823      	ldr	r3, [r4, #0]
 80123f0:	4620      	mov	r0, r4
 80123f2:	695b      	ldr	r3, [r3, #20]
 80123f4:	4798      	blx	r3
 80123f6:	2d00      	cmp	r5, #0
 80123f8:	d1ef      	bne.n	80123da <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 80123fa:	bd70      	pop	{r4, r5, r6, pc}

080123fc <_ZNK8touchgfx3Box12getSolidRectEv>:
 80123fc:	2300      	movs	r3, #0
 80123fe:	8083      	strh	r3, [r0, #4]
 8012400:	80c3      	strh	r3, [r0, #6]
 8012402:	8003      	strh	r3, [r0, #0]
 8012404:	8043      	strh	r3, [r0, #2]
 8012406:	f891 3026 	ldrb.w	r3, [r1, #38]	; 0x26
 801240a:	2bff      	cmp	r3, #255	; 0xff
 801240c:	bf01      	itttt	eq
 801240e:	890b      	ldrheq	r3, [r1, #8]
 8012410:	8083      	strheq	r3, [r0, #4]
 8012412:	894b      	ldrheq	r3, [r1, #10]
 8012414:	80c3      	strheq	r3, [r0, #6]
 8012416:	4770      	bx	lr

08012418 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8012418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801241a:	4604      	mov	r4, r0
 801241c:	466b      	mov	r3, sp
 801241e:	6808      	ldr	r0, [r1, #0]
 8012420:	6849      	ldr	r1, [r1, #4]
 8012422:	c303      	stmia	r3!, {r0, r1}
 8012424:	6823      	ldr	r3, [r4, #0]
 8012426:	4669      	mov	r1, sp
 8012428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801242a:	4620      	mov	r0, r4
 801242c:	4798      	blx	r3
 801242e:	4b08      	ldr	r3, [pc, #32]	; (8012450 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8012430:	681b      	ldr	r3, [r3, #0]
 8012432:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8012436:	b10a      	cbz	r2, 801243c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8012438:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 801243a:	b900      	cbnz	r0, 801243e <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 801243c:	6898      	ldr	r0, [r3, #8]
 801243e:	6803      	ldr	r3, [r0, #0]
 8012440:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8012442:	6a1d      	ldr	r5, [r3, #32]
 8012444:	4669      	mov	r1, sp
 8012446:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
 801244a:	47a8      	blx	r5
 801244c:	b003      	add	sp, #12
 801244e:	bd30      	pop	{r4, r5, pc}
 8012450:	2001fe88 	.word	0x2001fe88

08012454 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8012454:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8012458:	b12a      	cbz	r2, 8012466 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801245a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801245e:	b112      	cbz	r2, 8012466 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8012460:	6803      	ldr	r3, [r0, #0]
 8012462:	695b      	ldr	r3, [r3, #20]
 8012464:	4718      	bx	r3
 8012466:	4770      	bx	lr

08012468 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8012468:	b570      	push	{r4, r5, r6, lr}
 801246a:	4605      	mov	r5, r0
 801246c:	880b      	ldrh	r3, [r1, #0]
 801246e:	4604      	mov	r4, r0
 8012470:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8012472:	8813      	ldrh	r3, [r2, #0]
 8012474:	f825 3f30 	strh.w	r3, [r5, #48]!
 8012478:	4628      	mov	r0, r5
 801247a:	f003 fd71 	bl	8015f60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801247e:	4606      	mov	r6, r0
 8012480:	4628      	mov	r0, r5
 8012482:	f003 fda1 	bl	8015fc8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012486:	4605      	mov	r5, r0
 8012488:	6823      	ldr	r3, [r4, #0]
 801248a:	4631      	mov	r1, r6
 801248c:	4620      	mov	r0, r4
 801248e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012490:	4798      	blx	r3
 8012492:	6823      	ldr	r3, [r4, #0]
 8012494:	4629      	mov	r1, r5
 8012496:	4620      	mov	r0, r4
 8012498:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801249c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801249e:	4718      	bx	r3

080124a0 <_ZNK8touchgfx6Button12getSolidRectEv>:
 80124a0:	b510      	push	{r4, lr}
 80124a2:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 80124a6:	4604      	mov	r4, r0
 80124a8:	2bff      	cmp	r3, #255	; 0xff
 80124aa:	d006      	beq.n	80124ba <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 80124ac:	2300      	movs	r3, #0
 80124ae:	8003      	strh	r3, [r0, #0]
 80124b0:	8043      	strh	r3, [r0, #2]
 80124b2:	8083      	strh	r3, [r0, #4]
 80124b4:	80c3      	strh	r3, [r0, #6]
 80124b6:	4620      	mov	r0, r4
 80124b8:	bd10      	pop	{r4, pc}
 80124ba:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
 80124be:	b11b      	cbz	r3, 80124c8 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 80124c0:	3130      	adds	r1, #48	; 0x30
 80124c2:	f003 fdb5 	bl	8016030 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80124c6:	e7f6      	b.n	80124b6 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 80124c8:	312e      	adds	r1, #46	; 0x2e
 80124ca:	e7fa      	b.n	80124c2 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>

080124cc <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 80124cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80124d0:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80124d4:	b08a      	sub	sp, #40	; 0x28
 80124d6:	4604      	mov	r4, r0
 80124d8:	4688      	mov	r8, r1
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d066      	beq.n	80125ac <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 80124de:	8e03      	ldrh	r3, [r0, #48]	; 0x30
 80124e0:	a805      	add	r0, sp, #20
 80124e2:	f8ad 3014 	strh.w	r3, [sp, #20]
 80124e6:	f003 fd3b 	bl	8015f60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80124ea:	4607      	mov	r7, r0
 80124ec:	a805      	add	r0, sp, #20
 80124ee:	f003 fd6b 	bl	8015fc8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80124f2:	2300      	movs	r3, #0
 80124f4:	f9b8 6000 	ldrsh.w	r6, [r8]
 80124f8:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80124fc:	9306      	str	r3, [sp, #24]
 80124fe:	4432      	add	r2, r6
 8012500:	b292      	uxth	r2, r2
 8012502:	fa0f fc82 	sxth.w	ip, r2
 8012506:	459c      	cmp	ip, r3
 8012508:	dd52      	ble.n	80125b0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801250a:	42b7      	cmp	r7, r6
 801250c:	dd50      	ble.n	80125b0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 801250e:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8012512:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8012516:	442b      	add	r3, r5
 8012518:	b29b      	uxth	r3, r3
 801251a:	b219      	sxth	r1, r3
 801251c:	2900      	cmp	r1, #0
 801251e:	dd47      	ble.n	80125b0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8012520:	42a8      	cmp	r0, r5
 8012522:	dd45      	ble.n	80125b0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8012524:	4567      	cmp	r7, ip
 8012526:	bfb8      	it	lt
 8012528:	b2ba      	uxthlt	r2, r7
 801252a:	4288      	cmp	r0, r1
 801252c:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 8012530:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 8012534:	bfb8      	it	lt
 8012536:	b283      	uxthlt	r3, r0
 8012538:	1b92      	subs	r2, r2, r6
 801253a:	1b5b      	subs	r3, r3, r5
 801253c:	f8ad 201c 	strh.w	r2, [sp, #28]
 8012540:	f8ad 301e 	strh.w	r3, [sp, #30]
 8012544:	f8ad 6018 	strh.w	r6, [sp, #24]
 8012548:	f8ad 501a 	strh.w	r5, [sp, #26]
 801254c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012550:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8012554:	429a      	cmp	r2, r3
 8012556:	d026      	beq.n	80125a6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8012558:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801255c:	2b00      	cmp	r3, #0
 801255e:	dd22      	ble.n	80125a6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8012560:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8012564:	2b00      	cmp	r3, #0
 8012566:	dd1e      	ble.n	80125a6 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8012568:	2300      	movs	r3, #0
 801256a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 801256e:	6823      	ldr	r3, [r4, #0]
 8012570:	a908      	add	r1, sp, #32
 8012572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012574:	4620      	mov	r0, r4
 8012576:	4798      	blx	r3
 8012578:	4b0f      	ldr	r3, [pc, #60]	; (80125b8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 801257a:	681b      	ldr	r3, [r3, #0]
 801257c:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 8012580:	b10a      	cbz	r2, 8012586 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8012582:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8012584:	b900      	cbnz	r0, 8012588 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8012586:	6898      	ldr	r0, [r3, #8]
 8012588:	2501      	movs	r5, #1
 801258a:	6801      	ldr	r1, [r0, #0]
 801258c:	9502      	str	r5, [sp, #8]
 801258e:	f894 4032 	ldrb.w	r4, [r4, #50]	; 0x32
 8012592:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8012596:	9401      	str	r4, [sp, #4]
 8012598:	ac06      	add	r4, sp, #24
 801259a:	9400      	str	r4, [sp, #0]
 801259c:	688c      	ldr	r4, [r1, #8]
 801259e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80125a2:	a905      	add	r1, sp, #20
 80125a4:	47a0      	blx	r4
 80125a6:	b00a      	add	sp, #40	; 0x28
 80125a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125ac:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80125ae:	e797      	b.n	80124e0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 80125b0:	2300      	movs	r3, #0
 80125b2:	9307      	str	r3, [sp, #28]
 80125b4:	e7ca      	b.n	801254c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 80125b6:	bf00      	nop
 80125b8:	2001fe88 	.word	0x2001fe88

080125bc <_ZNK8touchgfx6Button17invalidateContentEv>:
 80125bc:	f890 2032 	ldrb.w	r2, [r0, #50]	; 0x32
 80125c0:	b12a      	cbz	r2, 80125ce <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 80125c2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80125c6:	b112      	cbz	r2, 80125ce <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 80125c8:	6803      	ldr	r3, [r0, #0]
 80125ca:	695b      	ldr	r3, [r3, #20]
 80125cc:	4718      	bx	r3
 80125ce:	4770      	bx	lr

080125d0 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80125d0:	b570      	push	{r4, r5, r6, lr}
 80125d2:	880b      	ldrh	r3, [r1, #0]
 80125d4:	4604      	mov	r4, r0
 80125d6:	84c3      	strh	r3, [r0, #38]	; 0x26
 80125d8:	4608      	mov	r0, r1
 80125da:	460d      	mov	r5, r1
 80125dc:	f003 fcc0 	bl	8015f60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80125e0:	4606      	mov	r6, r0
 80125e2:	4628      	mov	r0, r5
 80125e4:	f003 fcf0 	bl	8015fc8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80125e8:	4605      	mov	r5, r0
 80125ea:	6823      	ldr	r3, [r4, #0]
 80125ec:	4631      	mov	r1, r6
 80125ee:	4620      	mov	r0, r4
 80125f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80125f2:	4798      	blx	r3
 80125f4:	6823      	ldr	r3, [r4, #0]
 80125f6:	4629      	mov	r1, r5
 80125f8:	4620      	mov	r0, r4
 80125fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80125fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012600:	4718      	bx	r3

08012602 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8012602:	b510      	push	{r4, lr}
 8012604:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8012608:	4604      	mov	r4, r0
 801260a:	2bff      	cmp	r3, #255	; 0xff
 801260c:	d006      	beq.n	801261c <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 801260e:	2300      	movs	r3, #0
 8012610:	8003      	strh	r3, [r0, #0]
 8012612:	8043      	strh	r3, [r0, #2]
 8012614:	8083      	strh	r3, [r0, #4]
 8012616:	80c3      	strh	r3, [r0, #6]
 8012618:	4620      	mov	r0, r4
 801261a:	bd10      	pop	{r4, pc}
 801261c:	3126      	adds	r1, #38	; 0x26
 801261e:	f003 fd07 	bl	8016030 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8012622:	e7f9      	b.n	8012618 <_ZNK8touchgfx5Image12getSolidRectEv+0x16>

08012624 <_ZNK8touchgfx5Image17invalidateContentEv>:
 8012624:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
 8012628:	b12a      	cbz	r2, 8012636 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 801262a:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 801262e:	b112      	cbz	r2, 8012636 <_ZNK8touchgfx5Image17invalidateContentEv+0x12>
 8012630:	6803      	ldr	r3, [r0, #0]
 8012632:	695b      	ldr	r3, [r3, #20]
 8012634:	4718      	bx	r3
 8012636:	4770      	bx	lr

08012638 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8012638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801263c:	4604      	mov	r4, r0
 801263e:	2500      	movs	r5, #0
 8012640:	f854 3b26 	ldr.w	r3, [r4], #38
 8012644:	b088      	sub	sp, #32
 8012646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012648:	460f      	mov	r7, r1
 801264a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 801264e:	a904      	add	r1, sp, #16
 8012650:	4606      	mov	r6, r0
 8012652:	4798      	blx	r3
 8012654:	4620      	mov	r0, r4
 8012656:	f003 fc83 	bl	8015f60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801265a:	4680      	mov	r8, r0
 801265c:	4620      	mov	r0, r4
 801265e:	f003 fcb3 	bl	8015fc8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8012662:	9506      	str	r5, [sp, #24]
 8012664:	ad06      	add	r5, sp, #24
 8012666:	f8ad 001e 	strh.w	r0, [sp, #30]
 801266a:	4639      	mov	r1, r7
 801266c:	4628      	mov	r0, r5
 801266e:	f8ad 801c 	strh.w	r8, [sp, #28]
 8012672:	f7fe fe9b 	bl	80113ac <_ZN8touchgfx4RectaNERKS0_>
 8012676:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801267a:	2b00      	cmp	r3, #0
 801267c:	dd19      	ble.n	80126b2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801267e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8012682:	2b00      	cmp	r3, #0
 8012684:	dd15      	ble.n	80126b2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8012686:	4b0c      	ldr	r3, [pc, #48]	; (80126b8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8012688:	681b      	ldr	r3, [r3, #0]
 801268a:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
 801268e:	b10a      	cbz	r2, 8012694 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8012690:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8012692:	b900      	cbnz	r0, 8012696 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8012694:	6898      	ldr	r0, [r3, #8]
 8012696:	2701      	movs	r7, #1
 8012698:	6801      	ldr	r1, [r0, #0]
 801269a:	9702      	str	r7, [sp, #8]
 801269c:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
 80126a0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 80126a4:	e9cd 5600 	strd	r5, r6, [sp]
 80126a8:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80126ac:	688d      	ldr	r5, [r1, #8]
 80126ae:	4621      	mov	r1, r4
 80126b0:	47a8      	blx	r5
 80126b2:	b008      	add	sp, #32
 80126b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80126b8:	2001fe88 	.word	0x2001fe88

080126bc <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 80126bc:	b510      	push	{r4, lr}
 80126be:	6803      	ldr	r3, [r0, #0]
 80126c0:	460c      	mov	r4, r1
 80126c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126c4:	4798      	blx	r3
 80126c6:	1b03      	subs	r3, r0, r4
 80126c8:	4258      	negs	r0, r3
 80126ca:	4158      	adcs	r0, r3
 80126cc:	bd10      	pop	{r4, pc}
	...

080126d0 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80126d0:	4b01      	ldr	r3, [pc, #4]	; (80126d8 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80126d2:	6019      	str	r1, [r3, #0]
 80126d4:	4770      	bx	lr
 80126d6:	bf00      	nop
 80126d8:	2001fe90 	.word	0x2001fe90

080126dc <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80126dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126e0:	4696      	mov	lr, r2
 80126e2:	4614      	mov	r4, r2
 80126e4:	4605      	mov	r5, r0
 80126e6:	460e      	mov	r6, r1
 80126e8:	461f      	mov	r7, r3
 80126ea:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80126ee:	b097      	sub	sp, #92	; 0x5c
 80126f0:	f10d 0c1c 	add.w	ip, sp, #28
 80126f4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80126f8:	f8de 3000 	ldr.w	r3, [lr]
 80126fc:	f104 0e14 	add.w	lr, r4, #20
 8012700:	f8cc 3000 	str.w	r3, [ip]
 8012704:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8012708:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801270c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012710:	f8de 3000 	ldr.w	r3, [lr]
 8012714:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8012718:	f8cc 3000 	str.w	r3, [ip]
 801271c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8012720:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012724:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012728:	f8bd 8088 	ldrh.w	r8, [sp, #136]	; 0x88
 801272c:	f89d 908c 	ldrb.w	r9, [sp, #140]	; 0x8c
 8012730:	f8bd a090 	ldrh.w	sl, [sp, #144]	; 0x90
 8012734:	f8de 3000 	ldr.w	r3, [lr]
 8012738:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801273a:	f8cc 3000 	str.w	r3, [ip]
 801273e:	9201      	str	r2, [sp, #4]
 8012740:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8012744:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8012746:	682b      	ldr	r3, [r5, #0]
 8012748:	9200      	str	r2, [sp, #0]
 801274a:	f8cd 8008 	str.w	r8, [sp, #8]
 801274e:	f8d3 b03c 	ldr.w	fp, [r3, #60]	; 0x3c
 8012752:	aa07      	add	r2, sp, #28
 8012754:	463b      	mov	r3, r7
 8012756:	4631      	mov	r1, r6
 8012758:	4628      	mov	r0, r5
 801275a:	47d8      	blx	fp
 801275c:	46a6      	mov	lr, r4
 801275e:	f10d 0c1c 	add.w	ip, sp, #28
 8012762:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012766:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801276a:	f8de 3000 	ldr.w	r3, [lr]
 801276e:	f104 0e28 	add.w	lr, r4, #40	; 0x28
 8012772:	f8cc 3000 	str.w	r3, [ip]
 8012776:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 801277a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801277e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012782:	f8de 3000 	ldr.w	r3, [lr]
 8012786:	343c      	adds	r4, #60	; 0x3c
 8012788:	f8cc 3000 	str.w	r3, [ip]
 801278c:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 8012790:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012792:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012796:	6823      	ldr	r3, [r4, #0]
 8012798:	4631      	mov	r1, r6
 801279a:	f8cc 3000 	str.w	r3, [ip]
 801279e:	682b      	ldr	r3, [r5, #0]
 80127a0:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80127a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80127a6:	f8cd 8008 	str.w	r8, [sp, #8]
 80127aa:	9201      	str	r2, [sp, #4]
 80127ac:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80127ae:	4628      	mov	r0, r5
 80127b0:	9200      	str	r2, [sp, #0]
 80127b2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 80127b4:	aa07      	add	r2, sp, #28
 80127b6:	463b      	mov	r3, r7
 80127b8:	47a0      	blx	r4
 80127ba:	b017      	add	sp, #92	; 0x5c
 80127bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080127c0 <_ZN8touchgfx3LCD28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80127c0:	2000      	movs	r0, #0
 80127c2:	4770      	bx	lr

080127c4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 80127c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80127c8:	b08d      	sub	sp, #52	; 0x34
 80127ca:	4688      	mov	r8, r1
 80127cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80127ce:	f8d3 c000 	ldr.w	ip, [r3]
 80127d2:	680f      	ldr	r7, [r1, #0]
 80127d4:	f8bd 4070 	ldrh.w	r4, [sp, #112]	; 0x70
 80127d8:	eba7 070c 	sub.w	r7, r7, ip
 80127dc:	42bc      	cmp	r4, r7
 80127de:	bfa8      	it	ge
 80127e0:	463c      	movge	r4, r7
 80127e2:	ee07 4a90 	vmov	s15, r4
 80127e6:	ed92 4a09 	vldr	s8, [r2, #36]	; 0x24
 80127ea:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80127ee:	edd2 4a0b 	vldr	s9, [r2, #44]	; 0x2c
 80127f2:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80127f6:	edd3 6a07 	vldr	s13, [r3, #28]
 80127fa:	ee25 4a04 	vmul.f32	s8, s10, s8
 80127fe:	ee65 4a24 	vmul.f32	s9, s10, s9
 8012802:	ee25 5a27 	vmul.f32	s10, s10, s15
 8012806:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 801280a:	edd3 1a0a 	vldr	s3, [r3, #40]	; 0x28
 801280e:	ed93 2a0d 	vldr	s4, [r3, #52]	; 0x34
 8012812:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8012816:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012818:	f8dd a064 	ldr.w	sl, [sp, #100]	; 0x64
 801281c:	f9b1 9000 	ldrsh.w	r9, [r1]
 8012820:	f9ba 1000 	ldrsh.w	r1, [sl]
 8012824:	eb09 0e0c 	add.w	lr, r9, ip
 8012828:	4571      	cmp	r1, lr
 801282a:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801282e:	ee32 1a05 	vadd.f32	s2, s4, s10
 8012832:	ee36 0a84 	vadd.f32	s0, s13, s8
 8012836:	ee61 1a87 	vmul.f32	s3, s3, s14
 801283a:	ee22 2a07 	vmul.f32	s4, s4, s14
 801283e:	f340 808c 	ble.w	801295a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8012842:	eba1 060e 	sub.w	r6, r1, lr
 8012846:	fb96 f5f4 	sdiv	r5, r6, r4
 801284a:	ee07 5a10 	vmov	s14, r5
 801284e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8012852:	2d00      	cmp	r5, #0
 8012854:	fb04 6615 	mls	r6, r4, r5, r6
 8012858:	eea7 0a04 	vfma.f32	s0, s14, s8
 801285c:	eee7 0a24 	vfma.f32	s1, s14, s9
 8012860:	eea7 1a05 	vfma.f32	s2, s14, s10
 8012864:	dd12      	ble.n	801288c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8012866:	ee70 6a44 	vsub.f32	s13, s0, s8
 801286a:	eef5 6a40 	vcmp.f32	s13, #0.0
 801286e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012872:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8012876:	bf14      	ite	ne
 8012878:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 801287c:	eeb0 7a67 	vmoveq.f32	s14, s15
 8012880:	ee31 2a45 	vsub.f32	s4, s2, s10
 8012884:	ee61 1a87 	vmul.f32	s3, s3, s14
 8012888:	ee22 2a07 	vmul.f32	s4, s4, s14
 801288c:	fb05 f204 	mul.w	r2, r5, r4
 8012890:	1abf      	subs	r7, r7, r2
 8012892:	4494      	add	ip, r2
 8012894:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8012898:	4411      	add	r1, r2
 801289a:	eb09 020c 	add.w	r2, r9, ip
 801289e:	443a      	add	r2, r7
 80128a0:	b209      	sxth	r1, r1
 80128a2:	428a      	cmp	r2, r1
 80128a4:	bfc4      	itt	gt
 80128a6:	eba1 0209 	subgt.w	r2, r1, r9
 80128aa:	eba2 070c 	subgt.w	r7, r2, ip
 80128ae:	2f00      	cmp	r7, #0
 80128b0:	dd50      	ble.n	8012954 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 80128b2:	fb97 f1f4 	sdiv	r1, r7, r4
 80128b6:	fb04 7211 	mls	r2, r4, r1, r7
 80128ba:	b90a      	cbnz	r2, 80128c0 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 80128bc:	4622      	mov	r2, r4
 80128be:	3901      	subs	r1, #1
 80128c0:	eec7 3a80 	vdiv.f32	s7, s15, s0
 80128c4:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80128c8:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80128cc:	ee21 3a23 	vmul.f32	s6, s2, s7
 80128d0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80128d4:	ee17 7a90 	vmov	r7, s15
 80128d8:	ee73 7a42 	vsub.f32	s15, s6, s4
 80128dc:	eef0 6a42 	vmov.f32	s13, s4
 80128e0:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80128e4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80128e8:	ee17 ca90 	vmov	ip, s15
 80128ec:	eeb0 7a61 	vmov.f32	s14, s3
 80128f0:	6840      	ldr	r0, [r0, #4]
 80128f2:	f89d b06c 	ldrb.w	fp, [sp, #108]	; 0x6c
 80128f6:	f8d0 a000 	ldr.w	sl, [r0]
 80128fa:	900b      	str	r0, [sp, #44]	; 0x2c
 80128fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80128fe:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8012902:	9008      	str	r0, [sp, #32]
 8012904:	9818      	ldr	r0, [sp, #96]	; 0x60
 8012906:	695b      	ldr	r3, [r3, #20]
 8012908:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801290c:	fb9c fcf4 	sdiv	ip, ip, r4
 8012910:	445b      	add	r3, fp
 8012912:	9307      	str	r3, [sp, #28]
 8012914:	ee16 3a90 	vmov	r3, s13
 8012918:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801291c:	fb0c 3306 	mla	r3, ip, r6, r3
 8012920:	fb97 f7f4 	sdiv	r7, r7, r4
 8012924:	9302      	str	r3, [sp, #8]
 8012926:	ee17 3a10 	vmov	r3, s14
 801292a:	2900      	cmp	r1, #0
 801292c:	bfcc      	ite	gt
 801292e:	46a1      	movgt	r9, r4
 8012930:	4691      	movle	r9, r2
 8012932:	44b6      	add	lr, r6
 8012934:	fb04 e505 	mla	r5, r4, r5, lr
 8012938:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 801293c:	fb07 3706 	mla	r7, r7, r6, r3
 8012940:	e9cd 8505 	strd	r8, r5, [sp, #20]
 8012944:	e9cd 4700 	strd	r4, r7, [sp]
 8012948:	eba9 0306 	sub.w	r3, r9, r6
 801294c:	f8da 4008 	ldr.w	r4, [sl, #8]
 8012950:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8012952:	47a0      	blx	r4
 8012954:	b00d      	add	sp, #52	; 0x34
 8012956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801295a:	2500      	movs	r5, #0
 801295c:	462e      	mov	r6, r5
 801295e:	e799      	b.n	8012894 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08012960 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8012960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012964:	461d      	mov	r5, r3
 8012966:	b0db      	sub	sp, #364	; 0x16c
 8012968:	f8bd 3198 	ldrh.w	r3, [sp, #408]	; 0x198
 801296c:	910f      	str	r1, [sp, #60]	; 0x3c
 801296e:	930a      	str	r3, [sp, #40]	; 0x28
 8012970:	f89d 319c 	ldrb.w	r3, [sp, #412]	; 0x19c
 8012974:	9009      	str	r0, [sp, #36]	; 0x24
 8012976:	930b      	str	r3, [sp, #44]	; 0x2c
 8012978:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	; 0x1a0
 801297c:	4614      	mov	r4, r2
 801297e:	9310      	str	r3, [sp, #64]	; 0x40
 8012980:	6803      	ldr	r3, [r0, #0]
 8012982:	4629      	mov	r1, r5
 8012984:	6c5f      	ldr	r7, [r3, #68]	; 0x44
 8012986:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801298a:	f8dd b194 	ldr.w	fp, [sp, #404]	; 0x194
 801298e:	47b8      	blx	r7
 8012990:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012992:	6058      	str	r0, [r3, #4]
 8012994:	2800      	cmp	r0, #0
 8012996:	f000 83a1 	beq.w	80130dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801299a:	ed94 7a02 	vldr	s14, [r4, #8]
 801299e:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
 80129a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80129a6:	682b      	ldr	r3, [r5, #0]
 80129a8:	9314      	str	r3, [sp, #80]	; 0x50
 80129aa:	686b      	ldr	r3, [r5, #4]
 80129ac:	9315      	str	r3, [sp, #84]	; 0x54
 80129ae:	4bc1      	ldr	r3, [pc, #772]	; (8012cb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 80129b0:	7819      	ldrb	r1, [r3, #0]
 80129b2:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 80129b6:	2900      	cmp	r1, #0
 80129b8:	bf16      	itet	ne
 80129ba:	4619      	movne	r1, r3
 80129bc:	4611      	moveq	r1, r2
 80129be:	4613      	movne	r3, r2
 80129c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129c4:	9116      	str	r1, [sp, #88]	; 0x58
 80129c6:	e9cd 3217 	strd	r3, r2, [sp, #92]	; 0x5c
 80129ca:	f240 8387 	bls.w	80130dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80129ce:	ed94 7a07 	vldr	s14, [r4, #28]
 80129d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80129d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129da:	f240 837f 	bls.w	80130dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80129de:	ed94 7a0c 	vldr	s14, [r4, #48]	; 0x30
 80129e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80129e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129ea:	f240 8377 	bls.w	80130dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80129ee:	6822      	ldr	r2, [r4, #0]
 80129f0:	4bb1      	ldr	r3, [pc, #708]	; (8012cb8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80129f2:	429a      	cmp	r2, r3
 80129f4:	f2c0 8372 	blt.w	80130dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80129f8:	49b0      	ldr	r1, [pc, #704]	; (8012cbc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80129fa:	6963      	ldr	r3, [r4, #20]
 80129fc:	428a      	cmp	r2, r1
 80129fe:	f300 836d 	bgt.w	80130dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012a02:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8012a06:	48ae      	ldr	r0, [pc, #696]	; (8012cc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8012a08:	33ff      	adds	r3, #255	; 0xff
 8012a0a:	4283      	cmp	r3, r0
 8012a0c:	f200 8366 	bhi.w	80130dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012a10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8012a12:	4dac      	ldr	r5, [pc, #688]	; (8012cc4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8012a14:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
 8012a18:	33ff      	adds	r3, #255	; 0xff
 8012a1a:	42ab      	cmp	r3, r5
 8012a1c:	f200 835e 	bhi.w	80130dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012a20:	6862      	ldr	r2, [r4, #4]
 8012a22:	f502 331c 	add.w	r3, r2, #159744	; 0x27000
 8012a26:	33ff      	adds	r3, #255	; 0xff
 8012a28:	4283      	cmp	r3, r0
 8012a2a:	f200 8357 	bhi.w	80130dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012a2e:	69a1      	ldr	r1, [r4, #24]
 8012a30:	f501 331c 	add.w	r3, r1, #159744	; 0x27000
 8012a34:	33ff      	adds	r3, #255	; 0xff
 8012a36:	4283      	cmp	r3, r0
 8012a38:	f200 8350 	bhi.w	80130dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012a3c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8012a3e:	f503 301c 	add.w	r0, r3, #159744	; 0x27000
 8012a42:	30ff      	adds	r0, #255	; 0xff
 8012a44:	42a8      	cmp	r0, r5
 8012a46:	f200 8349 	bhi.w	80130dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012a4a:	428a      	cmp	r2, r1
 8012a4c:	f280 8110 	bge.w	8012c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8012a50:	429a      	cmp	r2, r3
 8012a52:	f300 8119 	bgt.w	8012c88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8012a56:	4299      	cmp	r1, r3
 8012a58:	f280 811d 	bge.w	8012c96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 8012a5c:	2502      	movs	r5, #2
 8012a5e:	2701      	movs	r7, #1
 8012a60:	46a9      	mov	r9, r5
 8012a62:	46b8      	mov	r8, r7
 8012a64:	f04f 0a00 	mov.w	sl, #0
 8012a68:	4621      	mov	r1, r4
 8012a6a:	a849      	add	r0, sp, #292	; 0x124
 8012a6c:	f002 ffae 	bl	80159cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8012a70:	4622      	mov	r2, r4
 8012a72:	4653      	mov	r3, sl
 8012a74:	a949      	add	r1, sp, #292	; 0x124
 8012a76:	f8cd 9000 	str.w	r9, [sp]
 8012a7a:	a819      	add	r0, sp, #100	; 0x64
 8012a7c:	f003 f8d8 	bl	8015c30 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8012a80:	4622      	mov	r2, r4
 8012a82:	4653      	mov	r3, sl
 8012a84:	a949      	add	r1, sp, #292	; 0x124
 8012a86:	f8cd 8000 	str.w	r8, [sp]
 8012a8a:	a829      	add	r0, sp, #164	; 0xa4
 8012a8c:	f003 f8d0 	bl	8015c30 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8012a90:	4643      	mov	r3, r8
 8012a92:	4622      	mov	r2, r4
 8012a94:	a949      	add	r1, sp, #292	; 0x124
 8012a96:	f8cd 9000 	str.w	r9, [sp]
 8012a9a:	a839      	add	r0, sp, #228	; 0xe4
 8012a9c:	f003 f8c8 	bl	8015c30 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8012aa0:	42af      	cmp	r7, r5
 8012aa2:	bfb5      	itete	lt
 8012aa4:	2300      	movlt	r3, #0
 8012aa6:	2301      	movge	r3, #1
 8012aa8:	930e      	strlt	r3, [sp, #56]	; 0x38
 8012aaa:	930e      	strge	r3, [sp, #56]	; 0x38
 8012aac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012aae:	af12      	add	r7, sp, #72	; 0x48
 8012ab0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012ab4:	bfb9      	ittee	lt
 8012ab6:	ad29      	addlt	r5, sp, #164	; 0xa4
 8012ab8:	ac19      	addlt	r4, sp, #100	; 0x64
 8012aba:	ad19      	addge	r5, sp, #100	; 0x64
 8012abc:	ac29      	addge	r4, sp, #164	; 0xa4
 8012abe:	e887 0003 	stmia.w	r7, {r0, r1}
 8012ac2:	b928      	cbnz	r0, 8012ad0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8012ac4:	4b80      	ldr	r3, [pc, #512]	; (8012cc8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8012ac6:	6818      	ldr	r0, [r3, #0]
 8012ac8:	6803      	ldr	r3, [r0, #0]
 8012aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012acc:	4798      	blx	r3
 8012ace:	6038      	str	r0, [r7, #0]
 8012ad0:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8012ad2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8012ad6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012ada:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8012adc:	930c      	str	r3, [sp, #48]	; 0x30
 8012ade:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012ae0:	6963      	ldr	r3, [r4, #20]
 8012ae2:	440b      	add	r3, r1
 8012ae4:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8012ae8:	4408      	add	r0, r1
 8012aea:	b200      	sxth	r0, r0
 8012aec:	4283      	cmp	r3, r0
 8012aee:	900d      	str	r0, [sp, #52]	; 0x34
 8012af0:	f280 80dd 	bge.w	8012cae <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8012af4:	428b      	cmp	r3, r1
 8012af6:	da08      	bge.n	8012b0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012af8:	2a00      	cmp	r2, #0
 8012afa:	dd06      	ble.n	8012b0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012afc:	1acb      	subs	r3, r1, r3
 8012afe:	429a      	cmp	r2, r3
 8012b00:	f2c0 80e4 	blt.w	8012ccc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	f300 80e2 	bgt.w	8012cce <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 8012b0a:	6967      	ldr	r7, [r4, #20]
 8012b0c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012b0e:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8012b12:	443b      	add	r3, r7
 8012b14:	461f      	mov	r7, r3
 8012b16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012b18:	1bdf      	subs	r7, r3, r7
 8012b1a:	4297      	cmp	r7, r2
 8012b1c:	bfa8      	it	ge
 8012b1e:	4617      	movge	r7, r2
 8012b20:	2f00      	cmp	r7, #0
 8012b22:	f340 8166 	ble.w	8012df2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8012b26:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8012b28:	6829      	ldr	r1, [r5, #0]
 8012b2a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012b2e:	f9bb 3000 	ldrsh.w	r3, [fp]
 8012b32:	4411      	add	r1, r2
 8012b34:	4299      	cmp	r1, r3
 8012b36:	6820      	ldr	r0, [r4, #0]
 8012b38:	dd1a      	ble.n	8012b70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8012b3a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8012b3e:	4402      	add	r2, r0
 8012b40:	440b      	add	r3, r1
 8012b42:	b21b      	sxth	r3, r3
 8012b44:	429a      	cmp	r2, r3
 8012b46:	dc13      	bgt.n	8012b70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8012b48:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b4c:	a912      	add	r1, sp, #72	; 0x48
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	9206      	str	r2, [sp, #24]
 8012b52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012b54:	9500      	str	r5, [sp, #0]
 8012b56:	9205      	str	r2, [sp, #20]
 8012b58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012b5a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012b5c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8012b60:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8012b62:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8012b66:	aa49      	add	r2, sp, #292	; 0x124
 8012b68:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8012b6c:	4623      	mov	r3, r4
 8012b6e:	47c8      	blx	r9
 8012b70:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012b74:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8012b78:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8012b7c:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8012b80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012b84:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8012b88:	ed94 6a08 	vldr	s12, [r4, #32]
 8012b8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012b90:	edd4 6a07 	vldr	s13, [r4, #28]
 8012b94:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012b98:	441a      	add	r2, r3
 8012b9a:	6963      	ldr	r3, [r4, #20]
 8012b9c:	68a1      	ldr	r1, [r4, #8]
 8012b9e:	3301      	adds	r3, #1
 8012ba0:	6163      	str	r3, [r4, #20]
 8012ba2:	69a3      	ldr	r3, [r4, #24]
 8012ba4:	6022      	str	r2, [r4, #0]
 8012ba6:	3b01      	subs	r3, #1
 8012ba8:	61a3      	str	r3, [r4, #24]
 8012baa:	6923      	ldr	r3, [r4, #16]
 8012bac:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8012bb0:	440b      	add	r3, r1
 8012bb2:	68e1      	ldr	r1, [r4, #12]
 8012bb4:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8012bb8:	428b      	cmp	r3, r1
 8012bba:	edc4 6a07 	vstr	s13, [r4, #28]
 8012bbe:	6123      	str	r3, [r4, #16]
 8012bc0:	db15      	blt.n	8012bee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8012bc2:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8012bc6:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012bca:	edc4 6a07 	vstr	s13, [r4, #28]
 8012bce:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8012bd2:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012bd6:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8012bda:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8012bde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012be2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8012be6:	3201      	adds	r2, #1
 8012be8:	1a5b      	subs	r3, r3, r1
 8012bea:	6022      	str	r2, [r4, #0]
 8012bec:	6123      	str	r3, [r4, #16]
 8012bee:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8012bf2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012bf6:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8012bfa:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8012bfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012c02:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8012c06:	ed95 6a08 	vldr	s12, [r5, #32]
 8012c0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012c0e:	edd5 6a07 	vldr	s13, [r5, #28]
 8012c12:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012c16:	441a      	add	r2, r3
 8012c18:	696b      	ldr	r3, [r5, #20]
 8012c1a:	68a9      	ldr	r1, [r5, #8]
 8012c1c:	3301      	adds	r3, #1
 8012c1e:	616b      	str	r3, [r5, #20]
 8012c20:	69ab      	ldr	r3, [r5, #24]
 8012c22:	602a      	str	r2, [r5, #0]
 8012c24:	3b01      	subs	r3, #1
 8012c26:	61ab      	str	r3, [r5, #24]
 8012c28:	692b      	ldr	r3, [r5, #16]
 8012c2a:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8012c2e:	440b      	add	r3, r1
 8012c30:	68e9      	ldr	r1, [r5, #12]
 8012c32:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8012c36:	428b      	cmp	r3, r1
 8012c38:	edc5 6a07 	vstr	s13, [r5, #28]
 8012c3c:	612b      	str	r3, [r5, #16]
 8012c3e:	db15      	blt.n	8012c6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8012c40:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8012c44:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012c48:	edc5 6a07 	vstr	s13, [r5, #28]
 8012c4c:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8012c50:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012c54:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8012c58:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8012c5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012c60:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8012c64:	3201      	adds	r2, #1
 8012c66:	1a5b      	subs	r3, r3, r1
 8012c68:	602a      	str	r2, [r5, #0]
 8012c6a:	612b      	str	r3, [r5, #16]
 8012c6c:	3f01      	subs	r7, #1
 8012c6e:	e757      	b.n	8012b20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8012c70:	4299      	cmp	r1, r3
 8012c72:	dc13      	bgt.n	8012c9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8012c74:	429a      	cmp	r2, r3
 8012c76:	da14      	bge.n	8012ca2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8012c78:	2502      	movs	r5, #2
 8012c7a:	2703      	movs	r7, #3
 8012c7c:	46a9      	mov	r9, r5
 8012c7e:	f04f 0800 	mov.w	r8, #0
 8012c82:	f04f 0a01 	mov.w	sl, #1
 8012c86:	e6ef      	b.n	8012a68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8012c88:	2501      	movs	r5, #1
 8012c8a:	2700      	movs	r7, #0
 8012c8c:	46a9      	mov	r9, r5
 8012c8e:	46b8      	mov	r8, r7
 8012c90:	f04f 0a02 	mov.w	sl, #2
 8012c94:	e6e8      	b.n	8012a68 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8012c96:	2501      	movs	r5, #1
 8012c98:	2702      	movs	r7, #2
 8012c9a:	e6e1      	b.n	8012a60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8012c9c:	2500      	movs	r5, #0
 8012c9e:	2701      	movs	r7, #1
 8012ca0:	e7f4      	b.n	8012c8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8012ca2:	2702      	movs	r7, #2
 8012ca4:	2503      	movs	r5, #3
 8012ca6:	f04f 0900 	mov.w	r9, #0
 8012caa:	46b8      	mov	r8, r7
 8012cac:	e7e9      	b.n	8012c82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8012cae:	4613      	mov	r3, r2
 8012cb0:	e728      	b.n	8012b04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8012cb2:	bf00      	nop
 8012cb4:	2001fe80 	.word	0x2001fe80
 8012cb8:	fffd8f01 	.word	0xfffd8f01
 8012cbc:	00027100 	.word	0x00027100
 8012cc0:	0004e1ff 	.word	0x0004e1ff
 8012cc4:	0004e1fe 	.word	0x0004e1fe
 8012cc8:	2001fe88 	.word	0x2001fe88
 8012ccc:	4613      	mov	r3, r2
 8012cce:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	; 0xa4
 8012cd2:	eddd 4a34 	vldr	s9, [sp, #208]	; 0xd0
 8012cd6:	ed9d 7a33 	vldr	s14, [sp, #204]	; 0xcc
 8012cda:	ed9d 4a37 	vldr	s8, [sp, #220]	; 0xdc
 8012cde:	eddd 7a36 	vldr	s15, [sp, #216]	; 0xd8
 8012ce2:	eddd 3a31 	vldr	s7, [sp, #196]	; 0xc4
 8012ce6:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8012cea:	ed9d 5a32 	vldr	s10, [sp, #200]	; 0xc8
 8012cee:	eddd 5a35 	vldr	s11, [sp, #212]	; 0xd4
 8012cf2:	ed9d 6a38 	vldr	s12, [sp, #224]	; 0xe0
 8012cf6:	469e      	mov	lr, r3
 8012cf8:	469c      	mov	ip, r3
 8012cfa:	f04f 0900 	mov.w	r9, #0
 8012cfe:	992b      	ldr	r1, [sp, #172]	; 0xac
 8012d00:	9f2e      	ldr	r7, [sp, #184]	; 0xb8
 8012d02:	9111      	str	r1, [sp, #68]	; 0x44
 8012d04:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	; 0xb0
 8012d08:	f1bc 0f00 	cmp.w	ip, #0
 8012d0c:	d147      	bne.n	8012d9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8012d0e:	eb03 0c07 	add.w	ip, r3, r7
 8012d12:	1ad7      	subs	r7, r2, r3
 8012d14:	f1b9 0f00 	cmp.w	r9, #0
 8012d18:	d009      	beq.n	8012d2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8012d1a:	ed8d 7a33 	vstr	s14, [sp, #204]	; 0xcc
 8012d1e:	edcd 7a36 	vstr	s15, [sp, #216]	; 0xd8
 8012d22:	edcd 6a30 	vstr	s13, [sp, #192]	; 0xc0
 8012d26:	e9cd c72e 	strd	ip, r7, [sp, #184]	; 0xb8
 8012d2a:	9029      	str	r0, [sp, #164]	; 0xa4
 8012d2c:	912d      	str	r1, [sp, #180]	; 0xb4
 8012d2e:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 8012d32:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8012d36:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8012d3a:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 8012d3e:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 8012d42:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8012d46:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8012d4a:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 8012d4e:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 8012d52:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8012d56:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8012d5a:	f04f 0800 	mov.w	r8, #0
 8012d5e:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8012d60:	9111      	str	r1, [sp, #68]	; 0x44
 8012d62:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8012d66:	f1be 0f00 	cmp.w	lr, #0
 8012d6a:	d031      	beq.n	8012dd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8012d6c:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8012d6e:	4450      	add	r0, sl
 8012d70:	4431      	add	r1, r6
 8012d72:	4549      	cmp	r1, r9
 8012d74:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8012d78:	ee37 7a04 	vadd.f32	s14, s14, s8
 8012d7c:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8012d80:	db08      	blt.n	8012d94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8012d82:	ee77 7a85 	vadd.f32	s15, s15, s10
 8012d86:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012d8a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8012d8e:	3001      	adds	r0, #1
 8012d90:	eba1 0109 	sub.w	r1, r1, r9
 8012d94:	f10e 3eff 	add.w	lr, lr, #4294967295
 8012d98:	f04f 0801 	mov.w	r8, #1
 8012d9c:	e7e3      	b.n	8012d66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8012d9e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8012da0:	4450      	add	r0, sl
 8012da2:	4431      	add	r1, r6
 8012da4:	4541      	cmp	r1, r8
 8012da6:	ee37 7a24 	vadd.f32	s14, s14, s9
 8012daa:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012dae:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8012db2:	db08      	blt.n	8012dc6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8012db4:	ee76 6a85 	vadd.f32	s13, s13, s10
 8012db8:	ee37 7a25 	vadd.f32	s14, s14, s11
 8012dbc:	ee77 7a86 	vadd.f32	s15, s15, s12
 8012dc0:	3001      	adds	r0, #1
 8012dc2:	eba1 0108 	sub.w	r1, r1, r8
 8012dc6:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012dca:	f04f 0901 	mov.w	r9, #1
 8012dce:	e79b      	b.n	8012d08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8012dd0:	449c      	add	ip, r3
 8012dd2:	1aff      	subs	r7, r7, r3
 8012dd4:	f1b8 0f00 	cmp.w	r8, #0
 8012dd8:	d009      	beq.n	8012dee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8012dda:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 8012dde:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 8012de2:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 8012de6:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 8012dea:	9019      	str	r0, [sp, #100]	; 0x64
 8012dec:	911d      	str	r1, [sp, #116]	; 0x74
 8012dee:	1ad2      	subs	r2, r2, r3
 8012df0:	e68b      	b.n	8012b0a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012df2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012df4:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	f000 80d1 	beq.w	8012f9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8012dfc:	ad19      	add	r5, sp, #100	; 0x64
 8012dfe:	ac39      	add	r4, sp, #228	; 0xe4
 8012e00:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8012e02:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8012e06:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012e0a:	930c      	str	r3, [sp, #48]	; 0x30
 8012e0c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8012e0e:	6963      	ldr	r3, [r4, #20]
 8012e10:	440b      	add	r3, r1
 8012e12:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8012e16:	4408      	add	r0, r1
 8012e18:	b200      	sxth	r0, r0
 8012e1a:	4283      	cmp	r3, r0
 8012e1c:	900d      	str	r0, [sp, #52]	; 0x34
 8012e1e:	f280 80c1 	bge.w	8012fa4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8012e22:	428b      	cmp	r3, r1
 8012e24:	da08      	bge.n	8012e38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8012e26:	2a00      	cmp	r2, #0
 8012e28:	dd06      	ble.n	8012e38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8012e2a:	1acb      	subs	r3, r1, r3
 8012e2c:	429a      	cmp	r2, r3
 8012e2e:	f2c0 80bb 	blt.w	8012fa8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8012e32:	2b00      	cmp	r3, #0
 8012e34:	f300 80b9 	bgt.w	8012faa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8012e38:	6967      	ldr	r7, [r4, #20]
 8012e3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012e3c:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 8012e40:	443b      	add	r3, r7
 8012e42:	461f      	mov	r7, r3
 8012e44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012e46:	1bdf      	subs	r7, r3, r7
 8012e48:	4297      	cmp	r7, r2
 8012e4a:	bfa8      	it	ge
 8012e4c:	4617      	movge	r7, r2
 8012e4e:	2f00      	cmp	r7, #0
 8012e50:	f340 813c 	ble.w	80130cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8012e54:	9b64      	ldr	r3, [sp, #400]	; 0x190
 8012e56:	6829      	ldr	r1, [r5, #0]
 8012e58:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012e5c:	f9bb 3000 	ldrsh.w	r3, [fp]
 8012e60:	4411      	add	r1, r2
 8012e62:	4299      	cmp	r1, r3
 8012e64:	6820      	ldr	r0, [r4, #0]
 8012e66:	dd1a      	ble.n	8012e9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8012e68:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8012e6c:	4402      	add	r2, r0
 8012e6e:	440b      	add	r3, r1
 8012e70:	b21b      	sxth	r3, r3
 8012e72:	429a      	cmp	r2, r3
 8012e74:	dc13      	bgt.n	8012e9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8012e76:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8012e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e7a:	a912      	add	r1, sp, #72	; 0x48
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	9206      	str	r2, [sp, #24]
 8012e80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8012e82:	9500      	str	r5, [sp, #0]
 8012e84:	9205      	str	r2, [sp, #20]
 8012e86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012e88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012e8a:	e9cd b203 	strd	fp, r2, [sp, #12]
 8012e8e:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8012e90:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8012e94:	aa49      	add	r2, sp, #292	; 0x124
 8012e96:	f8d3 9048 	ldr.w	r9, [r3, #72]	; 0x48
 8012e9a:	4623      	mov	r3, r4
 8012e9c:	47c8      	blx	r9
 8012e9e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012ea2:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
 8012ea6:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8012eaa:	edd4 6a0e 	vldr	s13, [r4, #56]	; 0x38
 8012eae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012eb2:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8012eb6:	ed94 6a08 	vldr	s12, [r4, #32]
 8012eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012ebe:	edd4 6a07 	vldr	s13, [r4, #28]
 8012ec2:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012ec6:	441a      	add	r2, r3
 8012ec8:	6963      	ldr	r3, [r4, #20]
 8012eca:	68a1      	ldr	r1, [r4, #8]
 8012ecc:	3301      	adds	r3, #1
 8012ece:	6163      	str	r3, [r4, #20]
 8012ed0:	69a3      	ldr	r3, [r4, #24]
 8012ed2:	6022      	str	r2, [r4, #0]
 8012ed4:	3b01      	subs	r3, #1
 8012ed6:	61a3      	str	r3, [r4, #24]
 8012ed8:	6923      	ldr	r3, [r4, #16]
 8012eda:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8012ede:	440b      	add	r3, r1
 8012ee0:	68e1      	ldr	r1, [r4, #12]
 8012ee2:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8012ee6:	428b      	cmp	r3, r1
 8012ee8:	edc4 6a07 	vstr	s13, [r4, #28]
 8012eec:	6123      	str	r3, [r4, #16]
 8012eee:	db15      	blt.n	8012f1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8012ef0:	ed94 6a09 	vldr	s12, [r4, #36]	; 0x24
 8012ef4:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012ef8:	edc4 6a07 	vstr	s13, [r4, #28]
 8012efc:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8012f00:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012f04:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
 8012f08:	ed94 7a0f 	vldr	s14, [r4, #60]	; 0x3c
 8012f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012f10:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34
 8012f14:	3201      	adds	r2, #1
 8012f16:	1a5b      	subs	r3, r3, r1
 8012f18:	6022      	str	r2, [r4, #0]
 8012f1a:	6123      	str	r3, [r4, #16]
 8012f1c:	ed95 7a0a 	vldr	s14, [r5, #40]	; 0x28
 8012f20:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012f24:	edd5 7a0b 	vldr	s15, [r5, #44]	; 0x2c
 8012f28:	edd5 6a0e 	vldr	s13, [r5, #56]	; 0x38
 8012f2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012f30:	edd5 7a0d 	vldr	s15, [r5, #52]	; 0x34
 8012f34:	ed95 6a08 	vldr	s12, [r5, #32]
 8012f38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012f3c:	edd5 6a07 	vldr	s13, [r5, #28]
 8012f40:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012f44:	441a      	add	r2, r3
 8012f46:	696b      	ldr	r3, [r5, #20]
 8012f48:	68a9      	ldr	r1, [r5, #8]
 8012f4a:	3301      	adds	r3, #1
 8012f4c:	616b      	str	r3, [r5, #20]
 8012f4e:	69ab      	ldr	r3, [r5, #24]
 8012f50:	602a      	str	r2, [r5, #0]
 8012f52:	3b01      	subs	r3, #1
 8012f54:	61ab      	str	r3, [r5, #24]
 8012f56:	692b      	ldr	r3, [r5, #16]
 8012f58:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8012f5c:	440b      	add	r3, r1
 8012f5e:	68e9      	ldr	r1, [r5, #12]
 8012f60:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8012f64:	428b      	cmp	r3, r1
 8012f66:	edc5 6a07 	vstr	s13, [r5, #28]
 8012f6a:	612b      	str	r3, [r5, #16]
 8012f6c:	db15      	blt.n	8012f9a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8012f6e:	ed95 6a09 	vldr	s12, [r5, #36]	; 0x24
 8012f72:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012f76:	edc5 6a07 	vstr	s13, [r5, #28]
 8012f7a:	edd5 6a0c 	vldr	s13, [r5, #48]	; 0x30
 8012f7e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012f82:	ed85 7a0a 	vstr	s14, [r5, #40]	; 0x28
 8012f86:	ed95 7a0f 	vldr	s14, [r5, #60]	; 0x3c
 8012f8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012f8e:	edc5 7a0d 	vstr	s15, [r5, #52]	; 0x34
 8012f92:	3201      	adds	r2, #1
 8012f94:	1a5b      	subs	r3, r3, r1
 8012f96:	602a      	str	r2, [r5, #0]
 8012f98:	612b      	str	r3, [r5, #16]
 8012f9a:	3f01      	subs	r7, #1
 8012f9c:	e757      	b.n	8012e4e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8012f9e:	ad39      	add	r5, sp, #228	; 0xe4
 8012fa0:	ac19      	add	r4, sp, #100	; 0x64
 8012fa2:	e72d      	b.n	8012e00 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8012fa4:	4613      	mov	r3, r2
 8012fa6:	e744      	b.n	8012e32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8012fa8:	4613      	mov	r3, r2
 8012faa:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	; 0xe4
 8012fae:	ed9d 7a43 	vldr	s14, [sp, #268]	; 0x10c
 8012fb2:	eddd 4a44 	vldr	s9, [sp, #272]	; 0x110
 8012fb6:	eddd 7a46 	vldr	s15, [sp, #280]	; 0x118
 8012fba:	ed9d 4a47 	vldr	s8, [sp, #284]	; 0x11c
 8012fbe:	eddd 6a40 	vldr	s13, [sp, #256]	; 0x100
 8012fc2:	eddd 3a41 	vldr	s7, [sp, #260]	; 0x104
 8012fc6:	ed9d 5a42 	vldr	s10, [sp, #264]	; 0x108
 8012fca:	eddd 5a45 	vldr	s11, [sp, #276]	; 0x114
 8012fce:	ed9d 6a48 	vldr	s12, [sp, #288]	; 0x120
 8012fd2:	469e      	mov	lr, r3
 8012fd4:	461f      	mov	r7, r3
 8012fd6:	f04f 0900 	mov.w	r9, #0
 8012fda:	9e3b      	ldr	r6, [sp, #236]	; 0xec
 8012fdc:	f8dd c0f8 	ldr.w	ip, [sp, #248]	; 0xf8
 8012fe0:	993d      	ldr	r1, [sp, #244]	; 0xf4
 8012fe2:	f8dd 80f0 	ldr.w	r8, [sp, #240]	; 0xf0
 8012fe6:	960e      	str	r6, [sp, #56]	; 0x38
 8012fe8:	2f00      	cmp	r7, #0
 8012fea:	d146      	bne.n	801307a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8012fec:	449c      	add	ip, r3
 8012fee:	1ad7      	subs	r7, r2, r3
 8012ff0:	f1b9 0f00 	cmp.w	r9, #0
 8012ff4:	d009      	beq.n	801300a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8012ff6:	edcd 6a40 	vstr	s13, [sp, #256]	; 0x100
 8012ffa:	ed8d 7a43 	vstr	s14, [sp, #268]	; 0x10c
 8012ffe:	edcd 7a46 	vstr	s15, [sp, #280]	; 0x118
 8013002:	e9cd c73e 	strd	ip, r7, [sp, #248]	; 0xf8
 8013006:	9039      	str	r0, [sp, #228]	; 0xe4
 8013008:	913d      	str	r1, [sp, #244]	; 0xf4
 801300a:	eddd 4a24 	vldr	s9, [sp, #144]	; 0x90
 801300e:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	; 0x64
 8013012:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	; 0x78
 8013016:	eddd 6a23 	vldr	s13, [sp, #140]	; 0x8c
 801301a:	ed9d 4a27 	vldr	s8, [sp, #156]	; 0x9c
 801301e:	ed9d 7a26 	vldr	s14, [sp, #152]	; 0x98
 8013022:	eddd 3a21 	vldr	s7, [sp, #132]	; 0x84
 8013026:	eddd 7a20 	vldr	s15, [sp, #128]	; 0x80
 801302a:	ed9d 5a22 	vldr	s10, [sp, #136]	; 0x88
 801302e:	eddd 5a25 	vldr	s11, [sp, #148]	; 0x94
 8013032:	ed9d 6a28 	vldr	s12, [sp, #160]	; 0xa0
 8013036:	f04f 0800 	mov.w	r8, #0
 801303a:	991b      	ldr	r1, [sp, #108]	; 0x6c
 801303c:	910e      	str	r1, [sp, #56]	; 0x38
 801303e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	; 0x70
 8013042:	f1be 0f00 	cmp.w	lr, #0
 8013046:	d030      	beq.n	80130aa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8013048:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801304a:	4450      	add	r0, sl
 801304c:	4431      	add	r1, r6
 801304e:	4549      	cmp	r1, r9
 8013050:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8013054:	ee37 7a04 	vadd.f32	s14, s14, s8
 8013058:	ee77 7aa3 	vadd.f32	s15, s15, s7
 801305c:	db08      	blt.n	8013070 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 801305e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8013062:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8013066:	ee37 7a06 	vadd.f32	s14, s14, s12
 801306a:	3001      	adds	r0, #1
 801306c:	eba1 0109 	sub.w	r1, r1, r9
 8013070:	f10e 3eff 	add.w	lr, lr, #4294967295
 8013074:	f04f 0801 	mov.w	r8, #1
 8013078:	e7e3      	b.n	8013042 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 801307a:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 801307c:	4450      	add	r0, sl
 801307e:	4431      	add	r1, r6
 8013080:	4541      	cmp	r1, r8
 8013082:	ee37 7a24 	vadd.f32	s14, s14, s9
 8013086:	ee77 7a84 	vadd.f32	s15, s15, s8
 801308a:	ee76 6aa3 	vadd.f32	s13, s13, s7
 801308e:	db08      	blt.n	80130a2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8013090:	ee76 6a85 	vadd.f32	s13, s13, s10
 8013094:	ee37 7a25 	vadd.f32	s14, s14, s11
 8013098:	ee77 7a86 	vadd.f32	s15, s15, s12
 801309c:	3001      	adds	r0, #1
 801309e:	eba1 0108 	sub.w	r1, r1, r8
 80130a2:	3f01      	subs	r7, #1
 80130a4:	f04f 0901 	mov.w	r9, #1
 80130a8:	e79e      	b.n	8012fe8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 80130aa:	449c      	add	ip, r3
 80130ac:	1aff      	subs	r7, r7, r3
 80130ae:	f1b8 0f00 	cmp.w	r8, #0
 80130b2:	d009      	beq.n	80130c8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 80130b4:	edcd 6a23 	vstr	s13, [sp, #140]	; 0x8c
 80130b8:	ed8d 7a26 	vstr	s14, [sp, #152]	; 0x98
 80130bc:	edcd 7a20 	vstr	s15, [sp, #128]	; 0x80
 80130c0:	e9cd c71e 	strd	ip, r7, [sp, #120]	; 0x78
 80130c4:	9019      	str	r0, [sp, #100]	; 0x64
 80130c6:	911d      	str	r1, [sp, #116]	; 0x74
 80130c8:	1ad2      	subs	r2, r2, r3
 80130ca:	e6b5      	b.n	8012e38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80130cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	b923      	cbnz	r3, 80130dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80130d2:	4b04      	ldr	r3, [pc, #16]	; (80130e4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 80130d4:	6818      	ldr	r0, [r3, #0]
 80130d6:	6803      	ldr	r3, [r0, #0]
 80130d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130da:	4798      	blx	r3
 80130dc:	b05b      	add	sp, #364	; 0x16c
 80130de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130e2:	bf00      	nop
 80130e4:	2001fe88 	.word	0x2001fe88

080130e8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80130e8:	2b03      	cmp	r3, #3
 80130ea:	d818      	bhi.n	801311e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80130ec:	e8df f003 	tbb	[pc, r3]
 80130f0:	130d0602 	.word	0x130d0602
 80130f4:	f9b0 2000 	ldrsh.w	r2, [r0]
 80130f8:	1850      	adds	r0, r2, r1
 80130fa:	4770      	bx	lr
 80130fc:	8803      	ldrh	r3, [r0, #0]
 80130fe:	8880      	ldrh	r0, [r0, #4]
 8013100:	4418      	add	r0, r3
 8013102:	b200      	sxth	r0, r0
 8013104:	1a80      	subs	r0, r0, r2
 8013106:	3801      	subs	r0, #1
 8013108:	4770      	bx	lr
 801310a:	8803      	ldrh	r3, [r0, #0]
 801310c:	8880      	ldrh	r0, [r0, #4]
 801310e:	4418      	add	r0, r3
 8013110:	b200      	sxth	r0, r0
 8013112:	1a40      	subs	r0, r0, r1
 8013114:	e7f7      	b.n	8013106 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8013116:	f9b0 0000 	ldrsh.w	r0, [r0]
 801311a:	4410      	add	r0, r2
 801311c:	4770      	bx	lr
 801311e:	2000      	movs	r0, #0
 8013120:	4770      	bx	lr

08013122 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8013122:	2b03      	cmp	r3, #3
 8013124:	d817      	bhi.n	8013156 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8013126:	e8df f003 	tbb	[pc, r3]
 801312a:	0602      	.short	0x0602
 801312c:	1009      	.short	0x1009
 801312e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8013132:	1850      	adds	r0, r2, r1
 8013134:	4770      	bx	lr
 8013136:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801313a:	e7fa      	b.n	8013132 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 801313c:	8843      	ldrh	r3, [r0, #2]
 801313e:	88c0      	ldrh	r0, [r0, #6]
 8013140:	4418      	add	r0, r3
 8013142:	b200      	sxth	r0, r0
 8013144:	1a80      	subs	r0, r0, r2
 8013146:	3801      	subs	r0, #1
 8013148:	4770      	bx	lr
 801314a:	8843      	ldrh	r3, [r0, #2]
 801314c:	88c0      	ldrh	r0, [r0, #6]
 801314e:	4418      	add	r0, r3
 8013150:	b200      	sxth	r0, r0
 8013152:	1a40      	subs	r0, r0, r1
 8013154:	e7f7      	b.n	8013146 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8013156:	2000      	movs	r0, #0
 8013158:	4770      	bx	lr
	...

0801315c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 801315c:	2200      	movs	r2, #0
 801315e:	4b01      	ldr	r3, [pc, #4]	; (8013164 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8013160:	601a      	str	r2, [r3, #0]
 8013162:	4770      	bx	lr
 8013164:	2001fe90 	.word	0x2001fe90

08013168 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8013168:	4603      	mov	r3, r0
 801316a:	b1c8      	cbz	r0, 80131a0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 801316c:	0c02      	lsrs	r2, r0, #16
 801316e:	0412      	lsls	r2, r2, #16
 8013170:	b9a2      	cbnz	r2, 801319c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8013172:	0403      	lsls	r3, r0, #16
 8013174:	2010      	movs	r0, #16
 8013176:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801317a:	bf04      	itt	eq
 801317c:	021b      	lsleq	r3, r3, #8
 801317e:	3008      	addeq	r0, #8
 8013180:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8013184:	bf04      	itt	eq
 8013186:	011b      	lsleq	r3, r3, #4
 8013188:	3004      	addeq	r0, #4
 801318a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 801318e:	bf04      	itt	eq
 8013190:	009b      	lsleq	r3, r3, #2
 8013192:	3002      	addeq	r0, #2
 8013194:	2b00      	cmp	r3, #0
 8013196:	db04      	blt.n	80131a2 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8013198:	3001      	adds	r0, #1
 801319a:	4770      	bx	lr
 801319c:	2000      	movs	r0, #0
 801319e:	e7ea      	b.n	8013176 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 80131a0:	2020      	movs	r0, #32
 80131a2:	4770      	bx	lr

080131a4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 80131a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80131a8:	b087      	sub	sp, #28
 80131aa:	4681      	mov	r9, r0
 80131ac:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	; 0x40
 80131b0:	4610      	mov	r0, r2
 80131b2:	4698      	mov	r8, r3
 80131b4:	460d      	mov	r5, r1
 80131b6:	b981      	cbnz	r1, 80131da <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x36>
 80131b8:	b14b      	cbz	r3, 80131ce <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x2a>
 80131ba:	460b      	mov	r3, r1
 80131bc:	e9cd 4700 	strd	r4, r7, [sp]
 80131c0:	464a      	mov	r2, r9
 80131c2:	4641      	mov	r1, r8
 80131c4:	f7ff ffee 	bl	80131a4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80131c8:	b007      	add	sp, #28
 80131ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80131ce:	f04f 33ff 	mov.w	r3, #4294967295
 80131d2:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 80131d6:	603b      	str	r3, [r7, #0]
 80131d8:	e7f6      	b.n	80131c8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80131da:	fa32 fa01 	lsrs.w	sl, r2, r1
 80131de:	d107      	bne.n	80131f0 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4c>
 80131e0:	fb09 f602 	mul.w	r6, r9, r2
 80131e4:	fbb6 f0f4 	udiv	r0, r6, r4
 80131e8:	fb04 6610 	mls	r6, r4, r0, r6
 80131ec:	603e      	str	r6, [r7, #0]
 80131ee:	e7eb      	b.n	80131c8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>
 80131f0:	fa09 fb01 	lsl.w	fp, r9, r1
 80131f4:	fbbb f3f4 	udiv	r3, fp, r4
 80131f8:	2601      	movs	r6, #1
 80131fa:	9302      	str	r3, [sp, #8]
 80131fc:	408e      	lsls	r6, r1
 80131fe:	fb0a f303 	mul.w	r3, sl, r3
 8013202:	3e01      	subs	r6, #1
 8013204:	4016      	ands	r6, r2
 8013206:	4630      	mov	r0, r6
 8013208:	9303      	str	r3, [sp, #12]
 801320a:	f7ff ffad 	bl	8013168 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801320e:	464a      	mov	r2, r9
 8013210:	460b      	mov	r3, r1
 8013212:	e9cd 4700 	strd	r4, r7, [sp]
 8013216:	4601      	mov	r1, r0
 8013218:	4630      	mov	r0, r6
 801321a:	f7ff ffc3 	bl	80131a4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801321e:	9b02      	ldr	r3, [sp, #8]
 8013220:	4606      	mov	r6, r0
 8013222:	fb04 bb13 	mls	fp, r4, r3, fp
 8013226:	4658      	mov	r0, fp
 8013228:	eb05 0108 	add.w	r1, r5, r8
 801322c:	f7ff ff9c 	bl	8013168 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8013230:	ab05      	add	r3, sp, #20
 8013232:	e9cd 4300 	strd	r4, r3, [sp]
 8013236:	465a      	mov	r2, fp
 8013238:	4603      	mov	r3, r0
 801323a:	4650      	mov	r0, sl
 801323c:	f7ff ffb2 	bl	80131a4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8013240:	6839      	ldr	r1, [r7, #0]
 8013242:	9a05      	ldr	r2, [sp, #20]
 8013244:	9b03      	ldr	r3, [sp, #12]
 8013246:	4411      	add	r1, r2
 8013248:	fbb1 f2f4 	udiv	r2, r1, r4
 801324c:	fb04 1412 	mls	r4, r4, r2, r1
 8013250:	18d3      	adds	r3, r2, r3
 8013252:	441e      	add	r6, r3
 8013254:	4430      	add	r0, r6
 8013256:	603c      	str	r4, [r7, #0]
 8013258:	e7b6      	b.n	80131c8 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x24>

0801325a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 801325a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801325e:	b085      	sub	sp, #20
 8013260:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8013262:	f1b0 0900 	subs.w	r9, r0, #0
 8013266:	461d      	mov	r5, r3
 8013268:	bfbf      	itttt	lt
 801326a:	6823      	ldrlt	r3, [r4, #0]
 801326c:	f1c9 0900 	rsblt	r9, r9, #0
 8013270:	425b      	neglt	r3, r3
 8013272:	6023      	strlt	r3, [r4, #0]
 8013274:	bfb4      	ite	lt
 8013276:	f04f 36ff 	movlt.w	r6, #4294967295
 801327a:	2601      	movge	r6, #1
 801327c:	2a00      	cmp	r2, #0
 801327e:	4617      	mov	r7, r2
 8013280:	da04      	bge.n	801328c <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8013282:	6823      	ldr	r3, [r4, #0]
 8013284:	4257      	negs	r7, r2
 8013286:	425b      	negs	r3, r3
 8013288:	4276      	negs	r6, r6
 801328a:	6023      	str	r3, [r4, #0]
 801328c:	2d00      	cmp	r5, #0
 801328e:	4638      	mov	r0, r7
 8013290:	bfba      	itte	lt
 8013292:	426d      	neglt	r5, r5
 8013294:	f04f 38ff 	movlt.w	r8, #4294967295
 8013298:	f04f 0801 	movge.w	r8, #1
 801329c:	f7ff ff64 	bl	8013168 <_ZN8touchgfx16TouchCalibration4clzuEm>
 80132a0:	ab03      	add	r3, sp, #12
 80132a2:	e9cd 5300 	strd	r5, r3, [sp]
 80132a6:	463a      	mov	r2, r7
 80132a8:	4603      	mov	r3, r0
 80132aa:	4648      	mov	r0, r9
 80132ac:	f7ff ff7a 	bl	80131a4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80132b0:	6823      	ldr	r3, [r4, #0]
 80132b2:	9a03      	ldr	r2, [sp, #12]
 80132b4:	4546      	cmp	r6, r8
 80132b6:	441a      	add	r2, r3
 80132b8:	fb92 f3f5 	sdiv	r3, r2, r5
 80132bc:	4418      	add	r0, r3
 80132be:	fb05 2313 	mls	r3, r5, r3, r2
 80132c2:	bf18      	it	ne
 80132c4:	4240      	negne	r0, r0
 80132c6:	1c72      	adds	r2, r6, #1
 80132c8:	6023      	str	r3, [r4, #0]
 80132ca:	d105      	bne.n	80132d8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	f1c3 0200 	rsb	r2, r3, #0
 80132d2:	db0b      	blt.n	80132ec <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80132d4:	6022      	str	r2, [r4, #0]
 80132d6:	e006      	b.n	80132e6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80132d8:	2e01      	cmp	r6, #1
 80132da:	d104      	bne.n	80132e6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80132dc:	2b00      	cmp	r3, #0
 80132de:	da02      	bge.n	80132e6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80132e0:	442b      	add	r3, r5
 80132e2:	3801      	subs	r0, #1
 80132e4:	6023      	str	r3, [r4, #0]
 80132e6:	b005      	add	sp, #20
 80132e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80132ec:	3801      	subs	r0, #1
 80132ee:	1b52      	subs	r2, r2, r5
 80132f0:	e7f0      	b.n	80132d4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>
	...

080132f4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80132f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80132f8:	4c1c      	ldr	r4, [pc, #112]	; (801336c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80132fa:	4605      	mov	r5, r0
 80132fc:	69a3      	ldr	r3, [r4, #24]
 80132fe:	6807      	ldr	r7, [r0, #0]
 8013300:	b92b      	cbnz	r3, 801330e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 8013302:	6840      	ldr	r0, [r0, #4]
 8013304:	e9c5 7000 	strd	r7, r0, [r5]
 8013308:	b004      	add	sp, #16
 801330a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801330e:	f04f 0802 	mov.w	r8, #2
 8013312:	fb93 f1f8 	sdiv	r1, r3, r8
 8013316:	68a2      	ldr	r2, [r4, #8]
 8013318:	ae04      	add	r6, sp, #16
 801331a:	440a      	add	r2, r1
 801331c:	f846 2d04 	str.w	r2, [r6, #-4]!
 8013320:	69e1      	ldr	r1, [r4, #28]
 8013322:	463a      	mov	r2, r7
 8013324:	9600      	str	r6, [sp, #0]
 8013326:	6820      	ldr	r0, [r4, #0]
 8013328:	f7ff ff97 	bl	801325a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801332c:	69a3      	ldr	r3, [r4, #24]
 801332e:	4607      	mov	r7, r0
 8013330:	686a      	ldr	r2, [r5, #4]
 8013332:	6a21      	ldr	r1, [r4, #32]
 8013334:	9600      	str	r6, [sp, #0]
 8013336:	6860      	ldr	r0, [r4, #4]
 8013338:	f7ff ff8f 	bl	801325a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801333c:	69a3      	ldr	r3, [r4, #24]
 801333e:	6962      	ldr	r2, [r4, #20]
 8013340:	fb93 f8f8 	sdiv	r8, r3, r8
 8013344:	4442      	add	r2, r8
 8013346:	9203      	str	r2, [sp, #12]
 8013348:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801334a:	682a      	ldr	r2, [r5, #0]
 801334c:	4407      	add	r7, r0
 801334e:	9600      	str	r6, [sp, #0]
 8013350:	68e0      	ldr	r0, [r4, #12]
 8013352:	f7ff ff82 	bl	801325a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013356:	9600      	str	r6, [sp, #0]
 8013358:	4680      	mov	r8, r0
 801335a:	69a3      	ldr	r3, [r4, #24]
 801335c:	686a      	ldr	r2, [r5, #4]
 801335e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8013360:	6920      	ldr	r0, [r4, #16]
 8013362:	f7ff ff7a 	bl	801325a <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013366:	4440      	add	r0, r8
 8013368:	e7cc      	b.n	8013304 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801336a:	bf00      	nop
 801336c:	2001fe94 	.word	0x2001fe94

08013370 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8013370:	4b07      	ldr	r3, [pc, #28]	; (8013390 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8013372:	781b      	ldrb	r3, [r3, #0]
 8013374:	2b01      	cmp	r3, #1
 8013376:	d109      	bne.n	801338c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8013378:	f9b1 3000 	ldrsh.w	r3, [r1]
 801337c:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013380:	8003      	strh	r3, [r0, #0]
 8013382:	4b04      	ldr	r3, [pc, #16]	; (8013394 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8013384:	881b      	ldrh	r3, [r3, #0]
 8013386:	3b01      	subs	r3, #1
 8013388:	1a9b      	subs	r3, r3, r2
 801338a:	800b      	strh	r3, [r1, #0]
 801338c:	4770      	bx	lr
 801338e:	bf00      	nop
 8013390:	2001fe80 	.word	0x2001fe80
 8013394:	2001fe7c 	.word	0x2001fe7c

08013398 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8013398:	b510      	push	{r4, lr}
 801339a:	4b07      	ldr	r3, [pc, #28]	; (80133b8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801339c:	781b      	ldrb	r3, [r3, #0]
 801339e:	2b01      	cmp	r3, #1
 80133a0:	d108      	bne.n	80133b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80133a2:	4b06      	ldr	r3, [pc, #24]	; (80133bc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 80133a4:	880c      	ldrh	r4, [r1, #0]
 80133a6:	881b      	ldrh	r3, [r3, #0]
 80133a8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80133ac:	3b01      	subs	r3, #1
 80133ae:	1b1b      	subs	r3, r3, r4
 80133b0:	8003      	strh	r3, [r0, #0]
 80133b2:	800a      	strh	r2, [r1, #0]
 80133b4:	bd10      	pop	{r4, pc}
 80133b6:	bf00      	nop
 80133b8:	2001fe80 	.word	0x2001fe80
 80133bc:	2001fe7c 	.word	0x2001fe7c

080133c0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80133c0:	b510      	push	{r4, lr}
 80133c2:	4b0a      	ldr	r3, [pc, #40]	; (80133ec <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80133c4:	781b      	ldrb	r3, [r3, #0]
 80133c6:	2b01      	cmp	r3, #1
 80133c8:	d10e      	bne.n	80133e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80133ca:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80133ce:	8843      	ldrh	r3, [r0, #2]
 80133d0:	f9b0 4000 	ldrsh.w	r4, [r0]
 80133d4:	18ca      	adds	r2, r1, r3
 80133d6:	4b06      	ldr	r3, [pc, #24]	; (80133f0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80133d8:	8044      	strh	r4, [r0, #2]
 80133da:	881b      	ldrh	r3, [r3, #0]
 80133dc:	1a9b      	subs	r3, r3, r2
 80133de:	8003      	strh	r3, [r0, #0]
 80133e0:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80133e4:	8081      	strh	r1, [r0, #4]
 80133e6:	80c3      	strh	r3, [r0, #6]
 80133e8:	bd10      	pop	{r4, pc}
 80133ea:	bf00      	nop
 80133ec:	2001fe80 	.word	0x2001fe80
 80133f0:	2001fe7c 	.word	0x2001fe7c

080133f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80133f4:	4b08      	ldr	r3, [pc, #32]	; (8013418 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80133f6:	781b      	ldrb	r3, [r3, #0]
 80133f8:	2b01      	cmp	r3, #1
 80133fa:	d10c      	bne.n	8013416 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80133fc:	8803      	ldrh	r3, [r0, #0]
 80133fe:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8013402:	8842      	ldrh	r2, [r0, #2]
 8013404:	8002      	strh	r2, [r0, #0]
 8013406:	185a      	adds	r2, r3, r1
 8013408:	4b04      	ldr	r3, [pc, #16]	; (801341c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 801340a:	881b      	ldrh	r3, [r3, #0]
 801340c:	1a9b      	subs	r3, r3, r2
 801340e:	8043      	strh	r3, [r0, #2]
 8013410:	88c3      	ldrh	r3, [r0, #6]
 8013412:	80c1      	strh	r1, [r0, #6]
 8013414:	8083      	strh	r3, [r0, #4]
 8013416:	4770      	bx	lr
 8013418:	2001fe80 	.word	0x2001fe80
 801341c:	2001fe7c 	.word	0x2001fe7c

08013420 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8013420:	b510      	push	{r4, lr}
 8013422:	4b07      	ldr	r3, [pc, #28]	; (8013440 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8013424:	781b      	ldrb	r3, [r3, #0]
 8013426:	2b01      	cmp	r3, #1
 8013428:	d108      	bne.n	801343c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801342a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801342e:	f9b0 4000 	ldrsh.w	r4, [r0]
 8013432:	8003      	strh	r3, [r0, #0]
 8013434:	8893      	ldrh	r3, [r2, #4]
 8013436:	3b01      	subs	r3, #1
 8013438:	1b1b      	subs	r3, r3, r4
 801343a:	800b      	strh	r3, [r1, #0]
 801343c:	bd10      	pop	{r4, pc}
 801343e:	bf00      	nop
 8013440:	2001fe80 	.word	0x2001fe80

08013444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8013444:	b510      	push	{r4, lr}
 8013446:	4b0a      	ldr	r3, [pc, #40]	; (8013470 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8013448:	460a      	mov	r2, r1
 801344a:	781b      	ldrb	r3, [r3, #0]
 801344c:	2b01      	cmp	r3, #1
 801344e:	d10d      	bne.n	801346c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 8013450:	8881      	ldrh	r1, [r0, #4]
 8013452:	8803      	ldrh	r3, [r0, #0]
 8013454:	440b      	add	r3, r1
 8013456:	4601      	mov	r1, r0
 8013458:	3b01      	subs	r3, #1
 801345a:	f821 3b02 	strh.w	r3, [r1], #2
 801345e:	f7ff ffdf 	bl	8013420 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 8013462:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013466:	88c2      	ldrh	r2, [r0, #6]
 8013468:	80c3      	strh	r3, [r0, #6]
 801346a:	8082      	strh	r2, [r0, #4]
 801346c:	bd10      	pop	{r4, pc}
 801346e:	bf00      	nop
 8013470:	2001fe80 	.word	0x2001fe80

08013474 <_ZN8touchgfx11Application13requestRedrawEv>:
 8013474:	2100      	movs	r1, #0
 8013476:	4b06      	ldr	r3, [pc, #24]	; (8013490 <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8013478:	f8c0 1130 	str.w	r1, [r0, #304]	; 0x130
 801347c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013480:	4b04      	ldr	r3, [pc, #16]	; (8013494 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 8013482:	f8a0 2134 	strh.w	r2, [r0, #308]	; 0x134
 8013486:	f9b3 3000 	ldrsh.w	r3, [r3]
 801348a:	f8a0 3136 	strh.w	r3, [r0, #310]	; 0x136
 801348e:	4770      	bx	lr
 8013490:	2001fe7c 	.word	0x2001fe7c
 8013494:	2001fe7e 	.word	0x2001fe7e

08013498 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8013498:	4b03      	ldr	r3, [pc, #12]	; (80134a8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801349a:	6818      	ldr	r0, [r3, #0]
 801349c:	b110      	cbz	r0, 80134a4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801349e:	6803      	ldr	r3, [r0, #0]
 80134a0:	699b      	ldr	r3, [r3, #24]
 80134a2:	4718      	bx	r3
 80134a4:	4770      	bx	lr
 80134a6:	bf00      	nop
 80134a8:	2001fec4 	.word	0x2001fec4

080134ac <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80134ac:	4770      	bx	lr
	...

080134b0 <_ZN8touchgfx11Application4drawEv>:
 80134b0:	b507      	push	{r0, r1, r2, lr}
 80134b2:	2100      	movs	r1, #0
 80134b4:	4b08      	ldr	r3, [pc, #32]	; (80134d8 <_ZN8touchgfx11Application4drawEv+0x28>)
 80134b6:	9100      	str	r1, [sp, #0]
 80134b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80134bc:	4b07      	ldr	r3, [pc, #28]	; (80134dc <_ZN8touchgfx11Application4drawEv+0x2c>)
 80134be:	f8ad 2004 	strh.w	r2, [sp, #4]
 80134c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80134c6:	4669      	mov	r1, sp
 80134c8:	f8ad 3006 	strh.w	r3, [sp, #6]
 80134cc:	6803      	ldr	r3, [r0, #0]
 80134ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80134d0:	4798      	blx	r3
 80134d2:	b003      	add	sp, #12
 80134d4:	f85d fb04 	ldr.w	pc, [sp], #4
 80134d8:	2001fe7c 	.word	0x2001fe7c
 80134dc:	2001fe7e 	.word	0x2001fe7e

080134e0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80134e0:	4b03      	ldr	r3, [pc, #12]	; (80134f0 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80134e2:	6818      	ldr	r0, [r3, #0]
 80134e4:	b110      	cbz	r0, 80134ec <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80134e6:	6803      	ldr	r3, [r0, #0]
 80134e8:	69db      	ldr	r3, [r3, #28]
 80134ea:	4718      	bx	r3
 80134ec:	4770      	bx	lr
 80134ee:	bf00      	nop
 80134f0:	2001fec4 	.word	0x2001fec4

080134f4 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 80134f4:	4b03      	ldr	r3, [pc, #12]	; (8013504 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 80134f6:	6818      	ldr	r0, [r3, #0]
 80134f8:	b110      	cbz	r0, 8013500 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 80134fa:	6803      	ldr	r3, [r0, #0]
 80134fc:	6a1b      	ldr	r3, [r3, #32]
 80134fe:	4718      	bx	r3
 8013500:	4770      	bx	lr
 8013502:	bf00      	nop
 8013504:	2001fec4 	.word	0x2001fec4

08013508 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8013508:	2300      	movs	r3, #0
 801350a:	f8a0 30ec 	strh.w	r3, [r0, #236]	; 0xec
 801350e:	4770      	bx	lr

08013510 <_ZN8touchgfx11Application14handleKeyEventEh>:
 8013510:	4b03      	ldr	r3, [pc, #12]	; (8013520 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8013512:	6818      	ldr	r0, [r3, #0]
 8013514:	b110      	cbz	r0, 801351c <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8013516:	6803      	ldr	r3, [r0, #0]
 8013518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801351a:	4718      	bx	r3
 801351c:	4770      	bx	lr
 801351e:	bf00      	nop
 8013520:	2001fec4 	.word	0x2001fec4

08013524 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8013524:	b510      	push	{r4, lr}
 8013526:	f9b1 4000 	ldrsh.w	r4, [r1]
 801352a:	888a      	ldrh	r2, [r1, #4]
 801352c:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013530:	4422      	add	r2, r4
 8013532:	b212      	sxth	r2, r2
 8013534:	4293      	cmp	r3, r2
 8013536:	da15      	bge.n	8013564 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013538:	8882      	ldrh	r2, [r0, #4]
 801353a:	4413      	add	r3, r2
 801353c:	b21b      	sxth	r3, r3
 801353e:	429c      	cmp	r4, r3
 8013540:	da10      	bge.n	8013564 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013542:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8013546:	88c9      	ldrh	r1, [r1, #6]
 8013548:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801354c:	4419      	add	r1, r3
 801354e:	b209      	sxth	r1, r1
 8013550:	428a      	cmp	r2, r1
 8013552:	da07      	bge.n	8013564 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013554:	88c0      	ldrh	r0, [r0, #6]
 8013556:	4410      	add	r0, r2
 8013558:	b200      	sxth	r0, r0
 801355a:	4283      	cmp	r3, r0
 801355c:	bfac      	ite	ge
 801355e:	2000      	movge	r0, #0
 8013560:	2001      	movlt	r0, #1
 8013562:	bd10      	pop	{r4, pc}
 8013564:	2000      	movs	r0, #0
 8013566:	e7fc      	b.n	8013562 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08013568 <_ZN8touchgfx4Rect10restrictToEss>:
 8013568:	f9b0 3000 	ldrsh.w	r3, [r0]
 801356c:	b510      	push	{r4, lr}
 801356e:	2b00      	cmp	r3, #0
 8013570:	da04      	bge.n	801357c <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8013572:	8884      	ldrh	r4, [r0, #4]
 8013574:	4423      	add	r3, r4
 8013576:	8083      	strh	r3, [r0, #4]
 8013578:	2300      	movs	r3, #0
 801357a:	8003      	strh	r3, [r0, #0]
 801357c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8013580:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013584:	1b09      	subs	r1, r1, r4
 8013586:	428b      	cmp	r3, r1
 8013588:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801358c:	bfc8      	it	gt
 801358e:	8081      	strhgt	r1, [r0, #4]
 8013590:	2b00      	cmp	r3, #0
 8013592:	da04      	bge.n	801359e <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8013594:	88c1      	ldrh	r1, [r0, #6]
 8013596:	440b      	add	r3, r1
 8013598:	80c3      	strh	r3, [r0, #6]
 801359a:	2300      	movs	r3, #0
 801359c:	8043      	strh	r3, [r0, #2]
 801359e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80135a2:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80135a6:	1a52      	subs	r2, r2, r1
 80135a8:	4293      	cmp	r3, r2
 80135aa:	bfc8      	it	gt
 80135ac:	80c2      	strhgt	r2, [r0, #6]
 80135ae:	bd10      	pop	{r4, pc}

080135b0 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80135b0:	b510      	push	{r4, lr}
 80135b2:	460c      	mov	r4, r1
 80135b4:	4b0f      	ldr	r3, [pc, #60]	; (80135f4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 80135b6:	4620      	mov	r0, r4
 80135b8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80135bc:	4b0e      	ldr	r3, [pc, #56]	; (80135f8 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 80135be:	f9b3 1000 	ldrsh.w	r1, [r3]
 80135c2:	f7ff ffd1 	bl	8013568 <_ZN8touchgfx4Rect10restrictToEss>
 80135c6:	4b0d      	ldr	r3, [pc, #52]	; (80135fc <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 80135c8:	6818      	ldr	r0, [r3, #0]
 80135ca:	b190      	cbz	r0, 80135f2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 80135cc:	6803      	ldr	r3, [r0, #0]
 80135ce:	4621      	mov	r1, r4
 80135d0:	689b      	ldr	r3, [r3, #8]
 80135d2:	4798      	blx	r3
 80135d4:	4b0a      	ldr	r3, [pc, #40]	; (8013600 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 80135d6:	6818      	ldr	r0, [r3, #0]
 80135d8:	b118      	cbz	r0, 80135e2 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 80135da:	6803      	ldr	r3, [r0, #0]
 80135dc:	4621      	mov	r1, r4
 80135de:	689b      	ldr	r3, [r3, #8]
 80135e0:	4798      	blx	r3
 80135e2:	4b08      	ldr	r3, [pc, #32]	; (8013604 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 80135e4:	4621      	mov	r1, r4
 80135e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80135ea:	6818      	ldr	r0, [r3, #0]
 80135ec:	6803      	ldr	r3, [r0, #0]
 80135ee:	69db      	ldr	r3, [r3, #28]
 80135f0:	4718      	bx	r3
 80135f2:	bd10      	pop	{r4, pc}
 80135f4:	2001fe7e 	.word	0x2001fe7e
 80135f8:	2001fe7c 	.word	0x2001fe7c
 80135fc:	2001fec4 	.word	0x2001fec4
 8013600:	2001fec0 	.word	0x2001fec0
 8013604:	2001fe88 	.word	0x2001fe88

08013608 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8013608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801360a:	4606      	mov	r6, r0
 801360c:	4608      	mov	r0, r1
 801360e:	460f      	mov	r7, r1
 8013610:	f7fd ff0f 	bl	8011432 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013614:	b9e8      	cbnz	r0, 8013652 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8013616:	f9b7 5000 	ldrsh.w	r5, [r7]
 801361a:	f9b6 4000 	ldrsh.w	r4, [r6]
 801361e:	42a5      	cmp	r5, r4
 8013620:	db17      	blt.n	8013652 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8013622:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8013626:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801362a:	429a      	cmp	r2, r3
 801362c:	db11      	blt.n	8013652 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801362e:	88b9      	ldrh	r1, [r7, #4]
 8013630:	440d      	add	r5, r1
 8013632:	88b1      	ldrh	r1, [r6, #4]
 8013634:	b22d      	sxth	r5, r5
 8013636:	440c      	add	r4, r1
 8013638:	b224      	sxth	r4, r4
 801363a:	42a5      	cmp	r5, r4
 801363c:	dc09      	bgt.n	8013652 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801363e:	88f8      	ldrh	r0, [r7, #6]
 8013640:	4410      	add	r0, r2
 8013642:	88f2      	ldrh	r2, [r6, #6]
 8013644:	b200      	sxth	r0, r0
 8013646:	4413      	add	r3, r2
 8013648:	b21b      	sxth	r3, r3
 801364a:	4298      	cmp	r0, r3
 801364c:	bfcc      	ite	gt
 801364e:	2000      	movgt	r0, #0
 8013650:	2001      	movle	r0, #1
 8013652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013654 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8013654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013656:	4604      	mov	r4, r0
 8013658:	4608      	mov	r0, r1
 801365a:	460d      	mov	r5, r1
 801365c:	f7fd fee9 	bl	8011432 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013660:	b978      	cbnz	r0, 8013682 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8013662:	4620      	mov	r0, r4
 8013664:	f7fd fee5 	bl	8011432 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013668:	f9b5 6000 	ldrsh.w	r6, [r5]
 801366c:	b150      	cbz	r0, 8013684 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801366e:	8026      	strh	r6, [r4, #0]
 8013670:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8013674:	8063      	strh	r3, [r4, #2]
 8013676:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801367a:	80a3      	strh	r3, [r4, #4]
 801367c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8013680:	80e3      	strh	r3, [r4, #6]
 8013682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013684:	f9b4 1000 	ldrsh.w	r1, [r4]
 8013688:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801368c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8013690:	42b1      	cmp	r1, r6
 8013692:	460f      	mov	r7, r1
 8013694:	bfa8      	it	ge
 8013696:	4637      	movge	r7, r6
 8013698:	4293      	cmp	r3, r2
 801369a:	4618      	mov	r0, r3
 801369c:	bfa8      	it	ge
 801369e:	4610      	movge	r0, r2
 80136a0:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80136a4:	88ed      	ldrh	r5, [r5, #6]
 80136a6:	4466      	add	r6, ip
 80136a8:	442a      	add	r2, r5
 80136aa:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80136ae:	88e5      	ldrh	r5, [r4, #6]
 80136b0:	4461      	add	r1, ip
 80136b2:	442b      	add	r3, r5
 80136b4:	b236      	sxth	r6, r6
 80136b6:	b209      	sxth	r1, r1
 80136b8:	b212      	sxth	r2, r2
 80136ba:	b21b      	sxth	r3, r3
 80136bc:	428e      	cmp	r6, r1
 80136be:	bfac      	ite	ge
 80136c0:	ebc7 0106 	rsbge	r1, r7, r6
 80136c4:	ebc7 0101 	rsblt	r1, r7, r1
 80136c8:	429a      	cmp	r2, r3
 80136ca:	bfac      	ite	ge
 80136cc:	ebc0 0202 	rsbge	r2, r0, r2
 80136d0:	ebc0 0203 	rsblt	r2, r0, r3
 80136d4:	8027      	strh	r7, [r4, #0]
 80136d6:	8060      	strh	r0, [r4, #2]
 80136d8:	80a1      	strh	r1, [r4, #4]
 80136da:	80e2      	strh	r2, [r4, #6]
 80136dc:	e7d1      	b.n	8013682 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

080136e0 <_ZN8touchgfx11Application11getInstanceEv>:
 80136e0:	4b01      	ldr	r3, [pc, #4]	; (80136e8 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 80136e2:	6818      	ldr	r0, [r3, #0]
 80136e4:	4770      	bx	lr
 80136e6:	bf00      	nop
 80136e8:	2001fed4 	.word	0x2001fed4

080136ec <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 80136ec:	2300      	movs	r3, #0
 80136ee:	b510      	push	{r4, lr}
 80136f0:	4604      	mov	r4, r0
 80136f2:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
 80136f6:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 80136fa:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 80136fe:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8013702:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
 8013706:	429a      	cmp	r2, r3
 8013708:	d90e      	bls.n	8013728 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801370a:	18e2      	adds	r2, r4, r3
 801370c:	f892 2084 	ldrb.w	r2, [r2, #132]	; 0x84
 8013710:	b122      	cbz	r2, 801371c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8013712:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8013716:	6803      	ldr	r3, [r0, #0]
 8013718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801371a:	4798      	blx	r3
 801371c:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
 8013720:	3301      	adds	r3, #1
 8013722:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8013726:	e7ea      	b.n	80136fe <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8013728:	bd10      	pop	{r4, pc}

0801372a <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801372a:	2300      	movs	r3, #0
 801372c:	f100 0284 	add.w	r2, r0, #132	; 0x84
 8013730:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 8013734:	30a4      	adds	r0, #164	; 0xa4
 8013736:	f802 3b01 	strb.w	r3, [r2], #1
 801373a:	4282      	cmp	r2, r0
 801373c:	d1fb      	bne.n	8013736 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801373e:	4770      	bx	lr

08013740 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8013740:	b570      	push	{r4, r5, r6, lr}
 8013742:	4c0b      	ldr	r4, [pc, #44]	; (8013770 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8013744:	4605      	mov	r5, r0
 8013746:	6820      	ldr	r0, [r4, #0]
 8013748:	460e      	mov	r6, r1
 801374a:	b110      	cbz	r0, 8013752 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801374c:	6803      	ldr	r3, [r0, #0]
 801374e:	695b      	ldr	r3, [r3, #20]
 8013750:	4798      	blx	r3
 8013752:	1d28      	adds	r0, r5, #4
 8013754:	f7ff ffe9 	bl	801372a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8013758:	6026      	str	r6, [r4, #0]
 801375a:	6833      	ldr	r3, [r6, #0]
 801375c:	4630      	mov	r0, r6
 801375e:	68db      	ldr	r3, [r3, #12]
 8013760:	4798      	blx	r3
 8013762:	682b      	ldr	r3, [r5, #0]
 8013764:	4628      	mov	r0, r5
 8013766:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801376a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801376c:	4718      	bx	r3
 801376e:	bf00      	nop
 8013770:	2001fec4 	.word	0x2001fec4

08013774 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8013774:	2300      	movs	r3, #0
 8013776:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013778:	461a      	mov	r2, r3
 801377a:	461c      	mov	r4, r3
 801377c:	461d      	mov	r5, r3
 801377e:	f8b0 c080 	ldrh.w	ip, [r0, #128]	; 0x80
 8013782:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	; 0xa4
 8013786:	459c      	cmp	ip, r3
 8013788:	dd1a      	ble.n	80137c0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 801378a:	18c6      	adds	r6, r0, r3
 801378c:	f896 6084 	ldrb.w	r6, [r6, #132]	; 0x84
 8013790:	b16e      	cbz	r6, 80137ae <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8013792:	429a      	cmp	r2, r3
 8013794:	d008      	beq.n	80137a8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8013796:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 801379a:	fa1f fe82 	uxth.w	lr, r2
 801379e:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 80137a2:	1887      	adds	r7, r0, r2
 80137a4:	f887 6084 	strb.w	r6, [r7, #132]	; 0x84
 80137a8:	3201      	adds	r2, #1
 80137aa:	3301      	adds	r3, #1
 80137ac:	e7eb      	b.n	8013786 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 80137ae:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	; 0xa6
 80137b2:	4299      	cmp	r1, r3
 80137b4:	bfa8      	it	ge
 80137b6:	3501      	addge	r5, #1
 80137b8:	429e      	cmp	r6, r3
 80137ba:	bfc8      	it	gt
 80137bc:	3401      	addgt	r4, #1
 80137be:	e7f4      	b.n	80137aa <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 80137c0:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
 80137c4:	1b49      	subs	r1, r1, r5
 80137c6:	1b1b      	subs	r3, r3, r4
 80137c8:	f8a0 10a4 	strh.w	r1, [r0, #164]	; 0xa4
 80137cc:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
 80137d0:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
 80137d4:	4293      	cmp	r3, r2
 80137d6:	dd03      	ble.n	80137e0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 80137d8:	3b01      	subs	r3, #1
 80137da:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
 80137de:	e7f7      	b.n	80137d0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 80137e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080137e4 <_ZN8touchgfx11Application15handleTickEventEv>:
 80137e4:	b570      	push	{r4, r5, r6, lr}
 80137e6:	4d16      	ldr	r5, [pc, #88]	; (8013840 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 80137e8:	4604      	mov	r4, r0
 80137ea:	6828      	ldr	r0, [r5, #0]
 80137ec:	b140      	cbz	r0, 8013800 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80137ee:	7a03      	ldrb	r3, [r0, #8]
 80137f0:	b933      	cbnz	r3, 8013800 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 80137f2:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 80137f6:	6803      	ldr	r3, [r0, #0]
 80137f8:	689b      	ldr	r3, [r3, #8]
 80137fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80137fe:	4718      	bx	r3
 8013800:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
 8013804:	4e0f      	ldr	r6, [pc, #60]	; (8013844 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8013806:	b973      	cbnz	r3, 8013826 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8013808:	b168      	cbz	r0, 8013826 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801380a:	7a03      	ldrb	r3, [r0, #8]
 801380c:	b15b      	cbz	r3, 8013826 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801380e:	6830      	ldr	r0, [r6, #0]
 8013810:	b110      	cbz	r0, 8013818 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8013812:	6803      	ldr	r3, [r0, #0]
 8013814:	691b      	ldr	r3, [r3, #16]
 8013816:	4798      	blx	r3
 8013818:	6828      	ldr	r0, [r5, #0]
 801381a:	6803      	ldr	r3, [r0, #0]
 801381c:	68db      	ldr	r3, [r3, #12]
 801381e:	4798      	blx	r3
 8013820:	2301      	movs	r3, #1
 8013822:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
 8013826:	3404      	adds	r4, #4
 8013828:	4620      	mov	r0, r4
 801382a:	f7ff ff5f 	bl	80136ec <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801382e:	4620      	mov	r0, r4
 8013830:	f7ff ffa0 	bl	8013774 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8013834:	6830      	ldr	r0, [r6, #0]
 8013836:	b110      	cbz	r0, 801383e <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8013838:	6803      	ldr	r3, [r0, #0]
 801383a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801383c:	e7dd      	b.n	80137fa <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801383e:	bd70      	pop	{r4, r5, r6, pc}
 8013840:	2001fec8 	.word	0x2001fec8
 8013844:	2001fec4 	.word	0x2001fec4

08013848 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8013848:	4603      	mov	r3, r0
 801384a:	2200      	movs	r2, #0
 801384c:	f100 0140 	add.w	r1, r0, #64	; 0x40
 8013850:	801a      	strh	r2, [r3, #0]
 8013852:	805a      	strh	r2, [r3, #2]
 8013854:	809a      	strh	r2, [r3, #4]
 8013856:	80da      	strh	r2, [r3, #6]
 8013858:	3308      	adds	r3, #8
 801385a:	428b      	cmp	r3, r1
 801385c:	d1f8      	bne.n	8013850 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801385e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 8013862:	4770      	bx	lr

08013864 <_ZN8touchgfx11ApplicationC1Ev>:
 8013864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013866:	4606      	mov	r6, r0
 8013868:	4604      	mov	r4, r0
 801386a:	2500      	movs	r5, #0
 801386c:	4b1b      	ldr	r3, [pc, #108]	; (80138dc <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 801386e:	22a8      	movs	r2, #168	; 0xa8
 8013870:	f846 3b04 	str.w	r3, [r6], #4
 8013874:	2100      	movs	r1, #0
 8013876:	4630      	mov	r0, r6
 8013878:	f00e fad5 	bl	8021e26 <memset>
 801387c:	f8a4 5084 	strh.w	r5, [r4, #132]	; 0x84
 8013880:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8013884:	f7ff ffe0 	bl	8013848 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8013888:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801388c:	f7ff ffdc 	bl	8013848 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8013890:	f8a4 5130 	strh.w	r5, [r4, #304]	; 0x130
 8013894:	f8a4 5132 	strh.w	r5, [r4, #306]	; 0x132
 8013898:	f8a4 5134 	strh.w	r5, [r4, #308]	; 0x134
 801389c:	f8a4 5136 	strh.w	r5, [r4, #310]	; 0x136
 80138a0:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
 80138a4:	490e      	ldr	r1, [pc, #56]	; (80138e0 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80138a6:	480f      	ldr	r0, [pc, #60]	; (80138e4 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80138a8:	f00e f802 	bl	80218b0 <CRC_Lock>
 80138ac:	4f0e      	ldr	r7, [pc, #56]	; (80138e8 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80138ae:	4b0f      	ldr	r3, [pc, #60]	; (80138ec <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 80138b0:	b158      	cbz	r0, 80138ca <_ZN8touchgfx11ApplicationC1Ev+0x66>
 80138b2:	801d      	strh	r5, [r3, #0]
 80138b4:	2300      	movs	r3, #0
 80138b6:	4a0e      	ldr	r2, [pc, #56]	; (80138f0 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 80138b8:	4630      	mov	r0, r6
 80138ba:	6013      	str	r3, [r2, #0]
 80138bc:	4a0d      	ldr	r2, [pc, #52]	; (80138f4 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 80138be:	603b      	str	r3, [r7, #0]
 80138c0:	6013      	str	r3, [r2, #0]
 80138c2:	f7ff ff32 	bl	801372a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80138c6:	4620      	mov	r0, r4
 80138c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80138ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80138ce:	2002      	movs	r0, #2
 80138d0:	801a      	strh	r2, [r3, #0]
 80138d2:	6038      	str	r0, [r7, #0]
 80138d4:	f001 fa20 	bl	8014d18 <_ZN8touchgfx6Screen4drawEv>
 80138d8:	e7ec      	b.n	80138b4 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 80138da:	bf00      	nop
 80138dc:	0802430c 	.word	0x0802430c
 80138e0:	b5e8b5cd 	.word	0xb5e8b5cd
 80138e4:	f407a5c2 	.word	0xf407a5c2
 80138e8:	2001fec4 	.word	0x2001fec4
 80138ec:	20000078 	.word	0x20000078
 80138f0:	2001fed4 	.word	0x2001fed4
 80138f4:	2001fec8 	.word	0x2001fec8

080138f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 80138f8:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80138fc:	b510      	push	{r4, lr}
 80138fe:	3b01      	subs	r3, #1
 8013900:	b29b      	uxth	r3, r3
 8013902:	428b      	cmp	r3, r1
 8013904:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
 8013908:	d908      	bls.n	801391c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801390a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 801390e:	681a      	ldr	r2, [r3, #0]
 8013910:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8013914:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8013918:	685a      	ldr	r2, [r3, #4]
 801391a:	6062      	str	r2, [r4, #4]
 801391c:	bd10      	pop	{r4, pc}
	...

08013920 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8013920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013924:	4b8f      	ldr	r3, [pc, #572]	; (8013b64 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8013926:	b08f      	sub	sp, #60	; 0x3c
 8013928:	ac0a      	add	r4, sp, #40	; 0x28
 801392a:	e884 0006 	stmia.w	r4, {r1, r2}
 801392e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013932:	4b8d      	ldr	r3, [pc, #564]	; (8013b68 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8013934:	4683      	mov	fp, r0
 8013936:	f9b3 1000 	ldrsh.w	r1, [r3]
 801393a:	4620      	mov	r0, r4
 801393c:	f7ff fe14 	bl	8013568 <_ZN8touchgfx4Rect10restrictToEss>
 8013940:	4620      	mov	r0, r4
 8013942:	f7fd fd76 	bl	8011432 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013946:	2800      	cmp	r0, #0
 8013948:	d16a      	bne.n	8013a20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801394a:	9403      	str	r4, [sp, #12]
 801394c:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	; 0xec
 8013950:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8013954:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8013958:	35a4      	adds	r5, #164	; 0xa4
 801395a:	9301      	str	r3, [sp, #4]
 801395c:	b15c      	cbz	r4, 8013976 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801395e:	4629      	mov	r1, r5
 8013960:	9803      	ldr	r0, [sp, #12]
 8013962:	f7ff fe51 	bl	8013608 <_ZNK8touchgfx4Rect8includesERKS0_>
 8013966:	3c01      	subs	r4, #1
 8013968:	b118      	cbz	r0, 8013972 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 801396a:	b2a1      	uxth	r1, r4
 801396c:	9801      	ldr	r0, [sp, #4]
 801396e:	f7ff ffc3 	bl	80138f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013972:	3d08      	subs	r5, #8
 8013974:	e7f2      	b.n	801395c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8013976:	f8bb 80ec 	ldrh.w	r8, [fp, #236]	; 0xec
 801397a:	f108 33ff 	add.w	r3, r8, #4294967295
 801397e:	9302      	str	r3, [sp, #8]
 8013980:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8013984:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 8013988:	f8cd 8010 	str.w	r8, [sp, #16]
 801398c:	9306      	str	r3, [sp, #24]
 801398e:	445c      	add	r4, fp
 8013990:	2500      	movs	r5, #0
 8013992:	4626      	mov	r6, r4
 8013994:	462f      	mov	r7, r5
 8013996:	f8cd 8014 	str.w	r8, [sp, #20]
 801399a:	9b05      	ldr	r3, [sp, #20]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d073      	beq.n	8013a88 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80139a0:	9903      	ldr	r1, [sp, #12]
 80139a2:	4630      	mov	r0, r6
 80139a4:	f7ff fdbe 	bl	8013524 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80139a8:	b350      	cbz	r0, 8013a00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80139aa:	f9bd e028 	ldrsh.w	lr, [sp, #40]	; 0x28
 80139ae:	f9b6 c000 	ldrsh.w	ip, [r6]
 80139b2:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 80139b6:	45e6      	cmp	lr, ip
 80139b8:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 80139bc:	db33      	blt.n	8013a26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80139be:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 80139c2:	88b3      	ldrh	r3, [r6, #4]
 80139c4:	4472      	add	r2, lr
 80139c6:	4463      	add	r3, ip
 80139c8:	b212      	sxth	r2, r2
 80139ca:	b21b      	sxth	r3, r3
 80139cc:	429a      	cmp	r2, r3
 80139ce:	dc2a      	bgt.n	8013a26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80139d0:	88f3      	ldrh	r3, [r6, #6]
 80139d2:	fa1f f289 	uxth.w	r2, r9
 80139d6:	4413      	add	r3, r2
 80139d8:	b29b      	uxth	r3, r3
 80139da:	45ca      	cmp	sl, r9
 80139dc:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 80139e0:	fa0f fe83 	sxth.w	lr, r3
 80139e4:	fa1f fc8a 	uxth.w	ip, sl
 80139e8:	db0f      	blt.n	8013a0a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 80139ea:	eba3 030c 	sub.w	r3, r3, ip
 80139ee:	1ac9      	subs	r1, r1, r3
 80139f0:	b209      	sxth	r1, r1
 80139f2:	2900      	cmp	r1, #0
 80139f4:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 80139f8:	dd12      	ble.n	8013a20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80139fa:	f8ad e02a 	strh.w	lr, [sp, #42]	; 0x2a
 80139fe:	4605      	mov	r5, r0
 8013a00:	9b05      	ldr	r3, [sp, #20]
 8013a02:	3e08      	subs	r6, #8
 8013a04:	3b01      	subs	r3, #1
 8013a06:	9305      	str	r3, [sp, #20]
 8013a08:	e7c7      	b.n	801399a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8013a0a:	4461      	add	r1, ip
 8013a0c:	b209      	sxth	r1, r1
 8013a0e:	4571      	cmp	r1, lr
 8013a10:	dc38      	bgt.n	8013a84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8013a12:	eba2 020c 	sub.w	r2, r2, ip
 8013a16:	b212      	sxth	r2, r2
 8013a18:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8013a1c:	2a00      	cmp	r2, #0
 8013a1e:	dcee      	bgt.n	80139fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8013a20:	b00f      	add	sp, #60	; 0x3c
 8013a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a26:	45ca      	cmp	sl, r9
 8013a28:	db2c      	blt.n	8013a84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8013a2a:	f8bd 302e 	ldrh.w	r3, [sp, #46]	; 0x2e
 8013a2e:	449a      	add	sl, r3
 8013a30:	88f3      	ldrh	r3, [r6, #6]
 8013a32:	fa0f fa8a 	sxth.w	sl, sl
 8013a36:	4499      	add	r9, r3
 8013a38:	fa0f f989 	sxth.w	r9, r9
 8013a3c:	45ca      	cmp	sl, r9
 8013a3e:	dc21      	bgt.n	8013a84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8013a40:	88b3      	ldrh	r3, [r6, #4]
 8013a42:	fa1f f28c 	uxth.w	r2, ip
 8013a46:	4413      	add	r3, r2
 8013a48:	b29b      	uxth	r3, r3
 8013a4a:	45e6      	cmp	lr, ip
 8013a4c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8013a50:	fa1f f98e 	uxth.w	r9, lr
 8013a54:	fa0f fa83 	sxth.w	sl, r3
 8013a58:	db0a      	blt.n	8013a70 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8013a5a:	eba3 0309 	sub.w	r3, r3, r9
 8013a5e:	1ac9      	subs	r1, r1, r3
 8013a60:	b209      	sxth	r1, r1
 8013a62:	2900      	cmp	r1, #0
 8013a64:	f8ad 102c 	strh.w	r1, [sp, #44]	; 0x2c
 8013a68:	ddda      	ble.n	8013a20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8013a6a:	f8ad a028 	strh.w	sl, [sp, #40]	; 0x28
 8013a6e:	e7c6      	b.n	80139fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8013a70:	4449      	add	r1, r9
 8013a72:	b209      	sxth	r1, r1
 8013a74:	4551      	cmp	r1, sl
 8013a76:	dc05      	bgt.n	8013a84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8013a78:	eba2 0209 	sub.w	r2, r2, r9
 8013a7c:	b212      	sxth	r2, r2
 8013a7e:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 8013a82:	e7cb      	b.n	8013a1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8013a84:	4607      	mov	r7, r0
 8013a86:	e7bb      	b.n	8013a00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8013a88:	2d00      	cmp	r5, #0
 8013a8a:	d181      	bne.n	8013990 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8013a8c:	2f00      	cmp	r7, #0
 8013a8e:	f000 81de 	beq.w	8013e4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8013a92:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	; 0x28
 8013a96:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	; 0x2a
 8013a9a:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 8013a9e:	f8bd a02e 	ldrh.w	sl, [sp, #46]	; 0x2e
 8013aa2:	b2b9      	uxth	r1, r7
 8013aa4:	b2b3      	uxth	r3, r6
 8013aa6:	441a      	add	r2, r3
 8013aa8:	448a      	add	sl, r1
 8013aaa:	b292      	uxth	r2, r2
 8013aac:	fa1f fa8a 	uxth.w	sl, sl
 8013ab0:	fa0f f882 	sxth.w	r8, r2
 8013ab4:	9105      	str	r1, [sp, #20]
 8013ab6:	fa0f f98a 	sxth.w	r9, sl
 8013aba:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8013abe:	9b04      	ldr	r3, [sp, #16]
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d053      	beq.n	8013b6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8013ac4:	9903      	ldr	r1, [sp, #12]
 8013ac6:	4620      	mov	r0, r4
 8013ac8:	f7ff fd2c 	bl	8013524 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013acc:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013ad0:	b1c0      	cbz	r0, 8013b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8013ad2:	f9b4 e000 	ldrsh.w	lr, [r4]
 8013ad6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8013ada:	4576      	cmp	r6, lr
 8013adc:	dc23      	bgt.n	8013b26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8013ade:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8013ae2:	44f4      	add	ip, lr
 8013ae4:	fa0f fc8c 	sxth.w	ip, ip
 8013ae8:	45e0      	cmp	r8, ip
 8013aea:	db1c      	blt.n	8013b26 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8013aec:	428f      	cmp	r7, r1
 8013aee:	fa1f fc81 	uxth.w	ip, r1
 8013af2:	88e1      	ldrh	r1, [r4, #6]
 8013af4:	dc0d      	bgt.n	8013b12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f2>
 8013af6:	ebaa 0c0c 	sub.w	ip, sl, ip
 8013afa:	eba1 010c 	sub.w	r1, r1, ip
 8013afe:	f8a4 9002 	strh.w	r9, [r4, #2]
 8013b02:	80e1      	strh	r1, [r4, #6]
 8013b04:	4628      	mov	r0, r5
 8013b06:	9904      	ldr	r1, [sp, #16]
 8013b08:	3c08      	subs	r4, #8
 8013b0a:	3901      	subs	r1, #1
 8013b0c:	9104      	str	r1, [sp, #16]
 8013b0e:	4605      	mov	r5, r0
 8013b10:	e7d3      	b.n	8013aba <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19a>
 8013b12:	4461      	add	r1, ip
 8013b14:	b209      	sxth	r1, r1
 8013b16:	4549      	cmp	r1, r9
 8013b18:	dcf5      	bgt.n	8013b06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8013b1a:	9905      	ldr	r1, [sp, #20]
 8013b1c:	eba1 0c0c 	sub.w	ip, r1, ip
 8013b20:	f8a4 c006 	strh.w	ip, [r4, #6]
 8013b24:	e7ee      	b.n	8013b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8013b26:	428f      	cmp	r7, r1
 8013b28:	dced      	bgt.n	8013b06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8013b2a:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8013b2e:	4461      	add	r1, ip
 8013b30:	b209      	sxth	r1, r1
 8013b32:	4589      	cmp	r9, r1
 8013b34:	dbe7      	blt.n	8013b06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8013b36:	4576      	cmp	r6, lr
 8013b38:	fa1f fc8e 	uxth.w	ip, lr
 8013b3c:	88a1      	ldrh	r1, [r4, #4]
 8013b3e:	dc07      	bgt.n	8013b50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8013b40:	eba2 0c0c 	sub.w	ip, r2, ip
 8013b44:	eba1 010c 	sub.w	r1, r1, ip
 8013b48:	f8a4 8000 	strh.w	r8, [r4]
 8013b4c:	80a1      	strh	r1, [r4, #4]
 8013b4e:	e7d9      	b.n	8013b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8013b50:	4461      	add	r1, ip
 8013b52:	b209      	sxth	r1, r1
 8013b54:	4588      	cmp	r8, r1
 8013b56:	dbd6      	blt.n	8013b06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8013b58:	eba3 0c0c 	sub.w	ip, r3, ip
 8013b5c:	f8a4 c004 	strh.w	ip, [r4, #4]
 8013b60:	e7d0      	b.n	8013b04 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e4>
 8013b62:	bf00      	nop
 8013b64:	2001fe7e 	.word	0x2001fe7e
 8013b68:	2001fe7c 	.word	0x2001fe7c
 8013b6c:	2d00      	cmp	r5, #0
 8013b6e:	f000 816e 	beq.w	8013e4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8013b72:	9b06      	ldr	r3, [sp, #24]
 8013b74:	445b      	add	r3, fp
 8013b76:	461c      	mov	r4, r3
 8013b78:	9b02      	ldr	r3, [sp, #8]
 8013b7a:	3301      	adds	r3, #1
 8013b7c:	f000 8167 	beq.w	8013e4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52e>
 8013b80:	f104 05a4 	add.w	r5, r4, #164	; 0xa4
 8013b84:	4629      	mov	r1, r5
 8013b86:	9803      	ldr	r0, [sp, #12]
 8013b88:	f7ff fd3e 	bl	8013608 <_ZNK8touchgfx4Rect8includesERKS0_>
 8013b8c:	b120      	cbz	r0, 8013b98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 8013b8e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8013b92:	9801      	ldr	r0, [sp, #4]
 8013b94:	f7ff feb0 	bl	80138f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013b98:	9903      	ldr	r1, [sp, #12]
 8013b9a:	4628      	mov	r0, r5
 8013b9c:	f7ff fcc2 	bl	8013524 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013ba0:	2800      	cmp	r0, #0
 8013ba2:	f000 809c 	beq.w	8013cde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8013ba6:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	; 0xa4
 8013baa:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8013bae:	fa1f f189 	uxth.w	r1, r9
 8013bb2:	eb01 0c03 	add.w	ip, r1, r3
 8013bb6:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8013bba:	fa1f fa8c 	uxth.w	sl, ip
 8013bbe:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8013bc2:	9309      	str	r3, [sp, #36]	; 0x24
 8013bc4:	b283      	uxth	r3, r0
 8013bc6:	eb03 050c 	add.w	r5, r3, ip
 8013bca:	b2ad      	uxth	r5, r5
 8013bcc:	9505      	str	r5, [sp, #20]
 8013bce:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8013bd2:	4548      	cmp	r0, r9
 8013bd4:	9504      	str	r5, [sp, #16]
 8013bd6:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	; 0x2a
 8013bda:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	; 0xa6
 8013bde:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	; 0xec
 8013be2:	f340 8099 	ble.w	8013d18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8013be6:	1a5b      	subs	r3, r3, r1
 8013be8:	b29b      	uxth	r3, r3
 8013bea:	4596      	cmp	lr, r2
 8013bec:	fa0f f08a 	sxth.w	r0, sl
 8013bf0:	b21e      	sxth	r6, r3
 8013bf2:	dd2e      	ble.n	8013c52 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8013bf4:	9f02      	ldr	r7, [sp, #8]
 8013bf6:	f8bd 402e 	ldrh.w	r4, [sp, #46]	; 0x2e
 8013bfa:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8013bfe:	9f04      	ldr	r7, [sp, #16]
 8013c00:	fa1f fe8e 	uxth.w	lr, lr
 8013c04:	1a3f      	subs	r7, r7, r0
 8013c06:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	; 0xb2
 8013c0a:	b292      	uxth	r2, r2
 8013c0c:	ebae 0102 	sub.w	r1, lr, r2
 8013c10:	44a6      	add	lr, r4
 8013c12:	4402      	add	r2, r0
 8013c14:	b289      	uxth	r1, r1
 8013c16:	fa0f fe8e 	sxth.w	lr, lr
 8013c1a:	b212      	sxth	r2, r2
 8013c1c:	b20d      	sxth	r5, r1
 8013c1e:	ebae 0202 	sub.w	r2, lr, r2
 8013c22:	436f      	muls	r7, r5
 8013c24:	4372      	muls	r2, r6
 8013c26:	4297      	cmp	r7, r2
 8013c28:	db09      	blt.n	8013c3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8013c2a:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	; 0xac
 8013c2e:	f8a8 50b2 	strh.w	r5, [r8, #178]	; 0xb2
 8013c32:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8013c36:	449c      	add	ip, r3
 8013c38:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8013c3c:	e686      	b.n	801394c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013c3e:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	; 0xae
 8013c42:	4421      	add	r1, r4
 8013c44:	f8a8 60b0 	strh.w	r6, [r8, #176]	; 0xb0
 8013c48:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8013c4c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8013c50:	e67c      	b.n	801394c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013c52:	9f04      	ldr	r7, [sp, #16]
 8013c54:	42b8      	cmp	r0, r7
 8013c56:	da27      	bge.n	8013ca8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8013c58:	9902      	ldr	r1, [sp, #8]
 8013c5a:	f8bd 502e 	ldrh.w	r5, [sp, #46]	; 0x2e
 8013c5e:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8013c62:	eb05 010e 	add.w	r1, r5, lr
 8013c66:	fa1f f881 	uxth.w	r8, r1
 8013c6a:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	; 0xb2
 8013c6e:	fa0f f988 	sxth.w	r9, r8
 8013c72:	4411      	add	r1, r2
 8013c74:	eba1 0108 	sub.w	r1, r1, r8
 8013c78:	b289      	uxth	r1, r1
 8013c7a:	fa0f f881 	sxth.w	r8, r1
 8013c7e:	eba2 020e 	sub.w	r2, r2, lr
 8013c82:	1a3f      	subs	r7, r7, r0
 8013c84:	4372      	muls	r2, r6
 8013c86:	fb08 f707 	mul.w	r7, r8, r7
 8013c8a:	42ba      	cmp	r2, r7
 8013c8c:	dc06      	bgt.n	8013c9c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8013c8e:	f8a4 90ae 	strh.w	r9, [r4, #174]	; 0xae
 8013c92:	f8a4 80b2 	strh.w	r8, [r4, #178]	; 0xb2
 8013c96:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
 8013c9a:	e7ca      	b.n	8013c32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8013c9c:	f8a4 60b0 	strh.w	r6, [r4, #176]	; 0xb0
 8013ca0:	4429      	add	r1, r5
 8013ca2:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8013ca6:	e651      	b.n	801394c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013ca8:	9805      	ldr	r0, [sp, #20]
 8013caa:	2d06      	cmp	r5, #6
 8013cac:	ebaa 0000 	sub.w	r0, sl, r0
 8013cb0:	b280      	uxth	r0, r0
 8013cb2:	fa0f fe80 	sxth.w	lr, r0
 8013cb6:	d817      	bhi.n	8013ce8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8013cb8:	9b04      	ldr	r3, [sp, #16]
 8013cba:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	; 0xaa
 8013cbe:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
 8013cc2:	1c6b      	adds	r3, r5, #1
 8013cc4:	f8a4 e0a8 	strh.w	lr, [r4, #168]	; 0xa8
 8013cc8:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8013ccc:	9b01      	ldr	r3, [sp, #4]
 8013cce:	9801      	ldr	r0, [sp, #4]
 8013cd0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013cd4:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8013cd8:	805a      	strh	r2, [r3, #2]
 8013cda:	809e      	strh	r6, [r3, #4]
 8013cdc:	80d9      	strh	r1, [r3, #6]
 8013cde:	9b02      	ldr	r3, [sp, #8]
 8013ce0:	3c08      	subs	r4, #8
 8013ce2:	3b01      	subs	r3, #1
 8013ce4:	9302      	str	r3, [sp, #8]
 8013ce6:	e747      	b.n	8013b78 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8013ce8:	9a02      	ldr	r2, [sp, #8]
 8013cea:	45b6      	cmp	lr, r6
 8013cec:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8013cf0:	db0d      	blt.n	8013d0e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8013cf2:	449c      	add	ip, r3
 8013cf4:	fa1f fc8c 	uxth.w	ip, ip
 8013cf8:	445a      	add	r2, fp
 8013cfa:	f8ad c02c 	strh.w	ip, [sp, #44]	; 0x2c
 8013cfe:	448c      	add	ip, r1
 8013d00:	f8ad 9028 	strh.w	r9, [sp, #40]	; 0x28
 8013d04:	f8a2 c0ac 	strh.w	ip, [r2, #172]	; 0xac
 8013d08:	f8a2 e0b0 	strh.w	lr, [r2, #176]	; 0xb0
 8013d0c:	e61e      	b.n	801394c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013d0e:	445a      	add	r2, fp
 8013d10:	f8a2 60b0 	strh.w	r6, [r2, #176]	; 0xb0
 8013d14:	4484      	add	ip, r0
 8013d16:	e78f      	b.n	8013c38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8013d18:	f8bd 602e 	ldrh.w	r6, [sp, #46]	; 0x2e
 8013d1c:	fa1f f18e 	uxth.w	r1, lr
 8013d20:	eb01 0806 	add.w	r8, r1, r6
 8013d24:	b293      	uxth	r3, r2
 8013d26:	fa1f f888 	uxth.w	r8, r8
 8013d2a:	9306      	str	r3, [sp, #24]
 8013d2c:	fa0f f388 	sxth.w	r3, r8
 8013d30:	9307      	str	r3, [sp, #28]
 8013d32:	9f06      	ldr	r7, [sp, #24]
 8013d34:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
 8013d38:	4596      	cmp	lr, r2
 8013d3a:	443b      	add	r3, r7
 8013d3c:	b29b      	uxth	r3, r3
 8013d3e:	9308      	str	r3, [sp, #32]
 8013d40:	da24      	bge.n	8013d8c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8013d42:	9905      	ldr	r1, [sp, #20]
 8013d44:	eba3 0308 	sub.w	r3, r3, r8
 8013d48:	ebaa 0401 	sub.w	r4, sl, r1
 8013d4c:	b2a4      	uxth	r4, r4
 8013d4e:	b29b      	uxth	r3, r3
 8013d50:	b225      	sxth	r5, r4
 8013d52:	b219      	sxth	r1, r3
 8013d54:	eba2 020e 	sub.w	r2, r2, lr
 8013d58:	eba9 0000 	sub.w	r0, r9, r0
 8013d5c:	436a      	muls	r2, r5
 8013d5e:	4348      	muls	r0, r1
 8013d60:	4282      	cmp	r2, r0
 8013d62:	9a02      	ldr	r2, [sp, #8]
 8013d64:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8013d68:	445a      	add	r2, fp
 8013d6a:	dc06      	bgt.n	8013d7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8013d6c:	9b07      	ldr	r3, [sp, #28]
 8013d6e:	f8a2 10b2 	strh.w	r1, [r2, #178]	; 0xb2
 8013d72:	f8a2 30ae 	strh.w	r3, [r2, #174]	; 0xae
 8013d76:	44a4      	add	ip, r4
 8013d78:	e75e      	b.n	8013c38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8013d7a:	9904      	ldr	r1, [sp, #16]
 8013d7c:	f8a2 50b0 	strh.w	r5, [r2, #176]	; 0xb0
 8013d80:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
 8013d84:	4433      	add	r3, r6
 8013d86:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 8013d8a:	e5df      	b.n	801394c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013d8c:	9f06      	ldr	r7, [sp, #24]
 8013d8e:	9b04      	ldr	r3, [sp, #16]
 8013d90:	1bc9      	subs	r1, r1, r7
 8013d92:	fa0f f78a 	sxth.w	r7, sl
 8013d96:	b289      	uxth	r1, r1
 8013d98:	429f      	cmp	r7, r3
 8013d9a:	fa0f fe81 	sxth.w	lr, r1
 8013d9e:	dd24      	ble.n	8013dea <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4ca>
 8013da0:	9a05      	ldr	r2, [sp, #20]
 8013da2:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8013da6:	ebaa 0202 	sub.w	r2, sl, r2
 8013daa:	9d07      	ldr	r5, [sp, #28]
 8013dac:	b292      	uxth	r2, r2
 8013dae:	eba5 0a03 	sub.w	sl, r5, r3
 8013db2:	b214      	sxth	r4, r2
 8013db4:	eba9 0000 	sub.w	r0, r9, r0
 8013db8:	fb0e f000 	mul.w	r0, lr, r0
 8013dbc:	fb04 fa0a 	mul.w	sl, r4, sl
 8013dc0:	9b02      	ldr	r3, [sp, #8]
 8013dc2:	4550      	cmp	r0, sl
 8013dc4:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8013dc8:	445b      	add	r3, fp
 8013dca:	db03      	blt.n	8013dd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b4>
 8013dcc:	f8a3 e0b2 	strh.w	lr, [r3, #178]	; 0xb2
 8013dd0:	4494      	add	ip, r2
 8013dd2:	e731      	b.n	8013c38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8013dd4:	9a04      	ldr	r2, [sp, #16]
 8013dd6:	f8a3 40b0 	strh.w	r4, [r3, #176]	; 0xb0
 8013dda:	f8a3 20ac 	strh.w	r2, [r3, #172]	; 0xac
 8013dde:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	; 0xae
 8013de2:	4431      	add	r1, r6
 8013de4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8013de8:	e75b      	b.n	8013ca2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8013dea:	9b08      	ldr	r3, [sp, #32]
 8013dec:	2d06      	cmp	r5, #6
 8013dee:	eba3 0308 	sub.w	r3, r3, r8
 8013df2:	b29b      	uxth	r3, r3
 8013df4:	b218      	sxth	r0, r3
 8013df6:	d813      	bhi.n	8013e20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x500>
 8013df8:	9b07      	ldr	r3, [sp, #28]
 8013dfa:	f8a4 00aa 	strh.w	r0, [r4, #170]	; 0xaa
 8013dfe:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
 8013e02:	1c6b      	adds	r3, r5, #1
 8013e04:	f8ab 30ec 	strh.w	r3, [fp, #236]	; 0xec
 8013e08:	9b01      	ldr	r3, [sp, #4]
 8013e0a:	9901      	ldr	r1, [sp, #4]
 8013e0c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013e10:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8013e14:	805a      	strh	r2, [r3, #2]
 8013e16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013e18:	f8a3 e006 	strh.w	lr, [r3, #6]
 8013e1c:	809a      	strh	r2, [r3, #4]
 8013e1e:	e75e      	b.n	8013cde <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8013e20:	9c02      	ldr	r4, [sp, #8]
 8013e22:	4570      	cmp	r0, lr
 8013e24:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8013e28:	db0d      	blt.n	8013e46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x526>
 8013e2a:	4431      	add	r1, r6
 8013e2c:	9b06      	ldr	r3, [sp, #24]
 8013e2e:	b289      	uxth	r1, r1
 8013e30:	445c      	add	r4, fp
 8013e32:	f8ad 102e 	strh.w	r1, [sp, #46]	; 0x2e
 8013e36:	4419      	add	r1, r3
 8013e38:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8013e3c:	f8a4 10ae 	strh.w	r1, [r4, #174]	; 0xae
 8013e40:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
 8013e44:	e582      	b.n	801394c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013e46:	445c      	add	r4, fp
 8013e48:	f8a4 e0b2 	strh.w	lr, [r4, #178]	; 0xb2
 8013e4c:	e79a      	b.n	8013d84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8013e4e:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	; 0xec
 8013e52:	2e07      	cmp	r6, #7
 8013e54:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8013e58:	d812      	bhi.n	8013e80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x560>
 8013e5a:	1c75      	adds	r5, r6, #1
 8013e5c:	f8ab 50ec 	strh.w	r5, [fp, #236]	; 0xec
 8013e60:	9d01      	ldr	r5, [sp, #4]
 8013e62:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
 8013e66:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 8013e6a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8013e6e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8013e72:	442c      	add	r4, r5
 8013e74:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8013e78:	8061      	strh	r1, [r4, #2]
 8013e7a:	80a2      	strh	r2, [r4, #4]
 8013e7c:	80e3      	strh	r3, [r4, #6]
 8013e7e:	e5cf      	b.n	8013a20 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8013e80:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 8013e84:	f04f 37ff 	mov.w	r7, #4294967295
 8013e88:	2500      	movs	r5, #0
 8013e8a:	f10b 03ac 	add.w	r3, fp, #172	; 0xac
 8013e8e:	3e01      	subs	r6, #1
 8013e90:	445c      	add	r4, fp
 8013e92:	9305      	str	r3, [sp, #20]
 8013e94:	1e72      	subs	r2, r6, #1
 8013e96:	4691      	mov	r9, r2
 8013e98:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	; 0xa8
 8013e9c:	9302      	str	r3, [sp, #8]
 8013e9e:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	; 0xaa
 8013ea2:	9304      	str	r3, [sp, #16]
 8013ea4:	f104 03a4 	add.w	r3, r4, #164	; 0xa4
 8013ea8:	f1b9 3fff 	cmp.w	r9, #4294967295
 8013eac:	bf16      	itet	ne
 8013eae:	9905      	ldrne	r1, [sp, #20]
 8013eb0:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8013eb4:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8013eb8:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8013ebc:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8013ec0:	6818      	ldr	r0, [r3, #0]
 8013ec2:	fb18 f801 	smulbb	r8, r8, r1
 8013ec6:	6859      	ldr	r1, [r3, #4]
 8013ec8:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8013ecc:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8013ed0:	4671      	mov	r1, lr
 8013ed2:	a80c      	add	r0, sp, #48	; 0x30
 8013ed4:	9207      	str	r2, [sp, #28]
 8013ed6:	9306      	str	r3, [sp, #24]
 8013ed8:	f7ff fbbc 	bl	8013654 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013edc:	f04f 0c08 	mov.w	ip, #8
 8013ee0:	f8bd 1036 	ldrh.w	r1, [sp, #54]	; 0x36
 8013ee4:	f8bd 0034 	ldrh.w	r0, [sp, #52]	; 0x34
 8013ee8:	9b04      	ldr	r3, [sp, #16]
 8013eea:	9a02      	ldr	r2, [sp, #8]
 8013eec:	fb10 f001 	smulbb	r0, r0, r1
 8013ef0:	fb02 8803 	mla	r8, r2, r3, r8
 8013ef4:	eba0 0108 	sub.w	r1, r0, r8
 8013ef8:	fb90 f0fc 	sdiv	r0, r0, ip
 8013efc:	4288      	cmp	r0, r1
 8013efe:	dc20      	bgt.n	8013f42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 8013f00:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8013f04:	4551      	cmp	r1, sl
 8013f06:	da03      	bge.n	8013f10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5f0>
 8013f08:	b1d9      	cbz	r1, 8013f42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x622>
 8013f0a:	468a      	mov	sl, r1
 8013f0c:	464f      	mov	r7, r9
 8013f0e:	4635      	mov	r5, r6
 8013f10:	f109 39ff 	add.w	r9, r9, #4294967295
 8013f14:	f119 0f02 	cmn.w	r9, #2
 8013f18:	d1c6      	bne.n	8013ea8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x588>
 8013f1a:	4616      	mov	r6, r2
 8013f1c:	3201      	adds	r2, #1
 8013f1e:	f1a4 0408 	sub.w	r4, r4, #8
 8013f22:	d1b7      	bne.n	8013e94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8013f24:	9b01      	ldr	r3, [sp, #4]
 8013f26:	b2ac      	uxth	r4, r5
 8013f28:	00ed      	lsls	r5, r5, #3
 8013f2a:	1958      	adds	r0, r3, r5
 8013f2c:	1c7b      	adds	r3, r7, #1
 8013f2e:	d10b      	bne.n	8013f48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x628>
 8013f30:	4601      	mov	r1, r0
 8013f32:	9803      	ldr	r0, [sp, #12]
 8013f34:	f7ff fb8e 	bl	8013654 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013f38:	4621      	mov	r1, r4
 8013f3a:	9801      	ldr	r0, [sp, #4]
 8013f3c:	f7ff fcdc 	bl	80138f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013f40:	e504      	b.n	801394c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013f42:	464f      	mov	r7, r9
 8013f44:	4635      	mov	r5, r6
 8013f46:	e7ed      	b.n	8013f24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x604>
 8013f48:	9b01      	ldr	r3, [sp, #4]
 8013f4a:	00ff      	lsls	r7, r7, #3
 8013f4c:	19d9      	adds	r1, r3, r7
 8013f4e:	f7ff fb81 	bl	8013654 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013f52:	9b03      	ldr	r3, [sp, #12]
 8013f54:	445f      	add	r7, fp
 8013f56:	cb03      	ldmia	r3!, {r0, r1}
 8013f58:	445d      	add	r5, fp
 8013f5a:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac
 8013f5e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8013f62:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8013f66:	9b03      	ldr	r3, [sp, #12]
 8013f68:	6869      	ldr	r1, [r5, #4]
 8013f6a:	c303      	stmia	r3!, {r0, r1}
 8013f6c:	e7e4      	b.n	8013f38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x618>
 8013f6e:	bf00      	nop

08013f70 <_ZN8touchgfx11Application10invalidateEv>:
 8013f70:	2100      	movs	r1, #0
 8013f72:	4b09      	ldr	r3, [pc, #36]	; (8013f98 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8013f74:	b082      	sub	sp, #8
 8013f76:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013f7a:	4b08      	ldr	r3, [pc, #32]	; (8013f9c <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8013f7c:	9100      	str	r1, [sp, #0]
 8013f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f82:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013f86:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013f8a:	ab02      	add	r3, sp, #8
 8013f8c:	e913 0006 	ldmdb	r3, {r1, r2}
 8013f90:	b002      	add	sp, #8
 8013f92:	f7ff bcc5 	b.w	8013920 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8013f96:	bf00      	nop
 8013f98:	2001fe7c 	.word	0x2001fe7c
 8013f9c:	2001fe7e 	.word	0x2001fe7e

08013fa0 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8013fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013fa4:	f500 7698 	add.w	r6, r0, #304	; 0x130
 8013fa8:	b09b      	sub	sp, #108	; 0x6c
 8013faa:	4604      	mov	r4, r0
 8013fac:	4630      	mov	r0, r6
 8013fae:	f7fd fa40 	bl	8011432 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013fb2:	4605      	mov	r5, r0
 8013fb4:	b940      	cbnz	r0, 8013fc8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x28>
 8013fb6:	e896 0006 	ldmia.w	r6, {r1, r2}
 8013fba:	4620      	mov	r0, r4
 8013fbc:	f7ff fcb0 	bl	8013920 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8013fc0:	f8c4 5130 	str.w	r5, [r4, #304]	; 0x130
 8013fc4:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
 8013fc8:	4bc9      	ldr	r3, [pc, #804]	; (80142f0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8013fca:	681b      	ldr	r3, [r3, #0]
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d03e      	beq.n	801404e <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8013fd0:	4dc8      	ldr	r5, [pc, #800]	; (80142f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8013fd2:	4628      	mov	r0, r5
 8013fd4:	f7fd fa2d 	bl	8011432 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013fd8:	4606      	mov	r6, r0
 8013fda:	2800      	cmp	r0, #0
 8013fdc:	d137      	bne.n	801404e <_ZN8touchgfx11Application15drawCachedAreasEv+0xae>
 8013fde:	4628      	mov	r0, r5
 8013fe0:	f7ff f9ee 	bl	80133c0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8013fe4:	6829      	ldr	r1, [r5, #0]
 8013fe6:	686a      	ldr	r2, [r5, #4]
 8013fe8:	4620      	mov	r0, r4
 8013fea:	f7ff fc99 	bl	8013920 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8013fee:	802e      	strh	r6, [r5, #0]
 8013ff0:	806e      	strh	r6, [r5, #2]
 8013ff2:	80ae      	strh	r6, [r5, #4]
 8013ff4:	80ee      	strh	r6, [r5, #6]
 8013ff6:	ae09      	add	r6, sp, #36	; 0x24
 8013ff8:	4630      	mov	r0, r6
 8013ffa:	f7ff fc25 	bl	8013848 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8013ffe:	4abe      	ldr	r2, [pc, #760]	; (80142f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8014000:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 8014004:	8815      	ldrh	r5, [r2, #0]
 8014006:	9202      	str	r2, [sp, #8]
 8014008:	462b      	mov	r3, r5
 801400a:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 801400e:	429f      	cmp	r7, r3
 8014010:	d924      	bls.n	801405c <_ZN8touchgfx11Application15drawCachedAreasEv+0xbc>
 8014012:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 8014016:	2907      	cmp	r1, #7
 8014018:	d816      	bhi.n	8014048 <_ZN8touchgfx11Application15drawCachedAreasEv+0xa8>
 801401a:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 801401e:	f9b2 9002 	ldrsh.w	r9, [r2, #2]
 8014022:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8014026:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 801402a:	f930 8033 	ldrsh.w	r8, [r0, r3, lsl #3]
 801402e:	1c4a      	adds	r2, r1, #1
 8014030:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8014034:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
 8014038:	f826 8031 	strh.w	r8, [r6, r1, lsl #3]
 801403c:	f8a2 9002 	strh.w	r9, [r2, #2]
 8014040:	f8a2 e004 	strh.w	lr, [r2, #4]
 8014044:	f8a2 c006 	strh.w	ip, [r2, #6]
 8014048:	3301      	adds	r3, #1
 801404a:	b29b      	uxth	r3, r3
 801404c:	e7df      	b.n	801400e <_ZN8touchgfx11Application15drawCachedAreasEv+0x6e>
 801404e:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 8014052:	2b00      	cmp	r3, #0
 8014054:	d1cf      	bne.n	8013ff6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x56>
 8014056:	b01b      	add	sp, #108	; 0x6c
 8014058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801405c:	462f      	mov	r7, r5
 801405e:	f8b4 312e 	ldrh.w	r3, [r4, #302]	; 0x12e
 8014062:	42bb      	cmp	r3, r7
 8014064:	d90b      	bls.n	801407e <_ZN8touchgfx11Application15drawCachedAreasEv+0xde>
 8014066:	eb04 03c7 	add.w	r3, r4, r7, lsl #3
 801406a:	f8d3 10ee 	ldr.w	r1, [r3, #238]	; 0xee
 801406e:	f8d3 20f2 	ldr.w	r2, [r3, #242]	; 0xf2
 8014072:	4620      	mov	r0, r4
 8014074:	3701      	adds	r7, #1
 8014076:	f7ff fc53 	bl	8013920 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801407a:	b2bf      	uxth	r7, r7
 801407c:	e7ef      	b.n	801405e <_ZN8touchgfx11Application15drawCachedAreasEv+0xbe>
 801407e:	4a9f      	ldr	r2, [pc, #636]	; (80142fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 8014080:	6813      	ldr	r3, [r2, #0]
 8014082:	4690      	mov	r8, r2
 8014084:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8014088:	2b01      	cmp	r3, #1
 801408a:	f040 80e6 	bne.w	801425a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ba>
 801408e:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 8014092:	4629      	mov	r1, r5
 8014094:	2500      	movs	r5, #0
 8014096:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	; 0xec
 801409a:	33ae      	adds	r3, #174	; 0xae
 801409c:	428f      	cmp	r7, r1
 801409e:	f103 0308 	add.w	r3, r3, #8
 80140a2:	dd0a      	ble.n	80140ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x11a>
 80140a4:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 80140a8:	f833 0c04 	ldrh.w	r0, [r3, #-4]
 80140ac:	3101      	adds	r1, #1
 80140ae:	4402      	add	r2, r0
 80140b0:	b212      	sxth	r2, r2
 80140b2:	4295      	cmp	r5, r2
 80140b4:	bfb8      	it	lt
 80140b6:	4615      	movlt	r5, r2
 80140b8:	e7f0      	b.n	801409c <_ZN8touchgfx11Application15drawCachedAreasEv+0xfc>
 80140ba:	4b91      	ldr	r3, [pc, #580]	; (8014300 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>)
 80140bc:	f8df b23c 	ldr.w	fp, [pc, #572]	; 80142fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>
 80140c0:	881b      	ldrh	r3, [r3, #0]
 80140c2:	46d8      	mov	r8, fp
 80140c4:	2b0f      	cmp	r3, #15
 80140c6:	bf88      	it	hi
 80140c8:	ea4f 0ad3 	movhi.w	sl, r3, lsr #3
 80140cc:	f04f 0300 	mov.w	r3, #0
 80140d0:	bf98      	it	ls
 80140d2:	f04f 0a01 	movls.w	sl, #1
 80140d6:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80140da:	f8bd 701a 	ldrh.w	r7, [sp, #26]
 80140de:	f8bd 0016 	ldrh.w	r0, [sp, #22]
 80140e2:	4438      	add	r0, r7
 80140e4:	b207      	sxth	r7, r0
 80140e6:	f8db 0000 	ldr.w	r0, [fp]
 80140ea:	42bd      	cmp	r5, r7
 80140ec:	6803      	ldr	r3, [r0, #0]
 80140ee:	f340 8084 	ble.w	80141fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 80140f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80140f6:	4798      	blx	r3
 80140f8:	eb07 030a 	add.w	r3, r7, sl
 80140fc:	4298      	cmp	r0, r3
 80140fe:	da07      	bge.n	8014110 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 8014100:	4285      	cmp	r5, r0
 8014102:	dd05      	ble.n	8014110 <_ZN8touchgfx11Application15drawCachedAreasEv+0x170>
 8014104:	4287      	cmp	r7, r0
 8014106:	dd6d      	ble.n	80141e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 8014108:	2f00      	cmp	r7, #0
 801410a:	dd6b      	ble.n	80141e4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x244>
 801410c:	4628      	mov	r0, r5
 801410e:	e004      	b.n	801411a <_ZN8touchgfx11Application15drawCachedAreasEv+0x17a>
 8014110:	4287      	cmp	r7, r0
 8014112:	dcfb      	bgt.n	801410c <_ZN8touchgfx11Application15drawCachedAreasEv+0x16c>
 8014114:	42a8      	cmp	r0, r5
 8014116:	bfa8      	it	ge
 8014118:	4628      	movge	r0, r5
 801411a:	2200      	movs	r2, #0
 801411c:	4b79      	ldr	r3, [pc, #484]	; (8014304 <_ZN8touchgfx11Application15drawCachedAreasEv+0x364>)
 801411e:	1bc0      	subs	r0, r0, r7
 8014120:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014124:	f8ad 7016 	strh.w	r7, [sp, #22]
 8014128:	f8ad 3018 	strh.w	r3, [sp, #24]
 801412c:	9b02      	ldr	r3, [sp, #8]
 801412e:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014132:	881f      	ldrh	r7, [r3, #0]
 8014134:	f8ad 001a 	strh.w	r0, [sp, #26]
 8014138:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 801413c:	42bb      	cmp	r3, r7
 801413e:	d9cc      	bls.n	80140da <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 8014140:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8014144:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8014148:	ab07      	add	r3, sp, #28
 801414a:	6851      	ldr	r1, [r2, #4]
 801414c:	c303      	stmia	r3!, {r0, r1}
 801414e:	a905      	add	r1, sp, #20
 8014150:	a807      	add	r0, sp, #28
 8014152:	f7ff f9e7 	bl	8013524 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014156:	2800      	cmp	r0, #0
 8014158:	d04c      	beq.n	80141f4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x254>
 801415a:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 801415e:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8014162:	f8bd 9020 	ldrh.w	r9, [sp, #32]
 8014166:	4686      	mov	lr, r0
 8014168:	4290      	cmp	r0, r2
 801416a:	4448      	add	r0, r9
 801416c:	f8bd 9018 	ldrh.w	r9, [sp, #24]
 8014170:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8014174:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8014178:	bfb8      	it	lt
 801417a:	4696      	movlt	lr, r2
 801417c:	444a      	add	r2, r9
 801417e:	4299      	cmp	r1, r3
 8014180:	b280      	uxth	r0, r0
 8014182:	b292      	uxth	r2, r2
 8014184:	468c      	mov	ip, r1
 8014186:	9303      	str	r3, [sp, #12]
 8014188:	bfb8      	it	lt
 801418a:	469c      	movlt	ip, r3
 801418c:	fa0f f982 	sxth.w	r9, r2
 8014190:	b203      	sxth	r3, r0
 8014192:	454b      	cmp	r3, r9
 8014194:	bfb8      	it	lt
 8014196:	4602      	movlt	r2, r0
 8014198:	eba2 020e 	sub.w	r2, r2, lr
 801419c:	f8ad 2020 	strh.w	r2, [sp, #32]
 80141a0:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80141a4:	9b03      	ldr	r3, [sp, #12]
 80141a6:	4411      	add	r1, r2
 80141a8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 80141ac:	b289      	uxth	r1, r1
 80141ae:	4413      	add	r3, r2
 80141b0:	b29b      	uxth	r3, r3
 80141b2:	b208      	sxth	r0, r1
 80141b4:	b21a      	sxth	r2, r3
 80141b6:	4290      	cmp	r0, r2
 80141b8:	bfb8      	it	lt
 80141ba:	460b      	movlt	r3, r1
 80141bc:	eba3 030c 	sub.w	r3, r3, ip
 80141c0:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 80141c4:	f8ad e01c 	strh.w	lr, [sp, #28]
 80141c8:	f8ad c01e 	strh.w	ip, [sp, #30]
 80141cc:	a807      	add	r0, sp, #28
 80141ce:	f7fd f930 	bl	8011432 <_ZNK8touchgfx4Rect7isEmptyEv>
 80141d2:	b920      	cbnz	r0, 80141de <_ZN8touchgfx11Application15drawCachedAreasEv+0x23e>
 80141d4:	6823      	ldr	r3, [r4, #0]
 80141d6:	a907      	add	r1, sp, #28
 80141d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80141da:	4620      	mov	r0, r4
 80141dc:	4798      	blx	r3
 80141de:	3701      	adds	r7, #1
 80141e0:	b2bf      	uxth	r7, r7
 80141e2:	e7a9      	b.n	8014138 <_ZN8touchgfx11Application15drawCachedAreasEv+0x198>
 80141e4:	f8d8 0000 	ldr.w	r0, [r8]
 80141e8:	2101      	movs	r1, #1
 80141ea:	6803      	ldr	r3, [r0, #0]
 80141ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80141f0:	4798      	blx	r3
 80141f2:	e772      	b.n	80140da <_ZN8touchgfx11Application15drawCachedAreasEv+0x13a>
 80141f4:	e9cd 0007 	strd	r0, r0, [sp, #28]
 80141f8:	e7e8      	b.n	80141cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x22c>
 80141fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141fc:	4798      	blx	r3
 80141fe:	4b42      	ldr	r3, [pc, #264]	; (8014308 <_ZN8touchgfx11Application15drawCachedAreasEv+0x368>)
 8014200:	781b      	ldrb	r3, [r3, #0]
 8014202:	2b00      	cmp	r3, #0
 8014204:	f43f af27 	beq.w	8014056 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8014208:	2300      	movs	r3, #0
 801420a:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
 801420e:	9b02      	ldr	r3, [sp, #8]
 8014210:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 8014214:	881b      	ldrh	r3, [r3, #0]
 8014216:	f104 00ee 	add.w	r0, r4, #238	; 0xee
 801421a:	429d      	cmp	r5, r3
 801421c:	f67f af1b 	bls.w	8014056 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb6>
 8014220:	f8b4 112e 	ldrh.w	r1, [r4, #302]	; 0x12e
 8014224:	2907      	cmp	r1, #7
 8014226:	d815      	bhi.n	8014254 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b4>
 8014228:	eb06 02c3 	add.w	r2, r6, r3, lsl #3
 801422c:	f9b2 e002 	ldrsh.w	lr, [r2, #2]
 8014230:	f9b2 c004 	ldrsh.w	ip, [r2, #4]
 8014234:	f9b2 7006 	ldrsh.w	r7, [r2, #6]
 8014238:	f936 8033 	ldrsh.w	r8, [r6, r3, lsl #3]
 801423c:	1c4a      	adds	r2, r1, #1
 801423e:	f8a4 212e 	strh.w	r2, [r4, #302]	; 0x12e
 8014242:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8014246:	f820 8031 	strh.w	r8, [r0, r1, lsl #3]
 801424a:	f8a2 e002 	strh.w	lr, [r2, #2]
 801424e:	f8a2 c004 	strh.w	ip, [r2, #4]
 8014252:	80d7      	strh	r7, [r2, #6]
 8014254:	3301      	adds	r3, #1
 8014256:	b29b      	uxth	r3, r3
 8014258:	e7df      	b.n	801421a <_ZN8touchgfx11Application15drawCachedAreasEv+0x27a>
 801425a:	2b02      	cmp	r3, #2
 801425c:	f040 8136 	bne.w	80144cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 8014260:	4b2a      	ldr	r3, [pc, #168]	; (801430c <_ZN8touchgfx11Application15drawCachedAreasEv+0x36c>)
 8014262:	f104 09ac 	add.w	r9, r4, #172	; 0xac
 8014266:	781b      	ldrb	r3, [r3, #0]
 8014268:	2b01      	cmp	r3, #1
 801426a:	f000 809c 	beq.w	80143a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 801426e:	9b02      	ldr	r3, [sp, #8]
 8014270:	f8b4 20ec 	ldrh.w	r2, [r4, #236]	; 0xec
 8014274:	f8b3 b000 	ldrh.w	fp, [r3]
 8014278:	f10b 0b01 	add.w	fp, fp, #1
 801427c:	fa1f fb8b 	uxth.w	fp, fp
 8014280:	2a00      	cmp	r2, #0
 8014282:	d0bc      	beq.n	80141fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 8014284:	4659      	mov	r1, fp
 8014286:	f04f 0800 	mov.w	r8, #0
 801428a:	f8b4 50ae 	ldrh.w	r5, [r4, #174]	; 0xae
 801428e:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	; 0xb2
 8014292:	441d      	add	r5, r3
 8014294:	b22d      	sxth	r5, r5
 8014296:	b28b      	uxth	r3, r1
 8014298:	429a      	cmp	r2, r3
 801429a:	ea4f 07c8 	mov.w	r7, r8, lsl #3
 801429e:	f240 80c1 	bls.w	8014424 <_ZN8touchgfx11Application15drawCachedAreasEv+0x484>
 80142a2:	4427      	add	r7, r4
 80142a4:	eb04 0ec1 	add.w	lr, r4, r1, lsl #3
 80142a8:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	; 0xae
 80142ac:	f9be c0ae 	ldrsh.w	ip, [lr, #174]	; 0xae
 80142b0:	4608      	mov	r0, r1
 80142b2:	4563      	cmp	r3, ip
 80142b4:	f340 80a3 	ble.w	80143fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x45e>
 80142b8:	f8be 50b2 	ldrh.w	r5, [lr, #178]	; 0xb2
 80142bc:	4465      	add	r5, ip
 80142be:	b22d      	sxth	r5, r5
 80142c0:	429d      	cmp	r5, r3
 80142c2:	bfa8      	it	ge
 80142c4:	461d      	movge	r5, r3
 80142c6:	3101      	adds	r1, #1
 80142c8:	4680      	mov	r8, r0
 80142ca:	e7e4      	b.n	8014296 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2f6>
 80142cc:	d10b      	bne.n	80142e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x346>
 80142ce:	f9b5 c0b2 	ldrsh.w	ip, [r5, #178]	; 0xb2
 80142d2:	f9ba 10b2 	ldrsh.w	r1, [sl, #178]	; 0xb2
 80142d6:	458c      	cmp	ip, r1
 80142d8:	bfb4      	ite	lt
 80142da:	469c      	movlt	ip, r3
 80142dc:	46bc      	movge	ip, r7
 80142de:	4572      	cmp	r2, lr
 80142e0:	bfb8      	it	lt
 80142e2:	4672      	movlt	r2, lr
 80142e4:	e088      	b.n	80143f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 80142e6:	428a      	cmp	r2, r1
 80142e8:	bfb8      	it	lt
 80142ea:	460a      	movlt	r2, r1
 80142ec:	46bc      	mov	ip, r7
 80142ee:	e083      	b.n	80143f8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x458>
 80142f0:	2001fec0 	.word	0x2001fec0
 80142f4:	2001fecc 	.word	0x2001fecc
 80142f8:	20000078 	.word	0x20000078
 80142fc:	2001fe88 	.word	0x2001fe88
 8014300:	2001fe7e 	.word	0x2001fe7e
 8014304:	2001fe7c 	.word	0x2001fe7c
 8014308:	2001fe86 	.word	0x2001fe86
 801430c:	2001fe80 	.word	0x2001fe80
 8014310:	1961      	adds	r1, r4, r5
 8014312:	f851 0fac 	ldr.w	r0, [r1, #172]!
 8014316:	ab07      	add	r3, sp, #28
 8014318:	6849      	ldr	r1, [r1, #4]
 801431a:	c303      	stmia	r3!, {r0, r1}
 801431c:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8014320:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8014324:	2b13      	cmp	r3, #19
 8014326:	bfd8      	it	le
 8014328:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 801432c:	440b      	add	r3, r1
 801432e:	1a9b      	subs	r3, r3, r2
 8014330:	a807      	add	r0, sp, #28
 8014332:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014336:	f8ad 201c 	strh.w	r2, [sp, #28]
 801433a:	f7ff f85b 	bl	80133f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801433e:	a807      	add	r0, sp, #28
 8014340:	f7fd f877 	bl	8011432 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014344:	bb78      	cbnz	r0, 80143a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 8014346:	f9bd c022 	ldrsh.w	ip, [sp, #34]	; 0x22
 801434a:	f8d8 0000 	ldr.w	r0, [r8]
 801434e:	f1bc 0f14 	cmp.w	ip, #20
 8014352:	bfa8      	it	ge
 8014354:	f04f 0c14 	movge.w	ip, #20
 8014358:	f8d0 e000 	ldr.w	lr, [r0]
 801435c:	fa1f fc8c 	uxth.w	ip, ip
 8014360:	f8cd c000 	str.w	ip, [sp]
 8014364:	f8de a090 	ldr.w	sl, [lr, #144]	; 0x90
 8014368:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801436c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8014370:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8014374:	47d0      	blx	sl
 8014376:	4682      	mov	sl, r0
 8014378:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 801437c:	a807      	add	r0, sp, #28
 801437e:	f7ff f81f 	bl	80133c0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8014382:	6823      	ldr	r3, [r4, #0]
 8014384:	4620      	mov	r0, r4
 8014386:	4425      	add	r5, r4
 8014388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801438a:	a907      	add	r1, sp, #28
 801438c:	4798      	blx	r3
 801438e:	f8b5 00b0 	ldrh.w	r0, [r5, #176]	; 0xb0
 8014392:	eba0 000a 	sub.w	r0, r0, sl
 8014396:	b200      	sxth	r0, r0
 8014398:	f8a5 00b0 	strh.w	r0, [r5, #176]	; 0xb0
 801439c:	b918      	cbnz	r0, 80143a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x406>
 801439e:	b2b9      	uxth	r1, r7
 80143a0:	4648      	mov	r0, r9
 80143a2:	f7ff faa9 	bl	80138f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80143a6:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	; 0xec
 80143aa:	f1bb 0f00 	cmp.w	fp, #0
 80143ae:	f43f af26 	beq.w	80141fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80143b2:	2700      	movs	r7, #0
 80143b4:	9b02      	ldr	r3, [sp, #8]
 80143b6:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	; 0xac
 80143ba:	881b      	ldrh	r3, [r3, #0]
 80143bc:	3301      	adds	r3, #1
 80143be:	b29b      	uxth	r3, r3
 80143c0:	b299      	uxth	r1, r3
 80143c2:	458b      	cmp	fp, r1
 80143c4:	ea4f 05c7 	mov.w	r5, r7, lsl #3
 80143c8:	d9a2      	bls.n	8014310 <_ZN8touchgfx11Application15drawCachedAreasEv+0x370>
 80143ca:	4425      	add	r5, r4
 80143cc:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
 80143d0:	f8b5 00ac 	ldrh.w	r0, [r5, #172]	; 0xac
 80143d4:	eb04 0ac3 	add.w	sl, r4, r3, lsl #3
 80143d8:	4408      	add	r0, r1
 80143da:	f9ba e0ac 	ldrsh.w	lr, [sl, #172]	; 0xac
 80143de:	f8ba 10b0 	ldrh.w	r1, [sl, #176]	; 0xb0
 80143e2:	b200      	sxth	r0, r0
 80143e4:	4471      	add	r1, lr
 80143e6:	b209      	sxth	r1, r1
 80143e8:	4288      	cmp	r0, r1
 80143ea:	469c      	mov	ip, r3
 80143ec:	f6bf af6e 	bge.w	80142cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x32c>
 80143f0:	4586      	cmp	lr, r0
 80143f2:	4672      	mov	r2, lr
 80143f4:	bfb8      	it	lt
 80143f6:	4602      	movlt	r2, r0
 80143f8:	3301      	adds	r3, #1
 80143fa:	4667      	mov	r7, ip
 80143fc:	e7e0      	b.n	80143c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x420>
 80143fe:	d10c      	bne.n	801441a <_ZN8touchgfx11Application15drawCachedAreasEv+0x47a>
 8014400:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	; 0xb0
 8014404:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	; 0xb0
 8014408:	4287      	cmp	r7, r0
 801440a:	bfb4      	ite	lt
 801440c:	4608      	movlt	r0, r1
 801440e:	4640      	movge	r0, r8
 8014410:	f8be 70b2 	ldrh.w	r7, [lr, #178]	; 0xb2
 8014414:	443b      	add	r3, r7
 8014416:	b21b      	sxth	r3, r3
 8014418:	e752      	b.n	80142c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x320>
 801441a:	4565      	cmp	r5, ip
 801441c:	bfa8      	it	ge
 801441e:	4665      	movge	r5, ip
 8014420:	4640      	mov	r0, r8
 8014422:	e750      	b.n	80142c6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x326>
 8014424:	eb09 0007 	add.w	r0, r9, r7
 8014428:	4427      	add	r7, r4
 801442a:	f9b7 a0b2 	ldrsh.w	sl, [r7, #178]	; 0xb2
 801442e:	9203      	str	r2, [sp, #12]
 8014430:	f1ba 0f13 	cmp.w	sl, #19
 8014434:	bfde      	ittt	le
 8014436:	f8b7 50ae 	ldrhle.w	r5, [r7, #174]	; 0xae
 801443a:	4455      	addle	r5, sl
 801443c:	b22d      	sxthle	r5, r5
 801443e:	f7fc fff8 	bl	8011432 <_ZNK8touchgfx4Rect7isEmptyEv>
 8014442:	9a03      	ldr	r2, [sp, #12]
 8014444:	2800      	cmp	r0, #0
 8014446:	f47f af1b 	bne.w	8014280 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e0>
 801444a:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	; 0xae
 801444e:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8014452:	1aad      	subs	r5, r5, r2
 8014454:	2d14      	cmp	r5, #20
 8014456:	bfa8      	it	ge
 8014458:	2514      	movge	r5, #20
 801445a:	4828      	ldr	r0, [pc, #160]	; (80144fc <_ZN8touchgfx11Application15drawCachedAreasEv+0x55c>)
 801445c:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	; 0xac
 8014460:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	; 0xb0
 8014464:	6800      	ldr	r0, [r0, #0]
 8014466:	f8ad 101c 	strh.w	r1, [sp, #28]
 801446a:	f8ad 201e 	strh.w	r2, [sp, #30]
 801446e:	f8ad 3020 	strh.w	r3, [sp, #32]
 8014472:	f8d0 c000 	ldr.w	ip, [r0]
 8014476:	b2ad      	uxth	r5, r5
 8014478:	fa1f fa8a 	uxth.w	sl, sl
 801447c:	4555      	cmp	r5, sl
 801447e:	bf94      	ite	ls
 8014480:	9500      	strls	r5, [sp, #0]
 8014482:	f8cd a000 	strhi.w	sl, [sp]
 8014486:	b292      	uxth	r2, r2
 8014488:	f8dc 5090 	ldr.w	r5, [ip, #144]	; 0x90
 801448c:	b29b      	uxth	r3, r3
 801448e:	b289      	uxth	r1, r1
 8014490:	47a8      	blx	r5
 8014492:	6823      	ldr	r3, [r4, #0]
 8014494:	f8ad 0022 	strh.w	r0, [sp, #34]	; 0x22
 8014498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801449a:	a907      	add	r1, sp, #28
 801449c:	4620      	mov	r0, r4
 801449e:	4798      	blx	r3
 80144a0:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 80144a4:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80144a8:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 80144ac:	1a5b      	subs	r3, r3, r1
 80144ae:	440a      	add	r2, r1
 80144b0:	b21b      	sxth	r3, r3
 80144b2:	f8a7 20ae 	strh.w	r2, [r7, #174]	; 0xae
 80144b6:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 80144ba:	2b00      	cmp	r3, #0
 80144bc:	f47f aed7 	bne.w	801426e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 80144c0:	fa1f f188 	uxth.w	r1, r8
 80144c4:	4648      	mov	r0, r9
 80144c6:	f7ff fa17 	bl	80138f8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80144ca:	e6d0      	b.n	801426e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ce>
 80144cc:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
 80144d0:	42ab      	cmp	r3, r5
 80144d2:	f67f ae94 	bls.w	80141fe <_ZN8touchgfx11Application15drawCachedAreasEv+0x25e>
 80144d6:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 80144da:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80144de:	ab07      	add	r3, sp, #28
 80144e0:	6851      	ldr	r1, [r2, #4]
 80144e2:	c303      	stmia	r3!, {r0, r1}
 80144e4:	a807      	add	r0, sp, #28
 80144e6:	f7fc ffa4 	bl	8011432 <_ZNK8touchgfx4Rect7isEmptyEv>
 80144ea:	b920      	cbnz	r0, 80144f6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x556>
 80144ec:	6823      	ldr	r3, [r4, #0]
 80144ee:	a907      	add	r1, sp, #28
 80144f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80144f2:	4620      	mov	r0, r4
 80144f4:	4798      	blx	r3
 80144f6:	3501      	adds	r5, #1
 80144f8:	b2ad      	uxth	r5, r5
 80144fa:	e7e7      	b.n	80144cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x52c>
 80144fc:	2001fe88 	.word	0x2001fe88

08014500 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8014500:	2200      	movs	r2, #0
 8014502:	4b03      	ldr	r3, [pc, #12]	; (8014510 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8014504:	801a      	strh	r2, [r3, #0]
 8014506:	805a      	strh	r2, [r3, #2]
 8014508:	809a      	strh	r2, [r3, #4]
 801450a:	80da      	strh	r2, [r3, #6]
 801450c:	4770      	bx	lr
 801450e:	bf00      	nop
 8014510:	2001fecc 	.word	0x2001fecc

08014514 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8014514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014518:	4606      	mov	r6, r0
 801451a:	b09d      	sub	sp, #116	; 0x74
 801451c:	a803      	add	r0, sp, #12
 801451e:	4614      	mov	r4, r2
 8014520:	468a      	mov	sl, r1
 8014522:	461d      	mov	r5, r3
 8014524:	f000 fd72 	bl	801500c <_ZN8touchgfx12TextProviderC1Ev>
 8014528:	6833      	ldr	r3, [r6, #0]
 801452a:	4630      	mov	r0, r6
 801452c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801452e:	4798      	blx	r3
 8014530:	6833      	ldr	r3, [r6, #0]
 8014532:	4607      	mov	r7, r0
 8014534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014536:	4630      	mov	r0, r6
 8014538:	4798      	blx	r3
 801453a:	462a      	mov	r2, r5
 801453c:	2500      	movs	r5, #0
 801453e:	9000      	str	r0, [sp, #0]
 8014540:	4621      	mov	r1, r4
 8014542:	463b      	mov	r3, r7
 8014544:	a803      	add	r0, sp, #12
 8014546:	f000 fdb4 	bl	80150b2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801454a:	462c      	mov	r4, r5
 801454c:	46a9      	mov	r9, r5
 801454e:	46a8      	mov	r8, r5
 8014550:	f242 0b0b 	movw	fp, #8203	; 0x200b
 8014554:	2300      	movs	r3, #0
 8014556:	9302      	str	r3, [sp, #8]
 8014558:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801455c:	429c      	cmp	r4, r3
 801455e:	d002      	beq.n	8014566 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8014560:	455c      	cmp	r4, fp
 8014562:	bf18      	it	ne
 8014564:	4625      	movne	r5, r4
 8014566:	ab02      	add	r3, sp, #8
 8014568:	4632      	mov	r2, r6
 801456a:	4651      	mov	r1, sl
 801456c:	a803      	add	r0, sp, #12
 801456e:	f001 f88f 	bl	8015690 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014572:	4604      	mov	r4, r0
 8014574:	b108      	cbz	r0, 801457a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8014576:	280a      	cmp	r0, #10
 8014578:	d10a      	bne.n	8014590 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801457a:	45c1      	cmp	r9, r8
 801457c:	bf38      	it	cc
 801457e:	46c1      	movcc	r9, r8
 8014580:	f04f 0800 	mov.w	r8, #0
 8014584:	2c00      	cmp	r4, #0
 8014586:	d1e5      	bne.n	8014554 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8014588:	4648      	mov	r0, r9
 801458a:	b01d      	add	sp, #116	; 0x74
 801458c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014590:	9a02      	ldr	r2, [sp, #8]
 8014592:	2a00      	cmp	r2, #0
 8014594:	d0de      	beq.n	8014554 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8014596:	7b57      	ldrb	r7, [r2, #13]
 8014598:	6833      	ldr	r3, [r6, #0]
 801459a:	007f      	lsls	r7, r7, #1
 801459c:	f407 7080 	and.w	r0, r7, #256	; 0x100
 80145a0:	7a97      	ldrb	r7, [r2, #10]
 80145a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80145a4:	4307      	orrs	r7, r0
 80145a6:	4629      	mov	r1, r5
 80145a8:	4630      	mov	r0, r6
 80145aa:	8894      	ldrh	r4, [r2, #4]
 80145ac:	4798      	blx	r3
 80145ae:	4438      	add	r0, r7
 80145b0:	4480      	add	r8, r0
 80145b2:	fa1f f888 	uxth.w	r8, r8
 80145b6:	e7e5      	b.n	8014584 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

080145b8 <_ZNK8touchgfx4Font12getCharWidthEt>:
 80145b8:	b508      	push	{r3, lr}
 80145ba:	6803      	ldr	r3, [r0, #0]
 80145bc:	68db      	ldr	r3, [r3, #12]
 80145be:	4798      	blx	r3
 80145c0:	b128      	cbz	r0, 80145ce <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 80145c2:	7b43      	ldrb	r3, [r0, #13]
 80145c4:	7a80      	ldrb	r0, [r0, #10]
 80145c6:	005b      	lsls	r3, r3, #1
 80145c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80145cc:	4318      	orrs	r0, r3
 80145ce:	bd08      	pop	{r3, pc}

080145d0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 80145d0:	b40e      	push	{r1, r2, r3}
 80145d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145d4:	4605      	mov	r5, r0
 80145d6:	b09e      	sub	sp, #120	; 0x78
 80145d8:	ab23      	add	r3, sp, #140	; 0x8c
 80145da:	f853 4b04 	ldr.w	r4, [r3], #4
 80145de:	a805      	add	r0, sp, #20
 80145e0:	9303      	str	r3, [sp, #12]
 80145e2:	f000 fd13 	bl	801500c <_ZN8touchgfx12TextProviderC1Ev>
 80145e6:	682b      	ldr	r3, [r5, #0]
 80145e8:	4628      	mov	r0, r5
 80145ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80145ec:	4798      	blx	r3
 80145ee:	682b      	ldr	r3, [r5, #0]
 80145f0:	4606      	mov	r6, r0
 80145f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80145f4:	4628      	mov	r0, r5
 80145f6:	4798      	blx	r3
 80145f8:	4621      	mov	r1, r4
 80145fa:	2400      	movs	r4, #0
 80145fc:	4633      	mov	r3, r6
 80145fe:	9000      	str	r0, [sp, #0]
 8014600:	9a03      	ldr	r2, [sp, #12]
 8014602:	ae1e      	add	r6, sp, #120	; 0x78
 8014604:	a805      	add	r0, sp, #20
 8014606:	f000 fd54 	bl	80150b2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801460a:	f846 4d68 	str.w	r4, [r6, #-104]!
 801460e:	4633      	mov	r3, r6
 8014610:	462a      	mov	r2, r5
 8014612:	4621      	mov	r1, r4
 8014614:	a805      	add	r0, sp, #20
 8014616:	f001 f83b 	bl	8015690 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801461a:	b1f0      	cbz	r0, 801465a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8a>
 801461c:	280a      	cmp	r0, #10
 801461e:	d018      	beq.n	8014652 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8014620:	9f04      	ldr	r7, [sp, #16]
 8014622:	b1b7      	cbz	r7, 8014652 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x82>
 8014624:	7b78      	ldrb	r0, [r7, #13]
 8014626:	7a3b      	ldrb	r3, [r7, #8]
 8014628:	00c1      	lsls	r1, r0, #3
 801462a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801462e:	4319      	orrs	r1, r3
 8014630:	0643      	lsls	r3, r0, #25
 8014632:	bf44      	itt	mi
 8014634:	f5a1 7300 	submi.w	r3, r1, #512	; 0x200
 8014638:	b219      	sxthmi	r1, r3
 801463a:	0100      	lsls	r0, r0, #4
 801463c:	79fb      	ldrb	r3, [r7, #7]
 801463e:	88ea      	ldrh	r2, [r5, #6]
 8014640:	f400 7080 	and.w	r0, r0, #256	; 0x100
 8014644:	4303      	orrs	r3, r0
 8014646:	4413      	add	r3, r2
 8014648:	1a5b      	subs	r3, r3, r1
 801464a:	b21b      	sxth	r3, r3
 801464c:	429c      	cmp	r4, r3
 801464e:	bfb8      	it	lt
 8014650:	461c      	movlt	r4, r3
 8014652:	4633      	mov	r3, r6
 8014654:	462a      	mov	r2, r5
 8014656:	2100      	movs	r1, #0
 8014658:	e7dc      	b.n	8014614 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 801465a:	b2a0      	uxth	r0, r4
 801465c:	b01e      	add	sp, #120	; 0x78
 801465e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014662:	b003      	add	sp, #12
 8014664:	4770      	bx	lr

08014666 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8014666:	7a43      	ldrb	r3, [r0, #9]
 8014668:	8880      	ldrh	r0, [r0, #4]
 801466a:	4418      	add	r0, r3
 801466c:	b280      	uxth	r0, r0
 801466e:	4770      	bx	lr

08014670 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8014670:	6803      	ldr	r3, [r0, #0]
 8014672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014674:	4718      	bx	r3

08014676 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8014676:	b40e      	push	{r1, r2, r3}
 8014678:	b570      	push	{r4, r5, r6, lr}
 801467a:	4604      	mov	r4, r0
 801467c:	b09d      	sub	sp, #116	; 0x74
 801467e:	ab21      	add	r3, sp, #132	; 0x84
 8014680:	f853 5b04 	ldr.w	r5, [r3], #4
 8014684:	a803      	add	r0, sp, #12
 8014686:	9302      	str	r3, [sp, #8]
 8014688:	f000 fcc0 	bl	801500c <_ZN8touchgfx12TextProviderC1Ev>
 801468c:	6823      	ldr	r3, [r4, #0]
 801468e:	4620      	mov	r0, r4
 8014690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014692:	4798      	blx	r3
 8014694:	6823      	ldr	r3, [r4, #0]
 8014696:	4606      	mov	r6, r0
 8014698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801469a:	4620      	mov	r0, r4
 801469c:	4798      	blx	r3
 801469e:	4633      	mov	r3, r6
 80146a0:	9000      	str	r0, [sp, #0]
 80146a2:	9a02      	ldr	r2, [sp, #8]
 80146a4:	4629      	mov	r1, r5
 80146a6:	a803      	add	r0, sp, #12
 80146a8:	f000 fd03 	bl	80150b2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80146ac:	a803      	add	r0, sp, #12
 80146ae:	f001 f871 	bl	8015794 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80146b2:	2401      	movs	r4, #1
 80146b4:	b2a3      	uxth	r3, r4
 80146b6:	b140      	cbz	r0, 80146ca <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x54>
 80146b8:	280a      	cmp	r0, #10
 80146ba:	bf08      	it	eq
 80146bc:	3301      	addeq	r3, #1
 80146be:	a803      	add	r0, sp, #12
 80146c0:	bf08      	it	eq
 80146c2:	b21c      	sxtheq	r4, r3
 80146c4:	f001 f866 	bl	8015794 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80146c8:	e7f4      	b.n	80146b4 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 80146ca:	4618      	mov	r0, r3
 80146cc:	b01d      	add	sp, #116	; 0x74
 80146ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80146d2:	b003      	add	sp, #12
 80146d4:	4770      	bx	lr

080146d6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 80146d6:	b40e      	push	{r1, r2, r3}
 80146d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80146da:	4604      	mov	r4, r0
 80146dc:	b09e      	sub	sp, #120	; 0x78
 80146de:	ab23      	add	r3, sp, #140	; 0x8c
 80146e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80146e4:	a805      	add	r0, sp, #20
 80146e6:	9303      	str	r3, [sp, #12]
 80146e8:	f000 fc90 	bl	801500c <_ZN8touchgfx12TextProviderC1Ev>
 80146ec:	6823      	ldr	r3, [r4, #0]
 80146ee:	4620      	mov	r0, r4
 80146f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80146f2:	4798      	blx	r3
 80146f4:	6823      	ldr	r3, [r4, #0]
 80146f6:	4606      	mov	r6, r0
 80146f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80146fa:	4620      	mov	r0, r4
 80146fc:	4798      	blx	r3
 80146fe:	4633      	mov	r3, r6
 8014700:	4629      	mov	r1, r5
 8014702:	9000      	str	r0, [sp, #0]
 8014704:	9a03      	ldr	r2, [sp, #12]
 8014706:	a805      	add	r0, sp, #20
 8014708:	f000 fcd3 	bl	80150b2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801470c:	2100      	movs	r1, #0
 801470e:	ad1e      	add	r5, sp, #120	; 0x78
 8014710:	f845 1d68 	str.w	r1, [r5, #-104]!
 8014714:	462b      	mov	r3, r5
 8014716:	4622      	mov	r2, r4
 8014718:	a805      	add	r0, sp, #20
 801471a:	f000 ffb9 	bl	8015690 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801471e:	f647 76ff 	movw	r6, #32767	; 0x7fff
 8014722:	b1d8      	cbz	r0, 801475c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8014724:	280a      	cmp	r0, #10
 8014726:	d012      	beq.n	801474e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8014728:	9804      	ldr	r0, [sp, #16]
 801472a:	b180      	cbz	r0, 801474e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 801472c:	7b47      	ldrb	r7, [r0, #13]
 801472e:	88e2      	ldrh	r2, [r4, #6]
 8014730:	00fb      	lsls	r3, r7, #3
 8014732:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8014736:	7a03      	ldrb	r3, [r0, #8]
 8014738:	430b      	orrs	r3, r1
 801473a:	0679      	lsls	r1, r7, #25
 801473c:	bf44      	itt	mi
 801473e:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8014742:	b21b      	sxthmi	r3, r3
 8014744:	1ad3      	subs	r3, r2, r3
 8014746:	b21b      	sxth	r3, r3
 8014748:	429e      	cmp	r6, r3
 801474a:	bfa8      	it	ge
 801474c:	461e      	movge	r6, r3
 801474e:	462b      	mov	r3, r5
 8014750:	4622      	mov	r2, r4
 8014752:	2100      	movs	r1, #0
 8014754:	a805      	add	r0, sp, #20
 8014756:	f000 ff9b 	bl	8015690 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801475a:	e7e2      	b.n	8014722 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801475c:	4630      	mov	r0, r6
 801475e:	b01e      	add	sp, #120	; 0x78
 8014760:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014764:	b003      	add	sp, #12
 8014766:	4770      	bx	lr

08014768 <_ZNK8touchgfx8Drawable10invalidateEv>:
 8014768:	b513      	push	{r0, r1, r4, lr}
 801476a:	2400      	movs	r4, #0
 801476c:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8014770:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014774:	6803      	ldr	r3, [r0, #0]
 8014776:	f8ad 1004 	strh.w	r1, [sp, #4]
 801477a:	9400      	str	r4, [sp, #0]
 801477c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014780:	691b      	ldr	r3, [r3, #16]
 8014782:	4669      	mov	r1, sp
 8014784:	4798      	blx	r3
 8014786:	b002      	add	sp, #8
 8014788:	bd10      	pop	{r4, pc}

0801478a <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801478a:	b538      	push	{r3, r4, r5, lr}
 801478c:	460c      	mov	r4, r1
 801478e:	4605      	mov	r5, r0
 8014790:	680b      	ldr	r3, [r1, #0]
 8014792:	68db      	ldr	r3, [r3, #12]
 8014794:	4798      	blx	r3
 8014796:	6823      	ldr	r3, [r4, #0]
 8014798:	4620      	mov	r0, r4
 801479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801479c:	4629      	mov	r1, r5
 801479e:	4798      	blx	r3
 80147a0:	4628      	mov	r0, r5
 80147a2:	bd38      	pop	{r3, r4, r5, pc}

080147a4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 80147a4:	b410      	push	{r4}
 80147a6:	880a      	ldrh	r2, [r1, #0]
 80147a8:	8884      	ldrh	r4, [r0, #4]
 80147aa:	4422      	add	r2, r4
 80147ac:	800a      	strh	r2, [r1, #0]
 80147ae:	88c4      	ldrh	r4, [r0, #6]
 80147b0:	884a      	ldrh	r2, [r1, #2]
 80147b2:	4422      	add	r2, r4
 80147b4:	804a      	strh	r2, [r1, #2]
 80147b6:	6940      	ldr	r0, [r0, #20]
 80147b8:	b120      	cbz	r0, 80147c4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 80147ba:	6803      	ldr	r3, [r0, #0]
 80147bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80147c2:	4718      	bx	r3
 80147c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80147c8:	4770      	bx	lr

080147ca <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 80147ca:	b570      	push	{r4, r5, r6, lr}
 80147cc:	460c      	mov	r4, r1
 80147ce:	8882      	ldrh	r2, [r0, #4]
 80147d0:	880b      	ldrh	r3, [r1, #0]
 80147d2:	4605      	mov	r5, r0
 80147d4:	4413      	add	r3, r2
 80147d6:	800b      	strh	r3, [r1, #0]
 80147d8:	88c2      	ldrh	r2, [r0, #6]
 80147da:	884b      	ldrh	r3, [r1, #2]
 80147dc:	4413      	add	r3, r2
 80147de:	804b      	strh	r3, [r1, #2]
 80147e0:	1d01      	adds	r1, r0, #4
 80147e2:	4620      	mov	r0, r4
 80147e4:	f7fc fde2 	bl	80113ac <_ZN8touchgfx4RectaNERKS0_>
 80147e8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	dd0b      	ble.n	8014808 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80147f0:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	dd07      	ble.n	8014808 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80147f8:	6968      	ldr	r0, [r5, #20]
 80147fa:	b128      	cbz	r0, 8014808 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80147fc:	6803      	ldr	r3, [r0, #0]
 80147fe:	4621      	mov	r1, r4
 8014800:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014806:	4718      	bx	r3
 8014808:	bd70      	pop	{r4, r5, r6, pc}
	...

0801480c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801480c:	b570      	push	{r4, r5, r6, lr}
 801480e:	460c      	mov	r4, r1
 8014810:	8882      	ldrh	r2, [r0, #4]
 8014812:	880b      	ldrh	r3, [r1, #0]
 8014814:	4605      	mov	r5, r0
 8014816:	4413      	add	r3, r2
 8014818:	800b      	strh	r3, [r1, #0]
 801481a:	88c2      	ldrh	r2, [r0, #6]
 801481c:	884b      	ldrh	r3, [r1, #2]
 801481e:	4413      	add	r3, r2
 8014820:	804b      	strh	r3, [r1, #2]
 8014822:	1d01      	adds	r1, r0, #4
 8014824:	4620      	mov	r0, r4
 8014826:	f7fc fdc1 	bl	80113ac <_ZN8touchgfx4RectaNERKS0_>
 801482a:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801482e:	2b00      	cmp	r3, #0
 8014830:	dd18      	ble.n	8014864 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8014832:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8014836:	2b00      	cmp	r3, #0
 8014838:	dd14      	ble.n	8014864 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 801483a:	6968      	ldr	r0, [r5, #20]
 801483c:	b128      	cbz	r0, 801484a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 801483e:	6803      	ldr	r3, [r0, #0]
 8014840:	4621      	mov	r1, r4
 8014842:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014846:	691b      	ldr	r3, [r3, #16]
 8014848:	4718      	bx	r3
 801484a:	4b07      	ldr	r3, [pc, #28]	; (8014868 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	3304      	adds	r3, #4
 8014850:	429d      	cmp	r5, r3
 8014852:	d107      	bne.n	8014864 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x58>
 8014854:	f7fe ff44 	bl	80136e0 <_ZN8touchgfx11Application11getInstanceEv>
 8014858:	6821      	ldr	r1, [r4, #0]
 801485a:	6862      	ldr	r2, [r4, #4]
 801485c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014860:	f7ff b85e 	b.w	8013920 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 8014864:	bd70      	pop	{r4, r5, r6, pc}
 8014866:	bf00      	nop
 8014868:	2001fec4 	.word	0x2001fec4

0801486c <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801486c:	b570      	push	{r4, r5, r6, lr}
 801486e:	4604      	mov	r4, r0
 8014870:	4616      	mov	r6, r2
 8014872:	460d      	mov	r5, r1
 8014874:	b901      	cbnz	r1, 8014878 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8014876:	b192      	cbz	r2, 801489e <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8014878:	6823      	ldr	r3, [r4, #0]
 801487a:	4620      	mov	r0, r4
 801487c:	699b      	ldr	r3, [r3, #24]
 801487e:	4798      	blx	r3
 8014880:	88e2      	ldrh	r2, [r4, #6]
 8014882:	88a1      	ldrh	r1, [r4, #4]
 8014884:	4432      	add	r2, r6
 8014886:	4429      	add	r1, r5
 8014888:	4620      	mov	r0, r4
 801488a:	b212      	sxth	r2, r2
 801488c:	b209      	sxth	r1, r1
 801488e:	f7fa f92a 	bl	800eae6 <_ZN8touchgfx8Drawable5setXYEss>
 8014892:	6823      	ldr	r3, [r4, #0]
 8014894:	4620      	mov	r0, r4
 8014896:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801489a:	699b      	ldr	r3, [r3, #24]
 801489c:	4718      	bx	r3
 801489e:	bd70      	pop	{r4, r5, r6, pc}

080148a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 80148a0:	b510      	push	{r4, lr}
 80148a2:	2300      	movs	r3, #0
 80148a4:	4604      	mov	r4, r0
 80148a6:	4608      	mov	r0, r1
 80148a8:	8023      	strh	r3, [r4, #0]
 80148aa:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80148ae:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 80148b2:	8063      	strh	r3, [r4, #2]
 80148b4:	6803      	ldr	r3, [r0, #0]
 80148b6:	80a1      	strh	r1, [r4, #4]
 80148b8:	80e2      	strh	r2, [r4, #6]
 80148ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80148bc:	4621      	mov	r1, r4
 80148be:	4798      	blx	r3
 80148c0:	4620      	mov	r0, r4
 80148c2:	bd10      	pop	{r4, pc}

080148c4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 80148c4:	b530      	push	{r4, r5, lr}
 80148c6:	8083      	strh	r3, [r0, #4]
 80148c8:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80148cc:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80148d0:	80c3      	strh	r3, [r0, #6]
 80148d2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80148d6:	6141      	str	r1, [r0, #20]
 80148d8:	7203      	strb	r3, [r0, #8]
 80148da:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80148de:	8302      	strh	r2, [r0, #24]
 80148e0:	7243      	strb	r3, [r0, #9]
 80148e2:	7a83      	ldrb	r3, [r0, #10]
 80148e4:	f365 0306 	bfi	r3, r5, #0, #7
 80148e8:	f89d 501c 	ldrb.w	r5, [sp, #28]
 80148ec:	f365 13c7 	bfi	r3, r5, #7, #1
 80148f0:	7283      	strb	r3, [r0, #10]
 80148f2:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80148f6:	72c3      	strb	r3, [r0, #11]
 80148f8:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80148fc:	7303      	strb	r3, [r0, #12]
 80148fe:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
 8014902:	81c3      	strh	r3, [r0, #14]
 8014904:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8014908:	8203      	strh	r3, [r0, #16]
 801490a:	4b01      	ldr	r3, [pc, #4]	; (8014910 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 801490c:	6003      	str	r3, [r0, #0]
 801490e:	bd30      	pop	{r4, r5, pc}
 8014910:	080243c0 	.word	0x080243c0

08014914 <_ZNK8touchgfx9ConstFont4findEt>:
 8014914:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014916:	6944      	ldr	r4, [r0, #20]
 8014918:	b3bc      	cbz	r4, 801498a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801491a:	88a3      	ldrh	r3, [r4, #4]
 801491c:	8b02      	ldrh	r2, [r0, #24]
 801491e:	1acb      	subs	r3, r1, r3
 8014920:	f102 32ff 	add.w	r2, r2, #4294967295
 8014924:	d431      	bmi.n	801498a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014926:	4293      	cmp	r3, r2
 8014928:	dd0c      	ble.n	8014944 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 801492a:	230e      	movs	r3, #14
 801492c:	fb03 4302 	mla	r3, r3, r2, r4
 8014930:	889b      	ldrh	r3, [r3, #4]
 8014932:	1a5b      	subs	r3, r3, r1
 8014934:	1ad3      	subs	r3, r2, r3
 8014936:	429a      	cmp	r2, r3
 8014938:	db27      	blt.n	801498a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801493a:	2b00      	cmp	r3, #0
 801493c:	bfbc      	itt	lt
 801493e:	2302      	movlt	r3, #2
 8014940:	fb92 f3f3 	sdivlt	r3, r2, r3
 8014944:	2500      	movs	r5, #0
 8014946:	260e      	movs	r6, #14
 8014948:	4295      	cmp	r5, r2
 801494a:	dc1e      	bgt.n	801498a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801494c:	fb06 4003 	mla	r0, r6, r3, r4
 8014950:	8887      	ldrh	r7, [r0, #4]
 8014952:	42b9      	cmp	r1, r7
 8014954:	d01a      	beq.n	801498c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8014956:	d20d      	bcs.n	8014974 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8014958:	1e5a      	subs	r2, r3, #1
 801495a:	4295      	cmp	r5, r2
 801495c:	dc15      	bgt.n	801498a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801495e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8014962:	1a5b      	subs	r3, r3, r1
 8014964:	1ad3      	subs	r3, r2, r3
 8014966:	429a      	cmp	r2, r3
 8014968:	db0f      	blt.n	801498a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801496a:	429d      	cmp	r5, r3
 801496c:	ddec      	ble.n	8014948 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801496e:	1953      	adds	r3, r2, r5
 8014970:	105b      	asrs	r3, r3, #1
 8014972:	e7e9      	b.n	8014948 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8014974:	1c5d      	adds	r5, r3, #1
 8014976:	42aa      	cmp	r2, r5
 8014978:	db07      	blt.n	801498a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801497a:	8a43      	ldrh	r3, [r0, #18]
 801497c:	1acb      	subs	r3, r1, r3
 801497e:	442b      	add	r3, r5
 8014980:	429d      	cmp	r5, r3
 8014982:	dc02      	bgt.n	801498a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014984:	429a      	cmp	r2, r3
 8014986:	dadf      	bge.n	8014948 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8014988:	e7f1      	b.n	801496e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 801498a:	2000      	movs	r0, #0
 801498c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801498e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801498e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014990:	4604      	mov	r4, r0
 8014992:	4617      	mov	r7, r2
 8014994:	461e      	mov	r6, r3
 8014996:	b911      	cbnz	r1, 801499e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8014998:	2500      	movs	r5, #0
 801499a:	4628      	mov	r0, r5
 801499c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801499e:	290a      	cmp	r1, #10
 80149a0:	d0fa      	beq.n	8014998 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80149a2:	f64f 62ff 	movw	r2, #65279	; 0xfeff
 80149a6:	4291      	cmp	r1, r2
 80149a8:	d0f6      	beq.n	8014998 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80149aa:	f242 020b 	movw	r2, #8203	; 0x200b
 80149ae:	4291      	cmp	r1, r2
 80149b0:	d0f2      	beq.n	8014998 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80149b2:	f7ff ffaf 	bl	8014914 <_ZNK8touchgfx9ConstFont4findEt>
 80149b6:	4605      	mov	r5, r0
 80149b8:	b950      	cbnz	r0, 80149d0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 80149ba:	6823      	ldr	r3, [r4, #0]
 80149bc:	4620      	mov	r0, r4
 80149be:	691b      	ldr	r3, [r3, #16]
 80149c0:	4798      	blx	r3
 80149c2:	4601      	mov	r1, r0
 80149c4:	4620      	mov	r0, r4
 80149c6:	f7ff ffa5 	bl	8014914 <_ZNK8touchgfx9ConstFont4findEt>
 80149ca:	4605      	mov	r5, r0
 80149cc:	2800      	cmp	r0, #0
 80149ce:	d0e3      	beq.n	8014998 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80149d0:	6823      	ldr	r3, [r4, #0]
 80149d2:	4629      	mov	r1, r5
 80149d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80149d6:	4620      	mov	r0, r4
 80149d8:	4798      	blx	r3
 80149da:	6038      	str	r0, [r7, #0]
 80149dc:	6823      	ldr	r3, [r4, #0]
 80149de:	4620      	mov	r0, r4
 80149e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80149e2:	4798      	blx	r3
 80149e4:	7030      	strb	r0, [r6, #0]
 80149e6:	e7d8      	b.n	801499a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080149e8 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80149e8:	2000      	movs	r0, #0
 80149ea:	4770      	bx	lr

080149ec <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 80149ec:	2001      	movs	r0, #1
 80149ee:	4770      	bx	lr

080149f0 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 80149f0:	2002      	movs	r0, #2
 80149f2:	4770      	bx	lr

080149f4 <_ZN8touchgfx12GestureEventD1Ev>:
 80149f4:	4770      	bx	lr

080149f6 <_ZN8touchgfx9DragEventD1Ev>:
 80149f6:	4770      	bx	lr

080149f8 <_ZN8touchgfx10ClickEventD1Ev>:
 80149f8:	4770      	bx	lr

080149fa <_ZN8touchgfx10ClickEventD0Ev>:
 80149fa:	b510      	push	{r4, lr}
 80149fc:	4604      	mov	r4, r0
 80149fe:	210c      	movs	r1, #12
 8014a00:	f00d f85f 	bl	8021ac2 <_ZdlPvj>
 8014a04:	4620      	mov	r0, r4
 8014a06:	bd10      	pop	{r4, pc}

08014a08 <_ZN8touchgfx9DragEventD0Ev>:
 8014a08:	b510      	push	{r4, lr}
 8014a0a:	4604      	mov	r4, r0
 8014a0c:	2110      	movs	r1, #16
 8014a0e:	f00d f858 	bl	8021ac2 <_ZdlPvj>
 8014a12:	4620      	mov	r0, r4
 8014a14:	bd10      	pop	{r4, pc}

08014a16 <_ZN8touchgfx12GestureEventD0Ev>:
 8014a16:	b510      	push	{r4, lr}
 8014a18:	4604      	mov	r4, r0
 8014a1a:	210c      	movs	r1, #12
 8014a1c:	f00d f851 	bl	8021ac2 <_ZdlPvj>
 8014a20:	4620      	mov	r0, r4
 8014a22:	bd10      	pop	{r4, pc}

08014a24 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8014a24:	b530      	push	{r4, r5, lr}
 8014a26:	460d      	mov	r5, r1
 8014a28:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8014a2a:	b087      	sub	sp, #28
 8014a2c:	4604      	mov	r4, r0
 8014a2e:	b301      	cbz	r1, 8014a72 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8014a30:	a801      	add	r0, sp, #4
 8014a32:	f7ff ff35 	bl	80148a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014a36:	892a      	ldrh	r2, [r5, #8]
 8014a38:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014a3c:	7928      	ldrb	r0, [r5, #4]
 8014a3e:	1ad2      	subs	r2, r2, r3
 8014a40:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8014a42:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8014a46:	441a      	add	r2, r3
 8014a48:	896b      	ldrh	r3, [r5, #10]
 8014a4a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8014a4e:	f88d 0010 	strb.w	r0, [sp, #16]
 8014a52:	1b5b      	subs	r3, r3, r5
 8014a54:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 8014a56:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8014a58:	442b      	add	r3, r5
 8014a5a:	4d07      	ldr	r5, [pc, #28]	; (8014a78 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8014a5c:	f8ad 1012 	strh.w	r1, [sp, #18]
 8014a60:	9503      	str	r5, [sp, #12]
 8014a62:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014a66:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014a6a:	6803      	ldr	r3, [r0, #0]
 8014a6c:	a903      	add	r1, sp, #12
 8014a6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8014a70:	4798      	blx	r3
 8014a72:	b007      	add	sp, #28
 8014a74:	bd30      	pop	{r4, r5, pc}
 8014a76:	bf00      	nop
 8014a78:	08024448 	.word	0x08024448

08014a7c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8014a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014a80:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8014a82:	b08a      	sub	sp, #40	; 0x28
 8014a84:	4604      	mov	r4, r0
 8014a86:	460d      	mov	r5, r1
 8014a88:	b113      	cbz	r3, 8014a90 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8014a8a:	790b      	ldrb	r3, [r1, #4]
 8014a8c:	2b00      	cmp	r3, #0
 8014a8e:	d044      	beq.n	8014b1a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8014a90:	f104 0804 	add.w	r8, r4, #4
 8014a94:	4641      	mov	r1, r8
 8014a96:	a803      	add	r0, sp, #12
 8014a98:	f7ff ff02 	bl	80148a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014a9c:	792b      	ldrb	r3, [r5, #4]
 8014a9e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8014aa2:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8014aa6:	b983      	cbnz	r3, 8014aca <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8014aa8:	892a      	ldrh	r2, [r5, #8]
 8014aaa:	88e9      	ldrh	r1, [r5, #6]
 8014aac:	f104 0336 	add.w	r3, r4, #54	; 0x36
 8014ab0:	1b92      	subs	r2, r2, r6
 8014ab2:	1bc9      	subs	r1, r1, r7
 8014ab4:	9301      	str	r3, [sp, #4]
 8014ab6:	f104 0334 	add.w	r3, r4, #52	; 0x34
 8014aba:	9300      	str	r3, [sp, #0]
 8014abc:	b212      	sxth	r2, r2
 8014abe:	f104 0330 	add.w	r3, r4, #48	; 0x30
 8014ac2:	b209      	sxth	r1, r1
 8014ac4:	4640      	mov	r0, r8
 8014ac6:	f7fc fb91 	bl	80111ec <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8014aca:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8014acc:	b329      	cbz	r1, 8014b1a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8014ace:	a805      	add	r0, sp, #20
 8014ad0:	f7ff fee6 	bl	80148a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014ad4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8014ad8:	792b      	ldrb	r3, [r5, #4]
 8014ada:	1abf      	subs	r7, r7, r2
 8014adc:	88ea      	ldrh	r2, [r5, #6]
 8014ade:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8014ae0:	4417      	add	r7, r2
 8014ae2:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
 8014ae4:	f88d 3020 	strb.w	r3, [sp, #32]
 8014ae8:	4417      	add	r7, r2
 8014aea:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8014aee:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8014af2:	1ab6      	subs	r6, r6, r2
 8014af4:	892a      	ldrh	r2, [r5, #8]
 8014af6:	a907      	add	r1, sp, #28
 8014af8:	4416      	add	r6, r2
 8014afa:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8014afc:	4416      	add	r6, r2
 8014afe:	f8ad 6024 	strh.w	r6, [sp, #36]	; 0x24
 8014b02:	2600      	movs	r6, #0
 8014b04:	4a06      	ldr	r2, [pc, #24]	; (8014b20 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8014b06:	f8ad 6026 	strh.w	r6, [sp, #38]	; 0x26
 8014b0a:	9207      	str	r2, [sp, #28]
 8014b0c:	6803      	ldr	r3, [r0, #0]
 8014b0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014b10:	4798      	blx	r3
 8014b12:	792b      	ldrb	r3, [r5, #4]
 8014b14:	b10b      	cbz	r3, 8014b1a <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8014b16:	e9c4 660c 	strd	r6, r6, [r4, #48]	; 0x30
 8014b1a:	b00a      	add	sp, #40	; 0x28
 8014b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014b20:	08024420 	.word	0x08024420

08014b24 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8014b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014b28:	460c      	mov	r4, r1
 8014b2a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8014b2c:	b088      	sub	sp, #32
 8014b2e:	4605      	mov	r5, r0
 8014b30:	2900      	cmp	r1, #0
 8014b32:	d06d      	beq.n	8014c10 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8014b34:	4668      	mov	r0, sp
 8014b36:	f7ff feb3 	bl	80148a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014b3a:	8ea9      	ldrh	r1, [r5, #52]	; 0x34
 8014b3c:	88e3      	ldrh	r3, [r4, #6]
 8014b3e:	f9bd 8000 	ldrsh.w	r8, [sp]
 8014b42:	440b      	add	r3, r1
 8014b44:	b21b      	sxth	r3, r3
 8014b46:	4543      	cmp	r3, r8
 8014b48:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8014b4c:	db31      	blt.n	8014bb2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014b4e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8014b52:	44c4      	add	ip, r8
 8014b54:	fa0f fc8c 	sxth.w	ip, ip
 8014b58:	4563      	cmp	r3, ip
 8014b5a:	da2a      	bge.n	8014bb2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014b5c:	8eea      	ldrh	r2, [r5, #54]	; 0x36
 8014b5e:	8926      	ldrh	r6, [r4, #8]
 8014b60:	4416      	add	r6, r2
 8014b62:	b236      	sxth	r6, r6
 8014b64:	42be      	cmp	r6, r7
 8014b66:	db24      	blt.n	8014bb2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014b68:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8014b6c:	4438      	add	r0, r7
 8014b6e:	b200      	sxth	r0, r0
 8014b70:	4286      	cmp	r6, r0
 8014b72:	da1e      	bge.n	8014bb2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014b74:	8963      	ldrh	r3, [r4, #10]
 8014b76:	4419      	add	r1, r3
 8014b78:	b209      	sxth	r1, r1
 8014b7a:	4541      	cmp	r1, r8
 8014b7c:	db08      	blt.n	8014b90 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8014b7e:	4561      	cmp	r1, ip
 8014b80:	da06      	bge.n	8014b90 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8014b82:	89a3      	ldrh	r3, [r4, #12]
 8014b84:	441a      	add	r2, r3
 8014b86:	b212      	sxth	r2, r2
 8014b88:	42ba      	cmp	r2, r7
 8014b8a:	db01      	blt.n	8014b90 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8014b8c:	4282      	cmp	r2, r0
 8014b8e:	db10      	blt.n	8014bb2 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014b90:	4b21      	ldr	r3, [pc, #132]	; (8014c18 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8014b92:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8014b94:	9304      	str	r3, [sp, #16]
 8014b96:	2302      	movs	r3, #2
 8014b98:	f88d 3014 	strb.w	r3, [sp, #20]
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014ba2:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014ba6:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014baa:	6803      	ldr	r3, [r0, #0]
 8014bac:	a904      	add	r1, sp, #16
 8014bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014bb0:	4798      	blx	r3
 8014bb2:	1d29      	adds	r1, r5, #4
 8014bb4:	a802      	add	r0, sp, #8
 8014bb6:	f7ff fe73 	bl	80148a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014bba:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8014bbe:	88e0      	ldrh	r0, [r4, #6]
 8014bc0:	eba3 0808 	sub.w	r8, r3, r8
 8014bc4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8014bc8:	7921      	ldrb	r1, [r4, #4]
 8014bca:	1bdf      	subs	r7, r3, r7
 8014bcc:	b2bb      	uxth	r3, r7
 8014bce:	f8b5 c034 	ldrh.w	ip, [r5, #52]	; 0x34
 8014bd2:	fa1f f888 	uxth.w	r8, r8
 8014bd6:	8922      	ldrh	r2, [r4, #8]
 8014bd8:	8967      	ldrh	r7, [r4, #10]
 8014bda:	89a4      	ldrh	r4, [r4, #12]
 8014bdc:	4440      	add	r0, r8
 8014bde:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 8014be0:	4460      	add	r0, ip
 8014be2:	441a      	add	r2, r3
 8014be4:	44b8      	add	r8, r7
 8014be6:	4423      	add	r3, r4
 8014be8:	4c0c      	ldr	r4, [pc, #48]	; (8014c1c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8014bea:	f8ad 0016 	strh.w	r0, [sp, #22]
 8014bee:	4433      	add	r3, r6
 8014bf0:	4432      	add	r2, r6
 8014bf2:	44e0      	add	r8, ip
 8014bf4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8014bf6:	f88d 1014 	strb.w	r1, [sp, #20]
 8014bfa:	9404      	str	r4, [sp, #16]
 8014bfc:	f8ad 2018 	strh.w	r2, [sp, #24]
 8014c00:	f8ad 801a 	strh.w	r8, [sp, #26]
 8014c04:	f8ad 301c 	strh.w	r3, [sp, #28]
 8014c08:	6803      	ldr	r3, [r0, #0]
 8014c0a:	a904      	add	r1, sp, #16
 8014c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8014c0e:	4798      	blx	r3
 8014c10:	b008      	add	sp, #32
 8014c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014c16:	bf00      	nop
 8014c18:	08024420 	.word	0x08024420
 8014c1c:	08024434 	.word	0x08024434

08014c20 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8014c20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014c22:	4604      	mov	r4, r0
 8014c24:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8014c28:	3201      	adds	r2, #1
 8014c2a:	d112      	bne.n	8014c52 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8014c2c:	2500      	movs	r5, #0
 8014c2e:	9500      	str	r5, [sp, #0]
 8014c30:	466d      	mov	r5, sp
 8014c32:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8014c36:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014c3a:	6803      	ldr	r3, [r0, #0]
 8014c3c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8014c40:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014c44:	4629      	mov	r1, r5
 8014c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014c48:	4798      	blx	r3
 8014c4a:	e895 0003 	ldmia.w	r5, {r0, r1}
 8014c4e:	e884 0003 	stmia.w	r4, {r0, r1}
 8014c52:	4620      	mov	r0, r4
 8014c54:	b003      	add	sp, #12
 8014c56:	bd30      	pop	{r4, r5, pc}

08014c58 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8014c58:	b513      	push	{r0, r1, r4, lr}
 8014c5a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8014c5e:	4604      	mov	r4, r0
 8014c60:	3301      	adds	r3, #1
 8014c62:	d109      	bne.n	8014c78 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8014c64:	4601      	mov	r1, r0
 8014c66:	4668      	mov	r0, sp
 8014c68:	f7ff fe1a 	bl	80148a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014c6c:	f8bd 3000 	ldrh.w	r3, [sp]
 8014c70:	8423      	strh	r3, [r4, #32]
 8014c72:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014c76:	8463      	strh	r3, [r4, #34]	; 0x22
 8014c78:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8014c7c:	b002      	add	sp, #8
 8014c7e:	bd10      	pop	{r4, pc}

08014c80 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8014c80:	b513      	push	{r0, r1, r4, lr}
 8014c82:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8014c86:	4604      	mov	r4, r0
 8014c88:	3301      	adds	r3, #1
 8014c8a:	d109      	bne.n	8014ca0 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8014c8c:	4601      	mov	r1, r0
 8014c8e:	4668      	mov	r0, sp
 8014c90:	f7ff fe06 	bl	80148a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014c94:	f8bd 3000 	ldrh.w	r3, [sp]
 8014c98:	8423      	strh	r3, [r4, #32]
 8014c9a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014c9e:	8463      	strh	r3, [r4, #34]	; 0x22
 8014ca0:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 8014ca4:	b002      	add	sp, #8
 8014ca6:	bd10      	pop	{r4, pc}

08014ca8 <_ZN8touchgfx6ScreenC1Ev>:
 8014ca8:	b570      	push	{r4, r5, r6, lr}
 8014caa:	4605      	mov	r5, r0
 8014cac:	4b16      	ldr	r3, [pc, #88]	; (8014d08 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 8014cae:	2101      	movs	r1, #1
 8014cb0:	f845 3b04 	str.w	r3, [r5], #4
 8014cb4:	2300      	movs	r3, #0
 8014cb6:	4604      	mov	r4, r0
 8014cb8:	8103      	strh	r3, [r0, #8]
 8014cba:	8143      	strh	r3, [r0, #10]
 8014cbc:	8183      	strh	r3, [r0, #12]
 8014cbe:	81c3      	strh	r3, [r0, #14]
 8014cc0:	8203      	strh	r3, [r0, #16]
 8014cc2:	8243      	strh	r3, [r0, #18]
 8014cc4:	8283      	strh	r3, [r0, #20]
 8014cc6:	82c3      	strh	r3, [r0, #22]
 8014cc8:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8014ccc:	6203      	str	r3, [r0, #32]
 8014cce:	8483      	strh	r3, [r0, #36]	; 0x24
 8014cd0:	84c3      	strh	r3, [r0, #38]	; 0x26
 8014cd2:	f880 3028 	strb.w	r3, [r0, #40]	; 0x28
 8014cd6:	4a0d      	ldr	r2, [pc, #52]	; (8014d0c <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8014cd8:	e9c0 330b 	strd	r3, r3, [r0, #44]	; 0x2c
 8014cdc:	6343      	str	r3, [r0, #52]	; 0x34
 8014cde:	4b0c      	ldr	r3, [pc, #48]	; (8014d10 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8014ce0:	6042      	str	r2, [r0, #4]
 8014ce2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014ce6:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8014ce8:	4a0a      	ldr	r2, [pc, #40]	; (8014d14 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8014cea:	f880 1029 	strb.w	r1, [r0, #41]	; 0x29
 8014cee:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8014cf2:	f9b2 1000 	ldrsh.w	r1, [r2]
 8014cf6:	4628      	mov	r0, r5
 8014cf8:	4798      	blx	r3
 8014cfa:	6863      	ldr	r3, [r4, #4]
 8014cfc:	4628      	mov	r0, r5
 8014cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8014d00:	4631      	mov	r1, r6
 8014d02:	4798      	blx	r3
 8014d04:	4620      	mov	r0, r4
 8014d06:	bd70      	pop	{r4, r5, r6, pc}
 8014d08:	0802445c 	.word	0x0802445c
 8014d0c:	08023f14 	.word	0x08023f14
 8014d10:	2001fe7e 	.word	0x2001fe7e
 8014d14:	2001fe7c 	.word	0x2001fe7c

08014d18 <_ZN8touchgfx6Screen4drawEv>:
 8014d18:	b507      	push	{r0, r1, r2, lr}
 8014d1a:	2100      	movs	r1, #0
 8014d1c:	4b08      	ldr	r3, [pc, #32]	; (8014d40 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8014d1e:	9100      	str	r1, [sp, #0]
 8014d20:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014d24:	4b07      	ldr	r3, [pc, #28]	; (8014d44 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8014d26:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014d2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014d2e:	4669      	mov	r1, sp
 8014d30:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014d34:	6803      	ldr	r3, [r0, #0]
 8014d36:	689b      	ldr	r3, [r3, #8]
 8014d38:	4798      	blx	r3
 8014d3a:	b003      	add	sp, #12
 8014d3c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014d40:	2001fe7c 	.word	0x2001fe7c
 8014d44:	2001fe7e 	.word	0x2001fe7e

08014d48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8014d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d4c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8014d50:	b089      	sub	sp, #36	; 0x24
 8014d52:	2b00      	cmp	r3, #0
 8014d54:	4680      	mov	r8, r0
 8014d56:	460c      	mov	r4, r1
 8014d58:	4615      	mov	r5, r2
 8014d5a:	dd0e      	ble.n	8014d7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014d5c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8014d60:	2b00      	cmp	r3, #0
 8014d62:	dd0a      	ble.n	8014d7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014d64:	4628      	mov	r0, r5
 8014d66:	f7ff ff5b 	bl	8014c20 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8014d6a:	4621      	mov	r1, r4
 8014d6c:	f7fe fbda 	bl	8013524 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014d70:	69eb      	ldr	r3, [r5, #28]
 8014d72:	b928      	cbnz	r0, 8014d80 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8014d74:	461d      	mov	r5, r3
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d1f4      	bne.n	8014d64 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8014d7a:	b009      	add	sp, #36	; 0x24
 8014d7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d80:	ae04      	add	r6, sp, #16
 8014d82:	2b00      	cmp	r3, #0
 8014d84:	f000 80b5 	beq.w	8014ef2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8014d88:	682b      	ldr	r3, [r5, #0]
 8014d8a:	4629      	mov	r1, r5
 8014d8c:	68db      	ldr	r3, [r3, #12]
 8014d8e:	a802      	add	r0, sp, #8
 8014d90:	4798      	blx	r3
 8014d92:	4628      	mov	r0, r5
 8014d94:	f7ff ff60 	bl	8014c58 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8014d98:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 8014d9c:	4407      	add	r7, r0
 8014d9e:	4628      	mov	r0, r5
 8014da0:	f7ff ff6e 	bl	8014c80 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8014da4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8014da8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8014dac:	4418      	add	r0, r3
 8014dae:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8014db2:	4621      	mov	r1, r4
 8014db4:	f8ad 0012 	strh.w	r0, [sp, #18]
 8014db8:	b23f      	sxth	r7, r7
 8014dba:	4630      	mov	r0, r6
 8014dbc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014dc0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014dc4:	f8ad 7010 	strh.w	r7, [sp, #16]
 8014dc8:	f7fc faf0 	bl	80113ac <_ZN8touchgfx4RectaNERKS0_>
 8014dcc:	4628      	mov	r0, r5
 8014dce:	f7ff ff27 	bl	8014c20 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8014dd2:	4602      	mov	r2, r0
 8014dd4:	e896 0003 	ldmia.w	r6, {r0, r1}
 8014dd8:	ab06      	add	r3, sp, #24
 8014dda:	e883 0003 	stmia.w	r3, {r0, r1}
 8014dde:	4611      	mov	r1, r2
 8014de0:	4618      	mov	r0, r3
 8014de2:	f7fc fae3 	bl	80113ac <_ZN8touchgfx4RectaNERKS0_>
 8014de6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8014dea:	f9b4 1000 	ldrsh.w	r1, [r4]
 8014dee:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8014df2:	4299      	cmp	r1, r3
 8014df4:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8014df8:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8014dfc:	d10b      	bne.n	8014e16 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8014dfe:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8014e02:	4552      	cmp	r2, sl
 8014e04:	d107      	bne.n	8014e16 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8014e06:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8014e0a:	455a      	cmp	r2, fp
 8014e0c:	d103      	bne.n	8014e16 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8014e0e:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8014e12:	454a      	cmp	r2, r9
 8014e14:	d06d      	beq.n	8014ef2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8014e16:	f1bb 0f00 	cmp.w	fp, #0
 8014e1a:	dd65      	ble.n	8014ee8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8014e1c:	f1b9 0f00 	cmp.w	r9, #0
 8014e20:	dd62      	ble.n	8014ee8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8014e22:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8014e26:	fa1f f08a 	uxth.w	r0, sl
 8014e2a:	4552      	cmp	r2, sl
 8014e2c:	9000      	str	r0, [sp, #0]
 8014e2e:	da12      	bge.n	8014e56 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8014e30:	9301      	str	r3, [sp, #4]
 8014e32:	9b00      	ldr	r3, [sp, #0]
 8014e34:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8014e38:	f8ad 2012 	strh.w	r2, [sp, #18]
 8014e3c:	1a9a      	subs	r2, r3, r2
 8014e3e:	f8ad 1010 	strh.w	r1, [sp, #16]
 8014e42:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014e46:	f8ad 2016 	strh.w	r2, [sp, #22]
 8014e4a:	69ea      	ldr	r2, [r5, #28]
 8014e4c:	4631      	mov	r1, r6
 8014e4e:	4640      	mov	r0, r8
 8014e50:	f7ff ff7a 	bl	8014d48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014e54:	9b01      	ldr	r3, [sp, #4]
 8014e56:	f9b4 2000 	ldrsh.w	r2, [r4]
 8014e5a:	b29f      	uxth	r7, r3
 8014e5c:	429a      	cmp	r2, r3
 8014e5e:	da0d      	bge.n	8014e7c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8014e60:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014e64:	1aba      	subs	r2, r7, r2
 8014e66:	f8ad a012 	strh.w	sl, [sp, #18]
 8014e6a:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014e6e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8014e72:	69ea      	ldr	r2, [r5, #28]
 8014e74:	4631      	mov	r1, r6
 8014e76:	4640      	mov	r0, r8
 8014e78:	f7ff ff66 	bl	8014d48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014e7c:	8822      	ldrh	r2, [r4, #0]
 8014e7e:	88a3      	ldrh	r3, [r4, #4]
 8014e80:	445f      	add	r7, fp
 8014e82:	4413      	add	r3, r2
 8014e84:	b29b      	uxth	r3, r3
 8014e86:	b2bf      	uxth	r7, r7
 8014e88:	b23a      	sxth	r2, r7
 8014e8a:	b219      	sxth	r1, r3
 8014e8c:	4291      	cmp	r1, r2
 8014e8e:	dd0d      	ble.n	8014eac <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8014e90:	1bdb      	subs	r3, r3, r7
 8014e92:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014e96:	f8ad a012 	strh.w	sl, [sp, #18]
 8014e9a:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014e9e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8014ea2:	69ea      	ldr	r2, [r5, #28]
 8014ea4:	4631      	mov	r1, r6
 8014ea6:	4640      	mov	r0, r8
 8014ea8:	f7ff ff4e 	bl	8014d48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014eac:	88e2      	ldrh	r2, [r4, #6]
 8014eae:	8863      	ldrh	r3, [r4, #2]
 8014eb0:	4413      	add	r3, r2
 8014eb2:	9a00      	ldr	r2, [sp, #0]
 8014eb4:	b29b      	uxth	r3, r3
 8014eb6:	444a      	add	r2, r9
 8014eb8:	fa1f f982 	uxth.w	r9, r2
 8014ebc:	fa0f f289 	sxth.w	r2, r9
 8014ec0:	b219      	sxth	r1, r3
 8014ec2:	428a      	cmp	r2, r1
 8014ec4:	da15      	bge.n	8014ef2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8014ec6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8014eca:	f9b4 0000 	ldrsh.w	r0, [r4]
 8014ece:	eba3 0309 	sub.w	r3, r3, r9
 8014ed2:	f8ad 1014 	strh.w	r1, [sp, #20]
 8014ed6:	f8ad 0010 	strh.w	r0, [sp, #16]
 8014eda:	f8ad 2012 	strh.w	r2, [sp, #18]
 8014ede:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014ee2:	69ea      	ldr	r2, [r5, #28]
 8014ee4:	4631      	mov	r1, r6
 8014ee6:	e001      	b.n	8014eec <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8014ee8:	4621      	mov	r1, r4
 8014eea:	69ea      	ldr	r2, [r5, #28]
 8014eec:	4640      	mov	r0, r8
 8014eee:	f7ff ff2b 	bl	8014d48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014ef2:	4628      	mov	r0, r5
 8014ef4:	f7ff fe94 	bl	8014c20 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8014ef8:	4633      	mov	r3, r6
 8014efa:	4602      	mov	r2, r0
 8014efc:	6861      	ldr	r1, [r4, #4]
 8014efe:	6820      	ldr	r0, [r4, #0]
 8014f00:	c303      	stmia	r3!, {r0, r1}
 8014f02:	4611      	mov	r1, r2
 8014f04:	4630      	mov	r0, r6
 8014f06:	f7fc fa51 	bl	80113ac <_ZN8touchgfx4RectaNERKS0_>
 8014f0a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8014f0e:	2b00      	cmp	r3, #0
 8014f10:	f77f af33 	ble.w	8014d7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014f14:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	f77f af2e 	ble.w	8014d7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014f1e:	4628      	mov	r0, r5
 8014f20:	f7ff fe9a 	bl	8014c58 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8014f24:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8014f28:	1a18      	subs	r0, r3, r0
 8014f2a:	f8ad 0010 	strh.w	r0, [sp, #16]
 8014f2e:	4628      	mov	r0, r5
 8014f30:	f7ff fea6 	bl	8014c80 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8014f34:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8014f38:	4631      	mov	r1, r6
 8014f3a:	1a18      	subs	r0, r3, r0
 8014f3c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8014f40:	682b      	ldr	r3, [r5, #0]
 8014f42:	4628      	mov	r0, r5
 8014f44:	689b      	ldr	r3, [r3, #8]
 8014f46:	4798      	blx	r3
 8014f48:	e717      	b.n	8014d7a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08014f4a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8014f4a:	b570      	push	{r4, r5, r6, lr}
 8014f4c:	2300      	movs	r3, #0
 8014f4e:	460c      	mov	r4, r1
 8014f50:	b086      	sub	sp, #24
 8014f52:	1d06      	adds	r6, r0, #4
 8014f54:	4631      	mov	r1, r6
 8014f56:	4605      	mov	r5, r0
 8014f58:	a802      	add	r0, sp, #8
 8014f5a:	9301      	str	r3, [sp, #4]
 8014f5c:	f7ff fca0 	bl	80148a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014f60:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8014f64:	8822      	ldrh	r2, [r4, #0]
 8014f66:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8014f6a:	1ad2      	subs	r2, r2, r3
 8014f6c:	8863      	ldrh	r3, [r4, #2]
 8014f6e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8014f72:	1a5b      	subs	r3, r3, r1
 8014f74:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8014f78:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014f7c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014f80:	f8ad 1016 	strh.w	r1, [sp, #22]
 8014f84:	aa01      	add	r2, sp, #4
 8014f86:	a904      	add	r1, sp, #16
 8014f88:	4630      	mov	r0, r6
 8014f8a:	f8ad 3012 	strh.w	r3, [sp, #18]
 8014f8e:	f7fc fae5 	bl	801155c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8014f92:	9a01      	ldr	r2, [sp, #4]
 8014f94:	b11a      	cbz	r2, 8014f9e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8014f96:	4621      	mov	r1, r4
 8014f98:	4628      	mov	r0, r5
 8014f9a:	f7ff fed5 	bl	8014d48 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014f9e:	b006      	add	sp, #24
 8014fa0:	bd70      	pop	{r4, r5, r6, pc}

08014fa2 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8014fa2:	b530      	push	{r4, r5, lr}
 8014fa4:	4602      	mov	r2, r0
 8014fa6:	b085      	sub	sp, #20
 8014fa8:	460d      	mov	r5, r1
 8014faa:	466b      	mov	r3, sp
 8014fac:	4604      	mov	r4, r0
 8014fae:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8014fb2:	6851      	ldr	r1, [r2, #4]
 8014fb4:	c303      	stmia	r3!, {r0, r1}
 8014fb6:	4629      	mov	r1, r5
 8014fb8:	4668      	mov	r0, sp
 8014fba:	f7fc f9f7 	bl	80113ac <_ZN8touchgfx4RectaNERKS0_>
 8014fbe:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 8014fc2:	b12b      	cbz	r3, 8014fd0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8014fc4:	4669      	mov	r1, sp
 8014fc6:	4620      	mov	r0, r4
 8014fc8:	f7ff ffbf 	bl	8014f4a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8014fcc:	b005      	add	sp, #20
 8014fce:	bd30      	pop	{r4, r5, pc}
 8014fd0:	3404      	adds	r4, #4
 8014fd2:	4621      	mov	r1, r4
 8014fd4:	a802      	add	r0, sp, #8
 8014fd6:	f7ff fc63 	bl	80148a0 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014fda:	f8bd 3000 	ldrh.w	r3, [sp]
 8014fde:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8014fe2:	4669      	mov	r1, sp
 8014fe4:	1a9b      	subs	r3, r3, r2
 8014fe6:	f8ad 3000 	strh.w	r3, [sp]
 8014fea:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8014fee:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014ff2:	4620      	mov	r0, r4
 8014ff4:	1a9b      	subs	r3, r3, r2
 8014ff6:	f8ad 3002 	strh.w	r3, [sp, #2]
 8014ffa:	f7fc fa76 	bl	80114ea <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8014ffe:	e7e5      	b.n	8014fcc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08015000 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8015000:	460b      	mov	r3, r1
 8015002:	680a      	ldr	r2, [r1, #0]
 8015004:	1d01      	adds	r1, r0, #4
 8015006:	6992      	ldr	r2, [r2, #24]
 8015008:	4618      	mov	r0, r3
 801500a:	4710      	bx	r2

0801500c <_ZN8touchgfx12TextProviderC1Ev>:
 801500c:	b538      	push	{r3, r4, r5, lr}
 801500e:	2500      	movs	r5, #0
 8015010:	2302      	movs	r3, #2
 8015012:	4604      	mov	r4, r0
 8015014:	e9c0 5500 	strd	r5, r5, [r0]
 8015018:	7403      	strb	r3, [r0, #16]
 801501a:	6145      	str	r5, [r0, #20]
 801501c:	7605      	strb	r5, [r0, #24]
 801501e:	83c5      	strh	r5, [r0, #30]
 8015020:	8405      	strh	r5, [r0, #32]
 8015022:	86c5      	strh	r5, [r0, #54]	; 0x36
 8015024:	8705      	strh	r5, [r0, #56]	; 0x38
 8015026:	87c5      	strh	r5, [r0, #62]	; 0x3e
 8015028:	f8a0 5040 	strh.w	r5, [r0, #64]	; 0x40
 801502c:	e9c0 5511 	strd	r5, r5, [r0, #68]	; 0x44
 8015030:	220e      	movs	r2, #14
 8015032:	4629      	mov	r1, r5
 8015034:	304c      	adds	r0, #76	; 0x4c
 8015036:	f00c fef6 	bl	8021e26 <memset>
 801503a:	2301      	movs	r3, #1
 801503c:	4620      	mov	r0, r4
 801503e:	f8a4 505a 	strh.w	r5, [r4, #90]	; 0x5a
 8015042:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8015046:	f8a4 505e 	strh.w	r5, [r4, #94]	; 0x5e
 801504a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
 801504e:	f884 5061 	strb.w	r5, [r4, #97]	; 0x61
 8015052:	f7fa fba7 	bl	800f7a4 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8015056:	4620      	mov	r0, r4
 8015058:	bd38      	pop	{r3, r4, r5, pc}

0801505a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801505a:	b530      	push	{r4, r5, lr}
 801505c:	2500      	movs	r5, #0
 801505e:	2401      	movs	r4, #1
 8015060:	6843      	ldr	r3, [r0, #4]
 8015062:	b913      	cbnz	r3, 801506a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8015064:	6803      	ldr	r3, [r0, #0]
 8015066:	b313      	cbz	r3, 80150ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8015068:	6043      	str	r3, [r0, #4]
 801506a:	7e03      	ldrb	r3, [r0, #24]
 801506c:	b143      	cbz	r3, 8015080 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801506e:	6943      	ldr	r3, [r0, #20]
 8015070:	b12b      	cbz	r3, 801507e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8015072:	881a      	ldrh	r2, [r3, #0]
 8015074:	b11a      	cbz	r2, 801507e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8015076:	1c9a      	adds	r2, r3, #2
 8015078:	6142      	str	r2, [r0, #20]
 801507a:	8818      	ldrh	r0, [r3, #0]
 801507c:	bd30      	pop	{r4, r5, pc}
 801507e:	7605      	strb	r5, [r0, #24]
 8015080:	6843      	ldr	r3, [r0, #4]
 8015082:	8819      	ldrh	r1, [r3, #0]
 8015084:	b199      	cbz	r1, 80150ae <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8015086:	1c9a      	adds	r2, r3, #2
 8015088:	2902      	cmp	r1, #2
 801508a:	6042      	str	r2, [r0, #4]
 801508c:	d1f5      	bne.n	801507a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801508e:	7c03      	ldrb	r3, [r0, #16]
 8015090:	2b01      	cmp	r3, #1
 8015092:	d8e5      	bhi.n	8015060 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8015094:	1c5a      	adds	r2, r3, #1
 8015096:	7402      	strb	r2, [r0, #16]
 8015098:	3302      	adds	r3, #2
 801509a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801509e:	6143      	str	r3, [r0, #20]
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d0dd      	beq.n	8015060 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80150a4:	881b      	ldrh	r3, [r3, #0]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d0da      	beq.n	8015060 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80150aa:	7604      	strb	r4, [r0, #24]
 80150ac:	e7d8      	b.n	8015060 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80150ae:	2000      	movs	r0, #0
 80150b0:	e7e4      	b.n	801507c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080150b2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80150b2:	6001      	str	r1, [r0, #0]
 80150b4:	2100      	movs	r1, #0
 80150b6:	b430      	push	{r4, r5}
 80150b8:	6041      	str	r1, [r0, #4]
 80150ba:	6815      	ldr	r5, [r2, #0]
 80150bc:	6085      	str	r5, [r0, #8]
 80150be:	6852      	ldr	r2, [r2, #4]
 80150c0:	6443      	str	r3, [r0, #68]	; 0x44
 80150c2:	9b02      	ldr	r3, [sp, #8]
 80150c4:	60c2      	str	r2, [r0, #12]
 80150c6:	7401      	strb	r1, [r0, #16]
 80150c8:	6141      	str	r1, [r0, #20]
 80150ca:	7601      	strb	r1, [r0, #24]
 80150cc:	8701      	strh	r1, [r0, #56]	; 0x38
 80150ce:	8401      	strh	r1, [r0, #32]
 80150d0:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80150d4:	6483      	str	r3, [r0, #72]	; 0x48
 80150d6:	bc30      	pop	{r4, r5}
 80150d8:	f7fa bb64 	b.w	800f7a4 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080150dc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80150dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150de:	4605      	mov	r5, r0
 80150e0:	4608      	mov	r0, r1
 80150e2:	b1e9      	cbz	r1, 8015120 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x44>
 80150e4:	f105 044c 	add.w	r4, r5, #76	; 0x4c
 80150e8:	460b      	mov	r3, r1
 80150ea:	4622      	mov	r2, r4
 80150ec:	f101 0708 	add.w	r7, r1, #8
 80150f0:	4626      	mov	r6, r4
 80150f2:	6818      	ldr	r0, [r3, #0]
 80150f4:	6859      	ldr	r1, [r3, #4]
 80150f6:	3308      	adds	r3, #8
 80150f8:	c603      	stmia	r6!, {r0, r1}
 80150fa:	42bb      	cmp	r3, r7
 80150fc:	4634      	mov	r4, r6
 80150fe:	d1f7      	bne.n	80150f0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8015100:	6818      	ldr	r0, [r3, #0]
 8015102:	6030      	str	r0, [r6, #0]
 8015104:	4610      	mov	r0, r2
 8015106:	889b      	ldrh	r3, [r3, #4]
 8015108:	80b3      	strh	r3, [r6, #4]
 801510a:	f895 3059 	ldrb.w	r3, [r5, #89]	; 0x59
 801510e:	015b      	lsls	r3, r3, #5
 8015110:	f403 7180 	and.w	r1, r3, #256	; 0x100
 8015114:	f895 3052 	ldrb.w	r3, [r5, #82]	; 0x52
 8015118:	430b      	orrs	r3, r1
 801511a:	425b      	negs	r3, r3
 801511c:	f885 3055 	strb.w	r3, [r5, #85]	; 0x55
 8015120:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015122 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8015122:	b538      	push	{r3, r4, r5, lr}
 8015124:	460c      	mov	r4, r1
 8015126:	6811      	ldr	r1, [r2, #0]
 8015128:	4610      	mov	r0, r2
 801512a:	68cd      	ldr	r5, [r1, #12]
 801512c:	4619      	mov	r1, r3
 801512e:	47a8      	blx	r5
 8015130:	2800      	cmp	r0, #0
 8015132:	bf08      	it	eq
 8015134:	4620      	moveq	r0, r4
 8015136:	bd38      	pop	{r3, r4, r5, pc}

08015138 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8015138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801513a:	4604      	mov	r4, r0
 801513c:	4615      	mov	r5, r2
 801513e:	4608      	mov	r0, r1
 8015140:	b93a      	cbnz	r2, 8015152 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1a>
 8015142:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8015146:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 801514a:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
 801514e:	4628      	mov	r0, r5
 8015150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015152:	f46f 6763 	mvn.w	r7, #3632	; 0xe30
 8015156:	f892 c00d 	ldrb.w	ip, [r2, #13]
 801515a:	8893      	ldrh	r3, [r2, #4]
 801515c:	ea4f 160c 	mov.w	r6, ip, lsl #4
 8015160:	f406 7280 	and.w	r2, r6, #256	; 0x100
 8015164:	79ee      	ldrb	r6, [r5, #7]
 8015166:	4316      	orrs	r6, r2
 8015168:	19da      	adds	r2, r3, r7
 801516a:	b291      	uxth	r1, r2
 801516c:	291d      	cmp	r1, #29
 801516e:	b2b7      	uxth	r7, r6
 8015170:	d879      	bhi.n	8015266 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 8015172:	2201      	movs	r2, #1
 8015174:	408a      	lsls	r2, r1
 8015176:	4974      	ldr	r1, [pc, #464]	; (8015348 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x210>)
 8015178:	10f6      	asrs	r6, r6, #3
 801517a:	420a      	tst	r2, r1
 801517c:	d12d      	bne.n	80151da <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa2>
 801517e:	f412 7f60 	tst.w	r2, #896	; 0x380
 8015182:	d070      	beq.n	8015266 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x12e>
 8015184:	f104 024c 	add.w	r2, r4, #76	; 0x4c
 8015188:	462b      	mov	r3, r5
 801518a:	f105 0e08 	add.w	lr, r5, #8
 801518e:	4615      	mov	r5, r2
 8015190:	4694      	mov	ip, r2
 8015192:	6818      	ldr	r0, [r3, #0]
 8015194:	6859      	ldr	r1, [r3, #4]
 8015196:	3308      	adds	r3, #8
 8015198:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 801519c:	4573      	cmp	r3, lr
 801519e:	4662      	mov	r2, ip
 80151a0:	d1f6      	bne.n	8015190 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 80151a2:	6818      	ldr	r0, [r3, #0]
 80151a4:	f8cc 0000 	str.w	r0, [ip]
 80151a8:	889b      	ldrh	r3, [r3, #4]
 80151aa:	f8ac 3004 	strh.w	r3, [ip, #4]
 80151ae:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80151b2:	b2b3      	uxth	r3, r6
 80151b4:	1aca      	subs	r2, r1, r3
 80151b6:	b292      	uxth	r2, r2
 80151b8:	f894 0059 	ldrb.w	r0, [r4, #89]	; 0x59
 80151bc:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 80151c0:	10d2      	asrs	r2, r2, #3
 80151c2:	f020 0060 	bic.w	r0, r0, #96	; 0x60
 80151c6:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80151ca:	4302      	orrs	r2, r0
 80151cc:	1bcf      	subs	r7, r1, r7
 80151ce:	f884 2059 	strb.w	r2, [r4, #89]	; 0x59
 80151d2:	1afb      	subs	r3, r7, r3
 80151d4:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80151d8:	e7b9      	b.n	801514e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 80151da:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80151dc:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80151e0:	8c59      	ldrh	r1, [r3, #34]	; 0x22
 80151e2:	f640 6333 	movw	r3, #3635	; 0xe33
 80151e6:	4299      	cmp	r1, r3
 80151e8:	d110      	bne.n	801520c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xd4>
 80151ea:	6803      	ldr	r3, [r0, #0]
 80151ec:	68db      	ldr	r3, [r3, #12]
 80151ee:	4798      	blx	r3
 80151f0:	7b41      	ldrb	r1, [r0, #13]
 80151f2:	00cb      	lsls	r3, r1, #3
 80151f4:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80151f8:	7a03      	ldrb	r3, [r0, #8]
 80151fa:	0648      	lsls	r0, r1, #25
 80151fc:	ea43 0302 	orr.w	r3, r3, r2
 8015200:	bf44      	itt	mi
 8015202:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015206:	b21b      	sxthmi	r3, r3
 8015208:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 801520c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8015210:	462a      	mov	r2, r5
 8015212:	443b      	add	r3, r7
 8015214:	4433      	add	r3, r6
 8015216:	f104 064c 	add.w	r6, r4, #76	; 0x4c
 801521a:	f105 0c08 	add.w	ip, r5, #8
 801521e:	4635      	mov	r5, r6
 8015220:	b29b      	uxth	r3, r3
 8015222:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015226:	4637      	mov	r7, r6
 8015228:	6810      	ldr	r0, [r2, #0]
 801522a:	6851      	ldr	r1, [r2, #4]
 801522c:	3208      	adds	r2, #8
 801522e:	c703      	stmia	r7!, {r0, r1}
 8015230:	4562      	cmp	r2, ip
 8015232:	463e      	mov	r6, r7
 8015234:	d1f7      	bne.n	8015226 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xee>
 8015236:	6810      	ldr	r0, [r2, #0]
 8015238:	6038      	str	r0, [r7, #0]
 801523a:	8892      	ldrh	r2, [r2, #4]
 801523c:	80ba      	strh	r2, [r7, #4]
 801523e:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8015242:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 8015246:	10db      	asrs	r3, r3, #3
 8015248:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 801524c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015250:	4313      	orrs	r3, r2
 8015252:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 8015256:	f894 205e 	ldrb.w	r2, [r4, #94]	; 0x5e
 801525a:	f894 3055 	ldrb.w	r3, [r4, #85]	; 0x55
 801525e:	1a9b      	subs	r3, r3, r2
 8015260:	f884 3055 	strb.w	r3, [r4, #85]	; 0x55
 8015264:	e773      	b.n	801514e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x16>
 8015266:	f640 611b 	movw	r1, #3611	; 0xe1b
 801526a:	f023 0204 	bic.w	r2, r3, #4
 801526e:	428a      	cmp	r2, r1
 8015270:	d003      	beq.n	801527a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x142>
 8015272:	f640 621d 	movw	r2, #3613	; 0xe1d
 8015276:	4293      	cmp	r3, r2
 8015278:	d120      	bne.n	80152bc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x184>
 801527a:	3b01      	subs	r3, #1
 801527c:	4602      	mov	r2, r0
 801527e:	b29b      	uxth	r3, r3
 8015280:	4629      	mov	r1, r5
 8015282:	4620      	mov	r0, r4
 8015284:	f7ff ff4d 	bl	8015122 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8015288:	7b41      	ldrb	r1, [r0, #13]
 801528a:	00cb      	lsls	r3, r1, #3
 801528c:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015290:	7a03      	ldrb	r3, [r0, #8]
 8015292:	0649      	lsls	r1, r1, #25
 8015294:	ea43 0302 	orr.w	r3, r3, r2
 8015298:	bf44      	itt	mi
 801529a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801529e:	b21b      	sxthmi	r3, r3
 80152a0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80152a4:	7b6b      	ldrb	r3, [r5, #13]
 80152a6:	7aaa      	ldrb	r2, [r5, #10]
 80152a8:	005b      	lsls	r3, r3, #1
 80152aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80152ae:	4313      	orrs	r3, r2
 80152b0:	115a      	asrs	r2, r3, #5
 80152b2:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80152b6:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 80152ba:	e036      	b.n	801532a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f2>
 80152bc:	ea4f 02cc 	mov.w	r2, ip, lsl #3
 80152c0:	f402 7180 	and.w	r1, r2, #256	; 0x100
 80152c4:	7a2a      	ldrb	r2, [r5, #8]
 80152c6:	f01c 0f40 	tst.w	ip, #64	; 0x40
 80152ca:	ea42 0201 	orr.w	r2, r2, r1
 80152ce:	f640 6109 	movw	r1, #3593	; 0xe09
 80152d2:	bf1c      	itt	ne
 80152d4:	f5a2 7200 	subne.w	r2, r2, #512	; 0x200
 80152d8:	b212      	sxthne	r2, r2
 80152da:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 80152de:	f023 0210 	bic.w	r2, r3, #16
 80152e2:	428a      	cmp	r2, r1
 80152e4:	d003      	beq.n	80152ee <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1b6>
 80152e6:	f640 6213 	movw	r2, #3603	; 0xe13
 80152ea:	4293      	cmp	r3, r2
 80152ec:	d12a      	bne.n	8015344 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x20c>
 80152ee:	7b6e      	ldrb	r6, [r5, #13]
 80152f0:	4629      	mov	r1, r5
 80152f2:	0076      	lsls	r6, r6, #1
 80152f4:	f406 7280 	and.w	r2, r6, #256	; 0x100
 80152f8:	7aae      	ldrb	r6, [r5, #10]
 80152fa:	4316      	orrs	r6, r2
 80152fc:	f640 6213 	movw	r2, #3603	; 0xe13
 8015300:	4293      	cmp	r3, r2
 8015302:	bf18      	it	ne
 8015304:	f103 33ff 	addne.w	r3, r3, #4294967295
 8015308:	4602      	mov	r2, r0
 801530a:	bf14      	ite	ne
 801530c:	b29b      	uxthne	r3, r3
 801530e:	f640 630c 	movweq	r3, #3596	; 0xe0c
 8015312:	4620      	mov	r0, r4
 8015314:	f7ff ff05 	bl	8015122 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8015318:	7b43      	ldrb	r3, [r0, #13]
 801531a:	7a82      	ldrb	r2, [r0, #10]
 801531c:	005b      	lsls	r3, r3, #1
 801531e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015322:	4313      	orrs	r3, r2
 8015324:	1af6      	subs	r6, r6, r3
 8015326:	f8a4 605e 	strh.w	r6, [r4, #94]	; 0x5e
 801532a:	7b69      	ldrb	r1, [r5, #13]
 801532c:	00cb      	lsls	r3, r1, #3
 801532e:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015332:	7a2b      	ldrb	r3, [r5, #8]
 8015334:	4313      	orrs	r3, r2
 8015336:	064a      	lsls	r2, r1, #25
 8015338:	bf44      	itt	mi
 801533a:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801533e:	b21b      	sxthmi	r3, r3
 8015340:	1bdb      	subs	r3, r3, r7
 8015342:	e747      	b.n	80151d4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9c>
 8015344:	2300      	movs	r3, #0
 8015346:	e7b6      	b.n	80152b6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x17e>
 8015348:	3fc00079 	.word	0x3fc00079

0801534c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 801534c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015350:	4604      	mov	r4, r0
 8015352:	b942      	cbnz	r2, 8015366 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8015354:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015358:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
 801535c:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
 8015360:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
 8015364:	e047      	b.n	80153f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8015366:	7b51      	ldrb	r1, [r2, #13]
 8015368:	8893      	ldrh	r3, [r2, #4]
 801536a:	010d      	lsls	r5, r1, #4
 801536c:	f405 7080 	and.w	r0, r5, #256	; 0x100
 8015370:	79d5      	ldrb	r5, [r2, #7]
 8015372:	4305      	orrs	r5, r0
 8015374:	2d04      	cmp	r5, #4
 8015376:	bfcc      	ite	gt
 8015378:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801537c:	f04f 0e01 	movle.w	lr, #1
 8015380:	f5b3 6fdd 	cmp.w	r3, #1768	; 0x6e8
 8015384:	f200 80ab 	bhi.w	80154de <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8015388:	f240 60e7 	movw	r0, #1767	; 0x6e7
 801538c:	4283      	cmp	r3, r0
 801538e:	d216      	bcs.n	80153be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015390:	f240 605b 	movw	r0, #1627	; 0x65b
 8015394:	4283      	cmp	r3, r0
 8015396:	d859      	bhi.n	801544c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8015398:	f240 6057 	movw	r0, #1623	; 0x657
 801539c:	4283      	cmp	r3, r0
 801539e:	d20e      	bcs.n	80153be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80153a0:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 80153a4:	d24a      	bcs.n	801543c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 80153a6:	f240 604e 	movw	r0, #1614	; 0x64e
 80153aa:	4283      	cmp	r3, r0
 80153ac:	d207      	bcs.n	80153be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80153ae:	f240 601a 	movw	r0, #1562	; 0x61a
 80153b2:	4283      	cmp	r3, r0
 80153b4:	d02a      	beq.n	801540c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80153b6:	d821      	bhi.n	80153fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 80153b8:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 80153bc:	d35b      	bcc.n	8015476 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80153be:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	; 0x5a
 80153c2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80153c6:	f040 80d0 	bne.w	801556a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80153ca:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	; 0x5c
 80153ce:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 80153d2:	f040 80ca 	bne.w	801556a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 80153d6:	00cb      	lsls	r3, r1, #3
 80153d8:	f403 7080 	and.w	r0, r3, #256	; 0x100
 80153dc:	7a13      	ldrb	r3, [r2, #8]
 80153de:	0649      	lsls	r1, r1, #25
 80153e0:	ea43 0300 	orr.w	r3, r3, r0
 80153e4:	bf44      	itt	mi
 80153e6:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80153ea:	b21b      	sxthmi	r3, r3
 80153ec:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80153f0:	1b5d      	subs	r5, r3, r5
 80153f2:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 80153f6:	4610      	mov	r0, r2
 80153f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80153fc:	f240 604b 	movw	r0, #1611	; 0x64b
 8015400:	4283      	cmp	r3, r0
 8015402:	d338      	bcc.n	8015476 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015404:	f240 604c 	movw	r0, #1612	; 0x64c
 8015408:	4283      	cmp	r3, r0
 801540a:	d9d8      	bls.n	80153be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801540c:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	; 0x5a
 8015410:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	; 0x5c
 8015414:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8015418:	f040 80f2 	bne.w	8015600 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 801541c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8015420:	f040 80ee 	bne.w	8015600 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b4>
 8015424:	00cb      	lsls	r3, r1, #3
 8015426:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801542a:	7a13      	ldrb	r3, [r2, #8]
 801542c:	064e      	lsls	r6, r1, #25
 801542e:	ea43 0300 	orr.w	r3, r3, r0
 8015432:	bf44      	itt	mi
 8015434:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015438:	b21b      	sxthmi	r3, r3
 801543a:	e7d9      	b.n	80153f0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 801543c:	f240 6054 	movw	r0, #1620	; 0x654
 8015440:	4283      	cmp	r3, r0
 8015442:	d8e3      	bhi.n	801540c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015444:	f5b3 6fca 	cmp.w	r3, #1616	; 0x650
 8015448:	d9e0      	bls.n	801540c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801544a:	e7b8      	b.n	80153be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801544c:	f240 6074 	movw	r0, #1652	; 0x674
 8015450:	4283      	cmp	r3, r0
 8015452:	d0b4      	beq.n	80153be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015454:	d82d      	bhi.n	80154b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8015456:	f240 605e 	movw	r0, #1630	; 0x65e
 801545a:	4283      	cmp	r3, r0
 801545c:	d804      	bhi.n	8015468 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801545e:	f240 605d 	movw	r0, #1629	; 0x65d
 8015462:	4283      	cmp	r3, r0
 8015464:	d3d2      	bcc.n	801540c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015466:	e7aa      	b.n	80153be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015468:	f240 605f 	movw	r0, #1631	; 0x65f
 801546c:	4283      	cmp	r3, r0
 801546e:	d0cd      	beq.n	801540c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015470:	f5b3 6fce 	cmp.w	r3, #1648	; 0x670
 8015474:	d0a3      	beq.n	80153be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015476:	00cb      	lsls	r3, r1, #3
 8015478:	f403 7080 	and.w	r0, r3, #256	; 0x100
 801547c:	7a13      	ldrb	r3, [r2, #8]
 801547e:	0649      	lsls	r1, r1, #25
 8015480:	ea43 0300 	orr.w	r3, r3, r0
 8015484:	bf44      	itt	mi
 8015486:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 801548a:	b21b      	sxthmi	r3, r3
 801548c:	1b5d      	subs	r5, r3, r5
 801548e:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 8015492:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 8015496:	7b53      	ldrb	r3, [r2, #13]
 8015498:	015b      	lsls	r3, r3, #5
 801549a:	f403 7180 	and.w	r1, r3, #256	; 0x100
 801549e:	7993      	ldrb	r3, [r2, #6]
 80154a0:	430b      	orrs	r3, r1
 80154a2:	2105      	movs	r1, #5
 80154a4:	005b      	lsls	r3, r3, #1
 80154a6:	fb93 f3f1 	sdiv	r3, r3, r1
 80154aa:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80154ae:	440b      	add	r3, r1
 80154b0:	e756      	b.n	8015360 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80154b2:	f240 60e2 	movw	r0, #1762	; 0x6e2
 80154b6:	4283      	cmp	r3, r0
 80154b8:	d809      	bhi.n	80154ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 80154ba:	f240 60df 	movw	r0, #1759	; 0x6df
 80154be:	4283      	cmp	r3, r0
 80154c0:	f4bf af7d 	bcs.w	80153be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80154c4:	f2a3 63d6 	subw	r3, r3, #1750	; 0x6d6
 80154c8:	2b05      	cmp	r3, #5
 80154ca:	d8d4      	bhi.n	8015476 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80154cc:	e777      	b.n	80153be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80154ce:	f240 60e3 	movw	r0, #1763	; 0x6e3
 80154d2:	4283      	cmp	r3, r0
 80154d4:	d09a      	beq.n	801540c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80154d6:	f240 60e4 	movw	r0, #1764	; 0x6e4
 80154da:	4283      	cmp	r3, r0
 80154dc:	e7ca      	b.n	8015474 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 80154de:	f5b3 6f0f 	cmp.w	r3, #2288	; 0x8f0
 80154e2:	d22b      	bcs.n	801553c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 80154e4:	f640 00ed 	movw	r0, #2285	; 0x8ed
 80154e8:	4283      	cmp	r3, r0
 80154ea:	d28f      	bcs.n	801540c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80154ec:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80154f0:	4283      	cmp	r3, r0
 80154f2:	d816      	bhi.n	8015522 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 80154f4:	f640 00e4 	movw	r0, #2276	; 0x8e4
 80154f8:	4283      	cmp	r3, r0
 80154fa:	f4bf af60 	bcs.w	80153be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80154fe:	f240 60ec 	movw	r0, #1772	; 0x6ec
 8015502:	4283      	cmp	r3, r0
 8015504:	d80a      	bhi.n	801551c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8015506:	f240 60eb 	movw	r0, #1771	; 0x6eb
 801550a:	4283      	cmp	r3, r0
 801550c:	f4bf af57 	bcs.w	80153be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015510:	f240 60ea 	movw	r0, #1770	; 0x6ea
 8015514:	4283      	cmp	r3, r0
 8015516:	f43f af79 	beq.w	801540c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801551a:	e7ac      	b.n	8015476 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801551c:	f240 60ed 	movw	r0, #1773	; 0x6ed
 8015520:	e7f8      	b.n	8015514 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8015522:	f640 00e8 	movw	r0, #2280	; 0x8e8
 8015526:	4283      	cmp	r3, r0
 8015528:	d802      	bhi.n	8015530 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 801552a:	f640 00e7 	movw	r0, #2279	; 0x8e7
 801552e:	e798      	b.n	8015462 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8015530:	f640 00e9 	movw	r0, #2281	; 0x8e9
 8015534:	4283      	cmp	r3, r0
 8015536:	f47f af42 	bne.w	80153be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801553a:	e767      	b.n	801540c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801553c:	f640 00f6 	movw	r0, #2294	; 0x8f6
 8015540:	4283      	cmp	r3, r0
 8015542:	f43f af63 	beq.w	801540c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015546:	d802      	bhi.n	801554e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8015548:	f640 00f2 	movw	r0, #2290	; 0x8f2
 801554c:	e7f2      	b.n	8015534 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 801554e:	f640 00fa 	movw	r0, #2298	; 0x8fa
 8015552:	4283      	cmp	r3, r0
 8015554:	d805      	bhi.n	8015562 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8015556:	f640 00f9 	movw	r0, #2297	; 0x8f9
 801555a:	4283      	cmp	r3, r0
 801555c:	f4ff af2f 	bcc.w	80153be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015560:	e754      	b.n	801540c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015562:	f640 00fe 	movw	r0, #2302	; 0x8fe
 8015566:	4283      	cmp	r3, r0
 8015568:	e7af      	b.n	80154ca <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801556a:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 801556e:	4617      	mov	r7, r2
 8015570:	4666      	mov	r6, ip
 8015572:	f102 0808 	add.w	r8, r2, #8
 8015576:	46e6      	mov	lr, ip
 8015578:	6838      	ldr	r0, [r7, #0]
 801557a:	6879      	ldr	r1, [r7, #4]
 801557c:	3708      	adds	r7, #8
 801557e:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8015582:	4547      	cmp	r7, r8
 8015584:	46f4      	mov	ip, lr
 8015586:	d1f6      	bne.n	8015576 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8015588:	6838      	ldr	r0, [r7, #0]
 801558a:	f8ce 0000 	str.w	r0, [lr]
 801558e:	88b9      	ldrh	r1, [r7, #4]
 8015590:	f8ae 1004 	strh.w	r1, [lr, #4]
 8015594:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 8015598:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 801559c:	d009      	beq.n	80155b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x266>
 801559e:	7b51      	ldrb	r1, [r2, #13]
 80155a0:	7992      	ldrb	r2, [r2, #6]
 80155a2:	0149      	lsls	r1, r1, #5
 80155a4:	f401 7180 	and.w	r1, r1, #256	; 0x100
 80155a8:	4311      	orrs	r1, r2
 80155aa:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80155ae:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 80155b2:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80155b6:	b2ad      	uxth	r5, r5
 80155b8:	d00d      	beq.n	80155d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28a>
 80155ba:	442b      	add	r3, r5
 80155bc:	b29b      	uxth	r3, r3
 80155be:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 80155c2:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80155c6:	10db      	asrs	r3, r3, #3
 80155c8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80155cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80155d0:	4313      	orrs	r3, r2
 80155d2:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 80155d6:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 80155da:	00cb      	lsls	r3, r1, #3
 80155dc:	f403 7280 	and.w	r2, r3, #256	; 0x100
 80155e0:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 80155e4:	064f      	lsls	r7, r1, #25
 80155e6:	ea43 0302 	orr.w	r3, r3, r2
 80155ea:	bf44      	itt	mi
 80155ec:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 80155f0:	b21b      	sxthmi	r3, r3
 80155f2:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
 80155f6:	1b5b      	subs	r3, r3, r5
 80155f8:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80155fc:	4632      	mov	r2, r6
 80155fe:	e6fa      	b.n	80153f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8015600:	f104 0c4c 	add.w	ip, r4, #76	; 0x4c
 8015604:	4617      	mov	r7, r2
 8015606:	4666      	mov	r6, ip
 8015608:	f102 0908 	add.w	r9, r2, #8
 801560c:	46e0      	mov	r8, ip
 801560e:	6838      	ldr	r0, [r7, #0]
 8015610:	6879      	ldr	r1, [r7, #4]
 8015612:	3708      	adds	r7, #8
 8015614:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8015618:	454f      	cmp	r7, r9
 801561a:	46c4      	mov	ip, r8
 801561c:	d1f6      	bne.n	801560c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c0>
 801561e:	6838      	ldr	r0, [r7, #0]
 8015620:	f8c8 0000 	str.w	r0, [r8]
 8015624:	88b9      	ldrh	r1, [r7, #4]
 8015626:	f8a8 1004 	strh.w	r1, [r8, #4]
 801562a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	; 0x5e
 801562e:	f510 4f00 	cmn.w	r0, #32768	; 0x8000
 8015632:	d009      	beq.n	8015648 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2fc>
 8015634:	7b51      	ldrb	r1, [r2, #13]
 8015636:	7992      	ldrb	r2, [r2, #6]
 8015638:	0149      	lsls	r1, r1, #5
 801563a:	f401 7180 	and.w	r1, r1, #256	; 0x100
 801563e:	4311      	orrs	r1, r2
 8015640:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8015644:	f884 0055 	strb.w	r0, [r4, #85]	; 0x55
 8015648:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801564c:	d00e      	beq.n	801566c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x320>
 801564e:	eba3 030e 	sub.w	r3, r3, lr
 8015652:	f894 2059 	ldrb.w	r2, [r4, #89]	; 0x59
 8015656:	b29b      	uxth	r3, r3
 8015658:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 801565c:	10db      	asrs	r3, r3, #3
 801565e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015662:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8015666:	4313      	orrs	r3, r2
 8015668:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801566c:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8015670:	00cb      	lsls	r3, r1, #3
 8015672:	f403 7280 	and.w	r2, r3, #256	; 0x100
 8015676:	f894 3054 	ldrb.w	r3, [r4, #84]	; 0x54
 801567a:	0648      	lsls	r0, r1, #25
 801567c:	ea43 0302 	orr.w	r3, r3, r2
 8015680:	bf44      	itt	mi
 8015682:	f5a3 7300 	submi.w	r3, r3, #512	; 0x200
 8015686:	b21b      	sxthmi	r3, r3
 8015688:	1b5d      	subs	r5, r3, r5
 801568a:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
 801568e:	e7b5      	b.n	80155fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b0>

08015690 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8015690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015694:	461e      	mov	r6, r3
 8015696:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 8015698:	4604      	mov	r4, r0
 801569a:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801569e:	4617      	mov	r7, r2
 80156a0:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80156a4:	f7f9 ffd8 	bl	800f658 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80156a8:	4605      	mov	r5, r0
 80156aa:	b918      	cbnz	r0, 80156b4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 80156ac:	6030      	str	r0, [r6, #0]
 80156ae:	4628      	mov	r0, r5
 80156b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80156b4:	683b      	ldr	r3, [r7, #0]
 80156b6:	4601      	mov	r1, r0
 80156b8:	68db      	ldr	r3, [r3, #12]
 80156ba:	4638      	mov	r0, r7
 80156bc:	4798      	blx	r3
 80156be:	f5a8 63c0 	sub.w	r3, r8, #1536	; 0x600
 80156c2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80156c6:	4602      	mov	r2, r0
 80156c8:	6030      	str	r0, [r6, #0]
 80156ca:	d213      	bcs.n	80156f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 80156cc:	4643      	mov	r3, r8
 80156ce:	4639      	mov	r1, r7
 80156d0:	4620      	mov	r0, r4
 80156d2:	f7ff fe3b 	bl	801534c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 80156d6:	6030      	str	r0, [r6, #0]
 80156d8:	6833      	ldr	r3, [r6, #0]
 80156da:	b143      	cbz	r3, 80156ee <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 80156dc:	7b5a      	ldrb	r2, [r3, #13]
 80156de:	7a9b      	ldrb	r3, [r3, #10]
 80156e0:	0052      	lsls	r2, r2, #1
 80156e2:	f402 7280 	and.w	r2, r2, #256	; 0x100
 80156e6:	4313      	orrs	r3, r2
 80156e8:	bf0c      	ite	eq
 80156ea:	2301      	moveq	r3, #1
 80156ec:	2300      	movne	r3, #0
 80156ee:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
 80156f2:	e7dc      	b.n	80156ae <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 80156f4:	f5a5 6360 	sub.w	r3, r5, #3584	; 0xe00
 80156f8:	b29b      	uxth	r3, r3
 80156fa:	2b7f      	cmp	r3, #127	; 0x7f
 80156fc:	d804      	bhi.n	8015708 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 80156fe:	4639      	mov	r1, r7
 8015700:	4620      	mov	r0, r4
 8015702:	f7ff fd19 	bl	8015138 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8015706:	e7e6      	b.n	80156d6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8015708:	f894 3061 	ldrb.w	r3, [r4, #97]	; 0x61
 801570c:	2b00      	cmp	r3, #0
 801570e:	d0e3      	beq.n	80156d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8015710:	f640 1302 	movw	r3, #2306	; 0x902
 8015714:	429d      	cmp	r5, r3
 8015716:	d1df      	bne.n	80156d8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8015718:	4601      	mov	r1, r0
 801571a:	4620      	mov	r0, r4
 801571c:	f7ff fcde 	bl	80150dc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8015720:	e7d9      	b.n	80156d6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08015722 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8015722:	b510      	push	{r4, lr}
 8015724:	4604      	mov	r4, r0
 8015726:	f8b4 1040 	ldrh.w	r1, [r4, #64]	; 0x40
 801572a:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801572c:	b1f1      	cbz	r1, 801576c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 801572e:	2b0a      	cmp	r3, #10
 8015730:	d02f      	beq.n	8015792 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8015732:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8015734:	3901      	subs	r1, #1
 8015736:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 801573a:	8f40      	ldrh	r0, [r0, #58]	; 0x3a
 801573c:	f8a4 1040 	strh.w	r1, [r4, #64]	; 0x40
 8015740:	1c51      	adds	r1, r2, #1
 8015742:	b289      	uxth	r1, r1
 8015744:	2901      	cmp	r1, #1
 8015746:	bf84      	itt	hi
 8015748:	f102 32ff 	addhi.w	r2, r2, #4294967295
 801574c:	87e2      	strhhi	r2, [r4, #62]	; 0x3e
 801574e:	f103 0201 	add.w	r2, r3, #1
 8015752:	8722      	strh	r2, [r4, #56]	; 0x38
 8015754:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8015756:	bf98      	it	ls
 8015758:	87e1      	strhls	r1, [r4, #62]	; 0x3e
 801575a:	4413      	add	r3, r2
 801575c:	b29b      	uxth	r3, r3
 801575e:	2b09      	cmp	r3, #9
 8015760:	bf88      	it	hi
 8015762:	3b0a      	subhi	r3, #10
 8015764:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8015768:	8458      	strh	r0, [r3, #34]	; 0x22
 801576a:	e7dc      	b.n	8015726 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 801576c:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801576e:	2b0a      	cmp	r3, #10
 8015770:	d00f      	beq.n	8015792 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x70>
 8015772:	4620      	mov	r0, r4
 8015774:	f7ff fc71 	bl	801505a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8015778:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 801577a:	1c5a      	adds	r2, r3, #1
 801577c:	8722      	strh	r2, [r4, #56]	; 0x38
 801577e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8015780:	4413      	add	r3, r2
 8015782:	b29b      	uxth	r3, r3
 8015784:	2b09      	cmp	r3, #9
 8015786:	bf88      	it	hi
 8015788:	3b0a      	subhi	r3, #10
 801578a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801578e:	8458      	strh	r0, [r3, #34]	; 0x22
 8015790:	e7ec      	b.n	801576c <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4a>
 8015792:	bd10      	pop	{r4, pc}

08015794 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8015794:	b538      	push	{r3, r4, r5, lr}
 8015796:	4604      	mov	r4, r0
 8015798:	8ec3      	ldrh	r3, [r0, #54]	; 0x36
 801579a:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 801579e:	8c55      	ldrh	r5, [r2, #34]	; 0x22
 80157a0:	8f02      	ldrh	r2, [r0, #56]	; 0x38
 80157a2:	3a01      	subs	r2, #1
 80157a4:	8702      	strh	r2, [r0, #56]	; 0x38
 80157a6:	1c5a      	adds	r2, r3, #1
 80157a8:	b292      	uxth	r2, r2
 80157aa:	2a09      	cmp	r2, #9
 80157ac:	bf86      	itte	hi
 80157ae:	3b09      	subhi	r3, #9
 80157b0:	86c3      	strhhi	r3, [r0, #54]	; 0x36
 80157b2:	86c2      	strhls	r2, [r0, #54]	; 0x36
 80157b4:	f7ff ffb5 	bl	8015722 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 80157b8:	8c23      	ldrh	r3, [r4, #32]
 80157ba:	2b01      	cmp	r3, #1
 80157bc:	bf9c      	itt	ls
 80157be:	3301      	addls	r3, #1
 80157c0:	8423      	strhls	r3, [r4, #32]
 80157c2:	8be3      	ldrh	r3, [r4, #30]
 80157c4:	b90b      	cbnz	r3, 80157ca <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 80157c6:	2302      	movs	r3, #2
 80157c8:	83e3      	strh	r3, [r4, #30]
 80157ca:	8be3      	ldrh	r3, [r4, #30]
 80157cc:	4628      	mov	r0, r5
 80157ce:	3b01      	subs	r3, #1
 80157d0:	b29b      	uxth	r3, r3
 80157d2:	83e3      	strh	r3, [r4, #30]
 80157d4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80157d8:	8365      	strh	r5, [r4, #26]
 80157da:	bd38      	pop	{r3, r4, r5, pc}

080157dc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 80157dc:	428a      	cmp	r2, r1
 80157de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80157e2:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
 80157e4:	d931      	bls.n	801584a <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x6e>
 80157e6:	8f05      	ldrh	r5, [r0, #56]	; 0x38
 80157e8:	1a54      	subs	r4, r2, r1
 80157ea:	19ee      	adds	r6, r5, r7
 80157ec:	3e01      	subs	r6, #1
 80157ee:	fa1f fe84 	uxth.w	lr, r4
 80157f2:	b2b4      	uxth	r4, r6
 80157f4:	eba4 090e 	sub.w	r9, r4, lr
 80157f8:	f8b0 8040 	ldrh.w	r8, [r0, #64]	; 0x40
 80157fc:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	; 0x3e
 8015800:	fa1f f989 	uxth.w	r9, r9
 8015804:	2c09      	cmp	r4, #9
 8015806:	4626      	mov	r6, r4
 8015808:	bf88      	it	hi
 801580a:	f1a4 060a 	subhi.w	r6, r4, #10
 801580e:	f1bc 0f00 	cmp.w	ip, #0
 8015812:	bf08      	it	eq
 8015814:	f04f 0c02 	moveq.w	ip, #2
 8015818:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801581c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015820:	3c01      	subs	r4, #1
 8015822:	f8b6 a022 	ldrh.w	sl, [r6, #34]	; 0x22
 8015826:	fa1f fc8c 	uxth.w	ip, ip
 801582a:	b2a4      	uxth	r4, r4
 801582c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8015830:	454c      	cmp	r4, r9
 8015832:	f8a6 a03a 	strh.w	sl, [r6, #58]	; 0x3a
 8015836:	d1e5      	bne.n	8015804 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8015838:	eba5 050e 	sub.w	r5, r5, lr
 801583c:	eb0e 0408 	add.w	r4, lr, r8
 8015840:	8705      	strh	r5, [r0, #56]	; 0x38
 8015842:	f8a0 4040 	strh.w	r4, [r0, #64]	; 0x40
 8015846:	f8a0 c03e 	strh.w	ip, [r0, #62]	; 0x3e
 801584a:	250a      	movs	r5, #10
 801584c:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 801584e:	1a64      	subs	r4, r4, r1
 8015850:	4439      	add	r1, r7
 8015852:	b289      	uxth	r1, r1
 8015854:	2909      	cmp	r1, #9
 8015856:	bf88      	it	hi
 8015858:	390a      	subhi	r1, #10
 801585a:	8704      	strh	r4, [r0, #56]	; 0x38
 801585c:	86c1      	strh	r1, [r0, #54]	; 0x36
 801585e:	b18a      	cbz	r2, 8015884 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xa8>
 8015860:	8f01      	ldrh	r1, [r0, #56]	; 0x38
 8015862:	3a01      	subs	r2, #1
 8015864:	3101      	adds	r1, #1
 8015866:	b292      	uxth	r2, r2
 8015868:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 801586c:	8701      	strh	r1, [r0, #56]	; 0x38
 801586e:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8015870:	b901      	cbnz	r1, 8015874 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x98>
 8015872:	86c5      	strh	r5, [r0, #54]	; 0x36
 8015874:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
 8015876:	3901      	subs	r1, #1
 8015878:	b289      	uxth	r1, r1
 801587a:	86c1      	strh	r1, [r0, #54]	; 0x36
 801587c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8015880:	844c      	strh	r4, [r1, #34]	; 0x22
 8015882:	e7ec      	b.n	801585e <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x82>
 8015884:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015888:	f7ff bf4b 	b.w	8015722 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

0801588c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 801588c:	b570      	push	{r4, r5, r6, lr}
 801588e:	2500      	movs	r5, #0
 8015890:	4295      	cmp	r5, r2
 8015892:	d011      	beq.n	80158b8 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8015894:	8bc4      	ldrh	r4, [r0, #30]
 8015896:	f831 6b02 	ldrh.w	r6, [r1], #2
 801589a:	4414      	add	r4, r2
 801589c:	3c01      	subs	r4, #1
 801589e:	1b64      	subs	r4, r4, r5
 80158a0:	b2a4      	uxth	r4, r4
 80158a2:	2c01      	cmp	r4, #1
 80158a4:	bf88      	it	hi
 80158a6:	3c02      	subhi	r4, #2
 80158a8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80158ac:	8b64      	ldrh	r4, [r4, #26]
 80158ae:	42b4      	cmp	r4, r6
 80158b0:	d117      	bne.n	80158e2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 80158b2:	3501      	adds	r5, #1
 80158b4:	b2ad      	uxth	r5, r5
 80158b6:	e7eb      	b.n	8015890 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 80158b8:	2400      	movs	r4, #0
 80158ba:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80158be:	4413      	add	r3, r2
 80158c0:	b2a2      	uxth	r2, r4
 80158c2:	429a      	cmp	r2, r3
 80158c4:	da0f      	bge.n	80158e6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 80158c6:	8ec6      	ldrh	r6, [r0, #54]	; 0x36
 80158c8:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 80158cc:	4432      	add	r2, r6
 80158ce:	b292      	uxth	r2, r2
 80158d0:	2a09      	cmp	r2, #9
 80158d2:	bf88      	it	hi
 80158d4:	3a0a      	subhi	r2, #10
 80158d6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80158da:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 80158dc:	3401      	adds	r4, #1
 80158de:	42aa      	cmp	r2, r5
 80158e0:	d0ee      	beq.n	80158c0 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 80158e2:	2000      	movs	r0, #0
 80158e4:	bd70      	pop	{r4, r5, r6, pc}
 80158e6:	2001      	movs	r0, #1
 80158e8:	e7fc      	b.n	80158e4 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

080158ea <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 80158ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80158ee:	4605      	mov	r5, r0
 80158f0:	4616      	mov	r6, r2
 80158f2:	1c8c      	adds	r4, r1, #2
 80158f4:	8809      	ldrh	r1, [r1, #0]
 80158f6:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 80158fa:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 80158fe:	42b3      	cmp	r3, r6
 8015900:	d124      	bne.n	801594c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8015902:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8015906:	f3c1 1803 	ubfx	r8, r1, #4, #4
 801590a:	f001 070f 	and.w	r7, r1, #15
 801590e:	f8cd 8000 	str.w	r8, [sp]
 8015912:	464b      	mov	r3, r9
 8015914:	4652      	mov	r2, sl
 8015916:	4621      	mov	r1, r4
 8015918:	4628      	mov	r0, r5
 801591a:	f7ff ffb7 	bl	801588c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 801591e:	4683      	mov	fp, r0
 8015920:	b168      	cbz	r0, 801593e <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8015922:	eb0a 0109 	add.w	r1, sl, r9
 8015926:	4441      	add	r1, r8
 8015928:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801592c:	463a      	mov	r2, r7
 801592e:	4649      	mov	r1, r9
 8015930:	4628      	mov	r0, r5
 8015932:	f7ff ff53 	bl	80157dc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8015936:	4658      	mov	r0, fp
 8015938:	b003      	add	sp, #12
 801593a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801593e:	eb07 010a 	add.w	r1, r7, sl
 8015942:	4449      	add	r1, r9
 8015944:	4441      	add	r1, r8
 8015946:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 801594a:	e7d2      	b.n	80158f2 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 801594c:	f04f 0b00 	mov.w	fp, #0
 8015950:	e7f1      	b.n	8015936 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08015952 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8015952:	b570      	push	{r4, r5, r6, lr}
 8015954:	8810      	ldrh	r0, [r2, #0]
 8015956:	4298      	cmp	r0, r3
 8015958:	d817      	bhi.n	801598a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801595a:	1e48      	subs	r0, r1, #1
 801595c:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8015960:	4298      	cmp	r0, r3
 8015962:	d312      	bcc.n	801598a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8015964:	2400      	movs	r4, #0
 8015966:	428c      	cmp	r4, r1
 8015968:	d20f      	bcs.n	801598a <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 801596a:	1860      	adds	r0, r4, r1
 801596c:	1040      	asrs	r0, r0, #1
 801596e:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8015972:	0085      	lsls	r5, r0, #2
 8015974:	42b3      	cmp	r3, r6
 8015976:	d902      	bls.n	801597e <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8015978:	3001      	adds	r0, #1
 801597a:	b284      	uxth	r4, r0
 801597c:	e7f3      	b.n	8015966 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 801597e:	d201      	bcs.n	8015984 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8015980:	b281      	uxth	r1, r0
 8015982:	e7f0      	b.n	8015966 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8015984:	442a      	add	r2, r5
 8015986:	8850      	ldrh	r0, [r2, #2]
 8015988:	bd70      	pop	{r4, r5, r6, pc}
 801598a:	2000      	movs	r0, #0
 801598c:	e7fc      	b.n	8015988 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

0801598e <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 801598e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015992:	4604      	mov	r4, r0
 8015994:	260b      	movs	r6, #11
 8015996:	6c45      	ldr	r5, [r0, #68]	; 0x44
 8015998:	886f      	ldrh	r7, [r5, #2]
 801599a:	087f      	lsrs	r7, r7, #1
 801599c:	3e01      	subs	r6, #1
 801599e:	d013      	beq.n	80159c8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80159a0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80159a2:	462a      	mov	r2, r5
 80159a4:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80159a8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	; 0x22
 80159ac:	4639      	mov	r1, r7
 80159ae:	4643      	mov	r3, r8
 80159b0:	4620      	mov	r0, r4
 80159b2:	f7ff ffce 	bl	8015952 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 80159b6:	b138      	cbz	r0, 80159c8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80159b8:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 80159bc:	4642      	mov	r2, r8
 80159be:	4620      	mov	r0, r4
 80159c0:	f7ff ff93 	bl	80158ea <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 80159c4:	2800      	cmp	r0, #0
 80159c6:	d1e9      	bne.n	801599c <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 80159c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080159cc <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 80159cc:	b570      	push	{r4, r5, r6, lr}
 80159ce:	694a      	ldr	r2, [r1, #20]
 80159d0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
 80159d2:	684b      	ldr	r3, [r1, #4]
 80159d4:	1b54      	subs	r4, r2, r5
 80159d6:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80159d8:	f000 8107 	beq.w	8015bea <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21e>
 80159dc:	1b9b      	subs	r3, r3, r6
 80159de:	d003      	beq.n	80159e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 80159e0:	2210      	movs	r2, #16
 80159e2:	4363      	muls	r3, r4
 80159e4:	fb93 f3f2 	sdiv	r3, r3, r2
 80159e8:	680c      	ldr	r4, [r1, #0]
 80159ea:	698a      	ldr	r2, [r1, #24]
 80159ec:	1b65      	subs	r5, r4, r5
 80159ee:	f000 80fe 	beq.w	8015bee <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x222>
 80159f2:	1b92      	subs	r2, r2, r6
 80159f4:	d003      	beq.n	80159fe <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 80159f6:	2410      	movs	r4, #16
 80159f8:	436a      	muls	r2, r5
 80159fa:	fb92 f2f4 	sdiv	r2, r2, r4
 80159fe:	1a9b      	subs	r3, r3, r2
 8015a00:	ee07 3a90 	vmov	s15, r3
 8015a04:	ed9f 4a89 	vldr	s8, [pc, #548]	; 8015c2c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x260>
 8015a08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015a0c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8015a10:	ee67 7a84 	vmul.f32	s15, s15, s8
 8015a14:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8015a18:	460a      	mov	r2, r1
 8015a1a:	eeb1 6a43 	vneg.f32	s12, s6
 8015a1e:	4603      	mov	r3, r0
 8015a20:	f100 040c 	add.w	r4, r0, #12
 8015a24:	edd2 7a02 	vldr	s15, [r2, #8]
 8015a28:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8015a2c:	ece3 6a01 	vstmia	r3!, {s13}
 8015a30:	edd2 7a03 	vldr	s15, [r2, #12]
 8015a34:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015a38:	edc3 7a02 	vstr	s15, [r3, #8]
 8015a3c:	edd2 7a04 	vldr	s15, [r2, #16]
 8015a40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015a44:	429c      	cmp	r4, r3
 8015a46:	edc3 7a05 	vstr	s15, [r3, #20]
 8015a4a:	f102 0214 	add.w	r2, r2, #20
 8015a4e:	d1e9      	bne.n	8015a24 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8015a50:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8015a52:	698b      	ldr	r3, [r1, #24]
 8015a54:	edd0 4a02 	vldr	s9, [r0, #8]
 8015a58:	1a9b      	subs	r3, r3, r2
 8015a5a:	ee07 3a90 	vmov	s15, r3
 8015a5e:	684b      	ldr	r3, [r1, #4]
 8015a60:	edd0 3a00 	vldr	s7, [r0]
 8015a64:	1a9b      	subs	r3, r3, r2
 8015a66:	edd0 6a01 	vldr	s13, [r0, #4]
 8015a6a:	ee07 3a10 	vmov	s14, r3
 8015a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015a72:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8015a76:	ee67 7a84 	vmul.f32	s15, s15, s8
 8015a7a:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8015a7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015a82:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8015a86:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015a8a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015a8e:	ee67 7a83 	vmul.f32	s15, s15, s6
 8015a92:	edc0 7a09 	vstr	s15, [r0, #36]	; 0x24
 8015a96:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8015a98:	694a      	ldr	r2, [r1, #20]
 8015a9a:	ed90 5a05 	vldr	s10, [r0, #20]
 8015a9e:	1b13      	subs	r3, r2, r4
 8015aa0:	ee07 3a10 	vmov	s14, r3
 8015aa4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015aa8:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015aac:	680b      	ldr	r3, [r1, #0]
 8015aae:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8015ab2:	1b1b      	subs	r3, r3, r4
 8015ab4:	ee07 3a10 	vmov	s14, r3
 8015ab8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015abc:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015ac0:	eee6 4a87 	vfma.f32	s9, s13, s14
 8015ac4:	ee64 4a86 	vmul.f32	s9, s9, s12
 8015ac8:	edc0 4a0a 	vstr	s9, [r0, #40]	; 0x28
 8015acc:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8015ace:	698b      	ldr	r3, [r1, #24]
 8015ad0:	ed90 2a03 	vldr	s4, [r0, #12]
 8015ad4:	1a9b      	subs	r3, r3, r2
 8015ad6:	ee06 3a90 	vmov	s13, r3
 8015ada:	684b      	ldr	r3, [r1, #4]
 8015adc:	edd0 5a04 	vldr	s11, [r0, #16]
 8015ae0:	1a9b      	subs	r3, r3, r2
 8015ae2:	ee07 3a10 	vmov	s14, r3
 8015ae6:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015aea:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8015aee:	ee66 6a84 	vmul.f32	s13, s13, s8
 8015af2:	ee32 5a45 	vsub.f32	s10, s4, s10
 8015af6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015afa:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8015afe:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015b02:	eee5 6a87 	vfma.f32	s13, s11, s14
 8015b06:	ee66 6a83 	vmul.f32	s13, s13, s6
 8015b0a:	edc0 6a0b 	vstr	s13, [r0, #44]	; 0x2c
 8015b0e:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8015b10:	694a      	ldr	r2, [r1, #20]
 8015b12:	ed90 1a07 	vldr	s2, [r0, #28]
 8015b16:	1b13      	subs	r3, r2, r4
 8015b18:	ee07 3a10 	vmov	s14, r3
 8015b1c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015b20:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015b24:	680b      	ldr	r3, [r1, #0]
 8015b26:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8015b2a:	1b1b      	subs	r3, r3, r4
 8015b2c:	ee07 3a10 	vmov	s14, r3
 8015b30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015b34:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015b38:	eea5 5a87 	vfma.f32	s10, s11, s14
 8015b3c:	ee25 5a06 	vmul.f32	s10, s10, s12
 8015b40:	ed80 5a0c 	vstr	s10, [r0, #48]	; 0x30
 8015b44:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8015b46:	698b      	ldr	r3, [r1, #24]
 8015b48:	edd0 5a08 	vldr	s11, [r0, #32]
 8015b4c:	1a9b      	subs	r3, r3, r2
 8015b4e:	ee07 3a10 	vmov	s14, r3
 8015b52:	684b      	ldr	r3, [r1, #4]
 8015b54:	edd0 2a06 	vldr	s5, [r0, #24]
 8015b58:	1a9b      	subs	r3, r3, r2
 8015b5a:	ee01 3a90 	vmov	s3, r3
 8015b5e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015b62:	ee31 1a65 	vsub.f32	s2, s2, s11
 8015b66:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015b6a:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8015b6e:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8015b72:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8015b76:	ee61 1a84 	vmul.f32	s3, s3, s8
 8015b7a:	eea1 7a21 	vfma.f32	s14, s2, s3
 8015b7e:	ee27 7a03 	vmul.f32	s14, s14, s6
 8015b82:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8015b86:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 8015b88:	694a      	ldr	r2, [r1, #20]
 8015b8a:	1b13      	subs	r3, r2, r4
 8015b8c:	ee03 3a10 	vmov	s6, r3
 8015b90:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8015b94:	ee23 3a04 	vmul.f32	s6, s6, s8
 8015b98:	680b      	ldr	r3, [r1, #0]
 8015b9a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 8015b9e:	1b1b      	subs	r3, r3, r4
 8015ba0:	ee03 3a10 	vmov	s6, r3
 8015ba4:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8015ba8:	ee23 4a04 	vmul.f32	s8, s6, s8
 8015bac:	eee1 5a04 	vfma.f32	s11, s2, s8
 8015bb0:	ee25 6a86 	vmul.f32	s12, s11, s12
 8015bb4:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8015bb8:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8015bbc:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8015bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bc4:	ed80 6a0e 	vstr	s12, [r0, #56]	; 0x38
 8015bc8:	dd13      	ble.n	8015bf2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8015bca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015bce:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8015bd2:	eee3 7a87 	vfma.f32	s15, s7, s14
 8015bd6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015bde:	63c3      	str	r3, [r0, #60]	; 0x3c
 8015be0:	dd15      	ble.n	8015c0e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8015be2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8015be6:	6403      	str	r3, [r0, #64]	; 0x40
 8015be8:	bd70      	pop	{r4, r5, r6, pc}
 8015bea:	4623      	mov	r3, r4
 8015bec:	e6fc      	b.n	80159e8 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8015bee:	462a      	mov	r2, r5
 8015bf0:	e705      	b.n	80159fe <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8015bf2:	d502      	bpl.n	8015bfa <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22e>
 8015bf4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8015bf8:	e7e9      	b.n	8015bce <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x202>
 8015bfa:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8015bfe:	eea3 2a85 	vfma.f32	s4, s7, s10
 8015c02:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8015c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c0a:	dade      	bge.n	8015bca <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fe>
 8015c0c:	e7f2      	b.n	8015bf4 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x228>
 8015c0e:	d502      	bpl.n	8015c16 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x24a>
 8015c10:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8015c14:	e7e7      	b.n	8015be6 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21a>
 8015c16:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8015c1a:	eee3 4a86 	vfma.f32	s9, s7, s12
 8015c1e:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8015c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c26:	dadc      	bge.n	8015be2 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x216>
 8015c28:	e7f2      	b.n	8015c10 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x244>
 8015c2a:	bf00      	nop
 8015c2c:	3d800000 	.word	0x3d800000

08015c30 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8015c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c34:	2714      	movs	r7, #20
 8015c36:	435f      	muls	r7, r3
 8015c38:	eb02 0c07 	add.w	ip, r2, r7
 8015c3c:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8015c40:	f115 0e0f 	adds.w	lr, r5, #15
 8015c44:	f100 80a2 	bmi.w	8015d8c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8015c48:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8015c4c:	2614      	movs	r6, #20
 8015c4e:	9c08      	ldr	r4, [sp, #32]
 8015c50:	f8c0 e014 	str.w	lr, [r0, #20]
 8015c54:	4366      	muls	r6, r4
 8015c56:	eb02 0806 	add.w	r8, r2, r6
 8015c5a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8015c5e:	f115 040f 	adds.w	r4, r5, #15
 8015c62:	f100 809f 	bmi.w	8015da4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 8015c66:	1124      	asrs	r4, r4, #4
 8015c68:	eba4 040e 	sub.w	r4, r4, lr
 8015c6c:	6184      	str	r4, [r0, #24]
 8015c6e:	2c00      	cmp	r4, #0
 8015c70:	f000 808a 	beq.w	8015d88 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 8015c74:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8015c78:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8015c7c:	5995      	ldr	r5, [r2, r6]
 8015c7e:	eba4 0809 	sub.w	r8, r4, r9
 8015c82:	59d4      	ldr	r4, [r2, r7]
 8015c84:	ea4f 1608 	mov.w	r6, r8, lsl #4
 8015c88:	eba5 0a04 	sub.w	sl, r5, r4
 8015c8c:	ea4f 150a 	mov.w	r5, sl, lsl #4
 8015c90:	fb0e fe05 	mul.w	lr, lr, r5
 8015c94:	fb0a ee19 	mls	lr, sl, r9, lr
 8015c98:	fb08 e404 	mla	r4, r8, r4, lr
 8015c9c:	3c01      	subs	r4, #1
 8015c9e:	19a4      	adds	r4, r4, r6
 8015ca0:	f100 808c 	bmi.w	8015dbc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8015ca4:	fb94 fef6 	sdiv	lr, r4, r6
 8015ca8:	fb06 441e 	mls	r4, r6, lr, r4
 8015cac:	f8c0 e000 	str.w	lr, [r0]
 8015cb0:	6104      	str	r4, [r0, #16]
 8015cb2:	2d00      	cmp	r5, #0
 8015cb4:	f2c0 8095 	blt.w	8015de2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8015cb8:	fb95 f4f6 	sdiv	r4, r5, r6
 8015cbc:	fb06 5514 	mls	r5, r6, r4, r5
 8015cc0:	6044      	str	r4, [r0, #4]
 8015cc2:	6085      	str	r5, [r0, #8]
 8015cc4:	60c6      	str	r6, [r0, #12]
 8015cc6:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8015cca:	6945      	ldr	r5, [r0, #20]
 8015ccc:	59d2      	ldr	r2, [r2, r7]
 8015cce:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8015cd2:	ee07 4a10 	vmov	s14, r4
 8015cd6:	6804      	ldr	r4, [r0, #0]
 8015cd8:	eddf 6a4a 	vldr	s13, [pc, #296]	; 8015e04 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8015cdc:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8015ce0:	ee07 2a90 	vmov	s15, r2
 8015ce4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015ce8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015cec:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8015cf0:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8015cf4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015cf8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015cfc:	edd3 6a00 	vldr	s13, [r3]
 8015d00:	eee6 6a07 	vfma.f32	s13, s12, s14
 8015d04:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8015d08:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015d0c:	edc0 6a07 	vstr	s13, [r0, #28]
 8015d10:	edd0 6a01 	vldr	s13, [r0, #4]
 8015d14:	edd1 5a09 	vldr	s11, [r1, #36]	; 0x24
 8015d18:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8015d1c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015d20:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8015d24:	ed80 6a08 	vstr	s12, [r0, #32]
 8015d28:	6a4a      	ldr	r2, [r1, #36]	; 0x24
 8015d2a:	6242      	str	r2, [r0, #36]	; 0x24
 8015d2c:	edd1 5a0c 	vldr	s11, [r1, #48]	; 0x30
 8015d30:	ed93 6a03 	vldr	s12, [r3, #12]
 8015d34:	eea5 6a87 	vfma.f32	s12, s11, s14
 8015d38:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8015d3c:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8015d40:	ed80 6a0a 	vstr	s12, [r0, #40]	; 0x28
 8015d44:	edd1 5a0b 	vldr	s11, [r1, #44]	; 0x2c
 8015d48:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8015d4c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8015d50:	ed80 6a0b 	vstr	s12, [r0, #44]	; 0x2c
 8015d54:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8015d56:	6302      	str	r2, [r0, #48]	; 0x30
 8015d58:	ed93 6a06 	vldr	s12, [r3, #24]
 8015d5c:	edd1 5a0e 	vldr	s11, [r1, #56]	; 0x38
 8015d60:	eea5 6a87 	vfma.f32	s12, s11, s14
 8015d64:	eeb0 7a46 	vmov.f32	s14, s12
 8015d68:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8015d6c:	eea6 7a27 	vfma.f32	s14, s12, s15
 8015d70:	ed80 7a0d 	vstr	s14, [r0, #52]	; 0x34
 8015d74:	ed91 7a0d 	vldr	s14, [r1, #52]	; 0x34
 8015d78:	edd1 7a0e 	vldr	s15, [r1, #56]	; 0x38
 8015d7c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015d80:	edc0 7a0e 	vstr	s15, [r0, #56]	; 0x38
 8015d84:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8015d86:	63c3      	str	r3, [r0, #60]	; 0x3c
 8015d88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015d8c:	2410      	movs	r4, #16
 8015d8e:	f1c5 0501 	rsb	r5, r5, #1
 8015d92:	f015 050f 	ands.w	r5, r5, #15
 8015d96:	fb9e fef4 	sdiv	lr, lr, r4
 8015d9a:	bf18      	it	ne
 8015d9c:	2501      	movne	r5, #1
 8015d9e:	ebae 0e05 	sub.w	lr, lr, r5
 8015da2:	e753      	b.n	8015c4c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8015da4:	f04f 0910 	mov.w	r9, #16
 8015da8:	f1c5 0501 	rsb	r5, r5, #1
 8015dac:	f015 050f 	ands.w	r5, r5, #15
 8015db0:	fb94 f4f9 	sdiv	r4, r4, r9
 8015db4:	bf18      	it	ne
 8015db6:	2501      	movne	r5, #1
 8015db8:	1b64      	subs	r4, r4, r5
 8015dba:	e755      	b.n	8015c68 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8015dbc:	4264      	negs	r4, r4
 8015dbe:	fb94 fef6 	sdiv	lr, r4, r6
 8015dc2:	fb06 441e 	mls	r4, r6, lr, r4
 8015dc6:	f1ce 0800 	rsb	r8, lr, #0
 8015dca:	f8c0 8000 	str.w	r8, [r0]
 8015dce:	6104      	str	r4, [r0, #16]
 8015dd0:	2c00      	cmp	r4, #0
 8015dd2:	f43f af6e 	beq.w	8015cb2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8015dd6:	ea6f 0e0e 	mvn.w	lr, lr
 8015dda:	1b34      	subs	r4, r6, r4
 8015ddc:	f8c0 e000 	str.w	lr, [r0]
 8015de0:	e766      	b.n	8015cb0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8015de2:	426d      	negs	r5, r5
 8015de4:	fb95 f4f6 	sdiv	r4, r5, r6
 8015de8:	fb06 5514 	mls	r5, r6, r4, r5
 8015dec:	f1c4 0e00 	rsb	lr, r4, #0
 8015df0:	f8c0 e004 	str.w	lr, [r0, #4]
 8015df4:	6085      	str	r5, [r0, #8]
 8015df6:	2d00      	cmp	r5, #0
 8015df8:	f43f af64 	beq.w	8015cc4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8015dfc:	43e4      	mvns	r4, r4
 8015dfe:	1b75      	subs	r5, r6, r5
 8015e00:	6044      	str	r4, [r0, #4]
 8015e02:	e75e      	b.n	8015cc2 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8015e04:	3d800000 	.word	0x3d800000

08015e08 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8015e08:	4b01      	ldr	r3, [pc, #4]	; (8015e10 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8015e0a:	6018      	str	r0, [r3, #0]
 8015e0c:	4770      	bx	lr
 8015e0e:	bf00      	nop
 8015e10:	2001fee8 	.word	0x2001fee8

08015e14 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8015e14:	4b06      	ldr	r3, [pc, #24]	; (8015e30 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8015e16:	881a      	ldrh	r2, [r3, #0]
 8015e18:	4282      	cmp	r2, r0
 8015e1a:	d807      	bhi.n	8015e2c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8015e1c:	4b05      	ldr	r3, [pc, #20]	; (8015e34 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8015e1e:	881b      	ldrh	r3, [r3, #0]
 8015e20:	4413      	add	r3, r2
 8015e22:	4298      	cmp	r0, r3
 8015e24:	bfac      	ite	ge
 8015e26:	2000      	movge	r0, #0
 8015e28:	2001      	movlt	r0, #1
 8015e2a:	4770      	bx	lr
 8015e2c:	2000      	movs	r0, #0
 8015e2e:	4770      	bx	lr
 8015e30:	2001ff08 	.word	0x2001ff08
 8015e34:	2001ff0c 	.word	0x2001ff0c

08015e38 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 8015e38:	b508      	push	{r3, lr}
 8015e3a:	4601      	mov	r1, r0
 8015e3c:	f7ff ffea 	bl	8015e14 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8015e40:	b118      	cbz	r0, 8015e4a <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8015e42:	4b02      	ldr	r3, [pc, #8]	; (8015e4c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8015e4a:	bd08      	pop	{r3, pc}
 8015e4c:	2001feec 	.word	0x2001feec

08015e50 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8015e50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015e52:	4c24      	ldr	r4, [pc, #144]	; (8015ee4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8015e54:	6823      	ldr	r3, [r4, #0]
 8015e56:	2b00      	cmp	r3, #0
 8015e58:	d042      	beq.n	8015ee0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8015e5a:	4a23      	ldr	r2, [pc, #140]	; (8015ee8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8015e5c:	4d23      	ldr	r5, [pc, #140]	; (8015eec <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8015e5e:	8811      	ldrh	r1, [r2, #0]
 8015e60:	f8b5 c000 	ldrh.w	ip, [r5]
 8015e64:	4822      	ldr	r0, [pc, #136]	; (8015ef0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8015e66:	4461      	add	r1, ip
 8015e68:	1c4a      	adds	r2, r1, #1
 8015e6a:	f022 0201 	bic.w	r2, r2, #1
 8015e6e:	008f      	lsls	r7, r1, #2
 8015e70:	0412      	lsls	r2, r2, #16
 8015e72:	19de      	adds	r6, r3, r7
 8015e74:	0c12      	lsrs	r2, r2, #16
 8015e76:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8015e7a:	6006      	str	r6, [r0, #0]
 8015e7c:	4e1d      	ldr	r6, [pc, #116]	; (8015ef4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8015e7e:	19da      	adds	r2, r3, r7
 8015e80:	6032      	str	r2, [r6, #0]
 8015e82:	220e      	movs	r2, #14
 8015e84:	fb02 f20c 	mul.w	r2, r2, ip
 8015e88:	3203      	adds	r2, #3
 8015e8a:	f022 0203 	bic.w	r2, r2, #3
 8015e8e:	443a      	add	r2, r7
 8015e90:	4f19      	ldr	r7, [pc, #100]	; (8015ef8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8015e92:	4413      	add	r3, r2
 8015e94:	603b      	str	r3, [r7, #0]
 8015e96:	2300      	movs	r3, #0
 8015e98:	4f18      	ldr	r7, [pc, #96]	; (8015efc <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8015e9a:	469c      	mov	ip, r3
 8015e9c:	803b      	strh	r3, [r7, #0]
 8015e9e:	4f18      	ldr	r7, [pc, #96]	; (8015f00 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8015ea0:	683f      	ldr	r7, [r7, #0]
 8015ea2:	1aba      	subs	r2, r7, r2
 8015ea4:	4f17      	ldr	r7, [pc, #92]	; (8015f04 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8015ea6:	603a      	str	r2, [r7, #0]
 8015ea8:	f64f 77ff 	movw	r7, #65535	; 0xffff
 8015eac:	4a16      	ldr	r2, [pc, #88]	; (8015f08 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8015eae:	8013      	strh	r3, [r2, #0]
 8015eb0:	428b      	cmp	r3, r1
 8015eb2:	d10d      	bne.n	8015ed0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8015eb4:	2300      	movs	r3, #0
 8015eb6:	240e      	movs	r4, #14
 8015eb8:	882d      	ldrh	r5, [r5, #0]
 8015eba:	6830      	ldr	r0, [r6, #0]
 8015ebc:	429d      	cmp	r5, r3
 8015ebe:	d90f      	bls.n	8015ee0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8015ec0:	fb04 0203 	mla	r2, r4, r3, r0
 8015ec4:	7b11      	ldrb	r1, [r2, #12]
 8015ec6:	3301      	adds	r3, #1
 8015ec8:	f36f 1145 	bfc	r1, #5, #1
 8015ecc:	7311      	strb	r1, [r2, #12]
 8015ece:	e7f5      	b.n	8015ebc <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 8015ed0:	6822      	ldr	r2, [r4, #0]
 8015ed2:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8015ed6:	6802      	ldr	r2, [r0, #0]
 8015ed8:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8015edc:	3301      	adds	r3, #1
 8015ede:	e7e7      	b.n	8015eb0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 8015ee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ee2:	bf00      	nop
 8015ee4:	2001feec 	.word	0x2001feec
 8015ee8:	2001ff08 	.word	0x2001ff08
 8015eec:	2001ff0c 	.word	0x2001ff0c
 8015ef0:	2001ff00 	.word	0x2001ff00
 8015ef4:	2001fef0 	.word	0x2001fef0
 8015ef8:	2001fef8 	.word	0x2001fef8
 8015efc:	2001ff0a 	.word	0x2001ff0a
 8015f00:	2001fef4 	.word	0x2001fef4
 8015f04:	2001ff04 	.word	0x2001ff04
 8015f08:	2001fefc 	.word	0x2001fefc

08015f0c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 8015f0c:	4b06      	ldr	r3, [pc, #24]	; (8015f28 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 8015f0e:	681b      	ldr	r3, [r3, #0]
 8015f10:	b943      	cbnz	r3, 8015f24 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8015f12:	b139      	cbz	r1, 8015f24 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 8015f14:	4b05      	ldr	r3, [pc, #20]	; (8015f2c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 8015f16:	801a      	strh	r2, [r3, #0]
 8015f18:	4b05      	ldr	r3, [pc, #20]	; (8015f30 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 8015f1a:	6019      	str	r1, [r3, #0]
 8015f1c:	4b05      	ldr	r3, [pc, #20]	; (8015f34 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8015f1e:	6018      	str	r0, [r3, #0]
 8015f20:	f7ff bf96 	b.w	8015e50 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8015f24:	4770      	bx	lr
 8015f26:	bf00      	nop
 8015f28:	2001fef8 	.word	0x2001fef8
 8015f2c:	2001ff0c 	.word	0x2001ff0c
 8015f30:	2001fef4 	.word	0x2001fef4
 8015f34:	2001feec 	.word	0x2001feec

08015f38 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 8015f38:	b470      	push	{r4, r5, r6}
 8015f3a:	4c07      	ldr	r4, [pc, #28]	; (8015f58 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8015f3c:	4605      	mov	r5, r0
 8015f3e:	6826      	ldr	r6, [r4, #0]
 8015f40:	4610      	mov	r0, r2
 8015f42:	9a03      	ldr	r2, [sp, #12]
 8015f44:	b936      	cbnz	r6, 8015f54 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8015f46:	6025      	str	r5, [r4, #0]
 8015f48:	4c04      	ldr	r4, [pc, #16]	; (8015f5c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8015f4a:	8021      	strh	r1, [r4, #0]
 8015f4c:	bc70      	pop	{r4, r5, r6}
 8015f4e:	4619      	mov	r1, r3
 8015f50:	f7ff bfdc 	b.w	8015f0c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8015f54:	bc70      	pop	{r4, r5, r6}
 8015f56:	4770      	bx	lr
 8015f58:	2001ff10 	.word	0x2001ff10
 8015f5c:	2001ff08 	.word	0x2001ff08

08015f60 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8015f60:	4a12      	ldr	r2, [pc, #72]	; (8015fac <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8015f62:	8803      	ldrh	r3, [r0, #0]
 8015f64:	8812      	ldrh	r2, [r2, #0]
 8015f66:	4293      	cmp	r3, r2
 8015f68:	d207      	bcs.n	8015f7a <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8015f6a:	2114      	movs	r1, #20
 8015f6c:	4a10      	ldr	r2, [pc, #64]	; (8015fb0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8015f6e:	6812      	ldr	r2, [r2, #0]
 8015f70:	fb01 2303 	mla	r3, r1, r3, r2
 8015f74:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8015f78:	4770      	bx	lr
 8015f7a:	490e      	ldr	r1, [pc, #56]	; (8015fb4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8015f7c:	8809      	ldrh	r1, [r1, #0]
 8015f7e:	4411      	add	r1, r2
 8015f80:	428b      	cmp	r3, r1
 8015f82:	da04      	bge.n	8015f8e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8015f84:	1a9b      	subs	r3, r3, r2
 8015f86:	4a0c      	ldr	r2, [pc, #48]	; (8015fb8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8015f88:	210e      	movs	r1, #14
 8015f8a:	6812      	ldr	r2, [r2, #0]
 8015f8c:	e7f0      	b.n	8015f70 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8015f8e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015f92:	4293      	cmp	r3, r2
 8015f94:	d108      	bne.n	8015fa8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8015f96:	4b09      	ldr	r3, [pc, #36]	; (8015fbc <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8015f98:	781b      	ldrb	r3, [r3, #0]
 8015f9a:	b91b      	cbnz	r3, 8015fa4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8015f9c:	4b08      	ldr	r3, [pc, #32]	; (8015fc0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8015f9e:	f9b3 0000 	ldrsh.w	r0, [r3]
 8015fa2:	4770      	bx	lr
 8015fa4:	4b07      	ldr	r3, [pc, #28]	; (8015fc4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8015fa6:	e7fa      	b.n	8015f9e <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8015fa8:	2000      	movs	r0, #0
 8015faa:	4770      	bx	lr
 8015fac:	2001ff08 	.word	0x2001ff08
 8015fb0:	2001ff10 	.word	0x2001ff10
 8015fb4:	2001ff0c 	.word	0x2001ff0c
 8015fb8:	2001fef0 	.word	0x2001fef0
 8015fbc:	2001fe80 	.word	0x2001fe80
 8015fc0:	2001fe82 	.word	0x2001fe82
 8015fc4:	2001fe84 	.word	0x2001fe84

08015fc8 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8015fc8:	4a12      	ldr	r2, [pc, #72]	; (8016014 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8015fca:	8803      	ldrh	r3, [r0, #0]
 8015fcc:	8812      	ldrh	r2, [r2, #0]
 8015fce:	4293      	cmp	r3, r2
 8015fd0:	d207      	bcs.n	8015fe2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 8015fd2:	2114      	movs	r1, #20
 8015fd4:	4a10      	ldr	r2, [pc, #64]	; (8016018 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8015fd6:	6812      	ldr	r2, [r2, #0]
 8015fd8:	fb01 2303 	mla	r3, r1, r3, r2
 8015fdc:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 8015fe0:	4770      	bx	lr
 8015fe2:	490e      	ldr	r1, [pc, #56]	; (801601c <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 8015fe4:	8809      	ldrh	r1, [r1, #0]
 8015fe6:	4411      	add	r1, r2
 8015fe8:	428b      	cmp	r3, r1
 8015fea:	da04      	bge.n	8015ff6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 8015fec:	1a9b      	subs	r3, r3, r2
 8015fee:	4a0c      	ldr	r2, [pc, #48]	; (8016020 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8015ff0:	210e      	movs	r1, #14
 8015ff2:	6812      	ldr	r2, [r2, #0]
 8015ff4:	e7f0      	b.n	8015fd8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 8015ff6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8015ffa:	4293      	cmp	r3, r2
 8015ffc:	d108      	bne.n	8016010 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 8015ffe:	4b09      	ldr	r3, [pc, #36]	; (8016024 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8016000:	781b      	ldrb	r3, [r3, #0]
 8016002:	b91b      	cbnz	r3, 801600c <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 8016004:	4b08      	ldr	r3, [pc, #32]	; (8016028 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 8016006:	f9b3 0000 	ldrsh.w	r0, [r3]
 801600a:	4770      	bx	lr
 801600c:	4b07      	ldr	r3, [pc, #28]	; (801602c <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801600e:	e7fa      	b.n	8016006 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 8016010:	2000      	movs	r0, #0
 8016012:	4770      	bx	lr
 8016014:	2001ff08 	.word	0x2001ff08
 8016018:	2001ff10 	.word	0x2001ff10
 801601c:	2001ff0c 	.word	0x2001ff0c
 8016020:	2001fef0 	.word	0x2001fef0
 8016024:	2001fe80 	.word	0x2001fe80
 8016028:	2001fe84 	.word	0x2001fe84
 801602c:	2001fe82 	.word	0x2001fe82

08016030 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8016030:	b510      	push	{r4, lr}
 8016032:	4a1f      	ldr	r2, [pc, #124]	; (80160b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>)
 8016034:	880b      	ldrh	r3, [r1, #0]
 8016036:	8812      	ldrh	r2, [r2, #0]
 8016038:	4293      	cmp	r3, r2
 801603a:	d213      	bcs.n	8016064 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801603c:	2114      	movs	r1, #20
 801603e:	4a1d      	ldr	r2, [pc, #116]	; (80160b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x84>)
 8016040:	6812      	ldr	r2, [r2, #0]
 8016042:	fb01 2303 	mla	r3, r1, r3, r2
 8016046:	8a1a      	ldrh	r2, [r3, #16]
 8016048:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801604c:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8016050:	8a5b      	ldrh	r3, [r3, #18]
 8016052:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8016056:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801605a:	8004      	strh	r4, [r0, #0]
 801605c:	8041      	strh	r1, [r0, #2]
 801605e:	8082      	strh	r2, [r0, #4]
 8016060:	80c3      	strh	r3, [r0, #6]
 8016062:	e00e      	b.n	8016082 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 8016064:	4914      	ldr	r1, [pc, #80]	; (80160b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x88>)
 8016066:	8809      	ldrh	r1, [r1, #0]
 8016068:	4411      	add	r1, r2
 801606a:	428b      	cmp	r3, r1
 801606c:	da0a      	bge.n	8016084 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x54>
 801606e:	210e      	movs	r1, #14
 8016070:	1a9b      	subs	r3, r3, r2
 8016072:	4a12      	ldr	r2, [pc, #72]	; (80160bc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8016074:	6812      	ldr	r2, [r2, #0]
 8016076:	fb01 2303 	mla	r3, r1, r3, r2
 801607a:	681a      	ldr	r2, [r3, #0]
 801607c:	6002      	str	r2, [r0, #0]
 801607e:	685a      	ldr	r2, [r3, #4]
 8016080:	6042      	str	r2, [r0, #4]
 8016082:	bd10      	pop	{r4, pc}
 8016084:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016088:	4293      	cmp	r3, r2
 801608a:	d10b      	bne.n	80160a4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x74>
 801608c:	4b0c      	ldr	r3, [pc, #48]	; (80160c0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801608e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016092:	4b0c      	ldr	r3, [pc, #48]	; (80160c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8016094:	8081      	strh	r1, [r0, #4]
 8016096:	f9b3 2000 	ldrsh.w	r2, [r3]
 801609a:	2300      	movs	r3, #0
 801609c:	80c2      	strh	r2, [r0, #6]
 801609e:	8003      	strh	r3, [r0, #0]
 80160a0:	8043      	strh	r3, [r0, #2]
 80160a2:	e7ee      	b.n	8016082 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x52>
 80160a4:	2300      	movs	r3, #0
 80160a6:	8003      	strh	r3, [r0, #0]
 80160a8:	8043      	strh	r3, [r0, #2]
 80160aa:	8083      	strh	r3, [r0, #4]
 80160ac:	e7d8      	b.n	8016060 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 80160ae:	bf00      	nop
 80160b0:	2001ff08 	.word	0x2001ff08
 80160b4:	2001ff10 	.word	0x2001ff10
 80160b8:	2001ff0c 	.word	0x2001ff0c
 80160bc:	2001fef0 	.word	0x2001fef0
 80160c0:	2001fe7c 	.word	0x2001fe7c
 80160c4:	2001fe7e 	.word	0x2001fe7e

080160c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 80160c8:	4a17      	ldr	r2, [pc, #92]	; (8016128 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 80160ca:	8803      	ldrh	r3, [r0, #0]
 80160cc:	8812      	ldrh	r2, [r2, #0]
 80160ce:	4293      	cmp	r3, r2
 80160d0:	d213      	bcs.n	80160fa <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 80160d2:	2114      	movs	r1, #20
 80160d4:	4a15      	ldr	r2, [pc, #84]	; (801612c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 80160d6:	6812      	ldr	r2, [r2, #0]
 80160d8:	fb01 2303 	mla	r3, r1, r3, r2
 80160dc:	8a1a      	ldrh	r2, [r3, #16]
 80160de:	8919      	ldrh	r1, [r3, #8]
 80160e0:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80160e4:	428a      	cmp	r2, r1
 80160e6:	db1d      	blt.n	8016124 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 80160e8:	8a58      	ldrh	r0, [r3, #18]
 80160ea:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80160ee:	895b      	ldrh	r3, [r3, #10]
 80160f0:	4298      	cmp	r0, r3
 80160f2:	bfac      	ite	ge
 80160f4:	2000      	movge	r0, #0
 80160f6:	2001      	movlt	r0, #1
 80160f8:	4770      	bx	lr
 80160fa:	490d      	ldr	r1, [pc, #52]	; (8016130 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80160fc:	8809      	ldrh	r1, [r1, #0]
 80160fe:	4411      	add	r1, r2
 8016100:	428b      	cmp	r3, r1
 8016102:	da0d      	bge.n	8016120 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8016104:	210e      	movs	r1, #14
 8016106:	1a9b      	subs	r3, r3, r2
 8016108:	4a0a      	ldr	r2, [pc, #40]	; (8016134 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801610a:	6812      	ldr	r2, [r2, #0]
 801610c:	fb01 2303 	mla	r3, r1, r3, r2
 8016110:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 8016114:	891a      	ldrh	r2, [r3, #8]
 8016116:	4291      	cmp	r1, r2
 8016118:	db04      	blt.n	8016124 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801611a:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801611e:	e7e6      	b.n	80160ee <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 8016120:	2000      	movs	r0, #0
 8016122:	4770      	bx	lr
 8016124:	2001      	movs	r0, #1
 8016126:	4770      	bx	lr
 8016128:	2001ff08 	.word	0x2001ff08
 801612c:	2001ff10 	.word	0x2001ff10
 8016130:	2001ff0c 	.word	0x2001ff0c
 8016134:	2001fef0 	.word	0x2001fef0

08016138 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8016138:	4a12      	ldr	r2, [pc, #72]	; (8016184 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801613a:	8803      	ldrh	r3, [r0, #0]
 801613c:	8811      	ldrh	r1, [r2, #0]
 801613e:	428b      	cmp	r3, r1
 8016140:	d20b      	bcs.n	801615a <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 8016142:	4a11      	ldr	r2, [pc, #68]	; (8016188 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8016144:	6812      	ldr	r2, [r2, #0]
 8016146:	b112      	cbz	r2, 801614e <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8016148:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801614c:	b9c0      	cbnz	r0, 8016180 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801614e:	4a0f      	ldr	r2, [pc, #60]	; (801618c <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8016150:	6811      	ldr	r1, [r2, #0]
 8016152:	2214      	movs	r2, #20
 8016154:	4353      	muls	r3, r2
 8016156:	58c8      	ldr	r0, [r1, r3]
 8016158:	4770      	bx	lr
 801615a:	4a0d      	ldr	r2, [pc, #52]	; (8016190 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801615c:	8812      	ldrh	r2, [r2, #0]
 801615e:	440a      	add	r2, r1
 8016160:	4293      	cmp	r3, r2
 8016162:	da04      	bge.n	801616e <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8016164:	4a08      	ldr	r2, [pc, #32]	; (8016188 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8016166:	6812      	ldr	r2, [r2, #0]
 8016168:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801616c:	4770      	bx	lr
 801616e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016172:	4293      	cmp	r3, r2
 8016174:	d103      	bne.n	801617e <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8016176:	4b07      	ldr	r3, [pc, #28]	; (8016194 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8016178:	681b      	ldr	r3, [r3, #0]
 801617a:	6c58      	ldr	r0, [r3, #68]	; 0x44
 801617c:	4770      	bx	lr
 801617e:	2000      	movs	r0, #0
 8016180:	4770      	bx	lr
 8016182:	bf00      	nop
 8016184:	2001ff08 	.word	0x2001ff08
 8016188:	2001feec 	.word	0x2001feec
 801618c:	2001ff10 	.word	0x2001ff10
 8016190:	2001ff0c 	.word	0x2001ff0c
 8016194:	2001fe88 	.word	0x2001fe88

08016198 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8016198:	4b24      	ldr	r3, [pc, #144]	; (801622c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801619a:	8802      	ldrh	r2, [r0, #0]
 801619c:	8818      	ldrh	r0, [r3, #0]
 801619e:	4282      	cmp	r2, r0
 80161a0:	d221      	bcs.n	80161e6 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 80161a2:	4b23      	ldr	r3, [pc, #140]	; (8016230 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 80161a4:	6819      	ldr	r1, [r3, #0]
 80161a6:	2314      	movs	r3, #20
 80161a8:	fb03 1302 	mla	r3, r3, r2, r1
 80161ac:	6858      	ldr	r0, [r3, #4]
 80161ae:	2800      	cmp	r0, #0
 80161b0:	d03a      	beq.n	8016228 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80161b2:	4920      	ldr	r1, [pc, #128]	; (8016234 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80161b4:	6809      	ldr	r1, [r1, #0]
 80161b6:	2900      	cmp	r1, #0
 80161b8:	d036      	beq.n	8016228 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80161ba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80161be:	2900      	cmp	r1, #0
 80161c0:	d032      	beq.n	8016228 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 80161c2:	891a      	ldrh	r2, [r3, #8]
 80161c4:	8958      	ldrh	r0, [r3, #10]
 80161c6:	4350      	muls	r0, r2
 80161c8:	7c5a      	ldrb	r2, [r3, #17]
 80161ca:	7cdb      	ldrb	r3, [r3, #19]
 80161cc:	0952      	lsrs	r2, r2, #5
 80161ce:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80161d2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80161d6:	2b0b      	cmp	r3, #11
 80161d8:	bf18      	it	ne
 80161da:	0040      	lslne	r0, r0, #1
 80161dc:	3003      	adds	r0, #3
 80161de:	f020 0003 	bic.w	r0, r0, #3
 80161e2:	4408      	add	r0, r1
 80161e4:	4770      	bx	lr
 80161e6:	4b14      	ldr	r3, [pc, #80]	; (8016238 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80161e8:	881b      	ldrh	r3, [r3, #0]
 80161ea:	4403      	add	r3, r0
 80161ec:	429a      	cmp	r2, r3
 80161ee:	da1a      	bge.n	8016226 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80161f0:	210e      	movs	r1, #14
 80161f2:	4b12      	ldr	r3, [pc, #72]	; (801623c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80161f4:	1a10      	subs	r0, r2, r0
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	fb01 3000 	mla	r0, r1, r0, r3
 80161fc:	7b03      	ldrb	r3, [r0, #12]
 80161fe:	f003 031f 	and.w	r3, r3, #31
 8016202:	2b0b      	cmp	r3, #11
 8016204:	d10b      	bne.n	801621e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 8016206:	8903      	ldrh	r3, [r0, #8]
 8016208:	8940      	ldrh	r0, [r0, #10]
 801620a:	4358      	muls	r0, r3
 801620c:	4b09      	ldr	r3, [pc, #36]	; (8016234 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801620e:	3003      	adds	r0, #3
 8016210:	6819      	ldr	r1, [r3, #0]
 8016212:	f020 0303 	bic.w	r3, r0, #3
 8016216:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801621a:	4418      	add	r0, r3
 801621c:	4770      	bx	lr
 801621e:	2b0d      	cmp	r3, #13
 8016220:	d101      	bne.n	8016226 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 8016222:	300d      	adds	r0, #13
 8016224:	4770      	bx	lr
 8016226:	2000      	movs	r0, #0
 8016228:	4770      	bx	lr
 801622a:	bf00      	nop
 801622c:	2001ff08 	.word	0x2001ff08
 8016230:	2001ff10 	.word	0x2001ff10
 8016234:	2001feec 	.word	0x2001feec
 8016238:	2001ff0c 	.word	0x2001ff0c
 801623c:	2001fef0 	.word	0x2001fef0

08016240 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8016240:	b510      	push	{r4, lr}
 8016242:	4a17      	ldr	r2, [pc, #92]	; (80162a0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>)
 8016244:	8803      	ldrh	r3, [r0, #0]
 8016246:	8812      	ldrh	r2, [r2, #0]
 8016248:	4293      	cmp	r3, r2
 801624a:	d20c      	bcs.n	8016266 <_ZNK8touchgfx6Bitmap9getFormatEv+0x26>
 801624c:	2114      	movs	r1, #20
 801624e:	4a15      	ldr	r2, [pc, #84]	; (80162a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x64>)
 8016250:	6812      	ldr	r2, [r2, #0]
 8016252:	fb01 2303 	mla	r3, r1, r3, r2
 8016256:	7c58      	ldrb	r0, [r3, #17]
 8016258:	0942      	lsrs	r2, r0, #5
 801625a:	7cd8      	ldrb	r0, [r3, #19]
 801625c:	f3c0 1042 	ubfx	r0, r0, #5, #3
 8016260:	ea40 00c2 	orr.w	r0, r0, r2, lsl #3
 8016264:	bd10      	pop	{r4, pc}
 8016266:	4910      	ldr	r1, [pc, #64]	; (80162a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>)
 8016268:	8809      	ldrh	r1, [r1, #0]
 801626a:	4411      	add	r1, r2
 801626c:	428b      	cmp	r3, r1
 801626e:	da09      	bge.n	8016284 <_ZNK8touchgfx6Bitmap9getFormatEv+0x44>
 8016270:	210e      	movs	r1, #14
 8016272:	1a9b      	subs	r3, r3, r2
 8016274:	4a0d      	ldr	r2, [pc, #52]	; (80162ac <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>)
 8016276:	6812      	ldr	r2, [r2, #0]
 8016278:	fb01 2303 	mla	r3, r1, r3, r2
 801627c:	7b18      	ldrb	r0, [r3, #12]
 801627e:	f000 001f 	and.w	r0, r0, #31
 8016282:	e7ef      	b.n	8016264 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 8016284:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016288:	4293      	cmp	r3, r2
 801628a:	d106      	bne.n	801629a <_ZNK8touchgfx6Bitmap9getFormatEv+0x5a>
 801628c:	f7f7 fed4 	bl	800e038 <_ZN8touchgfx3HAL3lcdEv>
 8016290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016294:	6803      	ldr	r3, [r0, #0]
 8016296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016298:	4718      	bx	r3
 801629a:	2000      	movs	r0, #0
 801629c:	e7e2      	b.n	8016264 <_ZNK8touchgfx6Bitmap9getFormatEv+0x24>
 801629e:	bf00      	nop
 80162a0:	2001ff08 	.word	0x2001ff08
 80162a4:	2001ff10 	.word	0x2001ff10
 80162a8:	2001ff0c 	.word	0x2001ff0c
 80162ac:	2001fef0 	.word	0x2001fef0

080162b0 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 80162b0:	2010      	movs	r0, #16
 80162b2:	4770      	bx	lr

080162b4 <_ZNK8touchgfx8LCD16bpp17framebufferFormatEv>:
 80162b4:	2000      	movs	r0, #0
 80162b6:	4770      	bx	lr

080162b8 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv>:
 80162b8:	4b02      	ldr	r3, [pc, #8]	; (80162c4 <_ZNK8touchgfx8LCD16bpp17framebufferStrideEv+0xc>)
 80162ba:	8818      	ldrh	r0, [r3, #0]
 80162bc:	0040      	lsls	r0, r0, #1
 80162be:	b280      	uxth	r0, r0
 80162c0:	4770      	bx	lr
 80162c2:	bf00      	nop
 80162c4:	2001fe82 	.word	0x2001fe82

080162c8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80162c8:	2bff      	cmp	r3, #255	; 0xff
 80162ca:	d050      	beq.n	801636e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa6>
 80162cc:	2a0b      	cmp	r2, #11
 80162ce:	d04a      	beq.n	8016366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80162d0:	d80e      	bhi.n	80162f0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x28>
 80162d2:	2a03      	cmp	r2, #3
 80162d4:	d03f      	beq.n	8016356 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 80162d6:	d804      	bhi.n	80162e2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1a>
 80162d8:	2a01      	cmp	r2, #1
 80162da:	d03e      	beq.n	801635a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 80162dc:	d93f      	bls.n	801635e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80162de:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80162e0:	4770      	bx	lr
 80162e2:	2a09      	cmp	r2, #9
 80162e4:	d03f      	beq.n	8016366 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80162e6:	d83c      	bhi.n	8016362 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80162e8:	2a08      	cmp	r2, #8
 80162ea:	d03a      	beq.n	8016362 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80162ec:	2000      	movs	r0, #0
 80162ee:	4770      	bx	lr
 80162f0:	2a2f      	cmp	r2, #47	; 0x2f
 80162f2:	d024      	beq.n	801633e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x76>
 80162f4:	d80d      	bhi.n	8016312 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x4a>
 80162f6:	2a2d      	cmp	r2, #45	; 0x2d
 80162f8:	d014      	beq.n	8016324 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x5c>
 80162fa:	d826      	bhi.n	801634a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x82>
 80162fc:	2a2c      	cmp	r2, #44	; 0x2c
 80162fe:	d1f5      	bne.n	80162ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016300:	684b      	ldr	r3, [r1, #4]
 8016302:	781b      	ldrb	r3, [r3, #0]
 8016304:	2b01      	cmp	r3, #1
 8016306:	d018      	beq.n	801633a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x72>
 8016308:	d323      	bcc.n	8016352 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801630a:	2b02      	cmp	r3, #2
 801630c:	d1ee      	bne.n	80162ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801630e:	6880      	ldr	r0, [r0, #8]
 8016310:	4770      	bx	lr
 8016312:	2a31      	cmp	r2, #49	; 0x31
 8016314:	d004      	beq.n	8016320 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x58>
 8016316:	d328      	bcc.n	801636a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 8016318:	2a32      	cmp	r2, #50	; 0x32
 801631a:	d026      	beq.n	801636a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xa2>
 801631c:	2a33      	cmp	r2, #51	; 0x33
 801631e:	d1e5      	bne.n	80162ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016320:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8016322:	4770      	bx	lr
 8016324:	684b      	ldr	r3, [r1, #4]
 8016326:	781b      	ldrb	r3, [r3, #0]
 8016328:	2b01      	cmp	r3, #1
 801632a:	d004      	beq.n	8016336 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6e>
 801632c:	d30b      	bcc.n	8016346 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801632e:	2b02      	cmp	r3, #2
 8016330:	d1dc      	bne.n	80162ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016332:	6900      	ldr	r0, [r0, #16]
 8016334:	4770      	bx	lr
 8016336:	6a00      	ldr	r0, [r0, #32]
 8016338:	4770      	bx	lr
 801633a:	6980      	ldr	r0, [r0, #24]
 801633c:	4770      	bx	lr
 801633e:	684b      	ldr	r3, [r1, #4]
 8016340:	781b      	ldrb	r3, [r3, #0]
 8016342:	2b00      	cmp	r3, #0
 8016344:	d1d2      	bne.n	80162ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016346:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8016348:	4770      	bx	lr
 801634a:	684b      	ldr	r3, [r1, #4]
 801634c:	781b      	ldrb	r3, [r3, #0]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d1cc      	bne.n	80162ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 8016352:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8016354:	4770      	bx	lr
 8016356:	6c80      	ldr	r0, [r0, #72]	; 0x48
 8016358:	4770      	bx	lr
 801635a:	6d00      	ldr	r0, [r0, #80]	; 0x50
 801635c:	4770      	bx	lr
 801635e:	6c00      	ldr	r0, [r0, #64]	; 0x40
 8016360:	4770      	bx	lr
 8016362:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8016364:	4770      	bx	lr
 8016366:	6e00      	ldr	r0, [r0, #96]	; 0x60
 8016368:	4770      	bx	lr
 801636a:	6e80      	ldr	r0, [r0, #104]	; 0x68
 801636c:	4770      	bx	lr
 801636e:	2a0b      	cmp	r2, #11
 8016370:	d049      	beq.n	8016406 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8016372:	d80e      	bhi.n	8016392 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xca>
 8016374:	2a03      	cmp	r2, #3
 8016376:	d040      	beq.n	80163fa <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8016378:	d804      	bhi.n	8016384 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xbc>
 801637a:	2a01      	cmp	r2, #1
 801637c:	d03f      	beq.n	80163fe <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x136>
 801637e:	d940      	bls.n	8016402 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13a>
 8016380:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8016382:	4770      	bx	lr
 8016384:	2a09      	cmp	r2, #9
 8016386:	d03e      	beq.n	8016406 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x13e>
 8016388:	d801      	bhi.n	801638e <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc6>
 801638a:	2a08      	cmp	r2, #8
 801638c:	d1ae      	bne.n	80162ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 801638e:	6dc0      	ldr	r0, [r0, #92]	; 0x5c
 8016390:	4770      	bx	lr
 8016392:	2a2f      	cmp	r2, #47	; 0x2f
 8016394:	d024      	beq.n	80163e0 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8016396:	d80d      	bhi.n	80163b4 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8016398:	2a2d      	cmp	r2, #45	; 0x2d
 801639a:	d014      	beq.n	80163c6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfe>
 801639c:	d826      	bhi.n	80163ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x124>
 801639e:	2a2c      	cmp	r2, #44	; 0x2c
 80163a0:	d1a4      	bne.n	80162ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80163a2:	684b      	ldr	r3, [r1, #4]
 80163a4:	781b      	ldrb	r3, [r3, #0]
 80163a6:	2b01      	cmp	r3, #1
 80163a8:	d018      	beq.n	80163dc <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x114>
 80163aa:	d324      	bcc.n	80163f6 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 80163ac:	2b02      	cmp	r3, #2
 80163ae:	d19d      	bne.n	80162ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80163b0:	68c0      	ldr	r0, [r0, #12]
 80163b2:	4770      	bx	lr
 80163b4:	2a31      	cmp	r2, #49	; 0x31
 80163b6:	d004      	beq.n	80163c2 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xfa>
 80163b8:	d327      	bcc.n	801640a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 80163ba:	2a32      	cmp	r2, #50	; 0x32
 80163bc:	d025      	beq.n	801640a <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x142>
 80163be:	2a33      	cmp	r2, #51	; 0x33
 80163c0:	d194      	bne.n	80162ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80163c2:	6f40      	ldr	r0, [r0, #116]	; 0x74
 80163c4:	4770      	bx	lr
 80163c6:	684b      	ldr	r3, [r1, #4]
 80163c8:	781b      	ldrb	r3, [r3, #0]
 80163ca:	2b01      	cmp	r3, #1
 80163cc:	d004      	beq.n	80163d8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x110>
 80163ce:	d30b      	bcc.n	80163e8 <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x120>
 80163d0:	2b02      	cmp	r3, #2
 80163d2:	d18b      	bne.n	80162ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80163d4:	6940      	ldr	r0, [r0, #20]
 80163d6:	4770      	bx	lr
 80163d8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80163da:	4770      	bx	lr
 80163dc:	69c0      	ldr	r0, [r0, #28]
 80163de:	4770      	bx	lr
 80163e0:	684b      	ldr	r3, [r1, #4]
 80163e2:	781b      	ldrb	r3, [r3, #0]
 80163e4:	2b00      	cmp	r3, #0
 80163e6:	d181      	bne.n	80162ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80163e8:	6b40      	ldr	r0, [r0, #52]	; 0x34
 80163ea:	4770      	bx	lr
 80163ec:	684b      	ldr	r3, [r1, #4]
 80163ee:	781b      	ldrb	r3, [r3, #0]
 80163f0:	2b00      	cmp	r3, #0
 80163f2:	f47f af7b 	bne.w	80162ec <_ZN8touchgfx8LCD16bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x24>
 80163f6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80163f8:	4770      	bx	lr
 80163fa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 80163fc:	4770      	bx	lr
 80163fe:	6d40      	ldr	r0, [r0, #84]	; 0x54
 8016400:	4770      	bx	lr
 8016402:	6c40      	ldr	r0, [r0, #68]	; 0x44
 8016404:	4770      	bx	lr
 8016406:	6e40      	ldr	r0, [r0, #100]	; 0x64
 8016408:	4770      	bx	lr
 801640a:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
 801640c:	4770      	bx	lr

0801640e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801640e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016412:	b087      	sub	sp, #28
 8016414:	9815      	ldr	r0, [sp, #84]	; 0x54
 8016416:	9101      	str	r1, [sp, #4]
 8016418:	9205      	str	r2, [sp, #20]
 801641a:	6841      	ldr	r1, [r0, #4]
 801641c:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8016420:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8016424:	9202      	str	r2, [sp, #8]
 8016426:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801642a:	fb01 2404 	mla	r4, r1, r4, r2
 801642e:	6802      	ldr	r2, [r0, #0]
 8016430:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8016434:	f8de 2000 	ldr.w	r2, [lr]
 8016438:	9203      	str	r2, [sp, #12]
 801643a:	f8de 2004 	ldr.w	r2, [lr, #4]
 801643e:	3204      	adds	r2, #4
 8016440:	9204      	str	r2, [sp, #16]
 8016442:	9a02      	ldr	r2, [sp, #8]
 8016444:	43d6      	mvns	r6, r2
 8016446:	b2f6      	uxtb	r6, r6
 8016448:	9a01      	ldr	r2, [sp, #4]
 801644a:	2a00      	cmp	r2, #0
 801644c:	dc03      	bgt.n	8016456 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801644e:	9a05      	ldr	r2, [sp, #20]
 8016450:	2a00      	cmp	r2, #0
 8016452:	f340 8129 	ble.w	80166a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8016456:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016458:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801645c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8016460:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016462:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8016466:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801646a:	2b00      	cmp	r3, #0
 801646c:	dd0e      	ble.n	801648c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801646e:	1408      	asrs	r0, r1, #16
 8016470:	d405      	bmi.n	801647e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016472:	4560      	cmp	r0, ip
 8016474:	da03      	bge.n	801647e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016476:	1410      	asrs	r0, r2, #16
 8016478:	d401      	bmi.n	801647e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801647a:	42b8      	cmp	r0, r7
 801647c:	db07      	blt.n	801648e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801647e:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016480:	3b01      	subs	r3, #1
 8016482:	4401      	add	r1, r0
 8016484:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016486:	3402      	adds	r4, #2
 8016488:	4402      	add	r2, r0
 801648a:	e7ee      	b.n	801646a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801648c:	d071      	beq.n	8016572 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801648e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8016490:	1e58      	subs	r0, r3, #1
 8016492:	fb05 1500 	mla	r5, r5, r0, r1
 8016496:	142d      	asrs	r5, r5, #16
 8016498:	d45f      	bmi.n	801655a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801649a:	4565      	cmp	r5, ip
 801649c:	da5d      	bge.n	801655a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801649e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80164a0:	fb05 2000 	mla	r0, r5, r0, r2
 80164a4:	1400      	asrs	r0, r0, #16
 80164a6:	d458      	bmi.n	801655a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80164a8:	42b8      	cmp	r0, r7
 80164aa:	da56      	bge.n	801655a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 80164ac:	4699      	mov	r9, r3
 80164ae:	46a2      	mov	sl, r4
 80164b0:	f8bd b008 	ldrh.w	fp, [sp, #8]
 80164b4:	f1b9 0f00 	cmp.w	r9, #0
 80164b8:	dd57      	ble.n	801656a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80164ba:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80164be:	9803      	ldr	r0, [sp, #12]
 80164c0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80164c4:	fb07 000c 	mla	r0, r7, ip, r0
 80164c8:	140d      	asrs	r5, r1, #16
 80164ca:	5d40      	ldrb	r0, [r0, r5]
 80164cc:	9d04      	ldr	r5, [sp, #16]
 80164ce:	f109 39ff 	add.w	r9, r9, #4294967295
 80164d2:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80164d6:	f8ba 5000 	ldrh.w	r5, [sl]
 80164da:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80164de:	122f      	asrs	r7, r5, #8
 80164e0:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80164e4:	fb17 f706 	smulbb	r7, r7, r6
 80164e8:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80164ec:	00ed      	lsls	r5, r5, #3
 80164ee:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 80164f2:	b2ed      	uxtb	r5, r5
 80164f4:	fb18 f806 	smulbb	r8, r8, r6
 80164f8:	fb15 f506 	smulbb	r5, r5, r6
 80164fc:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8016500:	fb0c 7c0b 	mla	ip, ip, fp, r7
 8016504:	10c7      	asrs	r7, r0, #3
 8016506:	00c0      	lsls	r0, r0, #3
 8016508:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801650c:	b2c0      	uxtb	r0, r0
 801650e:	fb07 870b 	mla	r7, r7, fp, r8
 8016512:	fb00 500b 	mla	r0, r0, fp, r5
 8016516:	fa1f fc8c 	uxth.w	ip, ip
 801651a:	b280      	uxth	r0, r0
 801651c:	b2bf      	uxth	r7, r7
 801651e:	f10c 0501 	add.w	r5, ip, #1
 8016522:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8016526:	f107 0801 	add.w	r8, r7, #1
 801652a:	1c45      	adds	r5, r0, #1
 801652c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8016530:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 8016534:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016536:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801653a:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 801653e:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8016542:	ea45 0c0c 	orr.w	ip, r5, ip
 8016546:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801654a:	4401      	add	r1, r0
 801654c:	9814      	ldr	r0, [sp, #80]	; 0x50
 801654e:	ea4c 0c08 	orr.w	ip, ip, r8
 8016552:	f82a cb02 	strh.w	ip, [sl], #2
 8016556:	4402      	add	r2, r0
 8016558:	e7ac      	b.n	80164b4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801655a:	f04f 0800 	mov.w	r8, #0
 801655e:	f8bd a008 	ldrh.w	sl, [sp, #8]
 8016562:	eb03 0008 	add.w	r0, r3, r8
 8016566:	2800      	cmp	r0, #0
 8016568:	dc41      	bgt.n	80165ee <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801656a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801656e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016572:	9b01      	ldr	r3, [sp, #4]
 8016574:	2b00      	cmp	r3, #0
 8016576:	f340 8097 	ble.w	80166a8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801657a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801657e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016582:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016586:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801658a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801658e:	eef0 6a62 	vmov.f32	s13, s5
 8016592:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016596:	ee77 2a62 	vsub.f32	s5, s14, s5
 801659a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801659e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80165a2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80165a6:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 80165aa:	eef0 6a43 	vmov.f32	s13, s6
 80165ae:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80165b2:	ee12 2a90 	vmov	r2, s5
 80165b6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80165ba:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80165bc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80165c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80165c4:	ee13 2a10 	vmov	r2, s6
 80165c8:	9313      	str	r3, [sp, #76]	; 0x4c
 80165ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80165cc:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 80165d0:	fb92 f3f3 	sdiv	r3, r2, r3
 80165d4:	9314      	str	r3, [sp, #80]	; 0x50
 80165d6:	9b01      	ldr	r3, [sp, #4]
 80165d8:	9a05      	ldr	r2, [sp, #20]
 80165da:	3b01      	subs	r3, #1
 80165dc:	9301      	str	r3, [sp, #4]
 80165de:	eeb0 3a67 	vmov.f32	s6, s15
 80165e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80165e4:	eef0 2a47 	vmov.f32	s5, s14
 80165e8:	bf08      	it	eq
 80165ea:	4613      	moveq	r3, r2
 80165ec:	e72c      	b.n	8016448 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80165ee:	140f      	asrs	r7, r1, #16
 80165f0:	d453      	bmi.n	801669a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80165f2:	f8de 5008 	ldr.w	r5, [lr, #8]
 80165f6:	42bd      	cmp	r5, r7
 80165f8:	dd4f      	ble.n	801669a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 80165fa:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80165fe:	d44c      	bmi.n	801669a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8016600:	f8de 000c 	ldr.w	r0, [lr, #12]
 8016604:	4560      	cmp	r0, ip
 8016606:	dd48      	ble.n	801669a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 8016608:	9803      	ldr	r0, [sp, #12]
 801660a:	b22d      	sxth	r5, r5
 801660c:	fb0c 0505 	mla	r5, ip, r5, r0
 8016610:	5de8      	ldrb	r0, [r5, r7]
 8016612:	9d04      	ldr	r5, [sp, #16]
 8016614:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 8016618:	f06f 0501 	mvn.w	r5, #1
 801661c:	fb05 fb08 	mul.w	fp, r5, r8
 8016620:	f834 500b 	ldrh.w	r5, [r4, fp]
 8016624:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8016628:	122f      	asrs	r7, r5, #8
 801662a:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 801662e:	fb17 f706 	smulbb	r7, r7, r6
 8016632:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8016636:	00ed      	lsls	r5, r5, #3
 8016638:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 801663c:	b2ed      	uxtb	r5, r5
 801663e:	fb19 f906 	smulbb	r9, r9, r6
 8016642:	fb15 f506 	smulbb	r5, r5, r6
 8016646:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801664a:	fb0c 7c0a 	mla	ip, ip, sl, r7
 801664e:	10c7      	asrs	r7, r0, #3
 8016650:	00c0      	lsls	r0, r0, #3
 8016652:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8016656:	b2c0      	uxtb	r0, r0
 8016658:	fb07 970a 	mla	r7, r7, sl, r9
 801665c:	fb00 500a 	mla	r0, r0, sl, r5
 8016660:	fa1f fc8c 	uxth.w	ip, ip
 8016664:	b2bf      	uxth	r7, r7
 8016666:	b280      	uxth	r0, r0
 8016668:	f10c 0501 	add.w	r5, ip, #1
 801666c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8016670:	f107 0901 	add.w	r9, r7, #1
 8016674:	1c45      	adds	r5, r0, #1
 8016676:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801667a:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 801667e:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8016682:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8016686:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801668a:	ea45 0c0c 	orr.w	ip, r5, ip
 801668e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8016692:	ea4c 0c09 	orr.w	ip, ip, r9
 8016696:	f824 c00b 	strh.w	ip, [r4, fp]
 801669a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801669c:	f108 38ff 	add.w	r8, r8, #4294967295
 80166a0:	4401      	add	r1, r0
 80166a2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80166a4:	4402      	add	r2, r0
 80166a6:	e75c      	b.n	8016562 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80166a8:	b007      	add	sp, #28
 80166aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080166ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80166ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80166b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80166b6:	b085      	sub	sp, #20
 80166b8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80166ba:	4693      	mov	fp, r2
 80166bc:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 80166c0:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 80166c4:	6870      	ldr	r0, [r6, #4]
 80166c6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80166c8:	fb00 2404 	mla	r4, r0, r4, r2
 80166cc:	6832      	ldr	r2, [r6, #0]
 80166ce:	9100      	str	r1, [sp, #0]
 80166d0:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 80166d4:	682a      	ldr	r2, [r5, #0]
 80166d6:	9201      	str	r2, [sp, #4]
 80166d8:	686a      	ldr	r2, [r5, #4]
 80166da:	3204      	adds	r2, #4
 80166dc:	9202      	str	r2, [sp, #8]
 80166de:	9a00      	ldr	r2, [sp, #0]
 80166e0:	2a00      	cmp	r2, #0
 80166e2:	dc03      	bgt.n	80166ec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 80166e4:	f1bb 0f00 	cmp.w	fp, #0
 80166e8:	f340 80a0 	ble.w	801682c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 80166ec:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80166ee:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 80166f2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 80166f6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80166f8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 80166fc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8016700:	2b00      	cmp	r3, #0
 8016702:	dd0c      	ble.n	801671e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016704:	1406      	asrs	r6, r0, #16
 8016706:	d405      	bmi.n	8016714 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8016708:	454e      	cmp	r6, r9
 801670a:	da03      	bge.n	8016714 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801670c:	1416      	asrs	r6, r2, #16
 801670e:	d401      	bmi.n	8016714 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8016710:	4546      	cmp	r6, r8
 8016712:	db05      	blt.n	8016720 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8016714:	4470      	add	r0, lr
 8016716:	4462      	add	r2, ip
 8016718:	3b01      	subs	r3, #1
 801671a:	3402      	adds	r4, #2
 801671c:	e7f0      	b.n	8016700 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801671e:	d00f      	beq.n	8016740 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8016720:	1e5e      	subs	r6, r3, #1
 8016722:	fb0e 0706 	mla	r7, lr, r6, r0
 8016726:	143f      	asrs	r7, r7, #16
 8016728:	d541      	bpl.n	80167ae <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x100>
 801672a:	4698      	mov	r8, r3
 801672c:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8016730:	9603      	str	r6, [sp, #12]
 8016732:	f1b8 0f00 	cmp.w	r8, #0
 8016736:	dc59      	bgt.n	80167ec <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8016738:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801673c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016740:	9b00      	ldr	r3, [sp, #0]
 8016742:	2b00      	cmp	r3, #0
 8016744:	dd72      	ble.n	801682c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17e>
 8016746:	ee30 0a04 	vadd.f32	s0, s0, s8
 801674a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801674e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016752:	eeb0 6a62 	vmov.f32	s12, s5
 8016756:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801675a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801675e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016762:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016766:	ee77 2a62 	vsub.f32	s5, s14, s5
 801676a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 801676e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016772:	eeb0 6a43 	vmov.f32	s12, s6
 8016776:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801677a:	ee12 2a90 	vmov	r2, s5
 801677e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016782:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016784:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016788:	fb92 fef3 	sdiv	lr, r2, r3
 801678c:	ee13 2a10 	vmov	r2, s6
 8016790:	fb92 fcf3 	sdiv	ip, r2, r3
 8016794:	9b00      	ldr	r3, [sp, #0]
 8016796:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 801679a:	3b01      	subs	r3, #1
 801679c:	9300      	str	r3, [sp, #0]
 801679e:	eeb0 3a67 	vmov.f32	s6, s15
 80167a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80167a4:	eef0 2a47 	vmov.f32	s5, s14
 80167a8:	bf08      	it	eq
 80167aa:	465b      	moveq	r3, fp
 80167ac:	e797      	b.n	80166de <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 80167ae:	454f      	cmp	r7, r9
 80167b0:	dabb      	bge.n	801672a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80167b2:	fb0c 2606 	mla	r6, ip, r6, r2
 80167b6:	1436      	asrs	r6, r6, #16
 80167b8:	d4b7      	bmi.n	801672a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80167ba:	4546      	cmp	r6, r8
 80167bc:	dab5      	bge.n	801672a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80167be:	461e      	mov	r6, r3
 80167c0:	46a0      	mov	r8, r4
 80167c2:	2e00      	cmp	r6, #0
 80167c4:	ddb8      	ble.n	8016738 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 80167c6:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 80167ca:	9901      	ldr	r1, [sp, #4]
 80167cc:	1417      	asrs	r7, r2, #16
 80167ce:	fb0a 1707 	mla	r7, sl, r7, r1
 80167d2:	ea4f 4920 	mov.w	r9, r0, asr #16
 80167d6:	f817 7009 	ldrb.w	r7, [r7, r9]
 80167da:	9902      	ldr	r1, [sp, #8]
 80167dc:	4470      	add	r0, lr
 80167de:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 80167e2:	4462      	add	r2, ip
 80167e4:	f828 7b02 	strh.w	r7, [r8], #2
 80167e8:	3e01      	subs	r6, #1
 80167ea:	e7ea      	b.n	80167c2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 80167ec:	ea5f 4920 	movs.w	r9, r0, asr #16
 80167f0:	d417      	bmi.n	8016822 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80167f2:	68ae      	ldr	r6, [r5, #8]
 80167f4:	454e      	cmp	r6, r9
 80167f6:	dd14      	ble.n	8016822 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80167f8:	ea5f 4a22 	movs.w	sl, r2, asr #16
 80167fc:	d411      	bmi.n	8016822 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 80167fe:	68ef      	ldr	r7, [r5, #12]
 8016800:	4557      	cmp	r7, sl
 8016802:	dd0e      	ble.n	8016822 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x174>
 8016804:	f06f 0101 	mvn.w	r1, #1
 8016808:	9f01      	ldr	r7, [sp, #4]
 801680a:	b236      	sxth	r6, r6
 801680c:	fb0a 7606 	mla	r6, sl, r6, r7
 8016810:	9f02      	ldr	r7, [sp, #8]
 8016812:	f816 6009 	ldrb.w	r6, [r6, r9]
 8016816:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 801681a:	fb01 f608 	mul.w	r6, r1, r8
 801681e:	9903      	ldr	r1, [sp, #12]
 8016820:	538f      	strh	r7, [r1, r6]
 8016822:	4470      	add	r0, lr
 8016824:	4462      	add	r2, ip
 8016826:	f108 38ff 	add.w	r8, r8, #4294967295
 801682a:	e782      	b.n	8016732 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801682c:	b005      	add	sp, #20
 801682e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016832 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016832:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016836:	b087      	sub	sp, #28
 8016838:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801683a:	9102      	str	r1, [sp, #8]
 801683c:	9205      	str	r2, [sp, #20]
 801683e:	6861      	ldr	r1, [r4, #4]
 8016840:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8016844:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8016848:	9203      	str	r2, [sp, #12]
 801684a:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 801684e:	fb01 2000 	mla	r0, r1, r0, r2
 8016852:	6822      	ldr	r2, [r4, #0]
 8016854:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8016858:	9200      	str	r2, [sp, #0]
 801685a:	f8dc 2000 	ldr.w	r2, [ip]
 801685e:	9204      	str	r2, [sp, #16]
 8016860:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8016864:	3204      	adds	r2, #4
 8016866:	9201      	str	r2, [sp, #4]
 8016868:	9a03      	ldr	r2, [sp, #12]
 801686a:	43d5      	mvns	r5, r2
 801686c:	b2ed      	uxtb	r5, r5
 801686e:	9a02      	ldr	r2, [sp, #8]
 8016870:	2a00      	cmp	r2, #0
 8016872:	dc03      	bgt.n	801687c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8016874:	9a05      	ldr	r2, [sp, #20]
 8016876:	2a00      	cmp	r2, #0
 8016878:	f340 812c 	ble.w	8016ad4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801687c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801687e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8016882:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8016886:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016888:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801688c:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8016890:	2b00      	cmp	r3, #0
 8016892:	dd10      	ble.n	80168b6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8016894:	140c      	asrs	r4, r1, #16
 8016896:	d405      	bmi.n	80168a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8016898:	4574      	cmp	r4, lr
 801689a:	da03      	bge.n	80168a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801689c:	1414      	asrs	r4, r2, #16
 801689e:	d401      	bmi.n	80168a4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80168a0:	42bc      	cmp	r4, r7
 80168a2:	db09      	blt.n	80168b8 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80168a4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80168a6:	9800      	ldr	r0, [sp, #0]
 80168a8:	4421      	add	r1, r4
 80168aa:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80168ac:	3002      	adds	r0, #2
 80168ae:	4422      	add	r2, r4
 80168b0:	3b01      	subs	r3, #1
 80168b2:	9000      	str	r0, [sp, #0]
 80168b4:	e7ec      	b.n	8016890 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 80168b6:	d071      	beq.n	801699c <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 80168b8:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 80168ba:	1e5c      	subs	r4, r3, #1
 80168bc:	fb06 1604 	mla	r6, r6, r4, r1
 80168c0:	1436      	asrs	r6, r6, #16
 80168c2:	d45d      	bmi.n	8016980 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80168c4:	4576      	cmp	r6, lr
 80168c6:	da5b      	bge.n	8016980 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80168c8:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80168ca:	fb06 2404 	mla	r4, r6, r4, r2
 80168ce:	1424      	asrs	r4, r4, #16
 80168d0:	d456      	bmi.n	8016980 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80168d2:	42bc      	cmp	r4, r7
 80168d4:	da54      	bge.n	8016980 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80168d6:	4698      	mov	r8, r3
 80168d8:	f8dd 9000 	ldr.w	r9, [sp]
 80168dc:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 80168e0:	f1b8 0f00 	cmp.w	r8, #0
 80168e4:	dd54      	ble.n	8016990 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 80168e6:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 80168ea:	9804      	ldr	r0, [sp, #16]
 80168ec:	1414      	asrs	r4, r2, #16
 80168ee:	fb07 0404 	mla	r4, r7, r4, r0
 80168f2:	140e      	asrs	r6, r1, #16
 80168f4:	f814 e006 	ldrb.w	lr, [r4, r6]
 80168f8:	9801      	ldr	r0, [sp, #4]
 80168fa:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80168fe:	eb00 0b0e 	add.w	fp, r0, lr
 8016902:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8016906:	f8b9 4000 	ldrh.w	r4, [r9]
 801690a:	fb16 f60a 	smulbb	r6, r6, sl
 801690e:	1227      	asrs	r7, r4, #8
 8016910:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8016914:	fb07 6705 	mla	r7, r7, r5, r6
 8016918:	f89b b001 	ldrb.w	fp, [fp, #1]
 801691c:	10e6      	asrs	r6, r4, #3
 801691e:	00e4      	lsls	r4, r4, #3
 8016920:	b2e4      	uxtb	r4, r4
 8016922:	fb1b fb0a 	smulbb	fp, fp, sl
 8016926:	fb14 f405 	smulbb	r4, r4, r5
 801692a:	f810 e00e 	ldrb.w	lr, [r0, lr]
 801692e:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8016932:	fb06 b605 	mla	r6, r6, r5, fp
 8016936:	fb0e 4e0a 	mla	lr, lr, sl, r4
 801693a:	b2bf      	uxth	r7, r7
 801693c:	b2b6      	uxth	r6, r6
 801693e:	fa1f fe8e 	uxth.w	lr, lr
 8016942:	1c7c      	adds	r4, r7, #1
 8016944:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8016948:	f106 0b01 	add.w	fp, r6, #1
 801694c:	f10e 0401 	add.w	r4, lr, #1
 8016950:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016952:	eb04 241e 	add.w	r4, r4, lr, lsr #8
 8016956:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 801695a:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801695e:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8016962:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8016966:	4327      	orrs	r7, r4
 8016968:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801696c:	4401      	add	r1, r0
 801696e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016970:	ea47 070b 	orr.w	r7, r7, fp
 8016974:	f829 7b02 	strh.w	r7, [r9], #2
 8016978:	4402      	add	r2, r0
 801697a:	f108 38ff 	add.w	r8, r8, #4294967295
 801697e:	e7af      	b.n	80168e0 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xae>
 8016980:	f04f 0e00 	mov.w	lr, #0
 8016984:	f8bd 900c 	ldrh.w	r9, [sp, #12]
 8016988:	eb03 040e 	add.w	r4, r3, lr
 801698c:	2c00      	cmp	r4, #0
 801698e:	dc43      	bgt.n	8016a18 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8016990:	9a00      	ldr	r2, [sp, #0]
 8016992:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016996:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801699a:	9300      	str	r3, [sp, #0]
 801699c:	9b02      	ldr	r3, [sp, #8]
 801699e:	2b00      	cmp	r3, #0
 80169a0:	f340 8098 	ble.w	8016ad4 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 80169a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80169a8:	ee30 0a04 	vadd.f32	s0, s0, s8
 80169ac:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80169b0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80169b4:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80169b8:	eef0 6a62 	vmov.f32	s13, s5
 80169bc:	ee31 1a05 	vadd.f32	s2, s2, s10
 80169c0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80169c4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80169c8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80169cc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80169d0:	edcd 6a11 	vstr	s13, [sp, #68]	; 0x44
 80169d4:	eef0 6a43 	vmov.f32	s13, s6
 80169d8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80169dc:	ee12 2a90 	vmov	r2, s5
 80169e0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80169e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80169e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80169ea:	fb92 f3f3 	sdiv	r3, r2, r3
 80169ee:	ee13 2a10 	vmov	r2, s6
 80169f2:	9313      	str	r3, [sp, #76]	; 0x4c
 80169f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80169f6:	edcd 6a12 	vstr	s13, [sp, #72]	; 0x48
 80169fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80169fe:	9314      	str	r3, [sp, #80]	; 0x50
 8016a00:	9b02      	ldr	r3, [sp, #8]
 8016a02:	9a05      	ldr	r2, [sp, #20]
 8016a04:	3b01      	subs	r3, #1
 8016a06:	9302      	str	r3, [sp, #8]
 8016a08:	eeb0 3a67 	vmov.f32	s6, s15
 8016a0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016a0e:	eef0 2a47 	vmov.f32	s5, s14
 8016a12:	bf08      	it	eq
 8016a14:	4613      	moveq	r3, r2
 8016a16:	e72a      	b.n	801686e <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8016a18:	140f      	asrs	r7, r1, #16
 8016a1a:	d454      	bmi.n	8016ac6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8016a1c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016a20:	42be      	cmp	r6, r7
 8016a22:	dd50      	ble.n	8016ac6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8016a24:	ea5f 4822 	movs.w	r8, r2, asr #16
 8016a28:	d44d      	bmi.n	8016ac6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8016a2a:	f8dc 400c 	ldr.w	r4, [ip, #12]
 8016a2e:	4544      	cmp	r4, r8
 8016a30:	dd49      	ble.n	8016ac6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 8016a32:	f06f 0001 	mvn.w	r0, #1
 8016a36:	9c04      	ldr	r4, [sp, #16]
 8016a38:	b236      	sxth	r6, r6
 8016a3a:	fb08 4606 	mla	r6, r8, r6, r4
 8016a3e:	f816 8007 	ldrb.w	r8, [r6, r7]
 8016a42:	9c01      	ldr	r4, [sp, #4]
 8016a44:	fb00 fa0e 	mul.w	sl, r0, lr
 8016a48:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8016a4c:	eb04 0b08 	add.w	fp, r4, r8
 8016a50:	f89b 6002 	ldrb.w	r6, [fp, #2]
 8016a54:	9800      	ldr	r0, [sp, #0]
 8016a56:	fb16 f609 	smulbb	r6, r6, r9
 8016a5a:	f830 400a 	ldrh.w	r4, [r0, sl]
 8016a5e:	f89b b001 	ldrb.w	fp, [fp, #1]
 8016a62:	1227      	asrs	r7, r4, #8
 8016a64:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8016a68:	fb07 6705 	mla	r7, r7, r5, r6
 8016a6c:	10e6      	asrs	r6, r4, #3
 8016a6e:	00e4      	lsls	r4, r4, #3
 8016a70:	b2e4      	uxtb	r4, r4
 8016a72:	fb1b fb09 	smulbb	fp, fp, r9
 8016a76:	9801      	ldr	r0, [sp, #4]
 8016a78:	fb14 f405 	smulbb	r4, r4, r5
 8016a7c:	f810 8008 	ldrb.w	r8, [r0, r8]
 8016a80:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8016a84:	fb06 b605 	mla	r6, r6, r5, fp
 8016a88:	fb08 4809 	mla	r8, r8, r9, r4
 8016a8c:	b2bf      	uxth	r7, r7
 8016a8e:	b2b6      	uxth	r6, r6
 8016a90:	fa1f f888 	uxth.w	r8, r8
 8016a94:	1c7c      	adds	r4, r7, #1
 8016a96:	eb04 2717 	add.w	r7, r4, r7, lsr #8
 8016a9a:	f106 0b01 	add.w	fp, r6, #1
 8016a9e:	f108 0401 	add.w	r4, r8, #1
 8016aa2:	eb04 2418 	add.w	r4, r4, r8, lsr #8
 8016aa6:	eb0b 2b16 	add.w	fp, fp, r6, lsr #8
 8016aaa:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8016aae:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8016ab2:	ea4f 1b5b 	mov.w	fp, fp, lsr #5
 8016ab6:	4327      	orrs	r7, r4
 8016ab8:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8016abc:	9800      	ldr	r0, [sp, #0]
 8016abe:	ea47 070b 	orr.w	r7, r7, fp
 8016ac2:	f820 700a 	strh.w	r7, [r0, sl]
 8016ac6:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016ac8:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016acc:	4401      	add	r1, r0
 8016ace:	9814      	ldr	r0, [sp, #80]	; 0x50
 8016ad0:	4402      	add	r2, r0
 8016ad2:	e759      	b.n	8016988 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8016ad4:	b007      	add	sp, #28
 8016ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08016adc <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016adc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ae4:	b085      	sub	sp, #20
 8016ae6:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8016ae8:	9203      	str	r2, [sp, #12]
 8016aea:	6870      	ldr	r0, [r6, #4]
 8016aec:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8016af0:	fb00 2404 	mla	r4, r0, r4, r2
 8016af4:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8016af6:	6832      	ldr	r2, [r6, #0]
 8016af8:	686f      	ldr	r7, [r5, #4]
 8016afa:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8016afe:	682a      	ldr	r2, [r5, #0]
 8016b00:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
 8016b04:	9101      	str	r1, [sp, #4]
 8016b06:	9202      	str	r2, [sp, #8]
 8016b08:	3704      	adds	r7, #4
 8016b0a:	9a01      	ldr	r2, [sp, #4]
 8016b0c:	2a00      	cmp	r2, #0
 8016b0e:	dc03      	bgt.n	8016b18 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8016b10:	9a03      	ldr	r2, [sp, #12]
 8016b12:	2a00      	cmp	r2, #0
 8016b14:	f340 80cc 	ble.w	8016cb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8016b18:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016b1a:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8016b1e:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016b22:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016b24:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8016b28:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8016b2c:	2b00      	cmp	r3, #0
 8016b2e:	dd0d      	ble.n	8016b4c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016b30:	1406      	asrs	r6, r0, #16
 8016b32:	d405      	bmi.n	8016b40 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016b34:	454e      	cmp	r6, r9
 8016b36:	da03      	bge.n	8016b40 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016b38:	1416      	asrs	r6, r2, #16
 8016b3a:	d401      	bmi.n	8016b40 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016b3c:	4546      	cmp	r6, r8
 8016b3e:	db06      	blt.n	8016b4e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8016b40:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8016b42:	4460      	add	r0, ip
 8016b44:	4432      	add	r2, r6
 8016b46:	3b01      	subs	r3, #1
 8016b48:	3402      	adds	r4, #2
 8016b4a:	e7ef      	b.n	8016b2c <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8016b4c:	d00f      	beq.n	8016b6e <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8016b4e:	1e5e      	subs	r6, r3, #1
 8016b50:	fb0c 0e06 	mla	lr, ip, r6, r0
 8016b54:	ea5f 4e2e 	movs.w	lr, lr, asr #16
 8016b58:	d543      	bpl.n	8016be2 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 8016b5a:	4698      	mov	r8, r3
 8016b5c:	eb04 0a43 	add.w	sl, r4, r3, lsl #1
 8016b60:	f1b8 0f00 	cmp.w	r8, #0
 8016b64:	dc71      	bgt.n	8016c4a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16e>
 8016b66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016b6a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016b6e:	9b01      	ldr	r3, [sp, #4]
 8016b70:	2b00      	cmp	r3, #0
 8016b72:	f340 809d 	ble.w	8016cb0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 8016b76:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016b7a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016b7e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016b82:	eeb0 6a62 	vmov.f32	s12, s5
 8016b86:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016b8a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016b8e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016b92:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016b96:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016b9a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8016b9e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016ba2:	eeb0 6a43 	vmov.f32	s12, s6
 8016ba6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016baa:	ee12 2a90 	vmov	r2, s5
 8016bae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016bb2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016bb4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016bb8:	fb92 fcf3 	sdiv	ip, r2, r3
 8016bbc:	ee13 2a10 	vmov	r2, s6
 8016bc0:	fb92 f3f3 	sdiv	r3, r2, r3
 8016bc4:	9312      	str	r3, [sp, #72]	; 0x48
 8016bc6:	9b01      	ldr	r3, [sp, #4]
 8016bc8:	9a03      	ldr	r2, [sp, #12]
 8016bca:	3b01      	subs	r3, #1
 8016bcc:	9301      	str	r3, [sp, #4]
 8016bce:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8016bd2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8016bd4:	eeb0 3a67 	vmov.f32	s6, s15
 8016bd8:	bf08      	it	eq
 8016bda:	4613      	moveq	r3, r2
 8016bdc:	eef0 2a47 	vmov.f32	s5, s14
 8016be0:	e793      	b.n	8016b0a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8016be2:	45ce      	cmp	lr, r9
 8016be4:	dab9      	bge.n	8016b5a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016be6:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016be8:	fb01 2606 	mla	r6, r1, r6, r2
 8016bec:	1436      	asrs	r6, r6, #16
 8016bee:	d4b4      	bmi.n	8016b5a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016bf0:	4546      	cmp	r6, r8
 8016bf2:	dab2      	bge.n	8016b5a <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016bf4:	4698      	mov	r8, r3
 8016bf6:	46a2      	mov	sl, r4
 8016bf8:	f1b8 0f00 	cmp.w	r8, #0
 8016bfc:	ddb3      	ble.n	8016b66 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8016bfe:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8016c02:	9902      	ldr	r1, [sp, #8]
 8016c04:	1416      	asrs	r6, r2, #16
 8016c06:	fb09 1606 	mla	r6, r9, r6, r1
 8016c0a:	ea4f 4e20 	mov.w	lr, r0, asr #16
 8016c0e:	f816 e00e 	ldrb.w	lr, [r6, lr]
 8016c12:	4929      	ldr	r1, [pc, #164]	; (8016cb8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>)
 8016c14:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8016c18:	eb07 0b0e 	add.w	fp, r7, lr
 8016c1c:	f89b 6001 	ldrb.w	r6, [fp, #1]
 8016c20:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8016c24:	00f6      	lsls	r6, r6, #3
 8016c26:	ea01 2909 	and.w	r9, r1, r9, lsl #8
 8016c2a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8016c2e:	ea49 0606 	orr.w	r6, r9, r6
 8016c32:	f817 900e 	ldrb.w	r9, [r7, lr]
 8016c36:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016c38:	ea46 06d9 	orr.w	r6, r6, r9, lsr #3
 8016c3c:	f82a 6b02 	strh.w	r6, [sl], #2
 8016c40:	4460      	add	r0, ip
 8016c42:	440a      	add	r2, r1
 8016c44:	f108 38ff 	add.w	r8, r8, #4294967295
 8016c48:	e7d6      	b.n	8016bf8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8016c4a:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016c4e:	d429      	bmi.n	8016ca4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8016c50:	68ae      	ldr	r6, [r5, #8]
 8016c52:	454e      	cmp	r6, r9
 8016c54:	dd26      	ble.n	8016ca4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8016c56:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8016c5a:	d423      	bmi.n	8016ca4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8016c5c:	68e9      	ldr	r1, [r5, #12]
 8016c5e:	4559      	cmp	r1, fp
 8016c60:	dd20      	ble.n	8016ca4 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8016c62:	9902      	ldr	r1, [sp, #8]
 8016c64:	fa0f fe86 	sxth.w	lr, r6
 8016c68:	fb0b 1e0e 	mla	lr, fp, lr, r1
 8016c6c:	f06f 0101 	mvn.w	r1, #1
 8016c70:	f81e e009 	ldrb.w	lr, [lr, r9]
 8016c74:	fb01 f908 	mul.w	r9, r1, r8
 8016c78:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8016c7c:	eb07 060e 	add.w	r6, r7, lr
 8016c80:	f896 b002 	ldrb.w	fp, [r6, #2]
 8016c84:	7876      	ldrb	r6, [r6, #1]
 8016c86:	f2a1 71fe 	subw	r1, r1, #2046	; 0x7fe
 8016c8a:	00f6      	lsls	r6, r6, #3
 8016c8c:	ea01 2b0b 	and.w	fp, r1, fp, lsl #8
 8016c90:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8016c94:	ea4b 0606 	orr.w	r6, fp, r6
 8016c98:	f817 b00e 	ldrb.w	fp, [r7, lr]
 8016c9c:	ea46 06db 	orr.w	r6, r6, fp, lsr #3
 8016ca0:	f82a 6009 	strh.w	r6, [sl, r9]
 8016ca4:	9912      	ldr	r1, [sp, #72]	; 0x48
 8016ca6:	4460      	add	r0, ip
 8016ca8:	440a      	add	r2, r1
 8016caa:	f108 38ff 	add.w	r8, r8, #4294967295
 8016cae:	e757      	b.n	8016b60 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8016cb0:	b005      	add	sp, #20
 8016cb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cb6:	bf00      	nop
 8016cb8:	fffff800 	.word	0xfffff800

08016cbc <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016cbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cc4:	b087      	sub	sp, #28
 8016cc6:	9815      	ldr	r0, [sp, #84]	; 0x54
 8016cc8:	468b      	mov	fp, r1
 8016cca:	9204      	str	r2, [sp, #16]
 8016ccc:	6841      	ldr	r1, [r0, #4]
 8016cce:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8016cd2:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8016cd6:	9205      	str	r2, [sp, #20]
 8016cd8:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 8016cdc:	fb01 2404 	mla	r4, r1, r4, r2
 8016ce0:	6802      	ldr	r2, [r0, #0]
 8016ce2:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8016ce6:	f8dc 2000 	ldr.w	r2, [ip]
 8016cea:	9201      	str	r2, [sp, #4]
 8016cec:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8016cf0:	3204      	adds	r2, #4
 8016cf2:	9202      	str	r2, [sp, #8]
 8016cf4:	f1bb 0f00 	cmp.w	fp, #0
 8016cf8:	dc03      	bgt.n	8016d02 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8016cfa:	9a04      	ldr	r2, [sp, #16]
 8016cfc:	2a00      	cmp	r2, #0
 8016cfe:	f340 8138 	ble.w	8016f72 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8016d02:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8016d04:	f9bc 7008 	ldrsh.w	r7, [ip, #8]
 8016d08:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8016d0c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8016d0e:	f9bc 600c 	ldrsh.w	r6, [ip, #12]
 8016d12:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8016d16:	2b00      	cmp	r3, #0
 8016d18:	dd0e      	ble.n	8016d38 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8016d1a:	1402      	asrs	r2, r0, #16
 8016d1c:	d405      	bmi.n	8016d2a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016d1e:	42ba      	cmp	r2, r7
 8016d20:	da03      	bge.n	8016d2a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016d22:	140a      	asrs	r2, r1, #16
 8016d24:	d401      	bmi.n	8016d2a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016d26:	42b2      	cmp	r2, r6
 8016d28:	db07      	blt.n	8016d3a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016d2a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016d2c:	3b01      	subs	r3, #1
 8016d2e:	4410      	add	r0, r2
 8016d30:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016d32:	3402      	adds	r4, #2
 8016d34:	4411      	add	r1, r2
 8016d36:	e7ee      	b.n	8016d16 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8016d38:	d019      	beq.n	8016d6e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 8016d3a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8016d3c:	1e5a      	subs	r2, r3, #1
 8016d3e:	fb05 0502 	mla	r5, r5, r2, r0
 8016d42:	142d      	asrs	r5, r5, #16
 8016d44:	d409      	bmi.n	8016d5a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8016d46:	42bd      	cmp	r5, r7
 8016d48:	da07      	bge.n	8016d5a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8016d4a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8016d4c:	fb05 1202 	mla	r2, r5, r2, r1
 8016d50:	1412      	asrs	r2, r2, #16
 8016d52:	d402      	bmi.n	8016d5a <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8016d54:	42b2      	cmp	r2, r6
 8016d56:	f2c0 80ac 	blt.w	8016eb2 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f6>
 8016d5a:	f04f 0e00 	mov.w	lr, #0
 8016d5e:	eb03 020e 	add.w	r2, r3, lr
 8016d62:	2a00      	cmp	r2, #0
 8016d64:	dc3e      	bgt.n	8016de4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8016d66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016d6a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8016d6e:	f1bb 0f00 	cmp.w	fp, #0
 8016d72:	f340 80fe 	ble.w	8016f72 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8016d76:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016d7a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016d7e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016d82:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016d86:	eeb0 6a62 	vmov.f32	s12, s5
 8016d8a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016d8e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016d92:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016d96:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016d9a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016d9e:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8016da2:	eeb0 6a43 	vmov.f32	s12, s6
 8016da6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016daa:	ee12 2a90 	vmov	r2, s5
 8016dae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016db2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016db4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016db8:	fb92 f3f3 	sdiv	r3, r2, r3
 8016dbc:	ee13 2a10 	vmov	r2, s6
 8016dc0:	9313      	str	r3, [sp, #76]	; 0x4c
 8016dc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016dc4:	f1bb 0b01 	subs.w	fp, fp, #1
 8016dc8:	fb92 f3f3 	sdiv	r3, r2, r3
 8016dcc:	9a04      	ldr	r2, [sp, #16]
 8016dce:	9314      	str	r3, [sp, #80]	; 0x50
 8016dd0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8016dd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016dd6:	eeb0 3a67 	vmov.f32	s6, s15
 8016dda:	bf08      	it	eq
 8016ddc:	4613      	moveq	r3, r2
 8016dde:	eef0 2a47 	vmov.f32	s5, s14
 8016de2:	e787      	b.n	8016cf4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8016de4:	1406      	asrs	r6, r0, #16
 8016de6:	d45d      	bmi.n	8016ea4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8016de8:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8016dec:	42b5      	cmp	r5, r6
 8016dee:	dd59      	ble.n	8016ea4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8016df0:	140f      	asrs	r7, r1, #16
 8016df2:	d457      	bmi.n	8016ea4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8016df4:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016df8:	42ba      	cmp	r2, r7
 8016dfa:	dd53      	ble.n	8016ea4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8016dfc:	9a01      	ldr	r2, [sp, #4]
 8016dfe:	b22d      	sxth	r5, r5
 8016e00:	fb07 2505 	mla	r5, r7, r5, r2
 8016e04:	5daa      	ldrb	r2, [r5, r6]
 8016e06:	9d02      	ldr	r5, [sp, #8]
 8016e08:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8016e0c:	0e2e      	lsrs	r6, r5, #24
 8016e0e:	d049      	beq.n	8016ea4 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8016e10:	f06f 0201 	mvn.w	r2, #1
 8016e14:	fb02 f20e 	mul.w	r2, r2, lr
 8016e18:	f834 8002 	ldrh.w	r8, [r4, r2]
 8016e1c:	9203      	str	r2, [sp, #12]
 8016e1e:	9a05      	ldr	r2, [sp, #20]
 8016e20:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8016e24:	4356      	muls	r6, r2
 8016e26:	1c72      	adds	r2, r6, #1
 8016e28:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8016e2c:	1212      	asrs	r2, r2, #8
 8016e2e:	fa1f f982 	uxth.w	r9, r2
 8016e32:	43d2      	mvns	r2, r2
 8016e34:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8016e38:	fb16 f609 	smulbb	r6, r6, r9
 8016e3c:	b2ed      	uxtb	r5, r5
 8016e3e:	ea4f 2728 	mov.w	r7, r8, asr #8
 8016e42:	fb15 f509 	smulbb	r5, r5, r9
 8016e46:	b2d2      	uxtb	r2, r2
 8016e48:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8016e4c:	fb07 6702 	mla	r7, r7, r2, r6
 8016e50:	ea4f 06e8 	mov.w	r6, r8, asr #3
 8016e54:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8016e58:	fb1a fa09 	smulbb	sl, sl, r9
 8016e5c:	fa5f f888 	uxtb.w	r8, r8
 8016e60:	fb08 5502 	mla	r5, r8, r2, r5
 8016e64:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8016e68:	fb06 a602 	mla	r6, r6, r2, sl
 8016e6c:	b2bf      	uxth	r7, r7
 8016e6e:	b2ad      	uxth	r5, r5
 8016e70:	1c7a      	adds	r2, r7, #1
 8016e72:	f105 0a01 	add.w	sl, r5, #1
 8016e76:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8016e7a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8016e7e:	b2b6      	uxth	r6, r6
 8016e80:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8016e84:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8016e88:	ea4a 0707 	orr.w	r7, sl, r7
 8016e8c:	f106 0a01 	add.w	sl, r6, #1
 8016e90:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8016e94:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8016e98:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8016e9c:	9a03      	ldr	r2, [sp, #12]
 8016e9e:	ea47 070a 	orr.w	r7, r7, sl
 8016ea2:	52a7      	strh	r7, [r4, r2]
 8016ea4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016ea6:	f10e 3eff 	add.w	lr, lr, #4294967295
 8016eaa:	4410      	add	r0, r2
 8016eac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016eae:	4411      	add	r1, r2
 8016eb0:	e755      	b.n	8016d5e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8016eb2:	f04f 0800 	mov.w	r8, #0
 8016eb6:	eba3 0208 	sub.w	r2, r3, r8
 8016eba:	2a00      	cmp	r2, #0
 8016ebc:	f77f af53 	ble.w	8016d66 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 8016ec0:	f9bc 6008 	ldrsh.w	r6, [ip, #8]
 8016ec4:	9f01      	ldr	r7, [sp, #4]
 8016ec6:	140a      	asrs	r2, r1, #16
 8016ec8:	fb06 7202 	mla	r2, r6, r2, r7
 8016ecc:	1405      	asrs	r5, r0, #16
 8016ece:	5d52      	ldrb	r2, [r2, r5]
 8016ed0:	9d02      	ldr	r5, [sp, #8]
 8016ed2:	f855 5022 	ldr.w	r5, [r5, r2, lsl #2]
 8016ed6:	0e2e      	lsrs	r6, r5, #24
 8016ed8:	d044      	beq.n	8016f64 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 8016eda:	9a05      	ldr	r2, [sp, #20]
 8016edc:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 8016ee0:	4356      	muls	r6, r2
 8016ee2:	1c72      	adds	r2, r6, #1
 8016ee4:	eb02 2226 	add.w	r2, r2, r6, asr #8
 8016ee8:	1212      	asrs	r2, r2, #8
 8016eea:	fa1f f982 	uxth.w	r9, r2
 8016eee:	43d2      	mvns	r2, r2
 8016ef0:	f3c5 4607 	ubfx	r6, r5, #16, #8
 8016ef4:	fb16 f609 	smulbb	r6, r6, r9
 8016ef8:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8016efc:	b2ed      	uxtb	r5, r5
 8016efe:	ea4f 272e 	mov.w	r7, lr, asr #8
 8016f02:	fb15 f509 	smulbb	r5, r5, r9
 8016f06:	b2d2      	uxtb	r2, r2
 8016f08:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8016f0c:	fb07 6702 	mla	r7, r7, r2, r6
 8016f10:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8016f14:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8016f18:	fb1a fa09 	smulbb	sl, sl, r9
 8016f1c:	fa5f fe8e 	uxtb.w	lr, lr
 8016f20:	fb0e 5502 	mla	r5, lr, r2, r5
 8016f24:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8016f28:	fb06 a602 	mla	r6, r6, r2, sl
 8016f2c:	b2bf      	uxth	r7, r7
 8016f2e:	b2ad      	uxth	r5, r5
 8016f30:	1c7a      	adds	r2, r7, #1
 8016f32:	f105 0a01 	add.w	sl, r5, #1
 8016f36:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8016f3a:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8016f3e:	b2b6      	uxth	r6, r6
 8016f40:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8016f44:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8016f48:	ea4a 0707 	orr.w	r7, sl, r7
 8016f4c:	f106 0a01 	add.w	sl, r6, #1
 8016f50:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8016f54:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8016f58:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8016f5c:	ea47 070a 	orr.w	r7, r7, sl
 8016f60:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 8016f64:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8016f66:	f108 0801 	add.w	r8, r8, #1
 8016f6a:	4410      	add	r0, r2
 8016f6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8016f6e:	4411      	add	r1, r2
 8016f70:	e7a1      	b.n	8016eb6 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8016f72:	b007      	add	sp, #28
 8016f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016f78 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016f78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8016f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f80:	b085      	sub	sp, #20
 8016f82:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8016f84:	468b      	mov	fp, r1
 8016f86:	6841      	ldr	r1, [r0, #4]
 8016f88:	9203      	str	r2, [sp, #12]
 8016f8a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8016f8e:	fb01 2404 	mla	r4, r1, r4, r2
 8016f92:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8016f96:	6802      	ldr	r2, [r0, #0]
 8016f98:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8016f9c:	f8de 2000 	ldr.w	r2, [lr]
 8016fa0:	9200      	str	r2, [sp, #0]
 8016fa2:	f8de 2004 	ldr.w	r2, [lr, #4]
 8016fa6:	3204      	adds	r2, #4
 8016fa8:	9201      	str	r2, [sp, #4]
 8016faa:	f1bb 0f00 	cmp.w	fp, #0
 8016fae:	dc03      	bgt.n	8016fb8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8016fb0:	9a03      	ldr	r2, [sp, #12]
 8016fb2:	2a00      	cmp	r2, #0
 8016fb4:	f340 8153 	ble.w	801725e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8016fb8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8016fba:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 8016fbe:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8016fc2:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8016fc4:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 8016fc8:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8016fcc:	2b00      	cmp	r3, #0
 8016fce:	dd0e      	ble.n	8016fee <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016fd0:	1408      	asrs	r0, r1, #16
 8016fd2:	d405      	bmi.n	8016fe0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016fd4:	42b8      	cmp	r0, r7
 8016fd6:	da03      	bge.n	8016fe0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016fd8:	1410      	asrs	r0, r2, #16
 8016fda:	d401      	bmi.n	8016fe0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016fdc:	42b0      	cmp	r0, r6
 8016fde:	db07      	blt.n	8016ff0 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016fe0:	9811      	ldr	r0, [sp, #68]	; 0x44
 8016fe2:	3b01      	subs	r3, #1
 8016fe4:	4401      	add	r1, r0
 8016fe6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8016fe8:	3402      	adds	r4, #2
 8016fea:	4402      	add	r2, r0
 8016fec:	e7ee      	b.n	8016fcc <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 8016fee:	d017      	beq.n	8017020 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8016ff0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8016ff2:	1e58      	subs	r0, r3, #1
 8016ff4:	fb05 1500 	mla	r5, r5, r0, r1
 8016ff8:	142d      	asrs	r5, r5, #16
 8016ffa:	d409      	bmi.n	8017010 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8016ffc:	42bd      	cmp	r5, r7
 8016ffe:	da07      	bge.n	8017010 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8017000:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8017002:	fb05 2000 	mla	r0, r5, r0, r2
 8017006:	1400      	asrs	r0, r0, #16
 8017008:	d402      	bmi.n	8017010 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801700a:	42b0      	cmp	r0, r6
 801700c:	f2c0 80bc 	blt.w	8017188 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x210>
 8017010:	2600      	movs	r6, #0
 8017012:	1998      	adds	r0, r3, r6
 8017014:	2800      	cmp	r0, #0
 8017016:	dc3e      	bgt.n	8017096 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8017018:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801701c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017020:	f1bb 0f00 	cmp.w	fp, #0
 8017024:	f340 811b 	ble.w	801725e <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e6>
 8017028:	ee30 0a04 	vadd.f32	s0, s0, s8
 801702c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017030:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017034:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017038:	eeb0 6a62 	vmov.f32	s12, s5
 801703c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017040:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017044:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017048:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801704c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017050:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8017054:	eeb0 6a43 	vmov.f32	s12, s6
 8017058:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801705c:	ee12 2a90 	vmov	r2, s5
 8017060:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017064:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017066:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801706a:	fb92 f3f3 	sdiv	r3, r2, r3
 801706e:	ee13 2a10 	vmov	r2, s6
 8017072:	9311      	str	r3, [sp, #68]	; 0x44
 8017074:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017076:	f1bb 0b01 	subs.w	fp, fp, #1
 801707a:	fb92 f3f3 	sdiv	r3, r2, r3
 801707e:	9a03      	ldr	r2, [sp, #12]
 8017080:	9312      	str	r3, [sp, #72]	; 0x48
 8017082:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8017086:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017088:	eeb0 3a67 	vmov.f32	s6, s15
 801708c:	bf08      	it	eq
 801708e:	4613      	moveq	r3, r2
 8017090:	eef0 2a47 	vmov.f32	s5, s14
 8017094:	e789      	b.n	8016faa <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 8017096:	140f      	asrs	r7, r1, #16
 8017098:	d426      	bmi.n	80170e8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801709a:	f8de 5008 	ldr.w	r5, [lr, #8]
 801709e:	42bd      	cmp	r5, r7
 80170a0:	dd22      	ble.n	80170e8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80170a2:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80170a6:	d41f      	bmi.n	80170e8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80170a8:	f8de 000c 	ldr.w	r0, [lr, #12]
 80170ac:	4560      	cmp	r0, ip
 80170ae:	dd1b      	ble.n	80170e8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80170b0:	9800      	ldr	r0, [sp, #0]
 80170b2:	b22d      	sxth	r5, r5
 80170b4:	fb0c 0505 	mla	r5, ip, r5, r0
 80170b8:	5de8      	ldrb	r0, [r5, r7]
 80170ba:	9d01      	ldr	r5, [sp, #4]
 80170bc:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
 80170c0:	0e07      	lsrs	r7, r0, #24
 80170c2:	2fff      	cmp	r7, #255	; 0xff
 80170c4:	d116      	bne.n	80170f4 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 80170c6:	f06f 0501 	mvn.w	r5, #1
 80170ca:	fb05 f706 	mul.w	r7, r5, r6
 80170ce:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 80170d2:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 80170d6:	0945      	lsrs	r5, r0, #5
 80170d8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80170dc:	ea4c 0505 	orr.w	r5, ip, r5
 80170e0:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 80170e4:	4305      	orrs	r5, r0
 80170e6:	53e5      	strh	r5, [r4, r7]
 80170e8:	9811      	ldr	r0, [sp, #68]	; 0x44
 80170ea:	3e01      	subs	r6, #1
 80170ec:	4401      	add	r1, r0
 80170ee:	9812      	ldr	r0, [sp, #72]	; 0x48
 80170f0:	4402      	add	r2, r0
 80170f2:	e78e      	b.n	8017012 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 80170f4:	b2fd      	uxtb	r5, r7
 80170f6:	2f00      	cmp	r7, #0
 80170f8:	d0f6      	beq.n	80170e8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 80170fa:	f06f 0701 	mvn.w	r7, #1
 80170fe:	fa1f f985 	uxth.w	r9, r5
 8017102:	43ed      	mvns	r5, r5
 8017104:	4377      	muls	r7, r6
 8017106:	f834 8007 	ldrh.w	r8, [r4, r7]
 801710a:	9702      	str	r7, [sp, #8]
 801710c:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8017110:	fb17 f709 	smulbb	r7, r7, r9
 8017114:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8017118:	b2c0      	uxtb	r0, r0
 801711a:	ea4f 2c28 	mov.w	ip, r8, asr #8
 801711e:	fb10 f009 	smulbb	r0, r0, r9
 8017122:	b2ed      	uxtb	r5, r5
 8017124:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017128:	fb0c 7c05 	mla	ip, ip, r5, r7
 801712c:	ea4f 07e8 	mov.w	r7, r8, asr #3
 8017130:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8017134:	fb1a fa09 	smulbb	sl, sl, r9
 8017138:	fa5f f888 	uxtb.w	r8, r8
 801713c:	fb08 0005 	mla	r0, r8, r5, r0
 8017140:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8017144:	fb07 a705 	mla	r7, r7, r5, sl
 8017148:	b280      	uxth	r0, r0
 801714a:	fa1f fc8c 	uxth.w	ip, ip
 801714e:	f100 0a01 	add.w	sl, r0, #1
 8017152:	f10c 0501 	add.w	r5, ip, #1
 8017156:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 801715a:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 801715e:	b2bf      	uxth	r7, r7
 8017160:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8017164:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8017168:	ea4a 0c0c 	orr.w	ip, sl, ip
 801716c:	f107 0a01 	add.w	sl, r7, #1
 8017170:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 8017174:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017178:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801717c:	9802      	ldr	r0, [sp, #8]
 801717e:	ea4c 0c0a 	orr.w	ip, ip, sl
 8017182:	f824 c000 	strh.w	ip, [r4, r0]
 8017186:	e7af      	b.n	80170e8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 8017188:	f04f 0800 	mov.w	r8, #0
 801718c:	eba3 0008 	sub.w	r0, r3, r8
 8017190:	2800      	cmp	r0, #0
 8017192:	f77f af41 	ble.w	8017018 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017196:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 801719a:	9f00      	ldr	r7, [sp, #0]
 801719c:	1410      	asrs	r0, r2, #16
 801719e:	fb06 7000 	mla	r0, r6, r0, r7
 80171a2:	140d      	asrs	r5, r1, #16
 80171a4:	5d40      	ldrb	r0, [r0, r5]
 80171a6:	9d01      	ldr	r5, [sp, #4]
 80171a8:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 80171ac:	0e2e      	lsrs	r6, r5, #24
 80171ae:	2eff      	cmp	r6, #255	; 0xff
 80171b0:	d112      	bne.n	80171d8 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x260>
 80171b2:	482c      	ldr	r0, [pc, #176]	; (8017264 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ec>)
 80171b4:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 80171b8:	0968      	lsrs	r0, r5, #5
 80171ba:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80171be:	4330      	orrs	r0, r6
 80171c0:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 80171c4:	4328      	orrs	r0, r5
 80171c6:	f824 0018 	strh.w	r0, [r4, r8, lsl #1]
 80171ca:	9811      	ldr	r0, [sp, #68]	; 0x44
 80171cc:	f108 0801 	add.w	r8, r8, #1
 80171d0:	4401      	add	r1, r0
 80171d2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80171d4:	4402      	add	r2, r0
 80171d6:	e7d9      	b.n	801718c <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 80171d8:	b2f0      	uxtb	r0, r6
 80171da:	2e00      	cmp	r6, #0
 80171dc:	d0f5      	beq.n	80171ca <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 80171de:	fa1f f980 	uxth.w	r9, r0
 80171e2:	43c0      	mvns	r0, r0
 80171e4:	f3c5 4607 	ubfx	r6, r5, #16, #8
 80171e8:	f834 c018 	ldrh.w	ip, [r4, r8, lsl #1]
 80171ec:	fb16 f609 	smulbb	r6, r6, r9
 80171f0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80171f4:	b2ed      	uxtb	r5, r5
 80171f6:	ea4f 272c 	mov.w	r7, ip, asr #8
 80171fa:	fb15 f509 	smulbb	r5, r5, r9
 80171fe:	b2c0      	uxtb	r0, r0
 8017200:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017204:	fb07 6700 	mla	r7, r7, r0, r6
 8017208:	ea4f 06ec 	mov.w	r6, ip, asr #3
 801720c:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8017210:	fb1a fa09 	smulbb	sl, sl, r9
 8017214:	fa5f fc8c 	uxtb.w	ip, ip
 8017218:	fb0c 5500 	mla	r5, ip, r0, r5
 801721c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017220:	fb06 a600 	mla	r6, r6, r0, sl
 8017224:	b2bf      	uxth	r7, r7
 8017226:	b2ad      	uxth	r5, r5
 8017228:	1c78      	adds	r0, r7, #1
 801722a:	f105 0a01 	add.w	sl, r5, #1
 801722e:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 8017232:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8017236:	b2b6      	uxth	r6, r6
 8017238:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801723c:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 8017240:	ea4a 0707 	orr.w	r7, sl, r7
 8017244:	f106 0a01 	add.w	sl, r6, #1
 8017248:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 801724c:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017250:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017254:	ea47 070a 	orr.w	r7, r7, sl
 8017258:	f824 7018 	strh.w	r7, [r4, r8, lsl #1]
 801725c:	e7b5      	b.n	80171ca <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801725e:	b005      	add	sp, #20
 8017260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017264:	fffff800 	.word	0xfffff800

08017268 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017268:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801726c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017270:	b087      	sub	sp, #28
 8017272:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8017274:	468b      	mov	fp, r1
 8017276:	9204      	str	r2, [sp, #16]
 8017278:	6861      	ldr	r1, [r4, #4]
 801727a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 801727e:	f8dd e060 	ldr.w	lr, [sp, #96]	; 0x60
 8017282:	9205      	str	r2, [sp, #20]
 8017284:	e9dd 2016 	ldrd	r2, r0, [sp, #88]	; 0x58
 8017288:	fb01 2000 	mla	r0, r1, r0, r2
 801728c:	6822      	ldr	r2, [r4, #0]
 801728e:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8017292:	f8de 2000 	ldr.w	r2, [lr]
 8017296:	9201      	str	r2, [sp, #4]
 8017298:	f8de 2004 	ldr.w	r2, [lr, #4]
 801729c:	9202      	str	r2, [sp, #8]
 801729e:	f1bb 0f00 	cmp.w	fp, #0
 80172a2:	dc03      	bgt.n	80172ac <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 80172a4:	9a04      	ldr	r2, [sp, #16]
 80172a6:	2a00      	cmp	r2, #0
 80172a8:	f340 8142 	ble.w	8017530 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 80172ac:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80172ae:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80172b2:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 80172b6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80172b8:	f9be 600c 	ldrsh.w	r6, [lr, #12]
 80172bc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80172c0:	2b00      	cmp	r3, #0
 80172c2:	dd0e      	ble.n	80172e2 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80172c4:	140c      	asrs	r4, r1, #16
 80172c6:	d405      	bmi.n	80172d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80172c8:	42bc      	cmp	r4, r7
 80172ca:	da03      	bge.n	80172d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80172cc:	1414      	asrs	r4, r2, #16
 80172ce:	d401      	bmi.n	80172d4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 80172d0:	42b4      	cmp	r4, r6
 80172d2:	db07      	blt.n	80172e4 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 80172d4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80172d6:	3b01      	subs	r3, #1
 80172d8:	4421      	add	r1, r4
 80172da:	9c14      	ldr	r4, [sp, #80]	; 0x50
 80172dc:	3002      	adds	r0, #2
 80172de:	4422      	add	r2, r4
 80172e0:	e7ee      	b.n	80172c0 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80172e2:	d019      	beq.n	8017318 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 80172e4:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80172e6:	1e5c      	subs	r4, r3, #1
 80172e8:	fb05 1504 	mla	r5, r5, r4, r1
 80172ec:	142d      	asrs	r5, r5, #16
 80172ee:	d409      	bmi.n	8017304 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80172f0:	42bd      	cmp	r5, r7
 80172f2:	da07      	bge.n	8017304 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80172f4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80172f6:	fb05 2404 	mla	r4, r5, r4, r2
 80172fa:	1424      	asrs	r4, r4, #16
 80172fc:	d402      	bmi.n	8017304 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 80172fe:	42b4      	cmp	r4, r6
 8017300:	f2c0 80b1 	blt.w	8017466 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fe>
 8017304:	f04f 0800 	mov.w	r8, #0
 8017308:	eb03 0408 	add.w	r4, r3, r8
 801730c:	2c00      	cmp	r4, #0
 801730e:	dc3e      	bgt.n	801738e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8017310:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017314:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8017318:	f1bb 0f00 	cmp.w	fp, #0
 801731c:	f340 8108 	ble.w	8017530 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c8>
 8017320:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017324:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017328:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801732c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017330:	eeb0 6a62 	vmov.f32	s12, s5
 8017334:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017338:	ee77 2a62 	vsub.f32	s5, s14, s5
 801733c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017340:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017344:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017348:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 801734c:	eeb0 6a43 	vmov.f32	s12, s6
 8017350:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017354:	ee12 2a90 	vmov	r2, s5
 8017358:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801735c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801735e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017362:	fb92 f3f3 	sdiv	r3, r2, r3
 8017366:	ee13 2a10 	vmov	r2, s6
 801736a:	9313      	str	r3, [sp, #76]	; 0x4c
 801736c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801736e:	f1bb 0b01 	subs.w	fp, fp, #1
 8017372:	fb92 f3f3 	sdiv	r3, r2, r3
 8017376:	9a04      	ldr	r2, [sp, #16]
 8017378:	9314      	str	r3, [sp, #80]	; 0x50
 801737a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801737e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017380:	eeb0 3a67 	vmov.f32	s6, s15
 8017384:	bf08      	it	eq
 8017386:	4613      	moveq	r3, r2
 8017388:	eef0 2a47 	vmov.f32	s5, s14
 801738c:	e787      	b.n	801729e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801738e:	140e      	asrs	r6, r1, #16
 8017390:	d462      	bmi.n	8017458 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8017392:	f8de 5008 	ldr.w	r5, [lr, #8]
 8017396:	42b5      	cmp	r5, r6
 8017398:	dd5e      	ble.n	8017458 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801739a:	1417      	asrs	r7, r2, #16
 801739c:	d45c      	bmi.n	8017458 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801739e:	f8de 400c 	ldr.w	r4, [lr, #12]
 80173a2:	42bc      	cmp	r4, r7
 80173a4:	dd58      	ble.n	8017458 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80173a6:	b22d      	sxth	r5, r5
 80173a8:	fb07 6505 	mla	r5, r7, r5, r6
 80173ac:	9c02      	ldr	r4, [sp, #8]
 80173ae:	5d66      	ldrb	r6, [r4, r5]
 80173b0:	2e00      	cmp	r6, #0
 80173b2:	d051      	beq.n	8017458 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 80173b4:	9c01      	ldr	r4, [sp, #4]
 80173b6:	f834 9015 	ldrh.w	r9, [r4, r5, lsl #1]
 80173ba:	f06f 0401 	mvn.w	r4, #1
 80173be:	fb04 f408 	mul.w	r4, r4, r8
 80173c2:	5b05      	ldrh	r5, [r0, r4]
 80173c4:	9403      	str	r4, [sp, #12]
 80173c6:	9c05      	ldr	r4, [sp, #20]
 80173c8:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80173cc:	4366      	muls	r6, r4
 80173ce:	1c74      	adds	r4, r6, #1
 80173d0:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 80173d4:	1224      	asrs	r4, r4, #8
 80173d6:	b2a7      	uxth	r7, r4
 80173d8:	43e4      	mvns	r4, r4
 80173da:	122e      	asrs	r6, r5, #8
 80173dc:	b2e4      	uxtb	r4, r4
 80173de:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80173e2:	fb16 f604 	smulbb	r6, r6, r4
 80173e6:	00ed      	lsls	r5, r5, #3
 80173e8:	b2ed      	uxtb	r5, r5
 80173ea:	ea4f 2c29 	mov.w	ip, r9, asr #8
 80173ee:	fb15 f504 	smulbb	r5, r5, r4
 80173f2:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80173f6:	fb0c 6c07 	mla	ip, ip, r7, r6
 80173fa:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80173fe:	ea4f 06e9 	mov.w	r6, r9, asr #3
 8017402:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8017406:	fb1a fa04 	smulbb	sl, sl, r4
 801740a:	fa5f f989 	uxtb.w	r9, r9
 801740e:	fb09 5507 	mla	r5, r9, r7, r5
 8017412:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8017416:	fb06 a607 	mla	r6, r6, r7, sl
 801741a:	fa1f fc8c 	uxth.w	ip, ip
 801741e:	b2ad      	uxth	r5, r5
 8017420:	f10c 0401 	add.w	r4, ip, #1
 8017424:	f105 0a01 	add.w	sl, r5, #1
 8017428:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 801742c:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8017430:	b2b6      	uxth	r6, r6
 8017432:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8017436:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801743a:	ea4a 0c0c 	orr.w	ip, sl, ip
 801743e:	f106 0a01 	add.w	sl, r6, #1
 8017442:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8017446:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801744a:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801744e:	9c03      	ldr	r4, [sp, #12]
 8017450:	ea4c 0c0a 	orr.w	ip, ip, sl
 8017454:	f820 c004 	strh.w	ip, [r0, r4]
 8017458:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801745a:	f108 38ff 	add.w	r8, r8, #4294967295
 801745e:	4421      	add	r1, r4
 8017460:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017462:	4422      	add	r2, r4
 8017464:	e750      	b.n	8017308 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017466:	f04f 0900 	mov.w	r9, #0
 801746a:	eba3 0409 	sub.w	r4, r3, r9
 801746e:	2c00      	cmp	r4, #0
 8017470:	f77f af4e 	ble.w	8017310 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8017474:	f9be 6008 	ldrsh.w	r6, [lr, #8]
 8017478:	140d      	asrs	r5, r1, #16
 801747a:	1414      	asrs	r4, r2, #16
 801747c:	fb06 5404 	mla	r4, r6, r4, r5
 8017480:	9d02      	ldr	r5, [sp, #8]
 8017482:	5d2e      	ldrb	r6, [r5, r4]
 8017484:	2e00      	cmp	r6, #0
 8017486:	d04c      	beq.n	8017522 <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8017488:	9d01      	ldr	r5, [sp, #4]
 801748a:	f835 8014 	ldrh.w	r8, [r5, r4, lsl #1]
 801748e:	9c05      	ldr	r4, [sp, #20]
 8017490:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8017494:	4366      	muls	r6, r4
 8017496:	1c74      	adds	r4, r6, #1
 8017498:	eb04 2416 	add.w	r4, r4, r6, lsr #8
 801749c:	1224      	asrs	r4, r4, #8
 801749e:	b2a7      	uxth	r7, r4
 80174a0:	43e4      	mvns	r4, r4
 80174a2:	122e      	asrs	r6, r5, #8
 80174a4:	b2e4      	uxtb	r4, r4
 80174a6:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80174aa:	fb16 f604 	smulbb	r6, r6, r4
 80174ae:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80174b2:	00ed      	lsls	r5, r5, #3
 80174b4:	b2ed      	uxtb	r5, r5
 80174b6:	ea4f 2c28 	mov.w	ip, r8, asr #8
 80174ba:	fb15 f504 	smulbb	r5, r5, r4
 80174be:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80174c2:	fb0c 6c07 	mla	ip, ip, r7, r6
 80174c6:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80174ca:	ea4f 06e8 	mov.w	r6, r8, asr #3
 80174ce:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80174d2:	fb1a fa04 	smulbb	sl, sl, r4
 80174d6:	fa5f f888 	uxtb.w	r8, r8
 80174da:	fb08 5507 	mla	r5, r8, r7, r5
 80174de:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80174e2:	fb06 a607 	mla	r6, r6, r7, sl
 80174e6:	fa1f fc8c 	uxth.w	ip, ip
 80174ea:	b2ad      	uxth	r5, r5
 80174ec:	f10c 0401 	add.w	r4, ip, #1
 80174f0:	f105 0a01 	add.w	sl, r5, #1
 80174f4:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80174f8:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80174fc:	b2b6      	uxth	r6, r6
 80174fe:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8017502:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8017506:	ea4a 0c0c 	orr.w	ip, sl, ip
 801750a:	f106 0a01 	add.w	sl, r6, #1
 801750e:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8017512:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017516:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801751a:	ea4c 0c0a 	orr.w	ip, ip, sl
 801751e:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 8017522:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017524:	f109 0901 	add.w	r9, r9, #1
 8017528:	4421      	add	r1, r4
 801752a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801752c:	4422      	add	r2, r4
 801752e:	e79c      	b.n	801746a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x202>
 8017530:	b007      	add	sp, #28
 8017532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017536 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801753a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801753e:	b085      	sub	sp, #20
 8017540:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017542:	468b      	mov	fp, r1
 8017544:	6861      	ldr	r1, [r4, #4]
 8017546:	9203      	str	r2, [sp, #12]
 8017548:	e9dd 2014 	ldrd	r2, r0, [sp, #80]	; 0x50
 801754c:	fb01 2000 	mla	r0, r1, r0, r2
 8017550:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8017554:	6822      	ldr	r2, [r4, #0]
 8017556:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 801755a:	f8d8 2000 	ldr.w	r2, [r8]
 801755e:	9200      	str	r2, [sp, #0]
 8017560:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8017564:	9201      	str	r2, [sp, #4]
 8017566:	f1bb 0f00 	cmp.w	fp, #0
 801756a:	dc03      	bgt.n	8017574 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801756c:	9a03      	ldr	r2, [sp, #12]
 801756e:	2a00      	cmp	r2, #0
 8017570:	f340 8146 	ble.w	8017800 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 8017574:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017576:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 801757a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801757e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017580:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8017584:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017588:	2b00      	cmp	r3, #0
 801758a:	dd0e      	ble.n	80175aa <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801758c:	140c      	asrs	r4, r1, #16
 801758e:	d405      	bmi.n	801759c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017590:	42bc      	cmp	r4, r7
 8017592:	da03      	bge.n	801759c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017594:	1414      	asrs	r4, r2, #16
 8017596:	d401      	bmi.n	801759c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017598:	42b4      	cmp	r4, r6
 801759a:	db07      	blt.n	80175ac <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801759c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801759e:	3b01      	subs	r3, #1
 80175a0:	4421      	add	r1, r4
 80175a2:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80175a4:	3002      	adds	r0, #2
 80175a6:	4422      	add	r2, r4
 80175a8:	e7ee      	b.n	8017588 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 80175aa:	d017      	beq.n	80175dc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 80175ac:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80175ae:	1e5c      	subs	r4, r3, #1
 80175b0:	fb05 1504 	mla	r5, r5, r4, r1
 80175b4:	142d      	asrs	r5, r5, #16
 80175b6:	d409      	bmi.n	80175cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80175b8:	42bd      	cmp	r5, r7
 80175ba:	da07      	bge.n	80175cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80175bc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80175be:	fb05 2404 	mla	r4, r5, r4, r2
 80175c2:	1424      	asrs	r4, r4, #16
 80175c4:	d402      	bmi.n	80175cc <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80175c6:	42b4      	cmp	r4, r6
 80175c8:	f2c0 80b3 	blt.w	8017732 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80175cc:	2600      	movs	r6, #0
 80175ce:	199c      	adds	r4, r3, r6
 80175d0:	2c00      	cmp	r4, #0
 80175d2:	dc3e      	bgt.n	8017652 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80175d4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80175d8:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80175dc:	f1bb 0f00 	cmp.w	fp, #0
 80175e0:	f340 810e 	ble.w	8017800 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ca>
 80175e4:	ee30 0a04 	vadd.f32	s0, s0, s8
 80175e8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80175ec:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80175f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80175f4:	eeb0 6a62 	vmov.f32	s12, s5
 80175f8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80175fc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017600:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017604:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017608:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801760c:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8017610:	eeb0 6a43 	vmov.f32	s12, s6
 8017614:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017618:	ee12 2a90 	vmov	r2, s5
 801761c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017620:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017622:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017626:	fb92 f3f3 	sdiv	r3, r2, r3
 801762a:	ee13 2a10 	vmov	r2, s6
 801762e:	9311      	str	r3, [sp, #68]	; 0x44
 8017630:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017632:	f1bb 0b01 	subs.w	fp, fp, #1
 8017636:	fb92 f3f3 	sdiv	r3, r2, r3
 801763a:	9a03      	ldr	r2, [sp, #12]
 801763c:	9312      	str	r3, [sp, #72]	; 0x48
 801763e:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8017642:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017644:	eeb0 3a67 	vmov.f32	s6, s15
 8017648:	bf08      	it	eq
 801764a:	4613      	moveq	r3, r2
 801764c:	eef0 2a47 	vmov.f32	s5, s14
 8017650:	e789      	b.n	8017566 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8017652:	140f      	asrs	r7, r1, #16
 8017654:	d418      	bmi.n	8017688 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017656:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801765a:	42bd      	cmp	r5, r7
 801765c:	dd14      	ble.n	8017688 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801765e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8017662:	d411      	bmi.n	8017688 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017664:	f8d8 400c 	ldr.w	r4, [r8, #12]
 8017668:	4564      	cmp	r4, ip
 801766a:	dd0d      	ble.n	8017688 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801766c:	b22d      	sxth	r5, r5
 801766e:	fb0c 7505 	mla	r5, ip, r5, r7
 8017672:	9c01      	ldr	r4, [sp, #4]
 8017674:	5d64      	ldrb	r4, [r4, r5]
 8017676:	2cff      	cmp	r4, #255	; 0xff
 8017678:	d10c      	bne.n	8017694 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801767a:	9c00      	ldr	r4, [sp, #0]
 801767c:	f834 5015 	ldrh.w	r5, [r4, r5, lsl #1]
 8017680:	f06f 0401 	mvn.w	r4, #1
 8017684:	4374      	muls	r4, r6
 8017686:	5305      	strh	r5, [r0, r4]
 8017688:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801768a:	3e01      	subs	r6, #1
 801768c:	4421      	add	r1, r4
 801768e:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017690:	4422      	add	r2, r4
 8017692:	e79c      	b.n	80175ce <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8017694:	2c00      	cmp	r4, #0
 8017696:	d0f7      	beq.n	8017688 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017698:	9f00      	ldr	r7, [sp, #0]
 801769a:	fa1f fc84 	uxth.w	ip, r4
 801769e:	f837 9015 	ldrh.w	r9, [r7, r5, lsl #1]
 80176a2:	f06f 0501 	mvn.w	r5, #1
 80176a6:	43e4      	mvns	r4, r4
 80176a8:	4375      	muls	r5, r6
 80176aa:	9502      	str	r5, [sp, #8]
 80176ac:	5b45      	ldrh	r5, [r0, r5]
 80176ae:	b2e4      	uxtb	r4, r4
 80176b0:	122f      	asrs	r7, r5, #8
 80176b2:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80176b6:	fb17 f704 	smulbb	r7, r7, r4
 80176ba:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 80176be:	00ed      	lsls	r5, r5, #3
 80176c0:	b2ed      	uxtb	r5, r5
 80176c2:	ea4f 2e29 	mov.w	lr, r9, asr #8
 80176c6:	fb15 f504 	smulbb	r5, r5, r4
 80176ca:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80176ce:	fb0e 7e0c 	mla	lr, lr, ip, r7
 80176d2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80176d6:	ea4f 07e9 	mov.w	r7, r9, asr #3
 80176da:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 80176de:	fb1a fa04 	smulbb	sl, sl, r4
 80176e2:	fa5f f989 	uxtb.w	r9, r9
 80176e6:	fb09 550c 	mla	r5, r9, ip, r5
 80176ea:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80176ee:	fb07 a70c 	mla	r7, r7, ip, sl
 80176f2:	fa1f fe8e 	uxth.w	lr, lr
 80176f6:	b2ad      	uxth	r5, r5
 80176f8:	f10e 0401 	add.w	r4, lr, #1
 80176fc:	f105 0a01 	add.w	sl, r5, #1
 8017700:	eb04 2e1e 	add.w	lr, r4, lr, lsr #8
 8017704:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 8017708:	b2bf      	uxth	r7, r7
 801770a:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 801770e:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8017712:	ea4a 0e0e 	orr.w	lr, sl, lr
 8017716:	f107 0a01 	add.w	sl, r7, #1
 801771a:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 801771e:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8017722:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8017726:	9c02      	ldr	r4, [sp, #8]
 8017728:	ea4e 0e0a 	orr.w	lr, lr, sl
 801772c:	f820 e004 	strh.w	lr, [r0, r4]
 8017730:	e7aa      	b.n	8017688 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017732:	f04f 0900 	mov.w	r9, #0
 8017736:	eba3 0409 	sub.w	r4, r3, r9
 801773a:	2c00      	cmp	r4, #0
 801773c:	f77f af4a 	ble.w	80175d4 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8017740:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8017744:	1414      	asrs	r4, r2, #16
 8017746:	140d      	asrs	r5, r1, #16
 8017748:	fb06 5504 	mla	r5, r6, r4, r5
 801774c:	9c01      	ldr	r4, [sp, #4]
 801774e:	5d64      	ldrb	r4, [r4, r5]
 8017750:	2cff      	cmp	r4, #255	; 0xff
 8017752:	d10b      	bne.n	801776c <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 8017754:	9c00      	ldr	r4, [sp, #0]
 8017756:	f834 4015 	ldrh.w	r4, [r4, r5, lsl #1]
 801775a:	f820 4019 	strh.w	r4, [r0, r9, lsl #1]
 801775e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8017760:	f109 0901 	add.w	r9, r9, #1
 8017764:	4421      	add	r1, r4
 8017766:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8017768:	4422      	add	r2, r4
 801776a:	e7e4      	b.n	8017736 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801776c:	2c00      	cmp	r4, #0
 801776e:	d0f6      	beq.n	801775e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8017770:	b2a7      	uxth	r7, r4
 8017772:	43e4      	mvns	r4, r4
 8017774:	9e00      	ldr	r6, [sp, #0]
 8017776:	b2e4      	uxtb	r4, r4
 8017778:	f836 e015 	ldrh.w	lr, [r6, r5, lsl #1]
 801777c:	f830 5019 	ldrh.w	r5, [r0, r9, lsl #1]
 8017780:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8017784:	122e      	asrs	r6, r5, #8
 8017786:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801778a:	fb16 f604 	smulbb	r6, r6, r4
 801778e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 8017792:	00ed      	lsls	r5, r5, #3
 8017794:	b2ed      	uxtb	r5, r5
 8017796:	fb15 f504 	smulbb	r5, r5, r4
 801779a:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801779e:	fb0c 6c07 	mla	ip, ip, r7, r6
 80177a2:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 80177a6:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80177aa:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80177ae:	fb1a fa04 	smulbb	sl, sl, r4
 80177b2:	fa5f fe8e 	uxtb.w	lr, lr
 80177b6:	fb0e 5507 	mla	r5, lr, r7, r5
 80177ba:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80177be:	fb06 a607 	mla	r6, r6, r7, sl
 80177c2:	fa1f fc8c 	uxth.w	ip, ip
 80177c6:	b2ad      	uxth	r5, r5
 80177c8:	f10c 0401 	add.w	r4, ip, #1
 80177cc:	f105 0a01 	add.w	sl, r5, #1
 80177d0:	eb04 2c1c 	add.w	ip, r4, ip, lsr #8
 80177d4:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80177d8:	b2b6      	uxth	r6, r6
 80177da:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80177de:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80177e2:	ea4a 0c0c 	orr.w	ip, sl, ip
 80177e6:	f106 0a01 	add.w	sl, r6, #1
 80177ea:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80177ee:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80177f2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80177f6:	ea4c 0c0a 	orr.w	ip, ip, sl
 80177fa:	f820 c019 	strh.w	ip, [r0, r9, lsl #1]
 80177fe:	e7ae      	b.n	801775e <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8017800:	b005      	add	sp, #20
 8017802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017806 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017806:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801780a:	b085      	sub	sp, #20
 801780c:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801780e:	9100      	str	r1, [sp, #0]
 8017810:	9203      	str	r2, [sp, #12]
 8017812:	6841      	ldr	r1, [r0, #4]
 8017814:	f89d 205c 	ldrb.w	r2, [sp, #92]	; 0x5c
 8017818:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 801781c:	9201      	str	r2, [sp, #4]
 801781e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8017822:	fb01 2404 	mla	r4, r1, r4, r2
 8017826:	6802      	ldr	r2, [r0, #0]
 8017828:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801782c:	f8de 2000 	ldr.w	r2, [lr]
 8017830:	9202      	str	r2, [sp, #8]
 8017832:	9a01      	ldr	r2, [sp, #4]
 8017834:	43d6      	mvns	r6, r2
 8017836:	b2f6      	uxtb	r6, r6
 8017838:	9a00      	ldr	r2, [sp, #0]
 801783a:	2a00      	cmp	r2, #0
 801783c:	dc03      	bgt.n	8017846 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801783e:	9a03      	ldr	r2, [sp, #12]
 8017840:	2a00      	cmp	r2, #0
 8017842:	f340 8124 	ble.w	8017a8e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8017846:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017848:	f9be c008 	ldrsh.w	ip, [lr, #8]
 801784c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8017850:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017852:	f9be 700c 	ldrsh.w	r7, [lr, #12]
 8017856:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 801785a:	2b00      	cmp	r3, #0
 801785c:	dd0e      	ble.n	801787c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801785e:	1408      	asrs	r0, r1, #16
 8017860:	d405      	bmi.n	801786e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8017862:	4560      	cmp	r0, ip
 8017864:	da03      	bge.n	801786e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8017866:	1410      	asrs	r0, r2, #16
 8017868:	d401      	bmi.n	801786e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801786a:	42b8      	cmp	r0, r7
 801786c:	db07      	blt.n	801787e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801786e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017870:	3b01      	subs	r3, #1
 8017872:	4401      	add	r1, r0
 8017874:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017876:	3402      	adds	r4, #2
 8017878:	4402      	add	r2, r0
 801787a:	e7ee      	b.n	801785a <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801787c:	d06e      	beq.n	801795c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801787e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017880:	1e58      	subs	r0, r3, #1
 8017882:	fb05 1500 	mla	r5, r5, r0, r1
 8017886:	142d      	asrs	r5, r5, #16
 8017888:	d45c      	bmi.n	8017944 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801788a:	4565      	cmp	r5, ip
 801788c:	da5a      	bge.n	8017944 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801788e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8017890:	fb05 2000 	mla	r0, r5, r0, r2
 8017894:	1400      	asrs	r0, r0, #16
 8017896:	d455      	bmi.n	8017944 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 8017898:	42b8      	cmp	r0, r7
 801789a:	da53      	bge.n	8017944 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13e>
 801789c:	4699      	mov	r9, r3
 801789e:	46a2      	mov	sl, r4
 80178a0:	f8bd b004 	ldrh.w	fp, [sp, #4]
 80178a4:	f1b9 0f00 	cmp.w	r9, #0
 80178a8:	dd54      	ble.n	8017954 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 80178aa:	f9be 7008 	ldrsh.w	r7, [lr, #8]
 80178ae:	140d      	asrs	r5, r1, #16
 80178b0:	1410      	asrs	r0, r2, #16
 80178b2:	fb07 5000 	mla	r0, r7, r0, r5
 80178b6:	9d02      	ldr	r5, [sp, #8]
 80178b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80178bc:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
 80178c0:	f8ba 5000 	ldrh.w	r5, [sl]
 80178c4:	ea4f 2c20 	mov.w	ip, r0, asr #8
 80178c8:	122f      	asrs	r7, r5, #8
 80178ca:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80178ce:	fb17 f706 	smulbb	r7, r7, r6
 80178d2:	ea4f 08e5 	mov.w	r8, r5, asr #3
 80178d6:	00ed      	lsls	r5, r5, #3
 80178d8:	f008 08fc 	and.w	r8, r8, #252	; 0xfc
 80178dc:	b2ed      	uxtb	r5, r5
 80178de:	fb18 f806 	smulbb	r8, r8, r6
 80178e2:	fb15 f506 	smulbb	r5, r5, r6
 80178e6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80178ea:	fb0c 7c0b 	mla	ip, ip, fp, r7
 80178ee:	10c7      	asrs	r7, r0, #3
 80178f0:	00c0      	lsls	r0, r0, #3
 80178f2:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80178f6:	b2c0      	uxtb	r0, r0
 80178f8:	fb07 870b 	mla	r7, r7, fp, r8
 80178fc:	fb00 500b 	mla	r0, r0, fp, r5
 8017900:	fa1f fc8c 	uxth.w	ip, ip
 8017904:	b280      	uxth	r0, r0
 8017906:	b2bf      	uxth	r7, r7
 8017908:	f10c 0501 	add.w	r5, ip, #1
 801790c:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8017910:	f107 0801 	add.w	r8, r7, #1
 8017914:	1c45      	adds	r5, r0, #1
 8017916:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 801791a:	eb08 2817 	add.w	r8, r8, r7, lsr #8
 801791e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017920:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8017924:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8017928:	ea4f 1858 	mov.w	r8, r8, lsr #5
 801792c:	ea45 0c0c 	orr.w	ip, r5, ip
 8017930:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8017934:	4401      	add	r1, r0
 8017936:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017938:	ea4c 0c08 	orr.w	ip, ip, r8
 801793c:	f82a cb02 	strh.w	ip, [sl], #2
 8017940:	4402      	add	r2, r0
 8017942:	e7af      	b.n	80178a4 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8017944:	f04f 0800 	mov.w	r8, #0
 8017948:	f8bd a004 	ldrh.w	sl, [sp, #4]
 801794c:	eb03 0008 	add.w	r0, r3, r8
 8017950:	2800      	cmp	r0, #0
 8017952:	dc41      	bgt.n	80179d8 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8017954:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017958:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801795c:	9b00      	ldr	r3, [sp, #0]
 801795e:	2b00      	cmp	r3, #0
 8017960:	f340 8095 	ble.w	8017a8e <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 8017964:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8017968:	ee30 0a04 	vadd.f32	s0, s0, s8
 801796c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017970:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8017974:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017978:	eef0 6a62 	vmov.f32	s13, s5
 801797c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017980:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017984:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017988:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801798c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017990:	edcd 6a0f 	vstr	s13, [sp, #60]	; 0x3c
 8017994:	eef0 6a43 	vmov.f32	s13, s6
 8017998:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801799c:	ee12 2a90 	vmov	r2, s5
 80179a0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80179a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80179a6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80179aa:	fb92 f3f3 	sdiv	r3, r2, r3
 80179ae:	ee13 2a10 	vmov	r2, s6
 80179b2:	9311      	str	r3, [sp, #68]	; 0x44
 80179b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80179b6:	edcd 6a10 	vstr	s13, [sp, #64]	; 0x40
 80179ba:	fb92 f3f3 	sdiv	r3, r2, r3
 80179be:	9312      	str	r3, [sp, #72]	; 0x48
 80179c0:	9b00      	ldr	r3, [sp, #0]
 80179c2:	9a03      	ldr	r2, [sp, #12]
 80179c4:	3b01      	subs	r3, #1
 80179c6:	9300      	str	r3, [sp, #0]
 80179c8:	eeb0 3a67 	vmov.f32	s6, s15
 80179cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80179ce:	eef0 2a47 	vmov.f32	s5, s14
 80179d2:	bf08      	it	eq
 80179d4:	4613      	moveq	r3, r2
 80179d6:	e72f      	b.n	8017838 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 80179d8:	140f      	asrs	r7, r1, #16
 80179da:	d451      	bmi.n	8017a80 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80179dc:	f8de 5008 	ldr.w	r5, [lr, #8]
 80179e0:	42bd      	cmp	r5, r7
 80179e2:	dd4d      	ble.n	8017a80 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80179e4:	ea5f 4c22 	movs.w	ip, r2, asr #16
 80179e8:	d44a      	bmi.n	8017a80 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80179ea:	f8de 000c 	ldr.w	r0, [lr, #12]
 80179ee:	4560      	cmp	r0, ip
 80179f0:	dd46      	ble.n	8017a80 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80179f2:	b22d      	sxth	r5, r5
 80179f4:	fb0c 7505 	mla	r5, ip, r5, r7
 80179f8:	9802      	ldr	r0, [sp, #8]
 80179fa:	f830 0015 	ldrh.w	r0, [r0, r5, lsl #1]
 80179fe:	f06f 0501 	mvn.w	r5, #1
 8017a02:	fb05 fb08 	mul.w	fp, r5, r8
 8017a06:	f834 500b 	ldrh.w	r5, [r4, fp]
 8017a0a:	ea4f 2c20 	mov.w	ip, r0, asr #8
 8017a0e:	122f      	asrs	r7, r5, #8
 8017a10:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8017a14:	fb17 f706 	smulbb	r7, r7, r6
 8017a18:	ea4f 09e5 	mov.w	r9, r5, asr #3
 8017a1c:	00ed      	lsls	r5, r5, #3
 8017a1e:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8017a22:	b2ed      	uxtb	r5, r5
 8017a24:	fb19 f906 	smulbb	r9, r9, r6
 8017a28:	fb15 f506 	smulbb	r5, r5, r6
 8017a2c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017a30:	fb0c 7c0a 	mla	ip, ip, sl, r7
 8017a34:	10c7      	asrs	r7, r0, #3
 8017a36:	00c0      	lsls	r0, r0, #3
 8017a38:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8017a3c:	b2c0      	uxtb	r0, r0
 8017a3e:	fb07 970a 	mla	r7, r7, sl, r9
 8017a42:	fb00 500a 	mla	r0, r0, sl, r5
 8017a46:	fa1f fc8c 	uxth.w	ip, ip
 8017a4a:	b2bf      	uxth	r7, r7
 8017a4c:	b280      	uxth	r0, r0
 8017a4e:	f10c 0501 	add.w	r5, ip, #1
 8017a52:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 8017a56:	f107 0901 	add.w	r9, r7, #1
 8017a5a:	1c45      	adds	r5, r0, #1
 8017a5c:	eb05 2510 	add.w	r5, r5, r0, lsr #8
 8017a60:	eb09 2917 	add.w	r9, r9, r7, lsr #8
 8017a64:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8017a68:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 8017a6c:	ea4f 1959 	mov.w	r9, r9, lsr #5
 8017a70:	ea45 0c0c 	orr.w	ip, r5, ip
 8017a74:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8017a78:	ea4c 0c09 	orr.w	ip, ip, r9
 8017a7c:	f824 c00b 	strh.w	ip, [r4, fp]
 8017a80:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017a82:	f108 38ff 	add.w	r8, r8, #4294967295
 8017a86:	4401      	add	r1, r0
 8017a88:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017a8a:	4402      	add	r2, r0
 8017a8c:	e75e      	b.n	801794c <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8017a8e:	b005      	add	sp, #20
 8017a90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017a94 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017a94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017a9c:	b085      	sub	sp, #20
 8017a9e:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8017aa0:	4693      	mov	fp, r2
 8017aa2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8017aa6:	e9dd ec11 	ldrd	lr, ip, [sp, #68]	; 0x44
 8017aaa:	6870      	ldr	r0, [r6, #4]
 8017aac:	9d16      	ldr	r5, [sp, #88]	; 0x58
 8017aae:	fb00 2404 	mla	r4, r0, r4, r2
 8017ab2:	6832      	ldr	r2, [r6, #0]
 8017ab4:	9101      	str	r1, [sp, #4]
 8017ab6:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8017aba:	682a      	ldr	r2, [r5, #0]
 8017abc:	9202      	str	r2, [sp, #8]
 8017abe:	9a01      	ldr	r2, [sp, #4]
 8017ac0:	2a00      	cmp	r2, #0
 8017ac2:	dc03      	bgt.n	8017acc <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8017ac4:	f1bb 0f00 	cmp.w	fp, #0
 8017ac8:	f340 809a 	ble.w	8017c00 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8017acc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017ace:	f9b5 9008 	ldrsh.w	r9, [r5, #8]
 8017ad2:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8017ad6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017ad8:	f9b5 800c 	ldrsh.w	r8, [r5, #12]
 8017adc:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	dd0c      	ble.n	8017afe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8017ae4:	1406      	asrs	r6, r0, #16
 8017ae6:	d405      	bmi.n	8017af4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8017ae8:	454e      	cmp	r6, r9
 8017aea:	da03      	bge.n	8017af4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8017aec:	1416      	asrs	r6, r2, #16
 8017aee:	d401      	bmi.n	8017af4 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8017af0:	4546      	cmp	r6, r8
 8017af2:	db05      	blt.n	8017b00 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8017af4:	4470      	add	r0, lr
 8017af6:	4462      	add	r2, ip
 8017af8:	3b01      	subs	r3, #1
 8017afa:	3402      	adds	r4, #2
 8017afc:	e7f0      	b.n	8017ae0 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8017afe:	d00f      	beq.n	8017b20 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8017b00:	1e5e      	subs	r6, r3, #1
 8017b02:	fb0e 0706 	mla	r7, lr, r6, r0
 8017b06:	143f      	asrs	r7, r7, #16
 8017b08:	d541      	bpl.n	8017b8e <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfa>
 8017b0a:	4698      	mov	r8, r3
 8017b0c:	eb04 0643 	add.w	r6, r4, r3, lsl #1
 8017b10:	9603      	str	r6, [sp, #12]
 8017b12:	f1b8 0f00 	cmp.w	r8, #0
 8017b16:	dc56      	bgt.n	8017bc6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x132>
 8017b18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017b1c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017b20:	9b01      	ldr	r3, [sp, #4]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	dd6c      	ble.n	8017c00 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8017b26:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017b2a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017b2e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017b32:	eeb0 6a62 	vmov.f32	s12, s5
 8017b36:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017b3a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017b3e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017b42:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017b46:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017b4a:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8017b4e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017b52:	eeb0 6a43 	vmov.f32	s12, s6
 8017b56:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017b5a:	ee12 2a90 	vmov	r2, s5
 8017b5e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017b62:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b64:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017b68:	fb92 fef3 	sdiv	lr, r2, r3
 8017b6c:	ee13 2a10 	vmov	r2, s6
 8017b70:	fb92 fcf3 	sdiv	ip, r2, r3
 8017b74:	9b01      	ldr	r3, [sp, #4]
 8017b76:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8017b7a:	3b01      	subs	r3, #1
 8017b7c:	9301      	str	r3, [sp, #4]
 8017b7e:	eeb0 3a67 	vmov.f32	s6, s15
 8017b82:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017b84:	eef0 2a47 	vmov.f32	s5, s14
 8017b88:	bf08      	it	eq
 8017b8a:	465b      	moveq	r3, fp
 8017b8c:	e797      	b.n	8017abe <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8017b8e:	454f      	cmp	r7, r9
 8017b90:	dabb      	bge.n	8017b0a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8017b92:	fb0c 2606 	mla	r6, ip, r6, r2
 8017b96:	1436      	asrs	r6, r6, #16
 8017b98:	d4b7      	bmi.n	8017b0a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8017b9a:	4546      	cmp	r6, r8
 8017b9c:	dab5      	bge.n	8017b0a <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8017b9e:	461e      	mov	r6, r3
 8017ba0:	46a0      	mov	r8, r4
 8017ba2:	2e00      	cmp	r6, #0
 8017ba4:	ddb8      	ble.n	8017b18 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8017ba6:	f9b5 a008 	ldrsh.w	sl, [r5, #8]
 8017baa:	1417      	asrs	r7, r2, #16
 8017bac:	ea4f 4920 	mov.w	r9, r0, asr #16
 8017bb0:	fb0a 9707 	mla	r7, sl, r7, r9
 8017bb4:	9902      	ldr	r1, [sp, #8]
 8017bb6:	4470      	add	r0, lr
 8017bb8:	f831 7017 	ldrh.w	r7, [r1, r7, lsl #1]
 8017bbc:	4462      	add	r2, ip
 8017bbe:	f828 7b02 	strh.w	r7, [r8], #2
 8017bc2:	3e01      	subs	r6, #1
 8017bc4:	e7ed      	b.n	8017ba2 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10e>
 8017bc6:	ea5f 4920 	movs.w	r9, r0, asr #16
 8017bca:	d414      	bmi.n	8017bf6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8017bcc:	68ae      	ldr	r6, [r5, #8]
 8017bce:	454e      	cmp	r6, r9
 8017bd0:	dd11      	ble.n	8017bf6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8017bd2:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8017bd6:	d40e      	bmi.n	8017bf6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8017bd8:	68ef      	ldr	r7, [r5, #12]
 8017bda:	4557      	cmp	r7, sl
 8017bdc:	dd0b      	ble.n	8017bf6 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x162>
 8017bde:	f06f 0101 	mvn.w	r1, #1
 8017be2:	b236      	sxth	r6, r6
 8017be4:	fb0a 9606 	mla	r6, sl, r6, r9
 8017be8:	9f02      	ldr	r7, [sp, #8]
 8017bea:	f837 7016 	ldrh.w	r7, [r7, r6, lsl #1]
 8017bee:	fb01 f608 	mul.w	r6, r1, r8
 8017bf2:	9903      	ldr	r1, [sp, #12]
 8017bf4:	538f      	strh	r7, [r1, r6]
 8017bf6:	4470      	add	r0, lr
 8017bf8:	4462      	add	r2, ip
 8017bfa:	f108 38ff 	add.w	r8, r8, #4294967295
 8017bfe:	e788      	b.n	8017b12 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017c00:	b005      	add	sp, #20
 8017c02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017c06 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017c06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017c0a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c0e:	b087      	sub	sp, #28
 8017c10:	9815      	ldr	r0, [sp, #84]	; 0x54
 8017c12:	468b      	mov	fp, r1
 8017c14:	9203      	str	r2, [sp, #12]
 8017c16:	6841      	ldr	r1, [r0, #4]
 8017c18:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 8017c1c:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 8017c20:	9204      	str	r2, [sp, #16]
 8017c22:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	; 0x58
 8017c26:	fb01 2505 	mla	r5, r1, r5, r2
 8017c2a:	6802      	ldr	r2, [r0, #0]
 8017c2c:	eb02 0545 	add.w	r5, r2, r5, lsl #1
 8017c30:	f8d9 2000 	ldr.w	r2, [r9]
 8017c34:	9201      	str	r2, [sp, #4]
 8017c36:	f1bb 0f00 	cmp.w	fp, #0
 8017c3a:	dc03      	bgt.n	8017c44 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8017c3c:	9a03      	ldr	r2, [sp, #12]
 8017c3e:	2a00      	cmp	r2, #0
 8017c40:	f340 8159 	ble.w	8017ef6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8017c44:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8017c46:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 8017c4a:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8017c4e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8017c50:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8017c54:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8017c58:	2b00      	cmp	r3, #0
 8017c5a:	dd0e      	ble.n	8017c7a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8017c5c:	1402      	asrs	r2, r0, #16
 8017c5e:	d405      	bmi.n	8017c6c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017c60:	42ba      	cmp	r2, r7
 8017c62:	da03      	bge.n	8017c6c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017c64:	140a      	asrs	r2, r1, #16
 8017c66:	d401      	bmi.n	8017c6c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8017c68:	42b2      	cmp	r2, r6
 8017c6a:	db07      	blt.n	8017c7c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8017c6c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017c6e:	3b01      	subs	r3, #1
 8017c70:	4410      	add	r0, r2
 8017c72:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017c74:	3502      	adds	r5, #2
 8017c76:	4411      	add	r1, r2
 8017c78:	e7ee      	b.n	8017c58 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 8017c7a:	d017      	beq.n	8017cac <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8017c7c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8017c7e:	1e5a      	subs	r2, r3, #1
 8017c80:	fb04 0402 	mla	r4, r4, r2, r0
 8017c84:	1424      	asrs	r4, r4, #16
 8017c86:	d409      	bmi.n	8017c9c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017c88:	42bc      	cmp	r4, r7
 8017c8a:	da07      	bge.n	8017c9c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017c8c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8017c8e:	fb04 1202 	mla	r2, r4, r2, r1
 8017c92:	1412      	asrs	r2, r2, #16
 8017c94:	d402      	bmi.n	8017c9c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8017c96:	42b2      	cmp	r2, r6
 8017c98:	f2c0 80bf 	blt.w	8017e1a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 8017c9c:	2700      	movs	r7, #0
 8017c9e:	19da      	adds	r2, r3, r7
 8017ca0:	2a00      	cmp	r2, #0
 8017ca2:	dc3e      	bgt.n	8017d22 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8017ca4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017ca8:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8017cac:	f1bb 0f00 	cmp.w	fp, #0
 8017cb0:	f340 8121 	ble.w	8017ef6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 8017cb4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017cb8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017cbc:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017cc0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017cc4:	eeb0 6a62 	vmov.f32	s12, s5
 8017cc8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017ccc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017cd0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017cd4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017cd8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017cdc:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 8017ce0:	eeb0 6a43 	vmov.f32	s12, s6
 8017ce4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017ce8:	ee12 2a90 	vmov	r2, s5
 8017cec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017cf0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017cf2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017cf6:	fb92 f3f3 	sdiv	r3, r2, r3
 8017cfa:	ee13 2a10 	vmov	r2, s6
 8017cfe:	9313      	str	r3, [sp, #76]	; 0x4c
 8017d00:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017d02:	f1bb 0b01 	subs.w	fp, fp, #1
 8017d06:	fb92 f3f3 	sdiv	r3, r2, r3
 8017d0a:	9a03      	ldr	r2, [sp, #12]
 8017d0c:	9314      	str	r3, [sp, #80]	; 0x50
 8017d0e:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 8017d12:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8017d14:	eeb0 3a67 	vmov.f32	s6, s15
 8017d18:	bf08      	it	eq
 8017d1a:	4613      	moveq	r3, r2
 8017d1c:	eef0 2a47 	vmov.f32	s5, s14
 8017d20:	e789      	b.n	8017c36 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 8017d22:	1406      	asrs	r6, r0, #16
 8017d24:	d42d      	bmi.n	8017d82 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8017d26:	f8d9 4008 	ldr.w	r4, [r9, #8]
 8017d2a:	42b4      	cmp	r4, r6
 8017d2c:	dd29      	ble.n	8017d82 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8017d2e:	ea5f 4c21 	movs.w	ip, r1, asr #16
 8017d32:	d426      	bmi.n	8017d82 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8017d34:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8017d38:	4562      	cmp	r2, ip
 8017d3a:	dd22      	ble.n	8017d82 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8017d3c:	b224      	sxth	r4, r4
 8017d3e:	fb0c 6404 	mla	r4, ip, r4, r6
 8017d42:	9a01      	ldr	r2, [sp, #4]
 8017d44:	f852 4024 	ldr.w	r4, [r2, r4, lsl #2]
 8017d48:	0e22      	lsrs	r2, r4, #24
 8017d4a:	d01a      	beq.n	8017d82 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8017d4c:	9e04      	ldr	r6, [sp, #16]
 8017d4e:	4372      	muls	r2, r6
 8017d50:	1c56      	adds	r6, r2, #1
 8017d52:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8017d56:	1212      	asrs	r2, r2, #8
 8017d58:	0a26      	lsrs	r6, r4, #8
 8017d5a:	2aff      	cmp	r2, #255	; 0xff
 8017d5c:	9605      	str	r6, [sp, #20]
 8017d5e:	d116      	bne.n	8017d8e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x188>
 8017d60:	f06f 0201 	mvn.w	r2, #1
 8017d64:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8017d68:	fb02 fc07 	mul.w	ip, r2, r7
 8017d6c:	0962      	lsrs	r2, r4, #5
 8017d6e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8017d72:	f026 0607 	bic.w	r6, r6, #7
 8017d76:	4316      	orrs	r6, r2
 8017d78:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8017d7c:	4326      	orrs	r6, r4
 8017d7e:	f825 600c 	strh.w	r6, [r5, ip]
 8017d82:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017d84:	3f01      	subs	r7, #1
 8017d86:	4410      	add	r0, r2
 8017d88:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017d8a:	4411      	add	r1, r2
 8017d8c:	e787      	b.n	8017c9e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8017d8e:	f06f 0601 	mvn.w	r6, #1
 8017d92:	fa1f fa82 	uxth.w	sl, r2
 8017d96:	43d2      	mvns	r2, r2
 8017d98:	437e      	muls	r6, r7
 8017d9a:	f3c4 4c07 	ubfx	ip, r4, #16, #8
 8017d9e:	f835 8006 	ldrh.w	r8, [r5, r6]
 8017da2:	fb1c fc0a 	smulbb	ip, ip, sl
 8017da6:	b2e4      	uxtb	r4, r4
 8017da8:	ea4f 2e28 	mov.w	lr, r8, asr #8
 8017dac:	fb14 f40a 	smulbb	r4, r4, sl
 8017db0:	b2d2      	uxtb	r2, r2
 8017db2:	9602      	str	r6, [sp, #8]
 8017db4:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8017db8:	f89d 6014 	ldrb.w	r6, [sp, #20]
 8017dbc:	fb0e ce02 	mla	lr, lr, r2, ip
 8017dc0:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 8017dc4:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8017dc8:	fb16 f60a 	smulbb	r6, r6, sl
 8017dcc:	fa5f f888 	uxtb.w	r8, r8
 8017dd0:	fb08 4402 	mla	r4, r8, r2, r4
 8017dd4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 8017dd8:	fb0c 6c02 	mla	ip, ip, r2, r6
 8017ddc:	fa1f fe8e 	uxth.w	lr, lr
 8017de0:	b2a4      	uxth	r4, r4
 8017de2:	f10e 0201 	add.w	r2, lr, #1
 8017de6:	1c66      	adds	r6, r4, #1
 8017de8:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 8017dec:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8017df0:	fa1f fc8c 	uxth.w	ip, ip
 8017df4:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8017df8:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 8017dfc:	ea46 0e0e 	orr.w	lr, r6, lr
 8017e00:	f10c 0601 	add.w	r6, ip, #1
 8017e04:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 8017e08:	0976      	lsrs	r6, r6, #5
 8017e0a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8017e0e:	9a02      	ldr	r2, [sp, #8]
 8017e10:	ea4e 0e06 	orr.w	lr, lr, r6
 8017e14:	f825 e002 	strh.w	lr, [r5, r2]
 8017e18:	e7b3      	b.n	8017d82 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x17c>
 8017e1a:	f04f 0800 	mov.w	r8, #0
 8017e1e:	eba3 0208 	sub.w	r2, r3, r8
 8017e22:	2a00      	cmp	r2, #0
 8017e24:	f77f af3e 	ble.w	8017ca4 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8017e28:	f9b9 6008 	ldrsh.w	r6, [r9, #8]
 8017e2c:	1404      	asrs	r4, r0, #16
 8017e2e:	140a      	asrs	r2, r1, #16
 8017e30:	fb06 4202 	mla	r2, r6, r2, r4
 8017e34:	9c01      	ldr	r4, [sp, #4]
 8017e36:	f854 4022 	ldr.w	r4, [r4, r2, lsl #2]
 8017e3a:	0e22      	lsrs	r2, r4, #24
 8017e3c:	d016      	beq.n	8017e6c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8017e3e:	9e04      	ldr	r6, [sp, #16]
 8017e40:	4372      	muls	r2, r6
 8017e42:	1c56      	adds	r6, r2, #1
 8017e44:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8017e48:	1212      	asrs	r2, r2, #8
 8017e4a:	2aff      	cmp	r2, #255	; 0xff
 8017e4c:	ea4f 2614 	mov.w	r6, r4, lsr #8
 8017e50:	d113      	bne.n	8017e7a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 8017e52:	0962      	lsrs	r2, r4, #5
 8017e54:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 8017e58:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8017e5c:	f026 0607 	bic.w	r6, r6, #7
 8017e60:	4316      	orrs	r6, r2
 8017e62:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 8017e66:	4326      	orrs	r6, r4
 8017e68:	f825 6018 	strh.w	r6, [r5, r8, lsl #1]
 8017e6c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8017e6e:	f108 0801 	add.w	r8, r8, #1
 8017e72:	4410      	add	r0, r2
 8017e74:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8017e76:	4411      	add	r1, r2
 8017e78:	e7d1      	b.n	8017e1e <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x218>
 8017e7a:	fa1f fa82 	uxth.w	sl, r2
 8017e7e:	43d2      	mvns	r2, r2
 8017e80:	f3c4 4707 	ubfx	r7, r4, #16, #8
 8017e84:	f835 e018 	ldrh.w	lr, [r5, r8, lsl #1]
 8017e88:	fb17 f70a 	smulbb	r7, r7, sl
 8017e8c:	b2e4      	uxtb	r4, r4
 8017e8e:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8017e92:	fb14 f40a 	smulbb	r4, r4, sl
 8017e96:	b2d2      	uxtb	r2, r2
 8017e98:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8017e9c:	fb0c 7c02 	mla	ip, ip, r2, r7
 8017ea0:	b2f6      	uxtb	r6, r6
 8017ea2:	ea4f 07ee 	mov.w	r7, lr, asr #3
 8017ea6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8017eaa:	fb16 f60a 	smulbb	r6, r6, sl
 8017eae:	fa5f fe8e 	uxtb.w	lr, lr
 8017eb2:	fb0e 4402 	mla	r4, lr, r2, r4
 8017eb6:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8017eba:	fb07 6702 	mla	r7, r7, r2, r6
 8017ebe:	fa1f fc8c 	uxth.w	ip, ip
 8017ec2:	b2a4      	uxth	r4, r4
 8017ec4:	f10c 0201 	add.w	r2, ip, #1
 8017ec8:	1c66      	adds	r6, r4, #1
 8017eca:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8017ece:	eb06 2614 	add.w	r6, r6, r4, lsr #8
 8017ed2:	b2bf      	uxth	r7, r7
 8017ed4:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 8017ed8:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 8017edc:	ea46 0c0c 	orr.w	ip, r6, ip
 8017ee0:	1c7e      	adds	r6, r7, #1
 8017ee2:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8017ee6:	0976      	lsrs	r6, r6, #5
 8017ee8:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8017eec:	ea4c 0c06 	orr.w	ip, ip, r6
 8017ef0:	f825 c018 	strh.w	ip, [r5, r8, lsl #1]
 8017ef4:	e7ba      	b.n	8017e6c <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x266>
 8017ef6:	b007      	add	sp, #28
 8017ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017efc <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017efc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8017f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017f04:	b085      	sub	sp, #20
 8017f06:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8017f08:	468b      	mov	fp, r1
 8017f0a:	6841      	ldr	r1, [r0, #4]
 8017f0c:	9203      	str	r2, [sp, #12]
 8017f0e:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	; 0x50
 8017f12:	fb01 2404 	mla	r4, r1, r4, r2
 8017f16:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8017f1a:	6802      	ldr	r2, [r0, #0]
 8017f1c:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8017f20:	f8d8 2000 	ldr.w	r2, [r8]
 8017f24:	9201      	str	r2, [sp, #4]
 8017f26:	f1bb 0f00 	cmp.w	fp, #0
 8017f2a:	dc03      	bgt.n	8017f34 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8017f2c:	9a03      	ldr	r2, [sp, #12]
 8017f2e:	2a00      	cmp	r2, #0
 8017f30:	f340 814f 	ble.w	80181d2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8017f34:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8017f36:	f9b8 7008 	ldrsh.w	r7, [r8, #8]
 8017f3a:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8017f3e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8017f40:	f9b8 600c 	ldrsh.w	r6, [r8, #12]
 8017f44:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 8017f48:	2b00      	cmp	r3, #0
 8017f4a:	dd0e      	ble.n	8017f6a <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8017f4c:	1408      	asrs	r0, r1, #16
 8017f4e:	d405      	bmi.n	8017f5c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8017f50:	42b8      	cmp	r0, r7
 8017f52:	da03      	bge.n	8017f5c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8017f54:	1410      	asrs	r0, r2, #16
 8017f56:	d401      	bmi.n	8017f5c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60>
 8017f58:	42b0      	cmp	r0, r6
 8017f5a:	db07      	blt.n	8017f6c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8017f5c:	9811      	ldr	r0, [sp, #68]	; 0x44
 8017f5e:	3b01      	subs	r3, #1
 8017f60:	4401      	add	r1, r0
 8017f62:	9812      	ldr	r0, [sp, #72]	; 0x48
 8017f64:	3402      	adds	r4, #2
 8017f66:	4402      	add	r2, r0
 8017f68:	e7ee      	b.n	8017f48 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 8017f6a:	d017      	beq.n	8017f9c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017f6c:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8017f6e:	1e58      	subs	r0, r3, #1
 8017f70:	fb05 1500 	mla	r5, r5, r0, r1
 8017f74:	142d      	asrs	r5, r5, #16
 8017f76:	d409      	bmi.n	8017f8c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8017f78:	42bd      	cmp	r5, r7
 8017f7a:	da07      	bge.n	8017f8c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8017f7c:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8017f7e:	fb05 2000 	mla	r0, r5, r0, r2
 8017f82:	1400      	asrs	r0, r0, #16
 8017f84:	d402      	bmi.n	8017f8c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8017f86:	42b0      	cmp	r0, r6
 8017f88:	f2c0 80ba 	blt.w	8018100 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8017f8c:	2600      	movs	r6, #0
 8017f8e:	1998      	adds	r0, r3, r6
 8017f90:	2800      	cmp	r0, #0
 8017f92:	dc3e      	bgt.n	8018012 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 8017f94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017f98:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8017f9c:	f1bb 0f00 	cmp.w	fp, #0
 8017fa0:	f340 8117 	ble.w	80181d2 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d6>
 8017fa4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017fa8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017fac:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017fb0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017fb4:	eeb0 6a62 	vmov.f32	s12, s5
 8017fb8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017fbc:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017fc0:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017fc4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017fc8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017fcc:	ed8d 6a0f 	vstr	s12, [sp, #60]	; 0x3c
 8017fd0:	eeb0 6a43 	vmov.f32	s12, s6
 8017fd4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017fd8:	ee12 2a90 	vmov	r2, s5
 8017fdc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017fe0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017fe2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017fe6:	fb92 f3f3 	sdiv	r3, r2, r3
 8017fea:	ee13 2a10 	vmov	r2, s6
 8017fee:	9311      	str	r3, [sp, #68]	; 0x44
 8017ff0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8017ff2:	f1bb 0b01 	subs.w	fp, fp, #1
 8017ff6:	fb92 f3f3 	sdiv	r3, r2, r3
 8017ffa:	9a03      	ldr	r2, [sp, #12]
 8017ffc:	9312      	str	r3, [sp, #72]	; 0x48
 8017ffe:	ed8d 6a10 	vstr	s12, [sp, #64]	; 0x40
 8018002:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8018004:	eeb0 3a67 	vmov.f32	s6, s15
 8018008:	bf08      	it	eq
 801800a:	4613      	moveq	r3, r2
 801800c:	eef0 2a47 	vmov.f32	s5, s14
 8018010:	e789      	b.n	8017f26 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 8018012:	140f      	asrs	r7, r1, #16
 8018014:	d424      	bmi.n	8018060 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018016:	f8d8 5008 	ldr.w	r5, [r8, #8]
 801801a:	42bd      	cmp	r5, r7
 801801c:	dd20      	ble.n	8018060 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801801e:	ea5f 4c22 	movs.w	ip, r2, asr #16
 8018022:	d41d      	bmi.n	8018060 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018024:	f8d8 000c 	ldr.w	r0, [r8, #12]
 8018028:	4560      	cmp	r0, ip
 801802a:	dd19      	ble.n	8018060 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801802c:	b22d      	sxth	r5, r5
 801802e:	fb0c 7505 	mla	r5, ip, r5, r7
 8018032:	9801      	ldr	r0, [sp, #4]
 8018034:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
 8018038:	0e07      	lsrs	r7, r0, #24
 801803a:	2fff      	cmp	r7, #255	; 0xff
 801803c:	d116      	bne.n	801806c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x170>
 801803e:	f06f 0501 	mvn.w	r5, #1
 8018042:	fb05 f706 	mul.w	r7, r5, r6
 8018046:	f2a5 75fe 	subw	r5, r5, #2046	; 0x7fe
 801804a:	ea05 2c10 	and.w	ip, r5, r0, lsr #8
 801804e:	0945      	lsrs	r5, r0, #5
 8018050:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8018054:	ea4c 0505 	orr.w	r5, ip, r5
 8018058:	f3c0 00c4 	ubfx	r0, r0, #3, #5
 801805c:	4305      	orrs	r5, r0
 801805e:	53e5      	strh	r5, [r4, r7]
 8018060:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018062:	3e01      	subs	r6, #1
 8018064:	4401      	add	r1, r0
 8018066:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018068:	4402      	add	r2, r0
 801806a:	e790      	b.n	8017f8e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801806c:	b2fd      	uxtb	r5, r7
 801806e:	2f00      	cmp	r7, #0
 8018070:	d0f6      	beq.n	8018060 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018072:	f06f 0701 	mvn.w	r7, #1
 8018076:	fa1f f985 	uxth.w	r9, r5
 801807a:	43ed      	mvns	r5, r5
 801807c:	4377      	muls	r7, r6
 801807e:	f834 e007 	ldrh.w	lr, [r4, r7]
 8018082:	9702      	str	r7, [sp, #8]
 8018084:	f3c0 4707 	ubfx	r7, r0, #16, #8
 8018088:	fb17 f709 	smulbb	r7, r7, r9
 801808c:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8018090:	b2c0      	uxtb	r0, r0
 8018092:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8018096:	fb10 f009 	smulbb	r0, r0, r9
 801809a:	b2ed      	uxtb	r5, r5
 801809c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80180a0:	fb0c 7c05 	mla	ip, ip, r5, r7
 80180a4:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80180a8:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80180ac:	fb1a fa09 	smulbb	sl, sl, r9
 80180b0:	fa5f fe8e 	uxtb.w	lr, lr
 80180b4:	fb0e 0005 	mla	r0, lr, r5, r0
 80180b8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80180bc:	fb07 a705 	mla	r7, r7, r5, sl
 80180c0:	b280      	uxth	r0, r0
 80180c2:	fa1f fc8c 	uxth.w	ip, ip
 80180c6:	f100 0a01 	add.w	sl, r0, #1
 80180ca:	f10c 0501 	add.w	r5, ip, #1
 80180ce:	eb0a 2a10 	add.w	sl, sl, r0, lsr #8
 80180d2:	eb05 2c1c 	add.w	ip, r5, ip, lsr #8
 80180d6:	b2bf      	uxth	r7, r7
 80180d8:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80180dc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80180e0:	ea4a 0c0c 	orr.w	ip, sl, ip
 80180e4:	f107 0a01 	add.w	sl, r7, #1
 80180e8:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80180ec:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80180f0:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80180f4:	9802      	ldr	r0, [sp, #8]
 80180f6:	ea4c 0c0a 	orr.w	ip, ip, sl
 80180fa:	f824 c000 	strh.w	ip, [r4, r0]
 80180fe:	e7af      	b.n	8018060 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8018100:	f04f 0e00 	mov.w	lr, #0
 8018104:	eba3 000e 	sub.w	r0, r3, lr
 8018108:	2800      	cmp	r0, #0
 801810a:	f77f af43 	ble.w	8017f94 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801810e:	f9b8 6008 	ldrsh.w	r6, [r8, #8]
 8018112:	140d      	asrs	r5, r1, #16
 8018114:	1410      	asrs	r0, r2, #16
 8018116:	fb06 5000 	mla	r0, r6, r0, r5
 801811a:	9d01      	ldr	r5, [sp, #4]
 801811c:	f855 5020 	ldr.w	r5, [r5, r0, lsl #2]
 8018120:	0e2e      	lsrs	r6, r5, #24
 8018122:	2eff      	cmp	r6, #255	; 0xff
 8018124:	d112      	bne.n	801814c <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8018126:	482c      	ldr	r0, [pc, #176]	; (80181d8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2dc>)
 8018128:	ea00 2615 	and.w	r6, r0, r5, lsr #8
 801812c:	0968      	lsrs	r0, r5, #5
 801812e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8018132:	4330      	orrs	r0, r6
 8018134:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8018138:	4328      	orrs	r0, r5
 801813a:	f824 001e 	strh.w	r0, [r4, lr, lsl #1]
 801813e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8018140:	f10e 0e01 	add.w	lr, lr, #1
 8018144:	4401      	add	r1, r0
 8018146:	9812      	ldr	r0, [sp, #72]	; 0x48
 8018148:	4402      	add	r2, r0
 801814a:	e7db      	b.n	8018104 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801814c:	b2f0      	uxtb	r0, r6
 801814e:	2e00      	cmp	r6, #0
 8018150:	d0f5      	beq.n	801813e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 8018152:	fa1f f980 	uxth.w	r9, r0
 8018156:	43c0      	mvns	r0, r0
 8018158:	f3c5 4607 	ubfx	r6, r5, #16, #8
 801815c:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 8018160:	fb16 f609 	smulbb	r6, r6, r9
 8018164:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8018168:	b2ed      	uxtb	r5, r5
 801816a:	ea4f 272c 	mov.w	r7, ip, asr #8
 801816e:	fb15 f509 	smulbb	r5, r5, r9
 8018172:	b2c0      	uxtb	r0, r0
 8018174:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8018178:	fb07 6700 	mla	r7, r7, r0, r6
 801817c:	ea4f 06ec 	mov.w	r6, ip, asr #3
 8018180:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8018184:	fb1a fa09 	smulbb	sl, sl, r9
 8018188:	fa5f fc8c 	uxtb.w	ip, ip
 801818c:	fb0c 5500 	mla	r5, ip, r0, r5
 8018190:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8018194:	fb06 a600 	mla	r6, r6, r0, sl
 8018198:	b2bf      	uxth	r7, r7
 801819a:	b2ad      	uxth	r5, r5
 801819c:	1c78      	adds	r0, r7, #1
 801819e:	f105 0a01 	add.w	sl, r5, #1
 80181a2:	eb00 2717 	add.w	r7, r0, r7, lsr #8
 80181a6:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80181aa:	b2b6      	uxth	r6, r6
 80181ac:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80181b0:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 80181b4:	ea4a 0707 	orr.w	r7, sl, r7
 80181b8:	f106 0a01 	add.w	sl, r6, #1
 80181bc:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 80181c0:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 80181c4:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 80181c8:	ea47 070a 	orr.w	r7, r7, sl
 80181cc:	f824 701e 	strh.w	r7, [r4, lr, lsl #1]
 80181d0:	e7b5      	b.n	801813e <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 80181d2:	b005      	add	sp, #20
 80181d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80181d8:	fffff800 	.word	0xfffff800

080181dc <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80181dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80181e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181e4:	b087      	sub	sp, #28
 80181e6:	9815      	ldr	r0, [sp, #84]	; 0x54
 80181e8:	468b      	mov	fp, r1
 80181ea:	9203      	str	r2, [sp, #12]
 80181ec:	6841      	ldr	r1, [r0, #4]
 80181ee:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
 80181f2:	f8dd 9060 	ldr.w	r9, [sp, #96]	; 0x60
 80181f6:	9204      	str	r2, [sp, #16]
 80181f8:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 80181fc:	fb01 2404 	mla	r4, r1, r4, r2
 8018200:	6802      	ldr	r2, [r0, #0]
 8018202:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 8018206:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801820a:	3201      	adds	r2, #1
 801820c:	f022 0201 	bic.w	r2, r2, #1
 8018210:	9200      	str	r2, [sp, #0]
 8018212:	f8d9 2000 	ldr.w	r2, [r9]
 8018216:	9201      	str	r2, [sp, #4]
 8018218:	f1bb 0f00 	cmp.w	fp, #0
 801821c:	dc03      	bgt.n	8018226 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801821e:	9a03      	ldr	r2, [sp, #12]
 8018220:	2a00      	cmp	r2, #0
 8018222:	f340 816a 	ble.w	80184fa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8018226:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8018228:	f9b9 7008 	ldrsh.w	r7, [r9, #8]
 801822c:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018230:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018232:	f9b9 600c 	ldrsh.w	r6, [r9, #12]
 8018236:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 801823a:	2b00      	cmp	r3, #0
 801823c:	dd0e      	ble.n	801825c <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801823e:	1402      	asrs	r2, r0, #16
 8018240:	d405      	bmi.n	801824e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018242:	42ba      	cmp	r2, r7
 8018244:	da03      	bge.n	801824e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8018246:	140a      	asrs	r2, r1, #16
 8018248:	d401      	bmi.n	801824e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801824a:	42b2      	cmp	r2, r6
 801824c:	db07      	blt.n	801825e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801824e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018250:	3b01      	subs	r3, #1
 8018252:	4410      	add	r0, r2
 8018254:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018256:	3402      	adds	r4, #2
 8018258:	4411      	add	r1, r2
 801825a:	e7ee      	b.n	801823a <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801825c:	d017      	beq.n	801828e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb2>
 801825e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018260:	1e5a      	subs	r2, r3, #1
 8018262:	fb05 0502 	mla	r5, r5, r2, r0
 8018266:	142d      	asrs	r5, r5, #16
 8018268:	d409      	bmi.n	801827e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801826a:	42bd      	cmp	r5, r7
 801826c:	da07      	bge.n	801827e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 801826e:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8018270:	fb05 1202 	mla	r2, r5, r2, r1
 8018274:	1412      	asrs	r2, r2, #16
 8018276:	d402      	bmi.n	801827e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8018278:	42b2      	cmp	r2, r6
 801827a:	f2c0 80c8 	blt.w	801840e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801827e:	2700      	movs	r7, #0
 8018280:	19da      	adds	r2, r3, r7
 8018282:	2a00      	cmp	r2, #0
 8018284:	dc3e      	bgt.n	8018304 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 8018286:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801828a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 801828e:	f1bb 0f00 	cmp.w	fp, #0
 8018292:	f340 8132 	ble.w	80184fa <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 8018296:	ee30 0a04 	vadd.f32	s0, s0, s8
 801829a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801829e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80182a2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80182a6:	eeb0 6a62 	vmov.f32	s12, s5
 80182aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80182ae:	ee77 2a62 	vsub.f32	s5, s14, s5
 80182b2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80182b6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80182ba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80182be:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80182c2:	eeb0 6a43 	vmov.f32	s12, s6
 80182c6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80182ca:	ee12 2a90 	vmov	r2, s5
 80182ce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80182d2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80182d4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80182d8:	fb92 f3f3 	sdiv	r3, r2, r3
 80182dc:	ee13 2a10 	vmov	r2, s6
 80182e0:	9313      	str	r3, [sp, #76]	; 0x4c
 80182e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80182e4:	f1bb 0b01 	subs.w	fp, fp, #1
 80182e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80182ec:	9a03      	ldr	r2, [sp, #12]
 80182ee:	9314      	str	r3, [sp, #80]	; 0x50
 80182f0:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 80182f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80182f6:	eeb0 3a67 	vmov.f32	s6, s15
 80182fa:	bf08      	it	eq
 80182fc:	4613      	moveq	r3, r2
 80182fe:	eef0 2a47 	vmov.f32	s5, s14
 8018302:	e789      	b.n	8018218 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8018304:	1405      	asrs	r5, r0, #16
 8018306:	d436      	bmi.n	8018376 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8018308:	f8d9 2008 	ldr.w	r2, [r9, #8]
 801830c:	42aa      	cmp	r2, r5
 801830e:	dd32      	ble.n	8018376 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8018310:	140e      	asrs	r6, r1, #16
 8018312:	d430      	bmi.n	8018376 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 8018314:	f8d9 200c 	ldr.w	r2, [r9, #12]
 8018318:	42b2      	cmp	r2, r6
 801831a:	dd2c      	ble.n	8018376 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801831c:	9a00      	ldr	r2, [sp, #0]
 801831e:	fb06 5502 	mla	r5, r6, r2, r5
 8018322:	9e01      	ldr	r6, [sp, #4]
 8018324:	086a      	lsrs	r2, r5, #1
 8018326:	5cb2      	ldrb	r2, [r6, r2]
 8018328:	07ee      	lsls	r6, r5, #31
 801832a:	bf54      	ite	pl
 801832c:	f002 020f 	andpl.w	r2, r2, #15
 8018330:	1112      	asrmi	r2, r2, #4
 8018332:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8018336:	b2d2      	uxtb	r2, r2
 8018338:	b1ea      	cbz	r2, 8018376 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801833a:	9d04      	ldr	r5, [sp, #16]
 801833c:	436a      	muls	r2, r5
 801833e:	1c55      	adds	r5, r2, #1
 8018340:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8018344:	4d6e      	ldr	r5, [pc, #440]	; (8018500 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 8018346:	1212      	asrs	r2, r2, #8
 8018348:	682d      	ldr	r5, [r5, #0]
 801834a:	2aff      	cmp	r2, #255	; 0xff
 801834c:	ea4f 2615 	mov.w	r6, r5, lsr #8
 8018350:	9605      	str	r6, [sp, #20]
 8018352:	d116      	bne.n	8018382 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8018354:	f06f 0201 	mvn.w	r2, #1
 8018358:	f426 66ff 	bic.w	r6, r6, #2040	; 0x7f8
 801835c:	fb02 fc07 	mul.w	ip, r2, r7
 8018360:	096a      	lsrs	r2, r5, #5
 8018362:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8018366:	f026 0607 	bic.w	r6, r6, #7
 801836a:	4316      	orrs	r6, r2
 801836c:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8018370:	432e      	orrs	r6, r5
 8018372:	f824 600c 	strh.w	r6, [r4, ip]
 8018376:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018378:	3f01      	subs	r7, #1
 801837a:	4410      	add	r0, r2
 801837c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801837e:	4411      	add	r1, r2
 8018380:	e77e      	b.n	8018280 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8018382:	f06f 0601 	mvn.w	r6, #1
 8018386:	fa1f fa82 	uxth.w	sl, r2
 801838a:	43d2      	mvns	r2, r2
 801838c:	437e      	muls	r6, r7
 801838e:	f3c5 4c07 	ubfx	ip, r5, #16, #8
 8018392:	f834 8006 	ldrh.w	r8, [r4, r6]
 8018396:	fb1c fc0a 	smulbb	ip, ip, sl
 801839a:	b2ed      	uxtb	r5, r5
 801839c:	ea4f 2e28 	mov.w	lr, r8, asr #8
 80183a0:	fb15 f50a 	smulbb	r5, r5, sl
 80183a4:	b2d2      	uxtb	r2, r2
 80183a6:	9602      	str	r6, [sp, #8]
 80183a8:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 80183ac:	f89d 6014 	ldrb.w	r6, [sp, #20]
 80183b0:	fb0e ce02 	mla	lr, lr, r2, ip
 80183b4:	ea4f 0ce8 	mov.w	ip, r8, asr #3
 80183b8:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80183bc:	fb16 f60a 	smulbb	r6, r6, sl
 80183c0:	fa5f f888 	uxtb.w	r8, r8
 80183c4:	fb08 5502 	mla	r5, r8, r2, r5
 80183c8:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 80183cc:	fb0c 6c02 	mla	ip, ip, r2, r6
 80183d0:	fa1f fe8e 	uxth.w	lr, lr
 80183d4:	b2ad      	uxth	r5, r5
 80183d6:	f10e 0201 	add.w	r2, lr, #1
 80183da:	1c6e      	adds	r6, r5, #1
 80183dc:	eb02 2e1e 	add.w	lr, r2, lr, lsr #8
 80183e0:	eb06 2615 	add.w	r6, r6, r5, lsr #8
 80183e4:	fa1f fc8c 	uxth.w	ip, ip
 80183e8:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 80183ec:	f40e 4e78 	and.w	lr, lr, #63488	; 0xf800
 80183f0:	ea46 0e0e 	orr.w	lr, r6, lr
 80183f4:	f10c 0601 	add.w	r6, ip, #1
 80183f8:	eb06 261c 	add.w	r6, r6, ip, lsr #8
 80183fc:	0976      	lsrs	r6, r6, #5
 80183fe:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8018402:	9a02      	ldr	r2, [sp, #8]
 8018404:	ea4e 0e06 	orr.w	lr, lr, r6
 8018408:	f824 e002 	strh.w	lr, [r4, r2]
 801840c:	e7b3      	b.n	8018376 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801840e:	f04f 0800 	mov.w	r8, #0
 8018412:	eba3 0208 	sub.w	r2, r3, r8
 8018416:	2a00      	cmp	r2, #0
 8018418:	f77f af35 	ble.w	8018286 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xaa>
 801841c:	9e00      	ldr	r6, [sp, #0]
 801841e:	1402      	asrs	r2, r0, #16
 8018420:	140d      	asrs	r5, r1, #16
 8018422:	fb06 2505 	mla	r5, r6, r5, r2
 8018426:	9e01      	ldr	r6, [sp, #4]
 8018428:	086a      	lsrs	r2, r5, #1
 801842a:	5cb2      	ldrb	r2, [r6, r2]
 801842c:	07ed      	lsls	r5, r5, #31
 801842e:	bf54      	ite	pl
 8018430:	f002 020f 	andpl.w	r2, r2, #15
 8018434:	1112      	asrmi	r2, r2, #4
 8018436:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801843a:	b2d2      	uxtb	r2, r2
 801843c:	b1c2      	cbz	r2, 8018470 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 801843e:	9d04      	ldr	r5, [sp, #16]
 8018440:	436a      	muls	r2, r5
 8018442:	1c55      	adds	r5, r2, #1
 8018444:	eb05 2222 	add.w	r2, r5, r2, asr #8
 8018448:	4d2d      	ldr	r5, [pc, #180]	; (8018500 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x324>)
 801844a:	1212      	asrs	r2, r2, #8
 801844c:	682e      	ldr	r6, [r5, #0]
 801844e:	2aff      	cmp	r2, #255	; 0xff
 8018450:	ea4f 2516 	mov.w	r5, r6, lsr #8
 8018454:	d113      	bne.n	801847e <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 8018456:	0972      	lsrs	r2, r6, #5
 8018458:	f425 65ff 	bic.w	r5, r5, #2040	; 0x7f8
 801845c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8018460:	f025 0507 	bic.w	r5, r5, #7
 8018464:	4315      	orrs	r5, r2
 8018466:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 801846a:	4335      	orrs	r5, r6
 801846c:	f824 5018 	strh.w	r5, [r4, r8, lsl #1]
 8018470:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018472:	f108 0801 	add.w	r8, r8, #1
 8018476:	4410      	add	r0, r2
 8018478:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801847a:	4411      	add	r1, r2
 801847c:	e7c9      	b.n	8018412 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801847e:	fa1f fa82 	uxth.w	sl, r2
 8018482:	43d2      	mvns	r2, r2
 8018484:	f3c6 4707 	ubfx	r7, r6, #16, #8
 8018488:	f834 e018 	ldrh.w	lr, [r4, r8, lsl #1]
 801848c:	fb17 f70a 	smulbb	r7, r7, sl
 8018490:	b2f6      	uxtb	r6, r6
 8018492:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8018496:	fb16 f60a 	smulbb	r6, r6, sl
 801849a:	b2d2      	uxtb	r2, r2
 801849c:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 80184a0:	fb0c 7c02 	mla	ip, ip, r2, r7
 80184a4:	b2ed      	uxtb	r5, r5
 80184a6:	ea4f 07ee 	mov.w	r7, lr, asr #3
 80184aa:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80184ae:	fb15 f50a 	smulbb	r5, r5, sl
 80184b2:	fa5f fe8e 	uxtb.w	lr, lr
 80184b6:	fb0e 6602 	mla	r6, lr, r2, r6
 80184ba:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 80184be:	fb07 5702 	mla	r7, r7, r2, r5
 80184c2:	fa1f fc8c 	uxth.w	ip, ip
 80184c6:	b2b6      	uxth	r6, r6
 80184c8:	f10c 0201 	add.w	r2, ip, #1
 80184cc:	1c75      	adds	r5, r6, #1
 80184ce:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 80184d2:	eb05 2516 	add.w	r5, r5, r6, lsr #8
 80184d6:	b2bf      	uxth	r7, r7
 80184d8:	f3c5 25c4 	ubfx	r5, r5, #11, #5
 80184dc:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 80184e0:	ea45 0c0c 	orr.w	ip, r5, ip
 80184e4:	1c7d      	adds	r5, r7, #1
 80184e6:	eb05 2517 	add.w	r5, r5, r7, lsr #8
 80184ea:	096d      	lsrs	r5, r5, #5
 80184ec:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80184f0:	ea4c 0c05 	orr.w	ip, ip, r5
 80184f4:	f824 c018 	strh.w	ip, [r4, r8, lsl #1]
 80184f8:	e7ba      	b.n	8018470 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x294>
 80184fa:	b007      	add	sp, #28
 80184fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018500:	2001fe90 	.word	0x2001fe90

08018504 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8018504:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8018508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801850c:	b087      	sub	sp, #28
 801850e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8018510:	9101      	str	r1, [sp, #4]
 8018512:	6841      	ldr	r1, [r0, #4]
 8018514:	9205      	str	r2, [sp, #20]
 8018516:	e9dd 2416 	ldrd	r2, r4, [sp, #88]	; 0x58
 801851a:	fb01 2404 	mla	r4, r1, r4, r2
 801851e:	f8dd b060 	ldr.w	fp, [sp, #96]	; 0x60
 8018522:	6802      	ldr	r2, [r0, #0]
 8018524:	f8df 82f0 	ldr.w	r8, [pc, #752]	; 8018818 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x314>
 8018528:	eb02 0444 	add.w	r4, r2, r4, lsl #1
 801852c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8018530:	3201      	adds	r2, #1
 8018532:	f022 0201 	bic.w	r2, r2, #1
 8018536:	9202      	str	r2, [sp, #8]
 8018538:	f8db 2000 	ldr.w	r2, [fp]
 801853c:	9203      	str	r2, [sp, #12]
 801853e:	9a01      	ldr	r2, [sp, #4]
 8018540:	2a00      	cmp	r2, #0
 8018542:	dc03      	bgt.n	801854c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8018544:	9a05      	ldr	r2, [sp, #20]
 8018546:	2a00      	cmp	r2, #0
 8018548:	f340 8162 	ble.w	8018810 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801854c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801854e:	f9bb 7008 	ldrsh.w	r7, [fp, #8]
 8018552:	f502 4000 	add.w	r0, r2, #32768	; 0x8000
 8018556:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8018558:	f9bb 600c 	ldrsh.w	r6, [fp, #12]
 801855c:	f502 4100 	add.w	r1, r2, #32768	; 0x8000
 8018560:	2b00      	cmp	r3, #0
 8018562:	dd0e      	ble.n	8018582 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8018564:	1402      	asrs	r2, r0, #16
 8018566:	d405      	bmi.n	8018574 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018568:	42ba      	cmp	r2, r7
 801856a:	da03      	bge.n	8018574 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801856c:	140a      	asrs	r2, r1, #16
 801856e:	d401      	bmi.n	8018574 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8018570:	42b2      	cmp	r2, r6
 8018572:	db07      	blt.n	8018584 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8018574:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8018576:	3b01      	subs	r3, #1
 8018578:	4410      	add	r0, r2
 801857a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801857c:	3402      	adds	r4, #2
 801857e:	4411      	add	r1, r2
 8018580:	e7ee      	b.n	8018560 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8018582:	d017      	beq.n	80185b4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xb0>
 8018584:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8018586:	1e5a      	subs	r2, r3, #1
 8018588:	fb05 0502 	mla	r5, r5, r2, r0
 801858c:	142d      	asrs	r5, r5, #16
 801858e:	d409      	bmi.n	80185a4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018590:	42bd      	cmp	r5, r7
 8018592:	da07      	bge.n	80185a4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8018594:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8018596:	fb05 1202 	mla	r2, r5, r2, r1
 801859a:	1412      	asrs	r2, r2, #16
 801859c:	d402      	bmi.n	80185a4 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801859e:	42b2      	cmp	r2, r6
 80185a0:	f2c0 80c3 	blt.w	801872a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x226>
 80185a4:	2500      	movs	r5, #0
 80185a6:	195a      	adds	r2, r3, r5
 80185a8:	2a00      	cmp	r2, #0
 80185aa:	dc3f      	bgt.n	801862c <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80185ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80185b0:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80185b4:	9b01      	ldr	r3, [sp, #4]
 80185b6:	2b00      	cmp	r3, #0
 80185b8:	f340 812a 	ble.w	8018810 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 80185bc:	ee30 0a04 	vadd.f32	s0, s0, s8
 80185c0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80185c4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80185c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80185cc:	eeb0 6a62 	vmov.f32	s12, s5
 80185d0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80185d4:	ee77 2a62 	vsub.f32	s5, s14, s5
 80185d8:	ee61 7a27 	vmul.f32	s15, s2, s15
 80185dc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80185e0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80185e4:	ed8d 6a11 	vstr	s12, [sp, #68]	; 0x44
 80185e8:	eeb0 6a43 	vmov.f32	s12, s6
 80185ec:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80185f0:	ee12 2a90 	vmov	r2, s5
 80185f4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80185f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80185fa:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80185fe:	fb92 f3f3 	sdiv	r3, r2, r3
 8018602:	ee13 2a10 	vmov	r2, s6
 8018606:	9313      	str	r3, [sp, #76]	; 0x4c
 8018608:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801860a:	ed8d 6a12 	vstr	s12, [sp, #72]	; 0x48
 801860e:	fb92 f3f3 	sdiv	r3, r2, r3
 8018612:	9314      	str	r3, [sp, #80]	; 0x50
 8018614:	9b01      	ldr	r3, [sp, #4]
 8018616:	9a05      	ldr	r2, [sp, #20]
 8018618:	3b01      	subs	r3, #1
 801861a:	9301      	str	r3, [sp, #4]
 801861c:	eeb0 3a67 	vmov.f32	s6, s15
 8018620:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8018622:	eef0 2a47 	vmov.f32	s5, s14
 8018626:	bf08      	it	eq
 8018628:	4613      	moveq	r3, r2
 801862a:	e788      	b.n	801853e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801862c:	1406      	asrs	r6, r0, #16
 801862e:	d42c      	bmi.n	801868a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8018630:	f8db 2008 	ldr.w	r2, [fp, #8]
 8018634:	42b2      	cmp	r2, r6
 8018636:	dd28      	ble.n	801868a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8018638:	140f      	asrs	r7, r1, #16
 801863a:	d426      	bmi.n	801868a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801863c:	f8db 200c 	ldr.w	r2, [fp, #12]
 8018640:	42ba      	cmp	r2, r7
 8018642:	dd22      	ble.n	801868a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 8018644:	9a02      	ldr	r2, [sp, #8]
 8018646:	fb07 6602 	mla	r6, r7, r2, r6
 801864a:	9f03      	ldr	r7, [sp, #12]
 801864c:	0872      	lsrs	r2, r6, #1
 801864e:	5cba      	ldrb	r2, [r7, r2]
 8018650:	07f6      	lsls	r6, r6, #31
 8018652:	bf54      	ite	pl
 8018654:	f002 020f 	andpl.w	r2, r2, #15
 8018658:	1112      	asrmi	r2, r2, #4
 801865a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801865e:	b2d2      	uxtb	r2, r2
 8018660:	2aff      	cmp	r2, #255	; 0xff
 8018662:	d118      	bne.n	8018696 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8018664:	f06f 0601 	mvn.w	r6, #1
 8018668:	f8d8 2000 	ldr.w	r2, [r8]
 801866c:	fb06 f705 	mul.w	r7, r6, r5
 8018670:	f2a6 76fe 	subw	r6, r6, #2046	; 0x7fe
 8018674:	ea06 2c12 	and.w	ip, r6, r2, lsr #8
 8018678:	0956      	lsrs	r6, r2, #5
 801867a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801867e:	ea4c 0606 	orr.w	r6, ip, r6
 8018682:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8018686:	4316      	orrs	r6, r2
 8018688:	53e6      	strh	r6, [r4, r7]
 801868a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801868c:	3d01      	subs	r5, #1
 801868e:	4410      	add	r0, r2
 8018690:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018692:	4411      	add	r1, r2
 8018694:	e787      	b.n	80185a6 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa2>
 8018696:	2a00      	cmp	r2, #0
 8018698:	d0f7      	beq.n	801868a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801869a:	f06f 0601 	mvn.w	r6, #1
 801869e:	fa1f f982 	uxth.w	r9, r2
 80186a2:	43d2      	mvns	r2, r2
 80186a4:	436e      	muls	r6, r5
 80186a6:	f8d8 c000 	ldr.w	ip, [r8]
 80186aa:	f834 e006 	ldrh.w	lr, [r4, r6]
 80186ae:	9604      	str	r6, [sp, #16]
 80186b0:	f3cc 4607 	ubfx	r6, ip, #16, #8
 80186b4:	fb16 f609 	smulbb	r6, r6, r9
 80186b8:	f3cc 2a07 	ubfx	sl, ip, #8, #8
 80186bc:	fa5f fc8c 	uxtb.w	ip, ip
 80186c0:	ea4f 272e 	mov.w	r7, lr, asr #8
 80186c4:	fb1c fc09 	smulbb	ip, ip, r9
 80186c8:	b2d2      	uxtb	r2, r2
 80186ca:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80186ce:	fb07 6702 	mla	r7, r7, r2, r6
 80186d2:	ea4f 06ee 	mov.w	r6, lr, asr #3
 80186d6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 80186da:	fb1a fa09 	smulbb	sl, sl, r9
 80186de:	fa5f fe8e 	uxtb.w	lr, lr
 80186e2:	fb0e cc02 	mla	ip, lr, r2, ip
 80186e6:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 80186ea:	fb06 a602 	mla	r6, r6, r2, sl
 80186ee:	b2bf      	uxth	r7, r7
 80186f0:	fa1f fc8c 	uxth.w	ip, ip
 80186f4:	1c7a      	adds	r2, r7, #1
 80186f6:	f10c 0a01 	add.w	sl, ip, #1
 80186fa:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 80186fe:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 8018702:	b2b6      	uxth	r6, r6
 8018704:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8018708:	f407 4778 	and.w	r7, r7, #63488	; 0xf800
 801870c:	ea4a 0707 	orr.w	r7, sl, r7
 8018710:	f106 0a01 	add.w	sl, r6, #1
 8018714:	eb0a 2a16 	add.w	sl, sl, r6, lsr #8
 8018718:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801871c:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018720:	9a04      	ldr	r2, [sp, #16]
 8018722:	ea47 070a 	orr.w	r7, r7, sl
 8018726:	52a7      	strh	r7, [r4, r2]
 8018728:	e7af      	b.n	801868a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801872a:	f04f 0e00 	mov.w	lr, #0
 801872e:	eba3 020e 	sub.w	r2, r3, lr
 8018732:	2a00      	cmp	r2, #0
 8018734:	f77f af3a 	ble.w	80185ac <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa8>
 8018738:	9e02      	ldr	r6, [sp, #8]
 801873a:	1402      	asrs	r2, r0, #16
 801873c:	140d      	asrs	r5, r1, #16
 801873e:	fb06 2505 	mla	r5, r6, r5, r2
 8018742:	9e03      	ldr	r6, [sp, #12]
 8018744:	086a      	lsrs	r2, r5, #1
 8018746:	5cb2      	ldrb	r2, [r6, r2]
 8018748:	07ed      	lsls	r5, r5, #31
 801874a:	bf54      	ite	pl
 801874c:	f002 020f 	andpl.w	r2, r2, #15
 8018750:	1112      	asrmi	r2, r2, #4
 8018752:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8018756:	b2d2      	uxtb	r2, r2
 8018758:	2aff      	cmp	r2, #255	; 0xff
 801875a:	d115      	bne.n	8018788 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801875c:	f8d8 5000 	ldr.w	r5, [r8]
 8018760:	f6a2 02ff 	subw	r2, r2, #2303	; 0x8ff
 8018764:	ea02 2615 	and.w	r6, r2, r5, lsr #8
 8018768:	096a      	lsrs	r2, r5, #5
 801876a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801876e:	4332      	orrs	r2, r6
 8018770:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 8018774:	432a      	orrs	r2, r5
 8018776:	f824 201e 	strh.w	r2, [r4, lr, lsl #1]
 801877a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 801877c:	f10e 0e01 	add.w	lr, lr, #1
 8018780:	4410      	add	r0, r2
 8018782:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8018784:	4411      	add	r1, r2
 8018786:	e7d2      	b.n	801872e <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 8018788:	2a00      	cmp	r2, #0
 801878a:	d0f6      	beq.n	801877a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801878c:	fa1f f982 	uxth.w	r9, r2
 8018790:	43d2      	mvns	r2, r2
 8018792:	f8d8 7000 	ldr.w	r7, [r8]
 8018796:	f834 c01e 	ldrh.w	ip, [r4, lr, lsl #1]
 801879a:	f3c7 4507 	ubfx	r5, r7, #16, #8
 801879e:	fb15 f509 	smulbb	r5, r5, r9
 80187a2:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 80187a6:	b2ff      	uxtb	r7, r7
 80187a8:	ea4f 262c 	mov.w	r6, ip, asr #8
 80187ac:	fb17 f709 	smulbb	r7, r7, r9
 80187b0:	b2d2      	uxtb	r2, r2
 80187b2:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80187b6:	fb06 5602 	mla	r6, r6, r2, r5
 80187ba:	ea4f 05ec 	mov.w	r5, ip, asr #3
 80187be:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80187c2:	fb1a fa09 	smulbb	sl, sl, r9
 80187c6:	fa5f fc8c 	uxtb.w	ip, ip
 80187ca:	fb0c 7702 	mla	r7, ip, r2, r7
 80187ce:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80187d2:	fb05 a502 	mla	r5, r5, r2, sl
 80187d6:	b2b6      	uxth	r6, r6
 80187d8:	b2bf      	uxth	r7, r7
 80187da:	1c72      	adds	r2, r6, #1
 80187dc:	f107 0a01 	add.w	sl, r7, #1
 80187e0:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 80187e4:	eb0a 2a17 	add.w	sl, sl, r7, lsr #8
 80187e8:	b2ad      	uxth	r5, r5
 80187ea:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80187ee:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 80187f2:	ea4a 0606 	orr.w	r6, sl, r6
 80187f6:	f105 0a01 	add.w	sl, r5, #1
 80187fa:	eb0a 2a15 	add.w	sl, sl, r5, lsr #8
 80187fe:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 8018802:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 8018806:	ea46 060a 	orr.w	r6, r6, sl
 801880a:	f824 601e 	strh.w	r6, [r4, lr, lsl #1]
 801880e:	e7b4      	b.n	801877a <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8018810:	b007      	add	sp, #28
 8018812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018816:	bf00      	nop
 8018818:	2001fe90 	.word	0x2001fe90

0801881c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801881c:	4770      	bx	lr

0801881e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801881e:	4770      	bx	lr

08018820 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8018820:	4770      	bx	lr

08018822 <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8018822:	4770      	bx	lr

08018824 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8018824:	4770      	bx	lr

08018826 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8018826:	4770      	bx	lr

08018828 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8018828:	4770      	bx	lr

0801882a <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801882a:	4770      	bx	lr

0801882c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801882c:	4770      	bx	lr

0801882e <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801882e:	4770      	bx	lr

08018830 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8018830:	4770      	bx	lr

08018832 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8018832:	4770      	bx	lr

08018834 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8018834:	4770      	bx	lr

08018836 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8018836:	4770      	bx	lr

08018838 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8018838:	4770      	bx	lr

0801883a <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD1Ev>:
 801883a:	4770      	bx	lr

0801883c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801883c:	4770      	bx	lr

0801883e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801883e:	4770      	bx	lr

08018840 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8018840:	4770      	bx	lr

08018842 <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8018842:	4770      	bx	lr

08018844 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8018844:	4770      	bx	lr

08018846 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8018846:	4770      	bx	lr

08018848 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8018848:	4770      	bx	lr

0801884a <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801884a:	4770      	bx	lr

0801884c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801884c:	4770      	bx	lr

0801884e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD1Ev>:
 801884e:	4770      	bx	lr

08018850 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD1Ev>:
 8018850:	4770      	bx	lr

08018852 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD1Ev>:
 8018852:	4770      	bx	lr

08018854 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 8018854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018858:	b088      	sub	sp, #32
 801885a:	ac08      	add	r4, sp, #32
 801885c:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8018860:	4606      	mov	r6, r0
 8018862:	4620      	mov	r0, r4
 8018864:	4688      	mov	r8, r1
 8018866:	4691      	mov	r9, r2
 8018868:	f7fd fc66 	bl	8016138 <_ZNK8touchgfx6Bitmap7getDataEv>
 801886c:	6833      	ldr	r3, [r6, #0]
 801886e:	4605      	mov	r5, r0
 8018870:	4620      	mov	r0, r4
 8018872:	699f      	ldr	r7, [r3, #24]
 8018874:	f7fd fb74 	bl	8015f60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018878:	4682      	mov	sl, r0
 801887a:	4620      	mov	r0, r4
 801887c:	f7fd fba4 	bl	8015fc8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8018880:	9500      	str	r5, [sp, #0]
 8018882:	e9cd a001 	strd	sl, r0, [sp, #4]
 8018886:	464b      	mov	r3, r9
 8018888:	a806      	add	r0, sp, #24
 801888a:	4642      	mov	r2, r8
 801888c:	4631      	mov	r1, r6
 801888e:	47b8      	blx	r7
 8018890:	4628      	mov	r0, r5
 8018892:	b008      	add	sp, #32
 8018894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08018898 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8018898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801889c:	2300      	movs	r3, #0
 801889e:	9300      	str	r3, [sp, #0]
 80188a0:	4b3d      	ldr	r3, [pc, #244]	; (8018998 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x100>)
 80188a2:	781b      	ldrb	r3, [r3, #0]
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d137      	bne.n	8018918 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x80>
 80188a8:	4a3c      	ldr	r2, [pc, #240]	; (801899c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 80188aa:	f9b2 2000 	ldrsh.w	r2, [r2]
 80188ae:	f8ad 2004 	strh.w	r2, [sp, #4]
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d132      	bne.n	801891c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x84>
 80188b6:	4b3a      	ldr	r3, [pc, #232]	; (80189a0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 80188b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80188bc:	6808      	ldr	r0, [r1, #0]
 80188be:	6849      	ldr	r1, [r1, #4]
 80188c0:	f8ad 3006 	strh.w	r3, [sp, #6]
 80188c4:	ac02      	add	r4, sp, #8
 80188c6:	ab02      	add	r3, sp, #8
 80188c8:	c303      	stmia	r3!, {r0, r1}
 80188ca:	4669      	mov	r1, sp
 80188cc:	4620      	mov	r0, r4
 80188ce:	f7fa fdb9 	bl	8013444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80188d2:	4668      	mov	r0, sp
 80188d4:	f7fa fd8e 	bl	80133f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80188d8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80188dc:	f8bd 2000 	ldrh.w	r2, [sp]
 80188e0:	4d30      	ldr	r5, [pc, #192]	; (80189a4 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x10c>)
 80188e2:	4413      	add	r3, r2
 80188e4:	f8ad 3008 	strh.w	r3, [sp, #8]
 80188e8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80188ec:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80188f0:	6828      	ldr	r0, [r5, #0]
 80188f2:	4413      	add	r3, r2
 80188f4:	f8ad 300a 	strh.w	r3, [sp, #10]
 80188f8:	6803      	ldr	r3, [r0, #0]
 80188fa:	462f      	mov	r7, r5
 80188fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80188fe:	4798      	blx	r3
 8018900:	f010 0f01 	tst.w	r0, #1
 8018904:	d00c      	beq.n	8018920 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x88>
 8018906:	e894 0006 	ldmia.w	r4, {r1, r2}
 801890a:	6828      	ldr	r0, [r5, #0]
 801890c:	6803      	ldr	r3, [r0, #0]
 801890e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018910:	4798      	blx	r3
 8018912:	b004      	add	sp, #16
 8018914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018918:	4a21      	ldr	r2, [pc, #132]	; (80189a0 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x108>)
 801891a:	e7c6      	b.n	80188aa <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801891c:	4b1f      	ldr	r3, [pc, #124]	; (801899c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 801891e:	e7cb      	b.n	80188b8 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 8018920:	6838      	ldr	r0, [r7, #0]
 8018922:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8018926:	6803      	ldr	r3, [r0, #0]
 8018928:	f9bd 500e 	ldrsh.w	r5, [sp, #14]
 801892c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801892e:	4798      	blx	r3
 8018930:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 8018934:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8018938:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 801893c:	ea4f 0848 	mov.w	r8, r8, lsl #1
 8018940:	fb16 3602 	smlabb	r6, r6, r2, r3
 8018944:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8018948:	6838      	ldr	r0, [r7, #0]
 801894a:	6803      	ldr	r3, [r0, #0]
 801894c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801894e:	4798      	blx	r3
 8018950:	4a12      	ldr	r2, [pc, #72]	; (801899c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>)
 8018952:	f9bd 400a 	ldrsh.w	r4, [sp, #10]
 8018956:	4691      	mov	r9, r2
 8018958:	8813      	ldrh	r3, [r2, #0]
 801895a:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801895e:	435d      	muls	r5, r3
 8018960:	fb03 1404 	mla	r4, r3, r4, r1
 8018964:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8018968:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 801896c:	6838      	ldr	r0, [r7, #0]
 801896e:	42ac      	cmp	r4, r5
 8018970:	6803      	ldr	r3, [r0, #0]
 8018972:	d20e      	bcs.n	8018992 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xfa>
 8018974:	f8d3 a034 	ldr.w	sl, [r3, #52]	; 0x34
 8018978:	4632      	mov	r2, r6
 801897a:	4643      	mov	r3, r8
 801897c:	4621      	mov	r1, r4
 801897e:	47d0      	blx	sl
 8018980:	f8b9 3000 	ldrh.w	r3, [r9]
 8018984:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018988:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801898c:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8018990:	e7ec      	b.n	801896c <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd4>
 8018992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018994:	4798      	blx	r3
 8018996:	e7bc      	b.n	8018912 <_ZN8touchgfx8LCD16bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8018998:	2001fe80 	.word	0x2001fe80
 801899c:	2001fe82 	.word	0x2001fe82
 80189a0:	2001fe84 	.word	0x2001fe84
 80189a4:	2001fe88 	.word	0x2001fe88

080189a8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80189a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189ac:	b08b      	sub	sp, #44	; 0x2c
 80189ae:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 80189b2:	460f      	mov	r7, r1
 80189b4:	4616      	mov	r6, r2
 80189b6:	f89d 4054 	ldrb.w	r4, [sp, #84]	; 0x54
 80189ba:	f1bb 0f00 	cmp.w	fp, #0
 80189be:	d049      	beq.n	8018a54 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80189c0:	6810      	ldr	r0, [r2, #0]
 80189c2:	6851      	ldr	r1, [r2, #4]
 80189c4:	ad06      	add	r5, sp, #24
 80189c6:	c503      	stmia	r5!, {r0, r1}
 80189c8:	6818      	ldr	r0, [r3, #0]
 80189ca:	6859      	ldr	r1, [r3, #4]
 80189cc:	ad08      	add	r5, sp, #32
 80189ce:	c503      	stmia	r5!, {r0, r1}
 80189d0:	a806      	add	r0, sp, #24
 80189d2:	f7fa fd0f 	bl	80133f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80189d6:	4631      	mov	r1, r6
 80189d8:	a808      	add	r0, sp, #32
 80189da:	f7fa fd33 	bl	8013444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80189de:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80189e2:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80189e6:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80189ea:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	; 0x24
 80189ee:	fb16 2103 	smlabb	r1, r6, r3, r2
 80189f2:	eb07 0641 	add.w	r6, r7, r1, lsl #1
 80189f6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 80189fa:	4f60      	ldr	r7, [pc, #384]	; (8018b7c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 80189fc:	440a      	add	r2, r1
 80189fe:	f8ad 2020 	strh.w	r2, [sp, #32]
 8018a02:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8018a06:	6838      	ldr	r0, [r7, #0]
 8018a08:	4413      	add	r3, r2
 8018a0a:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8018a0e:	6803      	ldr	r3, [r0, #0]
 8018a10:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	; 0x26
 8018a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018a16:	4798      	blx	r3
 8018a18:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8018a1c:	46b9      	mov	r9, r7
 8018a1e:	d01c      	beq.n	8018a5a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb2>
 8018a20:	f010 0f04 	tst.w	r0, #4
 8018a24:	d01d      	beq.n	8018a62 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8018a26:	2700      	movs	r7, #0
 8018a28:	f8d9 0000 	ldr.w	r0, [r9]
 8018a2c:	b2ad      	uxth	r5, r5
 8018a2e:	6801      	ldr	r1, [r0, #0]
 8018a30:	e9cd 4704 	strd	r4, r7, [sp, #16]
 8018a34:	f8bd 401c 	ldrh.w	r4, [sp, #28]
 8018a38:	f8cd b00c 	str.w	fp, [sp, #12]
 8018a3c:	9402      	str	r4, [sp, #8]
 8018a3e:	fa1f f488 	uxth.w	r4, r8
 8018a42:	9501      	str	r5, [sp, #4]
 8018a44:	9400      	str	r4, [sp, #0]
 8018a46:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8018a48:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8018a4c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8018a50:	4631      	mov	r1, r6
 8018a52:	47a0      	blx	r4
 8018a54:	b00b      	add	sp, #44	; 0x2c
 8018a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018a5a:	b914      	cbnz	r4, 8018a62 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xba>
 8018a5c:	f010 0f01 	tst.w	r0, #1
 8018a60:	e7e0      	b.n	8018a24 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 8018a62:	f8d9 0000 	ldr.w	r0, [r9]
 8018a66:	ea4f 0748 	mov.w	r7, r8, lsl #1
 8018a6a:	6803      	ldr	r3, [r0, #0]
 8018a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018a6e:	4798      	blx	r3
 8018a70:	4b43      	ldr	r3, [pc, #268]	; (8018b80 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d8>)
 8018a72:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	; 0x22
 8018a76:	881a      	ldrh	r2, [r3, #0]
 8018a78:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8018a7c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8018a80:	fb02 1404 	mla	r4, r2, r4, r1
 8018a84:	469a      	mov	sl, r3
 8018a86:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8018a8a:	fb05 f502 	mul.w	r5, r5, r2
 8018a8e:	d059      	beq.n	8018b44 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x19c>
 8018a90:	469e      	mov	lr, r3
 8018a92:	f1cb 09ff 	rsb	r9, fp, #255	; 0xff
 8018a96:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8018a9a:	fa1f f28b 	uxth.w	r2, fp
 8018a9e:	fa1f f989 	uxth.w	r9, r9
 8018aa2:	42ac      	cmp	r4, r5
 8018aa4:	d264      	bcs.n	8018b70 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8018aa6:	eb04 0a07 	add.w	sl, r4, r7
 8018aaa:	4554      	cmp	r4, sl
 8018aac:	d23d      	bcs.n	8018b2a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x182>
 8018aae:	8821      	ldrh	r1, [r4, #0]
 8018ab0:	f836 3b02 	ldrh.w	r3, [r6], #2
 8018ab4:	1208      	asrs	r0, r1, #8
 8018ab6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8018aba:	fb10 f009 	smulbb	r0, r0, r9
 8018abe:	ea4f 0be1 	mov.w	fp, r1, asr #3
 8018ac2:	00c9      	lsls	r1, r1, #3
 8018ac4:	b2c9      	uxtb	r1, r1
 8018ac6:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8018aca:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 8018ace:	fb11 f109 	smulbb	r1, r1, r9
 8018ad2:	fb1b fb09 	smulbb	fp, fp, r9
 8018ad6:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8018ada:	fb0c 0c02 	mla	ip, ip, r2, r0
 8018ade:	10d8      	asrs	r0, r3, #3
 8018ae0:	00db      	lsls	r3, r3, #3
 8018ae2:	b2db      	uxtb	r3, r3
 8018ae4:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8018ae8:	fb03 1302 	mla	r3, r3, r2, r1
 8018aec:	fb00 b002 	mla	r0, r0, r2, fp
 8018af0:	fa1f fc8c 	uxth.w	ip, ip
 8018af4:	f10c 0b01 	add.w	fp, ip, #1
 8018af8:	b29b      	uxth	r3, r3
 8018afa:	eb0b 2c1c 	add.w	ip, fp, ip, lsr #8
 8018afe:	b280      	uxth	r0, r0
 8018b00:	f40c 4b78 	and.w	fp, ip, #63488	; 0xf800
 8018b04:	f103 0c01 	add.w	ip, r3, #1
 8018b08:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8018b0c:	1c43      	adds	r3, r0, #1
 8018b0e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8018b12:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8018b16:	0940      	lsrs	r0, r0, #5
 8018b18:	ea4c 0c0b 	orr.w	ip, ip, fp
 8018b1c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8018b20:	ea4c 0c00 	orr.w	ip, ip, r0
 8018b24:	f824 cb02 	strh.w	ip, [r4], #2
 8018b28:	e7bf      	b.n	8018aaa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x102>
 8018b2a:	f8be 3000 	ldrh.w	r3, [lr]
 8018b2e:	eba3 0308 	sub.w	r3, r3, r8
 8018b32:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018b36:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018b3a:	eba3 0308 	sub.w	r3, r3, r8
 8018b3e:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8018b42:	e7ae      	b.n	8018aa2 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfa>
 8018b44:	eb04 0545 	add.w	r5, r4, r5, lsl #1
 8018b48:	f8d9 0000 	ldr.w	r0, [r9]
 8018b4c:	42ac      	cmp	r4, r5
 8018b4e:	6803      	ldr	r3, [r0, #0]
 8018b50:	d20e      	bcs.n	8018b70 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1c8>
 8018b52:	f8d3 8034 	ldr.w	r8, [r3, #52]	; 0x34
 8018b56:	4632      	mov	r2, r6
 8018b58:	463b      	mov	r3, r7
 8018b5a:	4621      	mov	r1, r4
 8018b5c:	47c0      	blx	r8
 8018b5e:	f8ba 3000 	ldrh.w	r3, [sl]
 8018b62:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8018b66:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8018b6a:	eb06 0643 	add.w	r6, r6, r3, lsl #1
 8018b6e:	e7eb      	b.n	8018b48 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a0>
 8018b70:	4b02      	ldr	r3, [pc, #8]	; (8018b7c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1d4>)
 8018b72:	6818      	ldr	r0, [r3, #0]
 8018b74:	6803      	ldr	r3, [r0, #0]
 8018b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b78:	4798      	blx	r3
 8018b7a:	e76b      	b.n	8018a54 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8018b7c:	2001fe88 	.word	0x2001fe88
 8018b80:	2001fe82 	.word	0x2001fe82

08018b84 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8018b84:	b510      	push	{r4, lr}
 8018b86:	4604      	mov	r4, r0
 8018b88:	2104      	movs	r1, #4
 8018b8a:	f008 ff9a 	bl	8021ac2 <_ZdlPvj>
 8018b8e:	4620      	mov	r0, r4
 8018b90:	bd10      	pop	{r4, pc}

08018b92 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8018b92:	b510      	push	{r4, lr}
 8018b94:	4604      	mov	r4, r0
 8018b96:	2104      	movs	r1, #4
 8018b98:	f008 ff93 	bl	8021ac2 <_ZdlPvj>
 8018b9c:	4620      	mov	r0, r4
 8018b9e:	bd10      	pop	{r4, pc}

08018ba0 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8018ba0:	b510      	push	{r4, lr}
 8018ba2:	4604      	mov	r4, r0
 8018ba4:	2104      	movs	r1, #4
 8018ba6:	f008 ff8c 	bl	8021ac2 <_ZdlPvj>
 8018baa:	4620      	mov	r0, r4
 8018bac:	bd10      	pop	{r4, pc}

08018bae <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8018bae:	b510      	push	{r4, lr}
 8018bb0:	4604      	mov	r4, r0
 8018bb2:	2104      	movs	r1, #4
 8018bb4:	f008 ff85 	bl	8021ac2 <_ZdlPvj>
 8018bb8:	4620      	mov	r0, r4
 8018bba:	bd10      	pop	{r4, pc}

08018bbc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8018bbc:	b510      	push	{r4, lr}
 8018bbe:	4604      	mov	r4, r0
 8018bc0:	2104      	movs	r1, #4
 8018bc2:	f008 ff7e 	bl	8021ac2 <_ZdlPvj>
 8018bc6:	4620      	mov	r0, r4
 8018bc8:	bd10      	pop	{r4, pc}

08018bca <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8018bca:	b510      	push	{r4, lr}
 8018bcc:	4604      	mov	r4, r0
 8018bce:	2104      	movs	r1, #4
 8018bd0:	f008 ff77 	bl	8021ac2 <_ZdlPvj>
 8018bd4:	4620      	mov	r0, r4
 8018bd6:	bd10      	pop	{r4, pc}

08018bd8 <_ZN8touchgfx8LCD16bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8018bd8:	b510      	push	{r4, lr}
 8018bda:	4604      	mov	r4, r0
 8018bdc:	2104      	movs	r1, #4
 8018bde:	f008 ff70 	bl	8021ac2 <_ZdlPvj>
 8018be2:	4620      	mov	r0, r4
 8018be4:	bd10      	pop	{r4, pc}

08018be6 <_ZN8touchgfx8LCD16bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8018be6:	b510      	push	{r4, lr}
 8018be8:	4604      	mov	r4, r0
 8018bea:	2104      	movs	r1, #4
 8018bec:	f008 ff69 	bl	8021ac2 <_ZdlPvj>
 8018bf0:	4620      	mov	r0, r4
 8018bf2:	bd10      	pop	{r4, pc}

08018bf4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8018bf4:	b510      	push	{r4, lr}
 8018bf6:	4604      	mov	r4, r0
 8018bf8:	2104      	movs	r1, #4
 8018bfa:	f008 ff62 	bl	8021ac2 <_ZdlPvj>
 8018bfe:	4620      	mov	r0, r4
 8018c00:	bd10      	pop	{r4, pc}

08018c02 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8018c02:	b510      	push	{r4, lr}
 8018c04:	4604      	mov	r4, r0
 8018c06:	2104      	movs	r1, #4
 8018c08:	f008 ff5b 	bl	8021ac2 <_ZdlPvj>
 8018c0c:	4620      	mov	r0, r4
 8018c0e:	bd10      	pop	{r4, pc}

08018c10 <_ZN8touchgfx8LCD16bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8018c10:	b510      	push	{r4, lr}
 8018c12:	4604      	mov	r4, r0
 8018c14:	2104      	movs	r1, #4
 8018c16:	f008 ff54 	bl	8021ac2 <_ZdlPvj>
 8018c1a:	4620      	mov	r0, r4
 8018c1c:	bd10      	pop	{r4, pc}

08018c1e <_ZN8touchgfx8LCD16bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8018c1e:	b510      	push	{r4, lr}
 8018c20:	4604      	mov	r4, r0
 8018c22:	2104      	movs	r1, #4
 8018c24:	f008 ff4d 	bl	8021ac2 <_ZdlPvj>
 8018c28:	4620      	mov	r0, r4
 8018c2a:	bd10      	pop	{r4, pc}

08018c2c <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8018c2c:	b510      	push	{r4, lr}
 8018c2e:	4604      	mov	r4, r0
 8018c30:	2104      	movs	r1, #4
 8018c32:	f008 ff46 	bl	8021ac2 <_ZdlPvj>
 8018c36:	4620      	mov	r0, r4
 8018c38:	bd10      	pop	{r4, pc}

08018c3a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GAD0Ev>:
 8018c3a:	b510      	push	{r4, lr}
 8018c3c:	4604      	mov	r4, r0
 8018c3e:	2104      	movs	r1, #4
 8018c40:	f008 ff3f 	bl	8021ac2 <_ZdlPvj>
 8018c44:	4620      	mov	r0, r4
 8018c46:	bd10      	pop	{r4, pc}

08018c48 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8018c48:	b510      	push	{r4, lr}
 8018c4a:	4604      	mov	r4, r0
 8018c4c:	2104      	movs	r1, #4
 8018c4e:	f008 ff38 	bl	8021ac2 <_ZdlPvj>
 8018c52:	4620      	mov	r0, r4
 8018c54:	bd10      	pop	{r4, pc}

08018c56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8018c56:	b510      	push	{r4, lr}
 8018c58:	4604      	mov	r4, r0
 8018c5a:	2104      	movs	r1, #4
 8018c5c:	f008 ff31 	bl	8021ac2 <_ZdlPvj>
 8018c60:	4620      	mov	r0, r4
 8018c62:	bd10      	pop	{r4, pc}

08018c64 <_ZN8touchgfx8LCD16bpp48TextureMapper_RGB565_Opaque_NearestNeighbor_NoGAD0Ev>:
 8018c64:	b510      	push	{r4, lr}
 8018c66:	4604      	mov	r4, r0
 8018c68:	2104      	movs	r1, #4
 8018c6a:	f008 ff2a 	bl	8021ac2 <_ZdlPvj>
 8018c6e:	4620      	mov	r0, r4
 8018c70:	bd10      	pop	{r4, pc}

08018c72 <_ZN8touchgfx8LCD16bpp46TextureMapper_RGB565_Opaque_NearestNeighbor_GAD0Ev>:
 8018c72:	b510      	push	{r4, lr}
 8018c74:	4604      	mov	r4, r0
 8018c76:	2104      	movs	r1, #4
 8018c78:	f008 ff23 	bl	8021ac2 <_ZdlPvj>
 8018c7c:	4620      	mov	r0, r4
 8018c7e:	bd10      	pop	{r4, pc}

08018c80 <_ZN8touchgfx8LCD16bpp51TextureMapper_RGB565_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8018c80:	b510      	push	{r4, lr}
 8018c82:	4604      	mov	r4, r0
 8018c84:	2104      	movs	r1, #4
 8018c86:	f008 ff1c 	bl	8021ac2 <_ZdlPvj>
 8018c8a:	4620      	mov	r0, r4
 8018c8c:	bd10      	pop	{r4, pc}

08018c8e <_ZN8touchgfx8LCD16bpp49TextureMapper_RGB565_NonOpaque_NearestNeighbor_GAD0Ev>:
 8018c8e:	b510      	push	{r4, lr}
 8018c90:	4604      	mov	r4, r0
 8018c92:	2104      	movs	r1, #4
 8018c94:	f008 ff15 	bl	8021ac2 <_ZdlPvj>
 8018c98:	4620      	mov	r0, r4
 8018c9a:	bd10      	pop	{r4, pc}

08018c9c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8018c9c:	b510      	push	{r4, lr}
 8018c9e:	4604      	mov	r4, r0
 8018ca0:	2104      	movs	r1, #4
 8018ca2:	f008 ff0e 	bl	8021ac2 <_ZdlPvj>
 8018ca6:	4620      	mov	r0, r4
 8018ca8:	bd10      	pop	{r4, pc}

08018caa <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8018caa:	b510      	push	{r4, lr}
 8018cac:	4604      	mov	r4, r0
 8018cae:	2104      	movs	r1, #4
 8018cb0:	f008 ff07 	bl	8021ac2 <_ZdlPvj>
 8018cb4:	4620      	mov	r0, r4
 8018cb6:	bd10      	pop	{r4, pc}

08018cb8 <_ZN8touchgfx8LCD16bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8018cb8:	b510      	push	{r4, lr}
 8018cba:	4604      	mov	r4, r0
 8018cbc:	2104      	movs	r1, #4
 8018cbe:	f008 ff00 	bl	8021ac2 <_ZdlPvj>
 8018cc2:	4620      	mov	r0, r4
 8018cc4:	bd10      	pop	{r4, pc}

08018cc6 <_ZN8touchgfx8LCD16bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8018cc6:	b510      	push	{r4, lr}
 8018cc8:	4604      	mov	r4, r0
 8018cca:	2104      	movs	r1, #4
 8018ccc:	f008 fef9 	bl	8021ac2 <_ZdlPvj>
 8018cd0:	4620      	mov	r0, r4
 8018cd2:	bd10      	pop	{r4, pc}

08018cd4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8018cd4:	b510      	push	{r4, lr}
 8018cd6:	4604      	mov	r4, r0
 8018cd8:	2104      	movs	r1, #4
 8018cda:	f008 fef2 	bl	8021ac2 <_ZdlPvj>
 8018cde:	4620      	mov	r0, r4
 8018ce0:	bd10      	pop	{r4, pc}

08018ce2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8018ce2:	b510      	push	{r4, lr}
 8018ce4:	4604      	mov	r4, r0
 8018ce6:	2104      	movs	r1, #4
 8018ce8:	f008 feeb 	bl	8021ac2 <_ZdlPvj>
 8018cec:	4620      	mov	r0, r4
 8018cee:	bd10      	pop	{r4, pc}

08018cf0 <_ZN8touchgfx8LCD16bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 8018cf0:	b510      	push	{r4, lr}
 8018cf2:	4604      	mov	r4, r0
 8018cf4:	2104      	movs	r1, #4
 8018cf6:	f008 fee4 	bl	8021ac2 <_ZdlPvj>
 8018cfa:	4620      	mov	r0, r4
 8018cfc:	bd10      	pop	{r4, pc}

08018cfe <_ZN8touchgfx8LCD16bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8018cfe:	b510      	push	{r4, lr}
 8018d00:	4604      	mov	r4, r0
 8018d02:	2104      	movs	r1, #4
 8018d04:	f008 fedd 	bl	8021ac2 <_ZdlPvj>
 8018d08:	4620      	mov	r0, r4
 8018d0a:	bd10      	pop	{r4, pc}

08018d0c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8018d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018d10:	469b      	mov	fp, r3
 8018d12:	4616      	mov	r6, r2
 8018d14:	b091      	sub	sp, #68	; 0x44
 8018d16:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018d1a:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 8018d1e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8018d22:	f9bd 7070 	ldrsh.w	r7, [sp, #112]	; 0x70
 8018d26:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8018d2a:	4604      	mov	r4, r0
 8018d2c:	460d      	mov	r5, r1
 8018d2e:	4640      	mov	r0, r8
 8018d30:	4659      	mov	r1, fp
 8018d32:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8018d36:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8018d3a:	f8ad 902c 	strh.w	r9, [sp, #44]	; 0x2c
 8018d3e:	f8ad 702e 	strh.w	r7, [sp, #46]	; 0x2e
 8018d42:	f7f8 fb33 	bl	80113ac <_ZN8touchgfx4RectaNERKS0_>
 8018d46:	4631      	mov	r1, r6
 8018d48:	4640      	mov	r0, r8
 8018d4a:	f7f8 fb2f 	bl	80113ac <_ZN8touchgfx4RectaNERKS0_>
 8018d4e:	4b74      	ldr	r3, [pc, #464]	; (8018f20 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x214>)
 8018d50:	8818      	ldrh	r0, [r3, #0]
 8018d52:	4b74      	ldr	r3, [pc, #464]	; (8018f24 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x218>)
 8018d54:	b202      	sxth	r2, r0
 8018d56:	8819      	ldrh	r1, [r3, #0]
 8018d58:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8018d5c:	b20e      	sxth	r6, r1
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	da07      	bge.n	8018d72 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x66>
 8018d62:	f8bd c02c 	ldrh.w	ip, [sp, #44]	; 0x2c
 8018d66:	4463      	add	r3, ip
 8018d68:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 8018d6c:	2300      	movs	r3, #0
 8018d6e:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
 8018d72:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8018d76:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 8018d7a:	1ad2      	subs	r2, r2, r3
 8018d7c:	4594      	cmp	ip, r2
 8018d7e:	bfc4      	itt	gt
 8018d80:	1ac2      	subgt	r2, r0, r3
 8018d82:	f8ad 202c 	strhgt.w	r2, [sp, #44]	; 0x2c
 8018d86:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8018d8a:	2a00      	cmp	r2, #0
 8018d8c:	da07      	bge.n	8018d9e <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x92>
 8018d8e:	f8bd c02e 	ldrh.w	ip, [sp, #46]	; 0x2e
 8018d92:	4462      	add	r2, ip
 8018d94:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
 8018d98:	2200      	movs	r2, #0
 8018d9a:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
 8018d9e:	f9bd a02a 	ldrsh.w	sl, [sp, #42]	; 0x2a
 8018da2:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8018da6:	eba6 060a 	sub.w	r6, r6, sl
 8018daa:	42b2      	cmp	r2, r6
 8018dac:	bfc4      	itt	gt
 8018dae:	eba1 020a 	subgt.w	r2, r1, sl
 8018db2:	f8ad 202e 	strhgt.w	r2, [sp, #46]	; 0x2e
 8018db6:	4a5c      	ldr	r2, [pc, #368]	; (8018f28 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x21c>)
 8018db8:	7812      	ldrb	r2, [r2, #0]
 8018dba:	b9a2      	cbnz	r2, 8018de6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xda>
 8018dbc:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 8018dc0:	4286      	cmp	r6, r0
 8018dc2:	4640      	mov	r0, r8
 8018dc4:	9303      	str	r3, [sp, #12]
 8018dc6:	bf14      	ite	ne
 8018dc8:	2600      	movne	r6, #0
 8018dca:	2601      	moveq	r6, #1
 8018dcc:	f7f8 fb31 	bl	8011432 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018dd0:	9b03      	ldr	r3, [sp, #12]
 8018dd2:	b160      	cbz	r0, 8018dee <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xe2>
 8018dd4:	2300      	movs	r3, #0
 8018dd6:	8023      	strh	r3, [r4, #0]
 8018dd8:	8063      	strh	r3, [r4, #2]
 8018dda:	80a3      	strh	r3, [r4, #4]
 8018ddc:	4620      	mov	r0, r4
 8018dde:	80e3      	strh	r3, [r4, #6]
 8018de0:	b011      	add	sp, #68	; 0x44
 8018de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018de6:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 8018dea:	428e      	cmp	r6, r1
 8018dec:	e7e9      	b.n	8018dc2 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb6>
 8018dee:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	; 0x2c
 8018df2:	a90e      	add	r1, sp, #56	; 0x38
 8018df4:	9205      	str	r2, [sp, #20]
 8018df6:	f9bd 202e 	ldrsh.w	r2, [sp, #46]	; 0x2e
 8018dfa:	900e      	str	r0, [sp, #56]	; 0x38
 8018dfc:	9206      	str	r2, [sp, #24]
 8018dfe:	f8bb 2000 	ldrh.w	r2, [fp]
 8018e02:	a80c      	add	r0, sp, #48	; 0x30
 8018e04:	1a9b      	subs	r3, r3, r2
 8018e06:	b21b      	sxth	r3, r3
 8018e08:	9303      	str	r3, [sp, #12]
 8018e0a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 8018e0e:	f8ad 903c 	strh.w	r9, [sp, #60]	; 0x3c
 8018e12:	ebaa 0a03 	sub.w	sl, sl, r3
 8018e16:	fa0f f38a 	sxth.w	r3, sl
 8018e1a:	9304      	str	r3, [sp, #16]
 8018e1c:	9b03      	ldr	r3, [sp, #12]
 8018e1e:	f8ad 703e 	strh.w	r7, [sp, #62]	; 0x3e
 8018e22:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
 8018e26:	9b04      	ldr	r3, [sp, #16]
 8018e28:	f8df b104 	ldr.w	fp, [pc, #260]	; 8018f30 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8018e2c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8018e30:	9b05      	ldr	r3, [sp, #20]
 8018e32:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8018e36:	9b06      	ldr	r3, [sp, #24]
 8018e38:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 8018e3c:	f7fa fb02 	bl	8013444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018e40:	4640      	mov	r0, r8
 8018e42:	f7fa fad7 	bl	80133f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018e46:	a80e      	add	r0, sp, #56	; 0x38
 8018e48:	f7fa fad4 	bl	80133f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018e4c:	4b37      	ldr	r3, [pc, #220]	; (8018f2c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8018e4e:	4628      	mov	r0, r5
 8018e50:	881b      	ldrh	r3, [r3, #0]
 8018e52:	f9bd a03c 	ldrsh.w	sl, [sp, #60]	; 0x3c
 8018e56:	9307      	str	r3, [sp, #28]
 8018e58:	682b      	ldr	r3, [r5, #0]
 8018e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018e5c:	4798      	blx	r3
 8018e5e:	f8bd 5032 	ldrh.w	r5, [sp, #50]	; 0x32
 8018e62:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
 8018e66:	4681      	mov	r9, r0
 8018e68:	fb1a 3305 	smlabb	r3, sl, r5, r3
 8018e6c:	f8db 0000 	ldr.w	r0, [fp]
 8018e70:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8018e72:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8018e76:	6803      	ldr	r3, [r0, #0]
 8018e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018e7a:	4798      	blx	r3
 8018e7c:	4607      	mov	r7, r0
 8018e7e:	f8db 0000 	ldr.w	r0, [fp]
 8018e82:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	; 0x28
 8018e86:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8018e8a:	6803      	ldr	r3, [r0, #0]
 8018e8c:	9109      	str	r1, [sp, #36]	; 0x24
 8018e8e:	9208      	str	r2, [sp, #32]
 8018e90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018e92:	4798      	blx	r3
 8018e94:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 8018e98:	f010 0f01 	tst.w	r0, #1
 8018e9c:	d012      	beq.n	8018ec4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b8>
 8018e9e:	f8db 0000 	ldr.w	r0, [fp]
 8018ea2:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8018ea6:	6803      	ldr	r3, [r0, #0]
 8018ea8:	9200      	str	r2, [sp, #0]
 8018eaa:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 8018eac:	e898 0006 	ldmia.w	r8, {r1, r2}
 8018eb0:	462b      	mov	r3, r5
 8018eb2:	47b0      	blx	r6
 8018eb4:	9b03      	ldr	r3, [sp, #12]
 8018eb6:	8023      	strh	r3, [r4, #0]
 8018eb8:	9b04      	ldr	r3, [sp, #16]
 8018eba:	8063      	strh	r3, [r4, #2]
 8018ebc:	9b05      	ldr	r3, [sp, #20]
 8018ebe:	80a3      	strh	r3, [r4, #4]
 8018ec0:	9b06      	ldr	r3, [sp, #24]
 8018ec2:	e78b      	b.n	8018ddc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xd0>
 8018ec4:	fb09 f202 	mul.w	r2, r9, r2
 8018ec8:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8018ecc:	440f      	add	r7, r1
 8018ece:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8018ed2:	b166      	cbz	r6, 8018eee <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8018ed4:	9a07      	ldr	r2, [sp, #28]
 8018ed6:	4592      	cmp	sl, r2
 8018ed8:	d109      	bne.n	8018eee <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1e2>
 8018eda:	f8db 0000 	ldr.w	r0, [fp]
 8018ede:	fb09 f303 	mul.w	r3, r9, r3
 8018ee2:	6802      	ldr	r2, [r0, #0]
 8018ee4:	4629      	mov	r1, r5
 8018ee6:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8018ee8:	463a      	mov	r2, r7
 8018eea:	47b0      	blx	r6
 8018eec:	e7e2      	b.n	8018eb4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8018eee:	fb0a f303 	mul.w	r3, sl, r3
 8018ef2:	f8df b03c 	ldr.w	fp, [pc, #60]	; 8018f30 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>
 8018ef6:	eb05 0843 	add.w	r8, r5, r3, lsl #1
 8018efa:	ea4f 064a 	mov.w	r6, sl, lsl #1
 8018efe:	4545      	cmp	r5, r8
 8018f00:	d2d8      	bcs.n	8018eb4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a8>
 8018f02:	f8db 0000 	ldr.w	r0, [fp]
 8018f06:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8018f0a:	6802      	ldr	r2, [r0, #0]
 8018f0c:	4629      	mov	r1, r5
 8018f0e:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8018f12:	005b      	lsls	r3, r3, #1
 8018f14:	463a      	mov	r2, r7
 8018f16:	47d0      	blx	sl
 8018f18:	444f      	add	r7, r9
 8018f1a:	4435      	add	r5, r6
 8018f1c:	e7ef      	b.n	8018efe <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f2>
 8018f1e:	bf00      	nop
 8018f20:	2001fe7c 	.word	0x2001fe7c
 8018f24:	2001fe7e 	.word	0x2001fe7e
 8018f28:	2001fe80 	.word	0x2001fe80
 8018f2c:	2001fe82 	.word	0x2001fe82
 8018f30:	2001fe88 	.word	0x2001fe88

08018f34 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8018f34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018f36:	4606      	mov	r6, r0
 8018f38:	b087      	sub	sp, #28
 8018f3a:	460c      	mov	r4, r1
 8018f3c:	4617      	mov	r7, r2
 8018f3e:	461d      	mov	r5, r3
 8018f40:	b333      	cbz	r3, 8018f90 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8018f42:	4608      	mov	r0, r1
 8018f44:	f7f8 fa75 	bl	8011432 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018f48:	bb10      	cbnz	r0, 8018f90 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8018f4a:	6820      	ldr	r0, [r4, #0]
 8018f4c:	6861      	ldr	r1, [r4, #4]
 8018f4e:	ab04      	add	r3, sp, #16
 8018f50:	4c1b      	ldr	r4, [pc, #108]	; (8018fc0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x8c>)
 8018f52:	c303      	stmia	r3!, {r0, r1}
 8018f54:	a804      	add	r0, sp, #16
 8018f56:	f7fa fa4d 	bl	80133f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018f5a:	6820      	ldr	r0, [r4, #0]
 8018f5c:	6803      	ldr	r3, [r0, #0]
 8018f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018f60:	4798      	blx	r3
 8018f62:	2dff      	cmp	r5, #255	; 0xff
 8018f64:	d016      	beq.n	8018f94 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x60>
 8018f66:	f010 0f08 	tst.w	r0, #8
 8018f6a:	6820      	ldr	r0, [r4, #0]
 8018f6c:	d015      	beq.n	8018f9a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8018f6e:	2400      	movs	r4, #0
 8018f70:	6801      	ldr	r1, [r0, #0]
 8018f72:	e9cd 5402 	strd	r5, r4, [sp, #8]
 8018f76:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8018f7a:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8018f7e:	9401      	str	r4, [sp, #4]
 8018f80:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8018f84:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8018f88:	9400      	str	r4, [sp, #0]
 8018f8a:	6e0c      	ldr	r4, [r1, #96]	; 0x60
 8018f8c:	4639      	mov	r1, r7
 8018f8e:	47a0      	blx	r4
 8018f90:	b007      	add	sp, #28
 8018f92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8018f94:	f010 0f02 	tst.w	r0, #2
 8018f98:	e7e7      	b.n	8018f6a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x36>
 8018f9a:	6803      	ldr	r3, [r0, #0]
 8018f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018f9e:	4798      	blx	r3
 8018fa0:	4b08      	ldr	r3, [pc, #32]	; (8018fc4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8018fa2:	4601      	mov	r1, r0
 8018fa4:	881a      	ldrh	r2, [r3, #0]
 8018fa6:	e9cd 7500 	strd	r7, r5, [sp]
 8018faa:	6833      	ldr	r3, [r6, #0]
 8018fac:	4630      	mov	r0, r6
 8018fae:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 8018fb0:	ab04      	add	r3, sp, #16
 8018fb2:	47a8      	blx	r5
 8018fb4:	6820      	ldr	r0, [r4, #0]
 8018fb6:	6803      	ldr	r3, [r0, #0]
 8018fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018fba:	4798      	blx	r3
 8018fbc:	e7e8      	b.n	8018f90 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x5c>
 8018fbe:	bf00      	nop
 8018fc0:	2001fe88 	.word	0x2001fe88
 8018fc4:	2001fe82 	.word	0x2001fe82

08018fc8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8018fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018fcc:	f89d 7024 	ldrb.w	r7, [sp, #36]	; 0x24
 8018fd0:	4688      	mov	r8, r1
 8018fd2:	4614      	mov	r4, r2
 8018fd4:	461d      	mov	r5, r3
 8018fd6:	9e08      	ldr	r6, [sp, #32]
 8018fd8:	2f00      	cmp	r7, #0
 8018fda:	f000 80a9 	beq.w	8019130 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8018fde:	4618      	mov	r0, r3
 8018fe0:	f7f8 fa27 	bl	8011432 <_ZNK8touchgfx4Rect7isEmptyEv>
 8018fe4:	2800      	cmp	r0, #0
 8018fe6:	f040 80a3 	bne.w	8019130 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8018fea:	f9b5 1000 	ldrsh.w	r1, [r5]
 8018fee:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8018ff2:	f9b5 0004 	ldrsh.w	r0, [r5, #4]
 8018ff6:	f9b5 5006 	ldrsh.w	r5, [r5, #6]
 8018ffa:	fb04 1303 	mla	r3, r4, r3, r1
 8018ffe:	4365      	muls	r5, r4
 8019000:	eb08 0143 	add.w	r1, r8, r3, lsl #1
 8019004:	2fff      	cmp	r7, #255	; 0xff
 8019006:	eba4 0200 	sub.w	r2, r4, r0
 801900a:	eb01 0545 	add.w	r5, r1, r5, lsl #1
 801900e:	ea4f 2816 	mov.w	r8, r6, lsr #8
 8019012:	d04a      	beq.n	80190aa <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xe2>
 8019014:	b2bc      	uxth	r4, r7
 8019016:	f1c7 0cff 	rsb	ip, r7, #255	; 0xff
 801901a:	f3c6 4e07 	ubfx	lr, r6, #16, #8
 801901e:	fa5f f788 	uxtb.w	r7, r8
 8019022:	b2f3      	uxtb	r3, r6
 8019024:	fb0e fe04 	mul.w	lr, lr, r4
 8019028:	4367      	muls	r7, r4
 801902a:	4363      	muls	r3, r4
 801902c:	0040      	lsls	r0, r0, #1
 801902e:	ea4f 0842 	mov.w	r8, r2, lsl #1
 8019032:	fa1f fc8c 	uxth.w	ip, ip
 8019036:	42a9      	cmp	r1, r5
 8019038:	d27a      	bcs.n	8019130 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801903a:	eb01 0900 	add.w	r9, r1, r0
 801903e:	4549      	cmp	r1, r9
 8019040:	d231      	bcs.n	80190a6 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xde>
 8019042:	880a      	ldrh	r2, [r1, #0]
 8019044:	1214      	asrs	r4, r2, #8
 8019046:	10d6      	asrs	r6, r2, #3
 8019048:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 801904c:	00d2      	lsls	r2, r2, #3
 801904e:	b2d2      	uxtb	r2, r2
 8019050:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 8019054:	fb14 f40c 	smulbb	r4, r4, ip
 8019058:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801905c:	fb12 f20c 	smulbb	r2, r2, ip
 8019060:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019064:	ea46 1696 	orr.w	r6, r6, r6, lsr #6
 8019068:	4474      	add	r4, lr
 801906a:	fb16 f60c 	smulbb	r6, r6, ip
 801906e:	b2a4      	uxth	r4, r4
 8019070:	441a      	add	r2, r3
 8019072:	b292      	uxth	r2, r2
 8019074:	f104 0a01 	add.w	sl, r4, #1
 8019078:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801907c:	f102 0a01 	add.w	sl, r2, #1
 8019080:	443e      	add	r6, r7
 8019082:	eb0a 2212 	add.w	r2, sl, r2, lsr #8
 8019086:	b2b6      	uxth	r6, r6
 8019088:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 801908c:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 8019090:	4322      	orrs	r2, r4
 8019092:	1c74      	adds	r4, r6, #1
 8019094:	eb04 2616 	add.w	r6, r4, r6, lsr #8
 8019098:	0976      	lsrs	r6, r6, #5
 801909a:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 801909e:	4332      	orrs	r2, r6
 80190a0:	f821 2b02 	strh.w	r2, [r1], #2
 80190a4:	e7cb      	b.n	801903e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x76>
 80190a6:	4441      	add	r1, r8
 80190a8:	e7c5      	b.n	8019036 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6e>
 80190aa:	4f22      	ldr	r7, [pc, #136]	; (8019134 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x16c>)
 80190ac:	0973      	lsrs	r3, r6, #5
 80190ae:	ea08 0707 	and.w	r7, r8, r7
 80190b2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80190b6:	433b      	orrs	r3, r7
 80190b8:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 80190bc:	4333      	orrs	r3, r6
 80190be:	07e7      	lsls	r7, r4, #31
 80190c0:	b29b      	uxth	r3, r3
 80190c2:	d50b      	bpl.n	80190dc <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x114>
 80190c4:	0040      	lsls	r0, r0, #1
 80190c6:	0052      	lsls	r2, r2, #1
 80190c8:	42a9      	cmp	r1, r5
 80190ca:	d231      	bcs.n	8019130 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 80190cc:	180c      	adds	r4, r1, r0
 80190ce:	42a1      	cmp	r1, r4
 80190d0:	d202      	bcs.n	80190d8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x110>
 80190d2:	f821 3b02 	strh.w	r3, [r1], #2
 80190d6:	e7fa      	b.n	80190ce <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x106>
 80190d8:	4411      	add	r1, r2
 80190da:	e7f5      	b.n	80190c8 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x100>
 80190dc:	078e      	lsls	r6, r1, #30
 80190de:	d008      	beq.n	80190f2 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x12a>
 80190e0:	460a      	mov	r2, r1
 80190e2:	0066      	lsls	r6, r4, #1
 80190e4:	42aa      	cmp	r2, r5
 80190e6:	d202      	bcs.n	80190ee <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x126>
 80190e8:	8013      	strh	r3, [r2, #0]
 80190ea:	4432      	add	r2, r6
 80190ec:	e7fa      	b.n	80190e4 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x11c>
 80190ee:	3102      	adds	r1, #2
 80190f0:	3801      	subs	r0, #1
 80190f2:	07c2      	lsls	r2, r0, #31
 80190f4:	d50b      	bpl.n	801910e <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x146>
 80190f6:	f100 4200 	add.w	r2, r0, #2147483648	; 0x80000000
 80190fa:	3a01      	subs	r2, #1
 80190fc:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8019100:	0066      	lsls	r6, r4, #1
 8019102:	42aa      	cmp	r2, r5
 8019104:	d202      	bcs.n	801910c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x144>
 8019106:	8013      	strh	r3, [r2, #0]
 8019108:	4432      	add	r2, r6
 801910a:	e7fa      	b.n	8019102 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x13a>
 801910c:	3801      	subs	r0, #1
 801910e:	b178      	cbz	r0, 8019130 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 8019110:	1040      	asrs	r0, r0, #1
 8019112:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
 8019116:	0080      	lsls	r0, r0, #2
 8019118:	0064      	lsls	r4, r4, #1
 801911a:	42a9      	cmp	r1, r5
 801911c:	d208      	bcs.n	8019130 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x168>
 801911e:	460a      	mov	r2, r1
 8019120:	180e      	adds	r6, r1, r0
 8019122:	42b2      	cmp	r2, r6
 8019124:	d202      	bcs.n	801912c <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x164>
 8019126:	f842 3b04 	str.w	r3, [r2], #4
 801912a:	e7fa      	b.n	8019122 <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x15a>
 801912c:	4421      	add	r1, r4
 801912e:	e7f4      	b.n	801911a <_ZN8touchgfx8LCD16bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x152>
 8019130:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019134:	00fff800 	.word	0x00fff800

08019138 <_ZN8touchgfx8LCD16bppC1Ev>:
 8019138:	2200      	movs	r2, #0
 801913a:	4910      	ldr	r1, [pc, #64]	; (801917c <_ZN8touchgfx8LCD16bppC1Ev+0x44>)
 801913c:	6042      	str	r2, [r0, #4]
 801913e:	6001      	str	r1, [r0, #0]
 8019140:	e9c0 2202 	strd	r2, r2, [r0, #8]
 8019144:	e9c0 2204 	strd	r2, r2, [r0, #16]
 8019148:	e9c0 2206 	strd	r2, r2, [r0, #24]
 801914c:	e9c0 2208 	strd	r2, r2, [r0, #32]
 8019150:	e9c0 220a 	strd	r2, r2, [r0, #40]	; 0x28
 8019154:	e9c0 220c 	strd	r2, r2, [r0, #48]	; 0x30
 8019158:	e9c0 220e 	strd	r2, r2, [r0, #56]	; 0x38
 801915c:	e9c0 2210 	strd	r2, r2, [r0, #64]	; 0x40
 8019160:	e9c0 2212 	strd	r2, r2, [r0, #72]	; 0x48
 8019164:	e9c0 2214 	strd	r2, r2, [r0, #80]	; 0x50
 8019168:	e9c0 2216 	strd	r2, r2, [r0, #88]	; 0x58
 801916c:	e9c0 2218 	strd	r2, r2, [r0, #96]	; 0x60
 8019170:	e9c0 221a 	strd	r2, r2, [r0, #104]	; 0x68
 8019174:	e9c0 221c 	strd	r2, r2, [r0, #112]	; 0x70
 8019178:	4770      	bx	lr
 801917a:	bf00      	nop
 801917c:	080246c0 	.word	0x080246c0

08019180 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8019180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019184:	460d      	mov	r5, r1
 8019186:	4604      	mov	r4, r0
 8019188:	4699      	mov	r9, r3
 801918a:	b08d      	sub	sp, #52	; 0x34
 801918c:	6808      	ldr	r0, [r1, #0]
 801918e:	6849      	ldr	r1, [r1, #4]
 8019190:	ab08      	add	r3, sp, #32
 8019192:	c303      	stmia	r3!, {r0, r1}
 8019194:	6810      	ldr	r0, [r2, #0]
 8019196:	6851      	ldr	r1, [r2, #4]
 8019198:	ab0a      	add	r3, sp, #40	; 0x28
 801919a:	c303      	stmia	r3!, {r0, r1}
 801919c:	a808      	add	r0, sp, #32
 801919e:	f7fa f929 	bl	80133f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80191a2:	4629      	mov	r1, r5
 80191a4:	a80a      	add	r0, sp, #40	; 0x28
 80191a6:	f7fa f94d 	bl	8013444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80191aa:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 80191ae:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 80191b2:	f8bd 1024 	ldrh.w	r1, [sp, #36]	; 0x24
 80191b6:	4d63      	ldr	r5, [pc, #396]	; (8019344 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 80191b8:	fb11 2103 	smlabb	r1, r1, r3, r2
 80191bc:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80191c0:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 80191c4:	6828      	ldr	r0, [r5, #0]
 80191c6:	440a      	add	r2, r1
 80191c8:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 80191cc:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 80191d0:	f9bd 802c 	ldrsh.w	r8, [sp, #44]	; 0x2c
 80191d4:	4413      	add	r3, r2
 80191d6:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80191da:	6803      	ldr	r3, [r0, #0]
 80191dc:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 80191e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80191e2:	4798      	blx	r3
 80191e4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80191e8:	d119      	bne.n	801921e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 80191ea:	f010 0f20 	tst.w	r0, #32
 80191ee:	6828      	ldr	r0, [r5, #0]
 80191f0:	d018      	beq.n	8019224 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 80191f2:	2500      	movs	r5, #0
 80191f4:	6801      	ldr	r1, [r0, #0]
 80191f6:	e9cd 9503 	strd	r9, r5, [sp, #12]
 80191fa:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 80191fe:	b2b6      	uxth	r6, r6
 8019200:	9502      	str	r5, [sp, #8]
 8019202:	fa1f f588 	uxth.w	r5, r8
 8019206:	9601      	str	r6, [sp, #4]
 8019208:	9500      	str	r5, [sp, #0]
 801920a:	6d0d      	ldr	r5, [r1, #80]	; 0x50
 801920c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8019210:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8019214:	4621      	mov	r1, r4
 8019216:	47a8      	blx	r5
 8019218:	b00d      	add	sp, #52	; 0x34
 801921a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801921e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8019222:	e7e4      	b.n	80191ee <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6e>
 8019224:	6803      	ldr	r3, [r0, #0]
 8019226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019228:	4798      	blx	r3
 801922a:	4947      	ldr	r1, [pc, #284]	; (8019348 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c8>)
 801922c:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	; 0x2a
 8019230:	468a      	mov	sl, r1
 8019232:	880b      	ldrh	r3, [r1, #0]
 8019234:	f9bd 5028 	ldrsh.w	r5, [sp, #40]	; 0x28
 8019238:	fb03 5202 	mla	r2, r3, r2, r5
 801923c:	4373      	muls	r3, r6
 801923e:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8019242:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019246:	9307      	str	r3, [sp, #28]
 8019248:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801924c:	9306      	str	r3, [sp, #24]
 801924e:	9b07      	ldr	r3, [sp, #28]
 8019250:	4298      	cmp	r0, r3
 8019252:	d270      	bcs.n	8019336 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1b6>
 8019254:	4621      	mov	r1, r4
 8019256:	9b06      	ldr	r3, [sp, #24]
 8019258:	eb00 0b03 	add.w	fp, r0, r3
 801925c:	4558      	cmp	r0, fp
 801925e:	d25d      	bcs.n	801931c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x19c>
 8019260:	f851 4b04 	ldr.w	r4, [r1], #4
 8019264:	0e23      	lsrs	r3, r4, #24
 8019266:	d014      	beq.n	8019292 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 8019268:	2bff      	cmp	r3, #255	; 0xff
 801926a:	ea4f 2c14 	mov.w	ip, r4, lsr #8
 801926e:	d112      	bne.n	8019296 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8019270:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8019274:	d10f      	bne.n	8019296 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x116>
 8019276:	0963      	lsrs	r3, r4, #5
 8019278:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 801927c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8019280:	f02c 0c07 	bic.w	ip, ip, #7
 8019284:	ea43 0c0c 	orr.w	ip, r3, ip
 8019288:	f3c4 04c4 	ubfx	r4, r4, #3, #5
 801928c:	ea4c 0404 	orr.w	r4, ip, r4
 8019290:	8004      	strh	r4, [r0, #0]
 8019292:	3002      	adds	r0, #2
 8019294:	e7e2      	b.n	801925c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xdc>
 8019296:	fb09 f303 	mul.w	r3, r9, r3
 801929a:	1c5a      	adds	r2, r3, #1
 801929c:	eb02 2223 	add.w	r2, r2, r3, asr #8
 80192a0:	1212      	asrs	r2, r2, #8
 80192a2:	b293      	uxth	r3, r2
 80192a4:	43d2      	mvns	r2, r2
 80192a6:	8807      	ldrh	r7, [r0, #0]
 80192a8:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 80192ac:	fb1e fe03 	smulbb	lr, lr, r3
 80192b0:	123e      	asrs	r6, r7, #8
 80192b2:	fa5f fc8c 	uxtb.w	ip, ip
 80192b6:	b2e4      	uxtb	r4, r4
 80192b8:	fb1c fc03 	smulbb	ip, ip, r3
 80192bc:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 80192c0:	fb14 f403 	smulbb	r4, r4, r3
 80192c4:	b2d2      	uxtb	r2, r2
 80192c6:	10fd      	asrs	r5, r7, #3
 80192c8:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80192cc:	00ff      	lsls	r7, r7, #3
 80192ce:	fb06 e602 	mla	r6, r6, r2, lr
 80192d2:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 80192d6:	b2ff      	uxtb	r7, r7
 80192d8:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 80192dc:	ea47 1757 	orr.w	r7, r7, r7, lsr #5
 80192e0:	fb05 c502 	mla	r5, r5, r2, ip
 80192e4:	fb07 4702 	mla	r7, r7, r2, r4
 80192e8:	b2b6      	uxth	r6, r6
 80192ea:	f106 0e01 	add.w	lr, r6, #1
 80192ee:	b2ad      	uxth	r5, r5
 80192f0:	b2bf      	uxth	r7, r7
 80192f2:	eb0e 2616 	add.w	r6, lr, r6, lsr #8
 80192f6:	f406 4e78 	and.w	lr, r6, #63488	; 0xf800
 80192fa:	f105 0c01 	add.w	ip, r5, #1
 80192fe:	1c7e      	adds	r6, r7, #1
 8019300:	eb06 2617 	add.w	r6, r6, r7, lsr #8
 8019304:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8019308:	f3c6 26c4 	ubfx	r6, r6, #11, #5
 801930c:	096d      	lsrs	r5, r5, #5
 801930e:	ea46 060e 	orr.w	r6, r6, lr
 8019312:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019316:	432e      	orrs	r6, r5
 8019318:	8006      	strh	r6, [r0, #0]
 801931a:	e7ba      	b.n	8019292 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x112>
 801931c:	f8ba 3000 	ldrh.w	r3, [sl]
 8019320:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 8019324:	eba3 0308 	sub.w	r3, r3, r8
 8019328:	eba4 0408 	sub.w	r4, r4, r8
 801932c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019330:	eb01 0484 	add.w	r4, r1, r4, lsl #2
 8019334:	e78b      	b.n	801924e <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xce>
 8019336:	4b03      	ldr	r3, [pc, #12]	; (8019344 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x1c4>)
 8019338:	6818      	ldr	r0, [r3, #0]
 801933a:	6803      	ldr	r3, [r0, #0]
 801933c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801933e:	4798      	blx	r3
 8019340:	e76a      	b.n	8019218 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8019342:	bf00      	nop
 8019344:	2001fe88 	.word	0x2001fe88
 8019348:	2001fe82 	.word	0x2001fe82

0801934c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>:
 801934c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019350:	b085      	sub	sp, #20
 8019352:	466d      	mov	r5, sp
 8019354:	4616      	mov	r6, r2
 8019356:	460c      	mov	r4, r1
 8019358:	6810      	ldr	r0, [r2, #0]
 801935a:	6851      	ldr	r1, [r2, #4]
 801935c:	c503      	stmia	r5!, {r0, r1}
 801935e:	6818      	ldr	r0, [r3, #0]
 8019360:	6859      	ldr	r1, [r3, #4]
 8019362:	c503      	stmia	r5!, {r0, r1}
 8019364:	4668      	mov	r0, sp
 8019366:	f7fa f845 	bl	80133f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801936a:	4631      	mov	r1, r6
 801936c:	a802      	add	r0, sp, #8
 801936e:	f7fa f869 	bl	8013444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019372:	f9bd 2008 	ldrsh.w	r2, [sp, #8]
 8019376:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801937a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 801937e:	4d28      	ldr	r5, [pc, #160]	; (8019420 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd4>)
 8019380:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019384:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8019388:	f8bd 1000 	ldrh.w	r1, [sp]
 801938c:	6828      	ldr	r0, [r5, #0]
 801938e:	440a      	add	r2, r1
 8019390:	f8ad 2008 	strh.w	r2, [sp, #8]
 8019394:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8019398:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 801939c:	4413      	add	r3, r2
 801939e:	f8ad 300a 	strh.w	r3, [sp, #10]
 80193a2:	6803      	ldr	r3, [r0, #0]
 80193a4:	f9bd 800e 	ldrsh.w	r8, [sp, #14]
 80193a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80193aa:	4798      	blx	r3
 80193ac:	4e1d      	ldr	r6, [pc, #116]	; (8019424 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xd8>)
 80193ae:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80193b2:	8833      	ldrh	r3, [r6, #0]
 80193b4:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80193b8:	f8df e06c 	ldr.w	lr, [pc, #108]	; 8019428 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xdc>
 80193bc:	fb03 1202 	mla	r2, r3, r2, r1
 80193c0:	fb08 f303 	mul.w	r3, r8, r3
 80193c4:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 80193c8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80193cc:	ea4f 0c47 	mov.w	ip, r7, lsl #1
 80193d0:	4298      	cmp	r0, r3
 80193d2:	d21d      	bcs.n	8019410 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xc4>
 80193d4:	eb00 080c 	add.w	r8, r0, ip
 80193d8:	4540      	cmp	r0, r8
 80193da:	d20f      	bcs.n	80193fc <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0xb0>
 80193dc:	f854 1b04 	ldr.w	r1, [r4], #4
 80193e0:	ea4f 1951 	mov.w	r9, r1, lsr #5
 80193e4:	ea0e 2211 	and.w	r2, lr, r1, lsr #8
 80193e8:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80193ec:	ea42 0209 	orr.w	r2, r2, r9
 80193f0:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80193f4:	430a      	orrs	r2, r1
 80193f6:	f820 2b02 	strh.w	r2, [r0], #2
 80193fa:	e7ed      	b.n	80193d8 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x8c>
 80193fc:	8832      	ldrh	r2, [r6, #0]
 80193fe:	1bd2      	subs	r2, r2, r7
 8019400:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8019404:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 8019408:	1bd2      	subs	r2, r2, r7
 801940a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
 801940e:	e7df      	b.n	80193d0 <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_+0x84>
 8019410:	6828      	ldr	r0, [r5, #0]
 8019412:	6803      	ldr	r3, [r0, #0]
 8019414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019416:	4798      	blx	r3
 8019418:	b005      	add	sp, #20
 801941a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801941e:	bf00      	nop
 8019420:	2001fe88 	.word	0x2001fe88
 8019424:	2001fe82 	.word	0x2001fe82
 8019428:	fffff800 	.word	0xfffff800

0801942c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>:
 801942c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019430:	460e      	mov	r6, r1
 8019432:	4604      	mov	r4, r0
 8019434:	461d      	mov	r5, r3
 8019436:	b08e      	sub	sp, #56	; 0x38
 8019438:	6808      	ldr	r0, [r1, #0]
 801943a:	6849      	ldr	r1, [r1, #4]
 801943c:	ab0a      	add	r3, sp, #40	; 0x28
 801943e:	c303      	stmia	r3!, {r0, r1}
 8019440:	6810      	ldr	r0, [r2, #0]
 8019442:	6851      	ldr	r1, [r2, #4]
 8019444:	ab0c      	add	r3, sp, #48	; 0x30
 8019446:	c303      	stmia	r3!, {r0, r1}
 8019448:	a80a      	add	r0, sp, #40	; 0x28
 801944a:	f7f9 ffd3 	bl	80133f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801944e:	4631      	mov	r1, r6
 8019450:	a80c      	add	r0, sp, #48	; 0x30
 8019452:	f7f9 fff7 	bl	8013444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019456:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 801945a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 801945e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8019462:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8019614 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>
 8019466:	fb11 2103 	smlabb	r1, r1, r3, r2
 801946a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801946e:	440c      	add	r4, r1
 8019470:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8019474:	f8d8 0000 	ldr.w	r0, [r8]
 8019478:	440a      	add	r2, r1
 801947a:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 801947e:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8019482:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8019486:	4413      	add	r3, r2
 8019488:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801948c:	6803      	ldr	r3, [r0, #0]
 801948e:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	; 0x36
 8019492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019494:	4798      	blx	r3
 8019496:	2dff      	cmp	r5, #255	; 0xff
 8019498:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8019618 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1ec>
 801949c:	d124      	bne.n	80194e8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xbc>
 801949e:	f010 0f01 	tst.w	r0, #1
 80194a2:	f8d8 0000 	ldr.w	r0, [r8]
 80194a6:	d022      	beq.n	80194ee <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xc2>
 80194a8:	2100      	movs	r1, #0
 80194aa:	f04f 0e01 	mov.w	lr, #1
 80194ae:	f8d0 c000 	ldr.w	ip, [r0]
 80194b2:	e9cd 1107 	strd	r1, r1, [sp, #28]
 80194b6:	f8cd e018 	str.w	lr, [sp, #24]
 80194ba:	f8b9 e000 	ldrh.w	lr, [r9]
 80194be:	b2b6      	uxth	r6, r6
 80194c0:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80194c4:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80194c8:	b2bf      	uxth	r7, r7
 80194ca:	9102      	str	r1, [sp, #8]
 80194cc:	9503      	str	r5, [sp, #12]
 80194ce:	9601      	str	r6, [sp, #4]
 80194d0:	9700      	str	r7, [sp, #0]
 80194d2:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 80194d6:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 80194da:	f8dc 5040 	ldr.w	r5, [ip, #64]	; 0x40
 80194de:	4621      	mov	r1, r4
 80194e0:	47a8      	blx	r5
 80194e2:	b00e      	add	sp, #56	; 0x38
 80194e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80194e8:	f010 0f04 	tst.w	r0, #4
 80194ec:	e7d9      	b.n	80194a2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x76>
 80194ee:	6803      	ldr	r3, [r0, #0]
 80194f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80194f2:	4798      	blx	r3
 80194f4:	f8b9 3000 	ldrh.w	r3, [r9]
 80194f8:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	; 0x32
 80194fc:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8019500:	435e      	muls	r6, r3
 8019502:	fb03 1202 	mla	r2, r3, r2, r1
 8019506:	f9bd c02c 	ldrsh.w	ip, [sp, #44]	; 0x2c
 801950a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801950e:	ebac 0c07 	sub.w	ip, ip, r7
 8019512:	ea4f 0e47 	mov.w	lr, r7, lsl #1
 8019516:	2dff      	cmp	r5, #255	; 0xff
 8019518:	eba3 0707 	sub.w	r7, r3, r7
 801951c:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8019520:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8019524:	ea4f 0747 	mov.w	r7, r7, lsl #1
 8019528:	d049      	beq.n	80195be <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x192>
 801952a:	43eb      	mvns	r3, r5
 801952c:	fa1f f985 	uxth.w	r9, r5
 8019530:	b2db      	uxtb	r3, r3
 8019532:	42b0      	cmp	r0, r6
 8019534:	d266      	bcs.n	8019604 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 8019536:	eb00 0a0e 	add.w	sl, r0, lr
 801953a:	4550      	cmp	r0, sl
 801953c:	4621      	mov	r1, r4
 801953e:	f104 0403 	add.w	r4, r4, #3
 8019542:	d25b      	bcs.n	80195fc <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d0>
 8019544:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 8019548:	8802      	ldrh	r2, [r0, #0]
 801954a:	fb11 f109 	smulbb	r1, r1, r9
 801954e:	ea4f 2822 	mov.w	r8, r2, asr #8
 8019552:	f008 08f8 	and.w	r8, r8, #248	; 0xf8
 8019556:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 801955a:	fb08 1803 	mla	r8, r8, r3, r1
 801955e:	f814 1c02 	ldrb.w	r1, [r4, #-2]
 8019562:	10d5      	asrs	r5, r2, #3
 8019564:	fb11 f109 	smulbb	r1, r1, r9
 8019568:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801956c:	ea45 1595 	orr.w	r5, r5, r5, lsr #6
 8019570:	fb05 1503 	mla	r5, r5, r3, r1
 8019574:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 8019578:	00d2      	lsls	r2, r2, #3
 801957a:	fb11 f109 	smulbb	r1, r1, r9
 801957e:	b2d2      	uxtb	r2, r2
 8019580:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8019584:	fb02 1203 	mla	r2, r2, r3, r1
 8019588:	fa1f f888 	uxth.w	r8, r8
 801958c:	b292      	uxth	r2, r2
 801958e:	f108 0101 	add.w	r1, r8, #1
 8019592:	b2ad      	uxth	r5, r5
 8019594:	eb01 2818 	add.w	r8, r1, r8, lsr #8
 8019598:	1c51      	adds	r1, r2, #1
 801959a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801959e:	1c69      	adds	r1, r5, #1
 80195a0:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 80195a4:	f408 4878 	and.w	r8, r8, #63488	; 0xf800
 80195a8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 80195ac:	096d      	lsrs	r5, r5, #5
 80195ae:	ea42 0208 	orr.w	r2, r2, r8
 80195b2:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 80195b6:	432a      	orrs	r2, r5
 80195b8:	f820 2b02 	strh.w	r2, [r0], #2
 80195bc:	e7bd      	b.n	801953a <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x10e>
 80195be:	4a14      	ldr	r2, [pc, #80]	; (8019610 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e4>)
 80195c0:	42b0      	cmp	r0, r6
 80195c2:	d21f      	bcs.n	8019604 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1d8>
 80195c4:	eb00 050e 	add.w	r5, r0, lr
 80195c8:	42a8      	cmp	r0, r5
 80195ca:	4621      	mov	r1, r4
 80195cc:	f104 0403 	add.w	r4, r4, #3
 80195d0:	d210      	bcs.n	80195f4 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1c8>
 80195d2:	f814 3c02 	ldrb.w	r3, [r4, #-2]
 80195d6:	f814 1c01 	ldrb.w	r1, [r4, #-1]
 80195da:	00db      	lsls	r3, r3, #3
 80195dc:	ea02 2101 	and.w	r1, r2, r1, lsl #8
 80195e0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80195e4:	430b      	orrs	r3, r1
 80195e6:	f814 1c03 	ldrb.w	r1, [r4, #-3]
 80195ea:	ea43 03d1 	orr.w	r3, r3, r1, lsr #3
 80195ee:	f820 3b02 	strh.w	r3, [r0], #2
 80195f2:	e7e9      	b.n	80195c8 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x19c>
 80195f4:	4438      	add	r0, r7
 80195f6:	eb01 040c 	add.w	r4, r1, ip
 80195fa:	e7e1      	b.n	80195c0 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x194>
 80195fc:	4438      	add	r0, r7
 80195fe:	eb01 040c 	add.w	r4, r1, ip
 8019602:	e796      	b.n	8019532 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x106>
 8019604:	4b03      	ldr	r3, [pc, #12]	; (8019614 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0x1e8>)
 8019606:	6818      	ldr	r0, [r3, #0]
 8019608:	6803      	ldr	r3, [r0, #0]
 801960a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801960c:	4798      	blx	r3
 801960e:	e768      	b.n	80194e2 <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h+0xb6>
 8019610:	fffff800 	.word	0xfffff800
 8019614:	2001fe88 	.word	0x2001fe88
 8019618:	2001fe82 	.word	0x2001fe82

0801961c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801961c:	b4f0      	push	{r4, r5, r6, r7}
 801961e:	4616      	mov	r6, r2
 8019620:	2e01      	cmp	r6, #1
 8019622:	461c      	mov	r4, r3
 8019624:	460d      	mov	r5, r1
 8019626:	9a04      	ldr	r2, [sp, #16]
 8019628:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801962c:	f89d 7018 	ldrb.w	r7, [sp, #24]
 8019630:	d012      	beq.n	8019658 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3c>
 8019632:	d303      	bcc.n	801963c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x20>
 8019634:	2e02      	cmp	r6, #2
 8019636:	d00a      	beq.n	801964e <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x32>
 8019638:	bcf0      	pop	{r4, r5, r6, r7}
 801963a:	4770      	bx	lr
 801963c:	6805      	ldr	r5, [r0, #0]
 801963e:	e9cd 3704 	strd	r3, r7, [sp, #16]
 8019642:	68ed      	ldr	r5, [r5, #12]
 8019644:	4613      	mov	r3, r2
 8019646:	46ac      	mov	ip, r5
 8019648:	4622      	mov	r2, r4
 801964a:	bcf0      	pop	{r4, r5, r6, r7}
 801964c:	4760      	bx	ip
 801964e:	4621      	mov	r1, r4
 8019650:	4628      	mov	r0, r5
 8019652:	bcf0      	pop	{r4, r5, r6, r7}
 8019654:	f7ff bd94 	b.w	8019180 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8019658:	4621      	mov	r1, r4
 801965a:	4628      	mov	r0, r5
 801965c:	bcf0      	pop	{r4, r5, r6, r7}
 801965e:	f7ff bee5 	b.w	801942c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
	...

08019664 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8019664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019668:	4616      	mov	r6, r2
 801966a:	4681      	mov	r9, r0
 801966c:	b093      	sub	sp, #76	; 0x4c
 801966e:	6810      	ldr	r0, [r2, #0]
 8019670:	4688      	mov	r8, r1
 8019672:	6851      	ldr	r1, [r2, #4]
 8019674:	ac0e      	add	r4, sp, #56	; 0x38
 8019676:	c403      	stmia	r4!, {r0, r1}
 8019678:	6818      	ldr	r0, [r3, #0]
 801967a:	6859      	ldr	r1, [r3, #4]
 801967c:	ac10      	add	r4, sp, #64	; 0x40
 801967e:	c403      	stmia	r4!, {r0, r1}
 8019680:	a80e      	add	r0, sp, #56	; 0x38
 8019682:	f89d a070 	ldrb.w	sl, [sp, #112]	; 0x70
 8019686:	f7f9 feb5 	bl	80133f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801968a:	4631      	mov	r1, r6
 801968c:	a810      	add	r0, sp, #64	; 0x40
 801968e:	f7f9 fed9 	bl	8013444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019692:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	; 0x40
 8019696:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
 801969a:	f8bd 103c 	ldrh.w	r1, [sp, #60]	; 0x3c
 801969e:	4e62      	ldr	r6, [pc, #392]	; (8019828 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 80196a0:	fb11 2103 	smlabb	r1, r1, r3, r2
 80196a4:	4489      	add	r9, r1
 80196a6:	f8bd 1038 	ldrh.w	r1, [sp, #56]	; 0x38
 80196aa:	6830      	ldr	r0, [r6, #0]
 80196ac:	440a      	add	r2, r1
 80196ae:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 80196b2:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 80196b6:	f9bd 4044 	ldrsh.w	r4, [sp, #68]	; 0x44
 80196ba:	4413      	add	r3, r2
 80196bc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 80196c0:	6803      	ldr	r3, [r0, #0]
 80196c2:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	; 0x46
 80196c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80196c8:	4798      	blx	r3
 80196ca:	f010 0f80 	tst.w	r0, #128	; 0x80
 80196ce:	4f57      	ldr	r7, [pc, #348]	; (801982c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c8>)
 80196d0:	6830      	ldr	r0, [r6, #0]
 80196d2:	d01d      	beq.n	8019710 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 80196d4:	2200      	movs	r2, #0
 80196d6:	6801      	ldr	r1, [r0, #0]
 80196d8:	e9cd 2208 	strd	r2, r2, [sp, #32]
 80196dc:	220b      	movs	r2, #11
 80196de:	9207      	str	r2, [sp, #28]
 80196e0:	883a      	ldrh	r2, [r7, #0]
 80196e2:	b2a4      	uxth	r4, r4
 80196e4:	9206      	str	r2, [sp, #24]
 80196e6:	2201      	movs	r2, #1
 80196e8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80196ec:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
 80196f0:	b2ad      	uxth	r5, r5
 80196f2:	9203      	str	r2, [sp, #12]
 80196f4:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 80196f8:	9502      	str	r5, [sp, #8]
 80196fa:	9200      	str	r2, [sp, #0]
 80196fc:	9401      	str	r4, [sp, #4]
 80196fe:	6bcc      	ldr	r4, [r1, #60]	; 0x3c
 8019700:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 8019704:	4642      	mov	r2, r8
 8019706:	4649      	mov	r1, r9
 8019708:	47a0      	blx	r4
 801970a:	b013      	add	sp, #76	; 0x4c
 801970c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019710:	6803      	ldr	r3, [r0, #0]
 8019712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019714:	4798      	blx	r3
 8019716:	f04f 0e04 	mov.w	lr, #4
 801971a:	883b      	ldrh	r3, [r7, #0]
 801971c:	f9bd 2042 	ldrsh.w	r2, [sp, #66]	; 0x42
 8019720:	f9bd 1040 	ldrsh.w	r1, [sp, #64]	; 0x40
 8019724:	435d      	muls	r5, r3
 8019726:	fb03 1202 	mla	r2, r3, r2, r1
 801972a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 801972e:	eb00 0245 	add.w	r2, r0, r5, lsl #1
 8019732:	920c      	str	r2, [sp, #48]	; 0x30
 8019734:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	; 0x3c
 8019738:	1b12      	subs	r2, r2, r4
 801973a:	920d      	str	r2, [sp, #52]	; 0x34
 801973c:	0062      	lsls	r2, r4, #1
 801973e:	1b1c      	subs	r4, r3, r4
 8019740:	0063      	lsls	r3, r4, #1
 8019742:	920a      	str	r2, [sp, #40]	; 0x28
 8019744:	930b      	str	r3, [sp, #44]	; 0x2c
 8019746:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8019748:	4298      	cmp	r0, r3
 801974a:	d266      	bcs.n	801981a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1b6>
 801974c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801974e:	eb00 0b03 	add.w	fp, r0, r3
 8019752:	4558      	cmp	r0, fp
 8019754:	d25c      	bcs.n	8019810 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8019756:	f819 3b01 	ldrb.w	r3, [r9], #1
 801975a:	fb1e e303 	smlabb	r3, lr, r3, lr
 801975e:	f858 2003 	ldr.w	r2, [r8, r3]
 8019762:	0e11      	lsrs	r1, r2, #24
 8019764:	d012      	beq.n	801978c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8019766:	29ff      	cmp	r1, #255	; 0xff
 8019768:	ea4f 2712 	mov.w	r7, r2, lsr #8
 801976c:	d110      	bne.n	8019790 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801976e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8019772:	d10d      	bne.n	8019790 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8019774:	0953      	lsrs	r3, r2, #5
 8019776:	f427 67ff 	bic.w	r7, r7, #2040	; 0x7f8
 801977a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801977e:	f027 0707 	bic.w	r7, r7, #7
 8019782:	431f      	orrs	r7, r3
 8019784:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8019788:	433a      	orrs	r2, r7
 801978a:	8002      	strh	r2, [r0, #0]
 801978c:	3002      	adds	r0, #2
 801978e:	e7e0      	b.n	8019752 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xee>
 8019790:	fb0a f101 	mul.w	r1, sl, r1
 8019794:	1c4b      	adds	r3, r1, #1
 8019796:	eb03 2321 	add.w	r3, r3, r1, asr #8
 801979a:	121b      	asrs	r3, r3, #8
 801979c:	b299      	uxth	r1, r3
 801979e:	43db      	mvns	r3, r3
 80197a0:	8806      	ldrh	r6, [r0, #0]
 80197a2:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 80197a6:	b2d2      	uxtb	r2, r2
 80197a8:	fb1c fc01 	smulbb	ip, ip, r1
 80197ac:	fb12 f201 	smulbb	r2, r2, r1
 80197b0:	1235      	asrs	r5, r6, #8
 80197b2:	10f4      	asrs	r4, r6, #3
 80197b4:	00f6      	lsls	r6, r6, #3
 80197b6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 80197ba:	b2f6      	uxtb	r6, r6
 80197bc:	b2ff      	uxtb	r7, r7
 80197be:	b2db      	uxtb	r3, r3
 80197c0:	fb17 f701 	smulbb	r7, r7, r1
 80197c4:	ea45 1555 	orr.w	r5, r5, r5, lsr #5
 80197c8:	ea46 1656 	orr.w	r6, r6, r6, lsr #5
 80197cc:	fb05 c503 	mla	r5, r5, r3, ip
 80197d0:	fb06 2203 	mla	r2, r6, r3, r2
 80197d4:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 80197d8:	ea44 1494 	orr.w	r4, r4, r4, lsr #6
 80197dc:	fb04 7403 	mla	r4, r4, r3, r7
 80197e0:	b2ad      	uxth	r5, r5
 80197e2:	b292      	uxth	r2, r2
 80197e4:	f105 0c01 	add.w	ip, r5, #1
 80197e8:	1c57      	adds	r7, r2, #1
 80197ea:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 80197ee:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 80197f2:	b2a4      	uxth	r4, r4
 80197f4:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 80197f8:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 80197fc:	433d      	orrs	r5, r7
 80197fe:	1c67      	adds	r7, r4, #1
 8019800:	eb07 2414 	add.w	r4, r7, r4, lsr #8
 8019804:	0964      	lsrs	r4, r4, #5
 8019806:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801980a:	4325      	orrs	r5, r4
 801980c:	8005      	strh	r5, [r0, #0]
 801980e:	e7bd      	b.n	801978c <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 8019810:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019812:	4418      	add	r0, r3
 8019814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8019816:	4499      	add	r9, r3
 8019818:	e795      	b.n	8019746 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xe2>
 801981a:	4b03      	ldr	r3, [pc, #12]	; (8019828 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1c4>)
 801981c:	6818      	ldr	r0, [r3, #0]
 801981e:	6803      	ldr	r3, [r0, #0]
 8019820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019822:	4798      	blx	r3
 8019824:	e771      	b.n	801970a <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xa6>
 8019826:	bf00      	nop
 8019828:	2001fe88 	.word	0x2001fe88
 801982c:	2001fe82 	.word	0x2001fe82

08019830 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>:
 8019830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019834:	b087      	sub	sp, #28
 8019836:	f89d 6040 	ldrb.w	r6, [sp, #64]	; 0x40
 801983a:	4680      	mov	r8, r0
 801983c:	460d      	mov	r5, r1
 801983e:	4614      	mov	r4, r2
 8019840:	2e00      	cmp	r6, #0
 8019842:	f000 80b9 	beq.w	80199b8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x188>
 8019846:	6810      	ldr	r0, [r2, #0]
 8019848:	6851      	ldr	r1, [r2, #4]
 801984a:	af02      	add	r7, sp, #8
 801984c:	c703      	stmia	r7!, {r0, r1}
 801984e:	6818      	ldr	r0, [r3, #0]
 8019850:	6859      	ldr	r1, [r3, #4]
 8019852:	af04      	add	r7, sp, #16
 8019854:	c703      	stmia	r7!, {r0, r1}
 8019856:	a802      	add	r0, sp, #8
 8019858:	f7f9 fdcc 	bl	80133f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801985c:	4621      	mov	r1, r4
 801985e:	a804      	add	r0, sp, #16
 8019860:	f7f9 fdf0 	bl	8013444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019864:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8019868:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801986c:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8019870:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 8019874:	fb14 2103 	smlabb	r1, r4, r3, r2
 8019878:	eb08 0401 	add.w	r4, r8, r1
 801987c:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8019880:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8019884:	440a      	add	r2, r1
 8019886:	f8ad 2010 	strh.w	r2, [sp, #16]
 801988a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801988e:	ea4f 0a48 	mov.w	sl, r8, lsl #1
 8019892:	4413      	add	r3, r2
 8019894:	f8ad 3012 	strh.w	r3, [sp, #18]
 8019898:	4b49      	ldr	r3, [pc, #292]	; (80199c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 801989a:	6818      	ldr	r0, [r3, #0]
 801989c:	6803      	ldr	r3, [r0, #0]
 801989e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80198a0:	4798      	blx	r3
 80198a2:	4b48      	ldr	r3, [pc, #288]	; (80199c4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x194>)
 80198a4:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 80198a8:	881a      	ldrh	r2, [r3, #0]
 80198aa:	f9bd c010 	ldrsh.w	ip, [sp, #16]
 80198ae:	2eff      	cmp	r6, #255	; 0xff
 80198b0:	fb02 c101 	mla	r1, r2, r1, ip
 80198b4:	fb02 f207 	mul.w	r2, r2, r7
 80198b8:	eb00 0041 	add.w	r0, r0, r1, lsl #1
 80198bc:	f105 0104 	add.w	r1, r5, #4
 80198c0:	461d      	mov	r5, r3
 80198c2:	d05a      	beq.n	801997a <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14a>
 80198c4:	f1c6 0eff 	rsb	lr, r6, #255	; 0xff
 80198c8:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80198cc:	b2b6      	uxth	r6, r6
 80198ce:	fa1f fe8e 	uxth.w	lr, lr
 80198d2:	9301      	str	r3, [sp, #4]
 80198d4:	4282      	cmp	r2, r0
 80198d6:	d96a      	bls.n	80199ae <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 80198d8:	eb00 0b0a 	add.w	fp, r0, sl
 80198dc:	4583      	cmp	fp, r0
 80198de:	d940      	bls.n	8019962 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x132>
 80198e0:	8805      	ldrh	r5, [r0, #0]
 80198e2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80198e6:	122f      	asrs	r7, r5, #8
 80198e8:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 80198ec:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80198f0:	fb17 f70e 	smulbb	r7, r7, lr
 80198f4:	ea4f 09e5 	mov.w	r9, r5, asr #3
 80198f8:	00ed      	lsls	r5, r5, #3
 80198fa:	b2ed      	uxtb	r5, r5
 80198fc:	ea4f 2c23 	mov.w	ip, r3, asr #8
 8019900:	fb15 f50e 	smulbb	r5, r5, lr
 8019904:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019908:	fb0c 7c06 	mla	ip, ip, r6, r7
 801990c:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
 8019910:	10df      	asrs	r7, r3, #3
 8019912:	00db      	lsls	r3, r3, #3
 8019914:	fb19 f90e 	smulbb	r9, r9, lr
 8019918:	b2db      	uxtb	r3, r3
 801991a:	fb03 5306 	mla	r3, r3, r6, r5
 801991e:	fa1f fc8c 	uxth.w	ip, ip
 8019922:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 8019926:	fb07 9706 	mla	r7, r7, r6, r9
 801992a:	f10c 0901 	add.w	r9, ip, #1
 801992e:	b29b      	uxth	r3, r3
 8019930:	eb09 2c1c 	add.w	ip, r9, ip, lsr #8
 8019934:	f40c 4978 	and.w	r9, ip, #63488	; 0xf800
 8019938:	f103 0c01 	add.w	ip, r3, #1
 801993c:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8019940:	b2bf      	uxth	r7, r7
 8019942:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8019946:	ea4c 0c09 	orr.w	ip, ip, r9
 801994a:	f107 0901 	add.w	r9, r7, #1
 801994e:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8019952:	097f      	lsrs	r7, r7, #5
 8019954:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 8019958:	ea4c 0c07 	orr.w	ip, ip, r7
 801995c:	f820 cb02 	strh.w	ip, [r0], #2
 8019960:	e7bc      	b.n	80198dc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xac>
 8019962:	9b01      	ldr	r3, [sp, #4]
 8019964:	881b      	ldrh	r3, [r3, #0]
 8019966:	eba3 0308 	sub.w	r3, r3, r8
 801996a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 801996e:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8019972:	eba3 0308 	sub.w	r3, r3, r8
 8019976:	441c      	add	r4, r3
 8019978:	e7ac      	b.n	80198d4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0xa4>
 801997a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 801997e:	4282      	cmp	r2, r0
 8019980:	d915      	bls.n	80199ae <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x17e>
 8019982:	eb00 060a 	add.w	r6, r0, sl
 8019986:	4286      	cmp	r6, r0
 8019988:	d906      	bls.n	8019998 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x168>
 801998a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801998e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8019992:	f820 3b02 	strh.w	r3, [r0], #2
 8019996:	e7f6      	b.n	8019986 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x156>
 8019998:	882b      	ldrh	r3, [r5, #0]
 801999a:	eba3 0308 	sub.w	r3, r3, r8
 801999e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80199a2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80199a6:	eba3 0308 	sub.w	r3, r3, r8
 80199aa:	441c      	add	r4, r3
 80199ac:	e7e7      	b.n	801997e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x14e>
 80199ae:	4b04      	ldr	r3, [pc, #16]	; (80199c0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h+0x190>)
 80199b0:	6818      	ldr	r0, [r3, #0]
 80199b2:	6803      	ldr	r3, [r0, #0]
 80199b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80199b6:	4798      	blx	r3
 80199b8:	b007      	add	sp, #28
 80199ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199be:	bf00      	nop
 80199c0:	2001fe88 	.word	0x2001fe88
 80199c4:	2001fe82 	.word	0x2001fe82

080199c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 80199c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80199cc:	b091      	sub	sp, #68	; 0x44
 80199ce:	f89d 5068 	ldrb.w	r5, [sp, #104]	; 0x68
 80199d2:	4680      	mov	r8, r0
 80199d4:	460f      	mov	r7, r1
 80199d6:	4614      	mov	r4, r2
 80199d8:	2d00      	cmp	r5, #0
 80199da:	d051      	beq.n	8019a80 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 80199dc:	6810      	ldr	r0, [r2, #0]
 80199de:	6851      	ldr	r1, [r2, #4]
 80199e0:	ae0c      	add	r6, sp, #48	; 0x30
 80199e2:	c603      	stmia	r6!, {r0, r1}
 80199e4:	6818      	ldr	r0, [r3, #0]
 80199e6:	6859      	ldr	r1, [r3, #4]
 80199e8:	ae0e      	add	r6, sp, #56	; 0x38
 80199ea:	c603      	stmia	r6!, {r0, r1}
 80199ec:	a80c      	add	r0, sp, #48	; 0x30
 80199ee:	f7f9 fd01 	bl	80133f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80199f2:	4621      	mov	r1, r4
 80199f4:	a80e      	add	r0, sp, #56	; 0x38
 80199f6:	f7f9 fd25 	bl	8013444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80199fa:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	; 0x38
 80199fe:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8019a02:	f8bd 1034 	ldrh.w	r1, [sp, #52]	; 0x34
 8019a06:	f8df 91dc 	ldr.w	r9, [pc, #476]	; 8019be4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>
 8019a0a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019a0e:	eb08 0401 	add.w	r4, r8, r1
 8019a12:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
 8019a16:	f8d9 0000 	ldr.w	r0, [r9]
 8019a1a:	440a      	add	r2, r1
 8019a1c:	f8ad 2038 	strh.w	r2, [sp, #56]	; 0x38
 8019a20:	f8bd 2032 	ldrh.w	r2, [sp, #50]	; 0x32
 8019a24:	f9bd 603c 	ldrsh.w	r6, [sp, #60]	; 0x3c
 8019a28:	4413      	add	r3, r2
 8019a2a:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 8019a2e:	6803      	ldr	r3, [r0, #0]
 8019a30:	f9bd a03e 	ldrsh.w	sl, [sp, #62]	; 0x3e
 8019a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a36:	4798      	blx	r3
 8019a38:	f010 0f80 	tst.w	r0, #128	; 0x80
 8019a3c:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8019be8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x220>
 8019a40:	f8d9 0000 	ldr.w	r0, [r9]
 8019a44:	d01f      	beq.n	8019a86 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xbe>
 8019a46:	2200      	movs	r2, #0
 8019a48:	6801      	ldr	r1, [r0, #0]
 8019a4a:	e9cd 2208 	strd	r2, r2, [sp, #32]
 8019a4e:	220b      	movs	r2, #11
 8019a50:	9207      	str	r2, [sp, #28]
 8019a52:	f8b8 2000 	ldrh.w	r2, [r8]
 8019a56:	b2b6      	uxth	r6, r6
 8019a58:	9206      	str	r2, [sp, #24]
 8019a5a:	2201      	movs	r2, #1
 8019a5c:	e9cd 5204 	strd	r5, r2, [sp, #16]
 8019a60:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8019a64:	9601      	str	r6, [sp, #4]
 8019a66:	9203      	str	r2, [sp, #12]
 8019a68:	fa1f f28a 	uxth.w	r2, sl
 8019a6c:	9202      	str	r2, [sp, #8]
 8019a6e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 8019a72:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8019a76:	9200      	str	r2, [sp, #0]
 8019a78:	6bcd      	ldr	r5, [r1, #60]	; 0x3c
 8019a7a:	463a      	mov	r2, r7
 8019a7c:	4621      	mov	r1, r4
 8019a7e:	47a8      	blx	r5
 8019a80:	b011      	add	sp, #68	; 0x44
 8019a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019a86:	6803      	ldr	r3, [r0, #0]
 8019a88:	ea4f 0946 	mov.w	r9, r6, lsl #1
 8019a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019a8e:	4798      	blx	r3
 8019a90:	f8b8 2000 	ldrh.w	r2, [r8]
 8019a94:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
 8019a98:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	; 0x38
 8019a9c:	2dff      	cmp	r5, #255	; 0xff
 8019a9e:	fb02 1303 	mla	r3, r2, r3, r1
 8019aa2:	fb0a fa02 	mul.w	sl, sl, r2
 8019aa6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019aaa:	d062      	beq.n	8019b72 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1aa>
 8019aac:	ea6f 0c05 	mvn.w	ip, r5
 8019ab0:	eb00 034a 	add.w	r3, r0, sl, lsl #1
 8019ab4:	930a      	str	r3, [sp, #40]	; 0x28
 8019ab6:	b2ad      	uxth	r5, r5
 8019ab8:	fa5f fc8c 	uxtb.w	ip, ip
 8019abc:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8019ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8019ac2:	4298      	cmp	r0, r3
 8019ac4:	f080 8085 	bcs.w	8019bd2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8019ac8:	eb00 0b09 	add.w	fp, r0, r9
 8019acc:	4558      	cmp	r0, fp
 8019ace:	d246      	bcs.n	8019b5e <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x196>
 8019ad0:	2303      	movs	r3, #3
 8019ad2:	2204      	movs	r2, #4
 8019ad4:	f814 eb01 	ldrb.w	lr, [r4], #1
 8019ad8:	fb13 2e0e 	smlabb	lr, r3, lr, r2
 8019adc:	eb07 0a0e 	add.w	sl, r7, lr
 8019ae0:	f89a 8002 	ldrb.w	r8, [sl, #2]
 8019ae4:	8803      	ldrh	r3, [r0, #0]
 8019ae6:	fb18 f805 	smulbb	r8, r8, r5
 8019aea:	1219      	asrs	r1, r3, #8
 8019aec:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8019af0:	ea41 1151 	orr.w	r1, r1, r1, lsr #5
 8019af4:	fb01 810c 	mla	r1, r1, ip, r8
 8019af8:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8019afc:	f89a 8001 	ldrb.w	r8, [sl, #1]
 8019b00:	fb1e fe05 	smulbb	lr, lr, r5
 8019b04:	fb18 f805 	smulbb	r8, r8, r5
 8019b08:	10da      	asrs	r2, r3, #3
 8019b0a:	00db      	lsls	r3, r3, #3
 8019b0c:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8019b10:	b2db      	uxtb	r3, r3
 8019b12:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8019b16:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 8019b1a:	fb02 820c 	mla	r2, r2, ip, r8
 8019b1e:	fb03 e30c 	mla	r3, r3, ip, lr
 8019b22:	b289      	uxth	r1, r1
 8019b24:	b292      	uxth	r2, r2
 8019b26:	b29b      	uxth	r3, r3
 8019b28:	f101 0801 	add.w	r8, r1, #1
 8019b2c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8019b30:	f103 0e01 	add.w	lr, r3, #1
 8019b34:	f102 0801 	add.w	r8, r2, #1
 8019b38:	eb0e 2e13 	add.w	lr, lr, r3, lsr #8
 8019b3c:	eb08 2812 	add.w	r8, r8, r2, lsr #8
 8019b40:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 8019b44:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 8019b48:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8019b4c:	ea4e 0101 	orr.w	r1, lr, r1
 8019b50:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 8019b54:	ea41 0108 	orr.w	r1, r1, r8
 8019b58:	f820 1b02 	strh.w	r1, [r0], #2
 8019b5c:	e7b6      	b.n	8019acc <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x104>
 8019b5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019b60:	881b      	ldrh	r3, [r3, #0]
 8019b62:	1b9b      	subs	r3, r3, r6
 8019b64:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019b68:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8019b6c:	1b9b      	subs	r3, r3, r6
 8019b6e:	441c      	add	r4, r3
 8019b70:	e7a6      	b.n	8019ac0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xf8>
 8019b72:	2203      	movs	r2, #3
 8019b74:	2504      	movs	r5, #4
 8019b76:	491a      	ldr	r1, [pc, #104]	; (8019be0 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x218>)
 8019b78:	eb00 0a4a 	add.w	sl, r0, sl, lsl #1
 8019b7c:	4550      	cmp	r0, sl
 8019b7e:	d228      	bcs.n	8019bd2 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x20a>
 8019b80:	eb00 0c09 	add.w	ip, r0, r9
 8019b84:	4560      	cmp	r0, ip
 8019b86:	4623      	mov	r3, r4
 8019b88:	d219      	bcs.n	8019bbe <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1f6>
 8019b8a:	f893 e000 	ldrb.w	lr, [r3]
 8019b8e:	3401      	adds	r4, #1
 8019b90:	fb12 5e0e 	smlabb	lr, r2, lr, r5
 8019b94:	eb07 0b0e 	add.w	fp, r7, lr
 8019b98:	f89b 3002 	ldrb.w	r3, [fp, #2]
 8019b9c:	f89b b001 	ldrb.w	fp, [fp, #1]
 8019ba0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8019ba4:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8019ba8:	ea01 2303 	and.w	r3, r1, r3, lsl #8
 8019bac:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 8019bb0:	ea43 030b 	orr.w	r3, r3, fp
 8019bb4:	ea43 03de 	orr.w	r3, r3, lr, lsr #3
 8019bb8:	f820 3b02 	strh.w	r3, [r0], #2
 8019bbc:	e7e2      	b.n	8019b84 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1bc>
 8019bbe:	f8b8 3000 	ldrh.w	r3, [r8]
 8019bc2:	1b9b      	subs	r3, r3, r6
 8019bc4:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019bc8:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	; 0x34
 8019bcc:	1b9b      	subs	r3, r3, r6
 8019bce:	441c      	add	r4, r3
 8019bd0:	e7d4      	b.n	8019b7c <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8019bd2:	4b04      	ldr	r3, [pc, #16]	; (8019be4 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x21c>)
 8019bd4:	6818      	ldr	r0, [r3, #0]
 8019bd6:	6803      	ldr	r3, [r0, #0]
 8019bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019bda:	4798      	blx	r3
 8019bdc:	e750      	b.n	8019a80 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xb8>
 8019bde:	bf00      	nop
 8019be0:	fffff800 	.word	0xfffff800
 8019be4:	2001fe88 	.word	0x2001fe88
 8019be8:	2001fe82 	.word	0x2001fe82

08019bec <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 8019bec:	b430      	push	{r4, r5}
 8019bee:	780d      	ldrb	r5, [r1, #0]
 8019bf0:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8019bf4:	2d01      	cmp	r5, #1
 8019bf6:	d00a      	beq.n	8019c0e <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x22>
 8019bf8:	d305      	bcc.n	8019c06 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1a>
 8019bfa:	2d02      	cmp	r5, #2
 8019bfc:	d10b      	bne.n	8019c16 <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x2a>
 8019bfe:	9402      	str	r4, [sp, #8]
 8019c00:	bc30      	pop	{r4, r5}
 8019c02:	f7ff be15 	b.w	8019830 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB565EPKhS2_RKNS_4RectES5_h>
 8019c06:	9402      	str	r4, [sp, #8]
 8019c08:	bc30      	pop	{r4, r5}
 8019c0a:	f7ff bd2b 	b.w	8019664 <_ZN8touchgfx8LCD16bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 8019c0e:	9402      	str	r4, [sp, #8]
 8019c10:	bc30      	pop	{r4, r5}
 8019c12:	f7ff bed9 	b.w	80199c8 <_ZN8touchgfx8LCD16bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8019c16:	bc30      	pop	{r4, r5}
 8019c18:	4770      	bx	lr
	...

08019c1c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8019c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c20:	4617      	mov	r7, r2
 8019c22:	4604      	mov	r4, r0
 8019c24:	460e      	mov	r6, r1
 8019c26:	b087      	sub	sp, #28
 8019c28:	6810      	ldr	r0, [r2, #0]
 8019c2a:	6851      	ldr	r1, [r2, #4]
 8019c2c:	ad02      	add	r5, sp, #8
 8019c2e:	c503      	stmia	r5!, {r0, r1}
 8019c30:	6818      	ldr	r0, [r3, #0]
 8019c32:	6859      	ldr	r1, [r3, #4]
 8019c34:	ad04      	add	r5, sp, #16
 8019c36:	c503      	stmia	r5!, {r0, r1}
 8019c38:	a802      	add	r0, sp, #8
 8019c3a:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
 8019c3e:	f7f9 fbd9 	bl	80133f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019c42:	4639      	mov	r1, r7
 8019c44:	a804      	add	r0, sp, #16
 8019c46:	f7f9 fbfd 	bl	8013444 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019c4a:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8019c4e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8019c52:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8019c56:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 8019c5a:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019c5e:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8019c62:	440e      	add	r6, r1
 8019c64:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8019c68:	f9bd 5016 	ldrsh.w	r5, [sp, #22]
 8019c6c:	440a      	add	r2, r1
 8019c6e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8019c72:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8019c76:	f8df 91ec 	ldr.w	r9, [pc, #492]	; 8019e64 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x248>
 8019c7a:	4413      	add	r3, r2
 8019c7c:	f8ad 3012 	strh.w	r3, [sp, #18]
 8019c80:	4b77      	ldr	r3, [pc, #476]	; (8019e60 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8019c82:	6818      	ldr	r0, [r3, #0]
 8019c84:	6803      	ldr	r3, [r0, #0]
 8019c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019c88:	4798      	blx	r3
 8019c8a:	f8b9 b000 	ldrh.w	fp, [r9]
 8019c8e:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8019c92:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8019c96:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 8019c9a:	fb0b 2303 	mla	r3, fp, r3, r2
 8019c9e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019ca2:	ea4f 0348 	mov.w	r3, r8, lsl #1
 8019ca6:	fb05 f50b 	mul.w	r5, r5, fp
 8019caa:	9300      	str	r3, [sp, #0]
 8019cac:	d069      	beq.n	8019d82 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x166>
 8019cae:	eb00 0b45 	add.w	fp, r0, r5, lsl #1
 8019cb2:	4558      	cmp	r0, fp
 8019cb4:	f080 80cc 	bcs.w	8019e50 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8019cb8:	4631      	mov	r1, r6
 8019cba:	9b00      	ldr	r3, [sp, #0]
 8019cbc:	18c3      	adds	r3, r0, r3
 8019cbe:	9301      	str	r3, [sp, #4]
 8019cc0:	9b01      	ldr	r3, [sp, #4]
 8019cc2:	4298      	cmp	r0, r3
 8019cc4:	d24f      	bcs.n	8019d66 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14a>
 8019cc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019cca:	2a00      	cmp	r2, #0
 8019ccc:	d048      	beq.n	8019d60 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8019cce:	fb0a f202 	mul.w	r2, sl, r2
 8019cd2:	1c53      	adds	r3, r2, #1
 8019cd4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8019cd8:	121b      	asrs	r3, r3, #8
 8019cda:	d041      	beq.n	8019d60 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8019cdc:	b29e      	uxth	r6, r3
 8019cde:	43db      	mvns	r3, r3
 8019ce0:	8802      	ldrh	r2, [r0, #0]
 8019ce2:	b2db      	uxtb	r3, r3
 8019ce4:	1215      	asrs	r5, r2, #8
 8019ce6:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 8019cea:	f8b4 c000 	ldrh.w	ip, [r4]
 8019cee:	fb15 f503 	smulbb	r5, r5, r3
 8019cf2:	ea4f 0ee2 	mov.w	lr, r2, asr #3
 8019cf6:	00d2      	lsls	r2, r2, #3
 8019cf8:	b2d2      	uxtb	r2, r2
 8019cfa:	ea4f 272c 	mov.w	r7, ip, asr #8
 8019cfe:	fb12 f203 	smulbb	r2, r2, r3
 8019d02:	f007 07f8 	and.w	r7, r7, #248	; 0xf8
 8019d06:	fb07 5706 	mla	r7, r7, r6, r5
 8019d0a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 8019d0e:	ea4f 05ec 	mov.w	r5, ip, asr #3
 8019d12:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8019d16:	fb1e fe03 	smulbb	lr, lr, r3
 8019d1a:	fa5f fc8c 	uxtb.w	ip, ip
 8019d1e:	fb0c 2c06 	mla	ip, ip, r6, r2
 8019d22:	b2bf      	uxth	r7, r7
 8019d24:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 8019d28:	fb05 e506 	mla	r5, r5, r6, lr
 8019d2c:	f107 0e01 	add.w	lr, r7, #1
 8019d30:	fa1f fc8c 	uxth.w	ip, ip
 8019d34:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8019d38:	f407 4e78 	and.w	lr, r7, #63488	; 0xf800
 8019d3c:	f10c 0701 	add.w	r7, ip, #1
 8019d40:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 8019d44:	b2ad      	uxth	r5, r5
 8019d46:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 8019d4a:	ea47 070e 	orr.w	r7, r7, lr
 8019d4e:	f105 0e01 	add.w	lr, r5, #1
 8019d52:	eb0e 2515 	add.w	r5, lr, r5, lsr #8
 8019d56:	096d      	lsrs	r5, r5, #5
 8019d58:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 8019d5c:	432f      	orrs	r7, r5
 8019d5e:	8007      	strh	r7, [r0, #0]
 8019d60:	3002      	adds	r0, #2
 8019d62:	3402      	adds	r4, #2
 8019d64:	e7ac      	b.n	8019cc0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa4>
 8019d66:	f8b9 3000 	ldrh.w	r3, [r9]
 8019d6a:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8019d6e:	eba3 0308 	sub.w	r3, r3, r8
 8019d72:	eba6 0608 	sub.w	r6, r6, r8
 8019d76:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8019d7a:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019d7e:	440e      	add	r6, r1
 8019d80:	e797      	b.n	8019cb2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x96>
 8019d82:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8019d86:	42a8      	cmp	r0, r5
 8019d88:	d262      	bcs.n	8019e50 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x234>
 8019d8a:	4631      	mov	r1, r6
 8019d8c:	9b00      	ldr	r3, [sp, #0]
 8019d8e:	eb00 0b03 	add.w	fp, r0, r3
 8019d92:	4558      	cmp	r0, fp
 8019d94:	d24e      	bcs.n	8019e34 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x218>
 8019d96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019d9a:	b12b      	cbz	r3, 8019da8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8019d9c:	2bff      	cmp	r3, #255	; 0xff
 8019d9e:	f8b4 e000 	ldrh.w	lr, [r4]
 8019da2:	d104      	bne.n	8019dae <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x192>
 8019da4:	f8a0 e000 	strh.w	lr, [r0]
 8019da8:	3002      	adds	r0, #2
 8019daa:	3402      	adds	r4, #2
 8019dac:	e7f1      	b.n	8019d92 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x176>
 8019dae:	b29f      	uxth	r7, r3
 8019db0:	43db      	mvns	r3, r3
 8019db2:	8802      	ldrh	r2, [r0, #0]
 8019db4:	b2db      	uxtb	r3, r3
 8019db6:	1216      	asrs	r6, r2, #8
 8019db8:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 8019dbc:	fb16 f603 	smulbb	r6, r6, r3
 8019dc0:	ea4f 0ae2 	mov.w	sl, r2, asr #3
 8019dc4:	00d2      	lsls	r2, r2, #3
 8019dc6:	b2d2      	uxtb	r2, r2
 8019dc8:	f00a 0afc 	and.w	sl, sl, #252	; 0xfc
 8019dcc:	fb1a fa03 	smulbb	sl, sl, r3
 8019dd0:	ea4f 2c2e 	mov.w	ip, lr, asr #8
 8019dd4:	fb12 f303 	smulbb	r3, r2, r3
 8019dd8:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8019ddc:	fb0c 6c07 	mla	ip, ip, r7, r6
 8019de0:	ea4f 06ee 	mov.w	r6, lr, asr #3
 8019de4:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8019de8:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 8019dec:	fa5f fe8e 	uxtb.w	lr, lr
 8019df0:	fb06 a607 	mla	r6, r6, r7, sl
 8019df4:	fb0e 3307 	mla	r3, lr, r7, r3
 8019df8:	fa1f fc8c 	uxth.w	ip, ip
 8019dfc:	f10c 0201 	add.w	r2, ip, #1
 8019e00:	b2b6      	uxth	r6, r6
 8019e02:	b29b      	uxth	r3, r3
 8019e04:	eb02 2c1c 	add.w	ip, r2, ip, lsr #8
 8019e08:	f40c 4278 	and.w	r2, ip, #63488	; 0xf800
 8019e0c:	f106 0a01 	add.w	sl, r6, #1
 8019e10:	f103 0c01 	add.w	ip, r3, #1
 8019e14:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8019e18:	eb0a 2616 	add.w	r6, sl, r6, lsr #8
 8019e1c:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 8019e20:	0976      	lsrs	r6, r6, #5
 8019e22:	ea4c 0c02 	orr.w	ip, ip, r2
 8019e26:	f406 66fc 	and.w	r6, r6, #2016	; 0x7e0
 8019e2a:	ea4c 0c06 	orr.w	ip, ip, r6
 8019e2e:	f8a0 c000 	strh.w	ip, [r0]
 8019e32:	e7b9      	b.n	8019da8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x18c>
 8019e34:	f8b9 3000 	ldrh.w	r3, [r9]
 8019e38:	f9bd 600c 	ldrsh.w	r6, [sp, #12]
 8019e3c:	eba3 0308 	sub.w	r3, r3, r8
 8019e40:	eba6 0608 	sub.w	r6, r6, r8
 8019e44:	eb04 0446 	add.w	r4, r4, r6, lsl #1
 8019e48:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8019e4c:	440e      	add	r6, r1
 8019e4e:	e79a      	b.n	8019d86 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x16a>
 8019e50:	4b03      	ldr	r3, [pc, #12]	; (8019e60 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x244>)
 8019e52:	6818      	ldr	r0, [r3, #0]
 8019e54:	6803      	ldr	r3, [r0, #0]
 8019e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019e58:	4798      	blx	r3
 8019e5a:	b007      	add	sp, #28
 8019e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e60:	2001fe88 	.word	0x2001fe88
 8019e64:	2001fe82 	.word	0x2001fe82

08019e68 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8019e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e6c:	b089      	sub	sp, #36	; 0x24
 8019e6e:	f89d 604c 	ldrb.w	r6, [sp, #76]	; 0x4c
 8019e72:	4682      	mov	sl, r0
 8019e74:	460f      	mov	r7, r1
 8019e76:	4691      	mov	r9, r2
 8019e78:	4698      	mov	r8, r3
 8019e7a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8019e7c:	2e00      	cmp	r6, #0
 8019e7e:	d036      	beq.n	8019eee <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8019e80:	4608      	mov	r0, r1
 8019e82:	f7fc f86d 	bl	8015f60 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8019e86:	4605      	mov	r5, r0
 8019e88:	4638      	mov	r0, r7
 8019e8a:	f7fc f89d 	bl	8015fc8 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8019e8e:	f8ad 000e 	strh.w	r0, [sp, #14]
 8019e92:	4638      	mov	r0, r7
 8019e94:	f8ad 9008 	strh.w	r9, [sp, #8]
 8019e98:	f8ad 500c 	strh.w	r5, [sp, #12]
 8019e9c:	f8ad 800a 	strh.w	r8, [sp, #10]
 8019ea0:	f7fc f94a 	bl	8016138 <_ZNK8touchgfx6Bitmap7getDataEv>
 8019ea4:	4605      	mov	r5, r0
 8019ea6:	4638      	mov	r0, r7
 8019ea8:	f7fc f976 	bl	8016198 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8019eac:	4681      	mov	r9, r0
 8019eae:	4638      	mov	r0, r7
 8019eb0:	f7fc f9c6 	bl	8016240 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019eb4:	280b      	cmp	r0, #11
 8019eb6:	d81a      	bhi.n	8019eee <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8019eb8:	e8df f000 	tbb	[pc, r0]
 8019ebc:	1906aebd 	.word	0x1906aebd
 8019ec0:	19191919 	.word	0x19191919
 8019ec4:	b5191919 	.word	0xb5191919
 8019ec8:	4bb0      	ldr	r3, [pc, #704]	; (801a18c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x324>)
 8019eca:	6818      	ldr	r0, [r3, #0]
 8019ecc:	6803      	ldr	r3, [r0, #0]
 8019ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019ed0:	4798      	blx	r3
 8019ed2:	2eff      	cmp	r6, #255	; 0xff
 8019ed4:	d121      	bne.n	8019f1a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 8019ed6:	0683      	lsls	r3, r0, #26
 8019ed8:	d41f      	bmi.n	8019f1a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb2>
 8019eda:	4638      	mov	r0, r7
 8019edc:	f7fc f8f4 	bl	80160c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8019ee0:	b940      	cbnz	r0, 8019ef4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x8c>
 8019ee2:	4623      	mov	r3, r4
 8019ee4:	aa02      	add	r2, sp, #8
 8019ee6:	4629      	mov	r1, r5
 8019ee8:	4650      	mov	r0, sl
 8019eea:	f7ff fa2f 	bl	801934c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8019eee:	b009      	add	sp, #36	; 0x24
 8019ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ef4:	f10d 0818 	add.w	r8, sp, #24
 8019ef8:	4639      	mov	r1, r7
 8019efa:	4640      	mov	r0, r8
 8019efc:	af04      	add	r7, sp, #16
 8019efe:	f7fc f897 	bl	8016030 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8019f02:	e898 0003 	ldmia.w	r8, {r0, r1}
 8019f06:	e887 0003 	stmia.w	r7, {r0, r1}
 8019f0a:	4638      	mov	r0, r7
 8019f0c:	4621      	mov	r1, r4
 8019f0e:	f7f7 fa4d 	bl	80113ac <_ZN8touchgfx4RectaNERKS0_>
 8019f12:	4638      	mov	r0, r7
 8019f14:	f7f7 fa8d 	bl	8011432 <_ZNK8touchgfx4Rect7isEmptyEv>
 8019f18:	b130      	cbz	r0, 8019f28 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc0>
 8019f1a:	4633      	mov	r3, r6
 8019f1c:	4622      	mov	r2, r4
 8019f1e:	a902      	add	r1, sp, #8
 8019f20:	4628      	mov	r0, r5
 8019f22:	f7ff f92d 	bl	8019180 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8019f26:	e7e2      	b.n	8019eee <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8019f28:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8019f2c:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8019f30:	4293      	cmp	r3, r2
 8019f32:	dd12      	ble.n	8019f5a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xf2>
 8019f34:	f9b4 0000 	ldrsh.w	r0, [r4]
 8019f38:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8019f3c:	1a9b      	subs	r3, r3, r2
 8019f3e:	f8ad 0018 	strh.w	r0, [sp, #24]
 8019f42:	f8ad 201a 	strh.w	r2, [sp, #26]
 8019f46:	f8ad 101c 	strh.w	r1, [sp, #28]
 8019f4a:	f8ad 301e 	strh.w	r3, [sp, #30]
 8019f4e:	4642      	mov	r2, r8
 8019f50:	4633      	mov	r3, r6
 8019f52:	a902      	add	r1, sp, #8
 8019f54:	4628      	mov	r0, r5
 8019f56:	f7ff f913 	bl	8019180 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8019f5a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8019f5e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8019f62:	4293      	cmp	r3, r2
 8019f64:	dd12      	ble.n	8019f8c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x124>
 8019f66:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8019f6a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8019f6e:	1a9b      	subs	r3, r3, r2
 8019f70:	f8ad 2018 	strh.w	r2, [sp, #24]
 8019f74:	f8ad 001a 	strh.w	r0, [sp, #26]
 8019f78:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019f7c:	f8ad 101e 	strh.w	r1, [sp, #30]
 8019f80:	23ff      	movs	r3, #255	; 0xff
 8019f82:	4642      	mov	r2, r8
 8019f84:	a902      	add	r1, sp, #8
 8019f86:	4628      	mov	r0, r5
 8019f88:	f7ff f8fa 	bl	8019180 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8019f8c:	463b      	mov	r3, r7
 8019f8e:	aa02      	add	r2, sp, #8
 8019f90:	4629      	mov	r1, r5
 8019f92:	4650      	mov	r0, sl
 8019f94:	f7ff f9da 	bl	801934c <_ZNK8touchgfx8LCD16bpp21blitCopyARGB8888SolidEPKmRKNS_4RectES5_>
 8019f98:	88a2      	ldrh	r2, [r4, #4]
 8019f9a:	8823      	ldrh	r3, [r4, #0]
 8019f9c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8019fa0:	4413      	add	r3, r2
 8019fa2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019fa6:	b29b      	uxth	r3, r3
 8019fa8:	440a      	add	r2, r1
 8019faa:	b292      	uxth	r2, r2
 8019fac:	b211      	sxth	r1, r2
 8019fae:	b218      	sxth	r0, r3
 8019fb0:	4288      	cmp	r0, r1
 8019fb2:	dd12      	ble.n	8019fda <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x172>
 8019fb4:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8019fb8:	1a9b      	subs	r3, r3, r2
 8019fba:	f9bd 6012 	ldrsh.w	r6, [sp, #18]
 8019fbe:	f8ad 1018 	strh.w	r1, [sp, #24]
 8019fc2:	f8ad 301c 	strh.w	r3, [sp, #28]
 8019fc6:	f8ad 001e 	strh.w	r0, [sp, #30]
 8019fca:	23ff      	movs	r3, #255	; 0xff
 8019fcc:	4642      	mov	r2, r8
 8019fce:	a902      	add	r1, sp, #8
 8019fd0:	4628      	mov	r0, r5
 8019fd2:	f8ad 601a 	strh.w	r6, [sp, #26]
 8019fd6:	f7ff f8d3 	bl	8019180 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8019fda:	88e2      	ldrh	r2, [r4, #6]
 8019fdc:	8863      	ldrh	r3, [r4, #2]
 8019fde:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8019fe2:	4413      	add	r3, r2
 8019fe4:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8019fe8:	b29b      	uxth	r3, r3
 8019fea:	440a      	add	r2, r1
 8019fec:	b292      	uxth	r2, r2
 8019fee:	b211      	sxth	r1, r2
 8019ff0:	b218      	sxth	r0, r3
 8019ff2:	4288      	cmp	r0, r1
 8019ff4:	f77f af7b 	ble.w	8019eee <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 8019ff8:	f9b4 6000 	ldrsh.w	r6, [r4]
 8019ffc:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a000:	1a9b      	subs	r3, r3, r2
 801a002:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a006:	f8ad 6018 	strh.w	r6, [sp, #24]
 801a00a:	f8ad 101a 	strh.w	r1, [sp, #26]
 801a00e:	f8ad 001c 	strh.w	r0, [sp, #28]
 801a012:	23ff      	movs	r3, #255	; 0xff
 801a014:	4642      	mov	r2, r8
 801a016:	e782      	b.n	8019f1e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xb6>
 801a018:	4633      	mov	r3, r6
 801a01a:	4622      	mov	r2, r4
 801a01c:	a902      	add	r1, sp, #8
 801a01e:	4628      	mov	r0, r5
 801a020:	f7ff fa04 	bl	801942c <_ZN8touchgfx8LCD16bpp14blitCopyRGB888EPKhRKNS_4RectES5_h>
 801a024:	e763      	b.n	8019eee <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801a026:	9600      	str	r6, [sp, #0]
 801a028:	4623      	mov	r3, r4
 801a02a:	aa02      	add	r2, sp, #8
 801a02c:	4649      	mov	r1, r9
 801a02e:	4628      	mov	r0, r5
 801a030:	f7ff fddc 	bl	8019bec <_ZN8touchgfx8LCD16bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801a034:	e75b      	b.n	8019eee <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801a036:	4638      	mov	r0, r7
 801a038:	f7fc f846 	bl	80160c8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801a03c:	b950      	cbnz	r0, 801a054 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1ec>
 801a03e:	e9cd 6000 	strd	r6, r0, [sp]
 801a042:	f8da 3000 	ldr.w	r3, [sl]
 801a046:	aa02      	add	r2, sp, #8
 801a048:	68de      	ldr	r6, [r3, #12]
 801a04a:	4629      	mov	r1, r5
 801a04c:	4623      	mov	r3, r4
 801a04e:	4650      	mov	r0, sl
 801a050:	47b0      	blx	r6
 801a052:	e74c      	b.n	8019eee <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801a054:	f10d 0818 	add.w	r8, sp, #24
 801a058:	4639      	mov	r1, r7
 801a05a:	4640      	mov	r0, r8
 801a05c:	af04      	add	r7, sp, #16
 801a05e:	f7fb ffe7 	bl	8016030 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 801a062:	e898 0003 	ldmia.w	r8, {r0, r1}
 801a066:	e887 0003 	stmia.w	r7, {r0, r1}
 801a06a:	4638      	mov	r0, r7
 801a06c:	4621      	mov	r1, r4
 801a06e:	f7f7 f99d 	bl	80113ac <_ZN8touchgfx4RectaNERKS0_>
 801a072:	4638      	mov	r0, r7
 801a074:	f7f7 f9dd 	bl	8011432 <_ZNK8touchgfx4Rect7isEmptyEv>
 801a078:	b138      	cbz	r0, 801a08a <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x222>
 801a07a:	4623      	mov	r3, r4
 801a07c:	9600      	str	r6, [sp, #0]
 801a07e:	aa02      	add	r2, sp, #8
 801a080:	4649      	mov	r1, r9
 801a082:	4628      	mov	r0, r5
 801a084:	f7ff fdca 	bl	8019c1c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801a088:	e731      	b.n	8019eee <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801a08a:	e9cd 6000 	strd	r6, r0, [sp]
 801a08e:	f8da 3000 	ldr.w	r3, [sl]
 801a092:	aa02      	add	r2, sp, #8
 801a094:	f8d3 b00c 	ldr.w	fp, [r3, #12]
 801a098:	4629      	mov	r1, r5
 801a09a:	463b      	mov	r3, r7
 801a09c:	4650      	mov	r0, sl
 801a09e:	47d8      	blx	fp
 801a0a0:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801a0a4:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801a0a8:	4293      	cmp	r3, r2
 801a0aa:	dd13      	ble.n	801a0d4 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x26c>
 801a0ac:	f9b4 0000 	ldrsh.w	r0, [r4]
 801a0b0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801a0b4:	1a9b      	subs	r3, r3, r2
 801a0b6:	f8ad 0018 	strh.w	r0, [sp, #24]
 801a0ba:	f8ad 201a 	strh.w	r2, [sp, #26]
 801a0be:	f8ad 101c 	strh.w	r1, [sp, #28]
 801a0c2:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a0c6:	9600      	str	r6, [sp, #0]
 801a0c8:	4643      	mov	r3, r8
 801a0ca:	aa02      	add	r2, sp, #8
 801a0cc:	4649      	mov	r1, r9
 801a0ce:	4628      	mov	r0, r5
 801a0d0:	f7ff fda4 	bl	8019c1c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801a0d4:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 801a0d8:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a0dc:	4293      	cmp	r3, r2
 801a0de:	dd13      	ble.n	801a108 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2a0>
 801a0e0:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 801a0e4:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801a0e8:	1a9b      	subs	r3, r3, r2
 801a0ea:	f8ad 2018 	strh.w	r2, [sp, #24]
 801a0ee:	f8ad 001a 	strh.w	r0, [sp, #26]
 801a0f2:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a0f6:	f8ad 101e 	strh.w	r1, [sp, #30]
 801a0fa:	9600      	str	r6, [sp, #0]
 801a0fc:	4643      	mov	r3, r8
 801a0fe:	aa02      	add	r2, sp, #8
 801a100:	4649      	mov	r1, r9
 801a102:	4628      	mov	r0, r5
 801a104:	f7ff fd8a 	bl	8019c1c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801a108:	88a2      	ldrh	r2, [r4, #4]
 801a10a:	8823      	ldrh	r3, [r4, #0]
 801a10c:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 801a110:	4413      	add	r3, r2
 801a112:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801a116:	b29b      	uxth	r3, r3
 801a118:	440a      	add	r2, r1
 801a11a:	b292      	uxth	r2, r2
 801a11c:	b211      	sxth	r1, r2
 801a11e:	b218      	sxth	r0, r3
 801a120:	4288      	cmp	r0, r1
 801a122:	dd13      	ble.n	801a14c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x2e4>
 801a124:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 801a128:	1a9b      	subs	r3, r3, r2
 801a12a:	f9bd 7012 	ldrsh.w	r7, [sp, #18]
 801a12e:	f8ad 1018 	strh.w	r1, [sp, #24]
 801a132:	f8ad 301c 	strh.w	r3, [sp, #28]
 801a136:	f8ad 001e 	strh.w	r0, [sp, #30]
 801a13a:	9600      	str	r6, [sp, #0]
 801a13c:	4643      	mov	r3, r8
 801a13e:	aa02      	add	r2, sp, #8
 801a140:	4649      	mov	r1, r9
 801a142:	4628      	mov	r0, r5
 801a144:	f8ad 701a 	strh.w	r7, [sp, #26]
 801a148:	f7ff fd68 	bl	8019c1c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 801a14c:	88e2      	ldrh	r2, [r4, #6]
 801a14e:	8863      	ldrh	r3, [r4, #2]
 801a150:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 801a154:	4413      	add	r3, r2
 801a156:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 801a15a:	b29b      	uxth	r3, r3
 801a15c:	440a      	add	r2, r1
 801a15e:	b292      	uxth	r2, r2
 801a160:	b211      	sxth	r1, r2
 801a162:	b218      	sxth	r0, r3
 801a164:	4288      	cmp	r0, r1
 801a166:	f77f aec2 	ble.w	8019eee <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x86>
 801a16a:	f9b4 7000 	ldrsh.w	r7, [r4]
 801a16e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801a172:	1a9b      	subs	r3, r3, r2
 801a174:	f8ad 301e 	strh.w	r3, [sp, #30]
 801a178:	f8ad 7018 	strh.w	r7, [sp, #24]
 801a17c:	f8ad 101a 	strh.w	r1, [sp, #26]
 801a180:	f8ad 001c 	strh.w	r0, [sp, #28]
 801a184:	9600      	str	r6, [sp, #0]
 801a186:	4643      	mov	r3, r8
 801a188:	e779      	b.n	801a07e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x216>
 801a18a:	bf00      	nop
 801a18c:	2001fe88 	.word	0x2001fe88

0801a190 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 801a190:	b180      	cbz	r0, 801a1b4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 801a192:	2903      	cmp	r1, #3
 801a194:	d81c      	bhi.n	801a1d0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801a196:	e8df f001 	tbb	[pc, r1]
 801a19a:	1d02      	.short	0x1d02
 801a19c:	1f08      	.short	0x1f08
 801a19e:	4b10      	ldr	r3, [pc, #64]	; (801a1e0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801a1a0:	8818      	ldrh	r0, [r3, #0]
 801a1a2:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801a1a6:	4240      	negs	r0, r0
 801a1a8:	4770      	bx	lr
 801a1aa:	4b0d      	ldr	r3, [pc, #52]	; (801a1e0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x50>)
 801a1ac:	8818      	ldrh	r0, [r3, #0]
 801a1ae:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801a1b2:	4770      	bx	lr
 801a1b4:	2903      	cmp	r1, #3
 801a1b6:	d80b      	bhi.n	801a1d0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x40>
 801a1b8:	a301      	add	r3, pc, #4	; (adr r3, 801a1c0 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x30>)
 801a1ba:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801a1be:	bf00      	nop
 801a1c0:	0801a1d5 	.word	0x0801a1d5
 801a1c4:	0801a1ab 	.word	0x0801a1ab
 801a1c8:	0801a1d9 	.word	0x0801a1d9
 801a1cc:	0801a19f 	.word	0x0801a19f
 801a1d0:	2000      	movs	r0, #0
 801a1d2:	4770      	bx	lr
 801a1d4:	2001      	movs	r0, #1
 801a1d6:	4770      	bx	lr
 801a1d8:	f04f 30ff 	mov.w	r0, #4294967295
 801a1dc:	4770      	bx	lr
 801a1de:	bf00      	nop
 801a1e0:	2001fe82 	.word	0x2001fe82

0801a1e4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 801a1e4:	b180      	cbz	r0, 801a208 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x24>
 801a1e6:	2903      	cmp	r1, #3
 801a1e8:	d81c      	bhi.n	801a224 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801a1ea:	e8df f001 	tbb	[pc, r1]
 801a1ee:	021d      	.short	0x021d
 801a1f0:	071f      	.short	0x071f
 801a1f2:	4b10      	ldr	r3, [pc, #64]	; (801a234 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801a1f4:	8818      	ldrh	r0, [r3, #0]
 801a1f6:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801a1fa:	4770      	bx	lr
 801a1fc:	4b0d      	ldr	r3, [pc, #52]	; (801a234 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x50>)
 801a1fe:	8818      	ldrh	r0, [r3, #0]
 801a200:	f3c0 000e 	ubfx	r0, r0, #0, #15
 801a204:	4240      	negs	r0, r0
 801a206:	4770      	bx	lr
 801a208:	2903      	cmp	r1, #3
 801a20a:	d80b      	bhi.n	801a224 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x40>
 801a20c:	a301      	add	r3, pc, #4	; (adr r3, 801a214 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x30>)
 801a20e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801a212:	bf00      	nop
 801a214:	0801a1f3 	.word	0x0801a1f3
 801a218:	0801a22d 	.word	0x0801a22d
 801a21c:	0801a1fd 	.word	0x0801a1fd
 801a220:	0801a229 	.word	0x0801a229
 801a224:	2000      	movs	r0, #0
 801a226:	4770      	bx	lr
 801a228:	2001      	movs	r0, #1
 801a22a:	4770      	bx	lr
 801a22c:	f04f 30ff 	mov.w	r0, #4294967295
 801a230:	4770      	bx	lr
 801a232:	bf00      	nop
 801a234:	2001fe82 	.word	0x2001fe82

0801a238 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801a238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a23c:	b099      	sub	sp, #100	; 0x64
 801a23e:	910b      	str	r1, [sp, #44]	; 0x2c
 801a240:	a914      	add	r1, sp, #80	; 0x50
 801a242:	e881 000c 	stmia.w	r1, {r2, r3}
 801a246:	e9dd 2126 	ldrd	r2, r1, [sp, #152]	; 0x98
 801a24a:	f9bd 308c 	ldrsh.w	r3, [sp, #140]	; 0x8c
 801a24e:	f891 900d 	ldrb.w	r9, [r1, #13]
 801a252:	9309      	str	r3, [sp, #36]	; 0x24
 801a254:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801a258:	ea4f 1749 	mov.w	r7, r9, lsl #5
 801a25c:	9310      	str	r3, [sp, #64]	; 0x40
 801a25e:	f89d 30b0 	ldrb.w	r3, [sp, #176]	; 0xb0
 801a262:	f9bd 4088 	ldrsh.w	r4, [sp, #136]	; 0x88
 801a266:	930c      	str	r3, [sp, #48]	; 0x30
 801a268:	f407 7380 	and.w	r3, r7, #256	; 0x100
 801a26c:	798f      	ldrb	r7, [r1, #6]
 801a26e:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 801a272:	431f      	orrs	r7, r3
 801a274:	f8bd 6094 	ldrh.w	r6, [sp, #148]	; 0x94
 801a278:	f89d 80ac 	ldrb.w	r8, [sp, #172]	; 0xac
 801a27c:	f89d a0b4 	ldrb.w	sl, [sp, #180]	; 0xb4
 801a280:	f000 8194 	beq.w	801a5ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801a284:	ea4f 1909 	mov.w	r9, r9, lsl #4
 801a288:	f409 7380 	and.w	r3, r9, #256	; 0x100
 801a28c:	f891 9007 	ldrb.w	r9, [r1, #7]
 801a290:	ea59 0903 	orrs.w	r9, r9, r3
 801a294:	f000 818a 	beq.w	801a5ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801a298:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801a29c:	b29b      	uxth	r3, r3
 801a29e:	2d00      	cmp	r5, #0
 801a2a0:	f000 812f 	beq.w	801a502 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2ca>
 801a2a4:	1aed      	subs	r5, r5, r3
 801a2a6:	b2ad      	uxth	r5, r5
 801a2a8:	042b      	lsls	r3, r5, #16
 801a2aa:	d502      	bpl.n	801a2b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801a2ac:	1b64      	subs	r4, r4, r5
 801a2ae:	2500      	movs	r5, #0
 801a2b0:	b224      	sxth	r4, r4
 801a2b2:	f9b2 1000 	ldrsh.w	r1, [r2]
 801a2b6:	a814      	add	r0, sp, #80	; 0x50
 801a2b8:	428c      	cmp	r4, r1
 801a2ba:	b28b      	uxth	r3, r1
 801a2bc:	bfbf      	itttt	lt
 801a2be:	18ed      	addlt	r5, r5, r3
 801a2c0:	1b2c      	sublt	r4, r5, r4
 801a2c2:	b2a5      	uxthlt	r5, r4
 801a2c4:	460c      	movlt	r4, r1
 801a2c6:	8891      	ldrh	r1, [r2, #4]
 801a2c8:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
 801a2cc:	440b      	add	r3, r1
 801a2ce:	b21b      	sxth	r3, r3
 801a2d0:	930f      	str	r3, [sp, #60]	; 0x3c
 801a2d2:	88d3      	ldrh	r3, [r2, #6]
 801a2d4:	8852      	ldrh	r2, [r2, #2]
 801a2d6:	4621      	mov	r1, r4
 801a2d8:	4413      	add	r3, r2
 801a2da:	b21b      	sxth	r3, r3
 801a2dc:	930d      	str	r3, [sp, #52]	; 0x34
 801a2de:	4bbd      	ldr	r3, [pc, #756]	; (801a5d4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39c>)
 801a2e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a2e2:	f893 b000 	ldrb.w	fp, [r3]
 801a2e6:	f10b 3cff 	add.w	ip, fp, #4294967295
 801a2ea:	f1dc 0300 	rsbs	r3, ip, #0
 801a2ee:	eb43 030c 	adc.w	r3, r3, ip
 801a2f2:	930e      	str	r3, [sp, #56]	; 0x38
 801a2f4:	4653      	mov	r3, sl
 801a2f6:	f7f8 fef7 	bl	80130e8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801a2fa:	4621      	mov	r1, r4
 801a2fc:	f8ad 005c 	strh.w	r0, [sp, #92]	; 0x5c
 801a300:	4653      	mov	r3, sl
 801a302:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a304:	a814      	add	r0, sp, #80	; 0x50
 801a306:	f7f8 ff0c 	bl	8013122 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801a30a:	a918      	add	r1, sp, #96	; 0x60
 801a30c:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801a310:	a817      	add	r0, sp, #92	; 0x5c
 801a312:	f7f9 f82d 	bl	8013370 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801a316:	f1ba 0f00 	cmp.w	sl, #0
 801a31a:	f040 80f5 	bne.w	801a508 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2d0>
 801a31e:	f1bb 0f01 	cmp.w	fp, #1
 801a322:	f040 80f9 	bne.w	801a518 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e0>
 801a326:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a328:	2b00      	cmp	r3, #0
 801a32a:	f040 8144 	bne.w	801a5b6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37e>
 801a32e:	b2ba      	uxth	r2, r7
 801a330:	b905      	cbnz	r5, 801a334 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xfc>
 801a332:	b16e      	cbz	r6, 801a350 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x118>
 801a334:	4631      	mov	r1, r6
 801a336:	fb06 5302 	mla	r3, r6, r2, r5
 801a33a:	fb08 f303 	mul.w	r3, r8, r3
 801a33e:	9828      	ldr	r0, [sp, #160]	; 0xa0
 801a340:	f003 0607 	and.w	r6, r3, #7
 801a344:	eb00 03d3 	add.w	r3, r0, r3, lsr #3
 801a348:	9328      	str	r3, [sp, #160]	; 0xa0
 801a34a:	eba9 0301 	sub.w	r3, r9, r1
 801a34e:	930a      	str	r3, [sp, #40]	; 0x28
 801a350:	4651      	mov	r1, sl
 801a352:	980e      	ldr	r0, [sp, #56]	; 0x38
 801a354:	f7ff ff1c 	bl	801a190 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 801a358:	4681      	mov	r9, r0
 801a35a:	980e      	ldr	r0, [sp, #56]	; 0x38
 801a35c:	f7ff ff42 	bl	801a1e4 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 801a360:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a362:	9909      	ldr	r1, [sp, #36]	; 0x24
 801a364:	4683      	mov	fp, r0
 801a366:	eba3 0a01 	sub.w	sl, r3, r1
 801a36a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a36c:	459a      	cmp	sl, r3
 801a36e:	bfa8      	it	ge
 801a370:	469a      	movge	sl, r3
 801a372:	f1ba 0f00 	cmp.w	sl, #0
 801a376:	f340 8119 	ble.w	801a5ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801a37a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a37c:	1b64      	subs	r4, r4, r5
 801a37e:	1b1c      	subs	r4, r3, r4
 801a380:	42bc      	cmp	r4, r7
 801a382:	bfd4      	ite	le
 801a384:	ebc5 0504 	rsble	r5, r5, r4
 801a388:	ebc5 0507 	rsbgt	r5, r5, r7
 801a38c:	2d00      	cmp	r5, #0
 801a38e:	f340 810d 	ble.w	801a5ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801a392:	1b52      	subs	r2, r2, r5
 801a394:	fb08 f302 	mul.w	r3, r8, r2
 801a398:	930f      	str	r3, [sp, #60]	; 0x3c
 801a39a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a39c:	2b00      	cmp	r3, #0
 801a39e:	f040 8115 	bne.w	801a5cc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x394>
 801a3a2:	4b8d      	ldr	r3, [pc, #564]	; (801a5d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>)
 801a3a4:	6818      	ldr	r0, [r3, #0]
 801a3a6:	6803      	ldr	r3, [r0, #0]
 801a3a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a3aa:	4798      	blx	r3
 801a3ac:	2301      	movs	r3, #1
 801a3ae:	fa03 f308 	lsl.w	r3, r3, r8
 801a3b2:	4a8a      	ldr	r2, [pc, #552]	; (801a5dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a4>)
 801a3b4:	3b01      	subs	r3, #1
 801a3b6:	b2db      	uxtb	r3, r3
 801a3b8:	8811      	ldrh	r1, [r2, #0]
 801a3ba:	930e      	str	r3, [sp, #56]	; 0x38
 801a3bc:	f9bd 205c 	ldrsh.w	r2, [sp, #92]	; 0x5c
 801a3c0:	f9bd 305e 	ldrsh.w	r3, [sp, #94]	; 0x5e
 801a3c4:	fb01 2303 	mla	r3, r1, r3, r2
 801a3c8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 801a3cc:	930a      	str	r3, [sp, #40]	; 0x28
 801a3ce:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a3d0:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801a3d4:	9313      	str	r3, [sp, #76]	; 0x4c
 801a3d6:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a3d8:	0a19      	lsrs	r1, r3, #8
 801a3da:	b2cb      	uxtb	r3, r1
 801a3dc:	9312      	str	r3, [sp, #72]	; 0x48
 801a3de:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a3e0:	b2db      	uxtb	r3, r3
 801a3e2:	9311      	str	r3, [sp, #68]	; 0x44
 801a3e4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801a3e6:	095a      	lsrs	r2, r3, #5
 801a3e8:	4b7d      	ldr	r3, [pc, #500]	; (801a5e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a8>)
 801a3ea:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801a3ee:	400b      	ands	r3, r1
 801a3f0:	4313      	orrs	r3, r2
 801a3f2:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801a3f4:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801a3f8:	4313      	orrs	r3, r2
 801a3fa:	b29b      	uxth	r3, r3
 801a3fc:	9310      	str	r3, [sp, #64]	; 0x40
 801a3fe:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a400:	781a      	ldrb	r2, [r3, #0]
 801a402:	ea4f 0349 	mov.w	r3, r9, lsl #1
 801a406:	fb05 b919 	mls	r9, r5, r9, fp
 801a40a:	fb03 fb05 	mul.w	fp, r3, r5
 801a40e:	4132      	asrs	r2, r6
 801a410:	b2d2      	uxtb	r2, r2
 801a412:	930d      	str	r3, [sp, #52]	; 0x34
 801a414:	eb0b 0b49 	add.w	fp, fp, r9, lsl #1
 801a418:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801a41c:	f0c0 80f3 	bcc.w	801a606 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ce>
 801a420:	46ae      	mov	lr, r5
 801a422:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 801a426:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801a42a:	f0c0 80db 	bcc.w	801a5e4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>
 801a42e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801a430:	4013      	ands	r3, r2
 801a432:	d055      	beq.n	801a4e0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801a434:	20ff      	movs	r0, #255	; 0xff
 801a436:	990e      	ldr	r1, [sp, #56]	; 0x38
 801a438:	fb90 f1f1 	sdiv	r1, r0, r1
 801a43c:	434b      	muls	r3, r1
 801a43e:	2bfe      	cmp	r3, #254	; 0xfe
 801a440:	dd03      	ble.n	801a44a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x212>
 801a442:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a444:	4281      	cmp	r1, r0
 801a446:	f000 80c3 	beq.w	801a5d0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x398>
 801a44a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a44c:	f8bc 4000 	ldrh.w	r4, [ip]
 801a450:	fb11 f303 	smulbb	r3, r1, r3
 801a454:	b29b      	uxth	r3, r3
 801a456:	1c59      	adds	r1, r3, #1
 801a458:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801a45c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801a460:	b29f      	uxth	r7, r3
 801a462:	43db      	mvns	r3, r3
 801a464:	b2db      	uxtb	r3, r3
 801a466:	9309      	str	r3, [sp, #36]	; 0x24
 801a468:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801a46a:	1220      	asrs	r0, r4, #8
 801a46c:	fb13 f907 	smulbb	r9, r3, r7
 801a470:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801a474:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a476:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801a47a:	fb00 9003 	mla	r0, r0, r3, r9
 801a47e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801a480:	10e1      	asrs	r1, r4, #3
 801a482:	fb13 f907 	smulbb	r9, r3, r7
 801a486:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801a48a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a48c:	ea41 1191 	orr.w	r1, r1, r1, lsr #6
 801a490:	fb01 9103 	mla	r1, r1, r3, r9
 801a494:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801a496:	00e4      	lsls	r4, r4, #3
 801a498:	fb13 f707 	smulbb	r7, r3, r7
 801a49c:	b2e4      	uxtb	r4, r4
 801a49e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a4a0:	ea44 1454 	orr.w	r4, r4, r4, lsr #5
 801a4a4:	fb04 7403 	mla	r4, r4, r3, r7
 801a4a8:	b280      	uxth	r0, r0
 801a4aa:	b2a4      	uxth	r4, r4
 801a4ac:	1c43      	adds	r3, r0, #1
 801a4ae:	f104 0901 	add.w	r9, r4, #1
 801a4b2:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801a4b6:	eb09 2914 	add.w	r9, r9, r4, lsr #8
 801a4ba:	b289      	uxth	r1, r1
 801a4bc:	f3c9 29c4 	ubfx	r9, r9, #11, #5
 801a4c0:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801a4c4:	ea49 0000 	orr.w	r0, r9, r0
 801a4c8:	f101 0901 	add.w	r9, r1, #1
 801a4cc:	eb09 2911 	add.w	r9, r9, r1, lsr #8
 801a4d0:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801a4d4:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801a4d8:	ea40 0009 	orr.w	r0, r0, r9
 801a4dc:	f8ac 0000 	strh.w	r0, [ip]
 801a4e0:	4446      	add	r6, r8
 801a4e2:	b2b6      	uxth	r6, r6
 801a4e4:	2e07      	cmp	r6, #7
 801a4e6:	bf89      	itett	hi
 801a4e8:	9b28      	ldrhi	r3, [sp, #160]	; 0xa0
 801a4ea:	fa42 f208 	asrls.w	r2, r2, r8
 801a4ee:	785a      	ldrbhi	r2, [r3, #1]
 801a4f0:	3301      	addhi	r3, #1
 801a4f2:	bf88      	it	hi
 801a4f4:	9328      	strhi	r3, [sp, #160]	; 0xa0
 801a4f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a4f8:	bf94      	ite	ls
 801a4fa:	b2d2      	uxtbls	r2, r2
 801a4fc:	2600      	movhi	r6, #0
 801a4fe:	449c      	add	ip, r3
 801a500:	e791      	b.n	801a426 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1ee>
 801a502:	441c      	add	r4, r3
 801a504:	b224      	sxth	r4, r4
 801a506:	e6d4      	b.n	801a2b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x7a>
 801a508:	f1ba 0f01 	cmp.w	sl, #1
 801a50c:	f47f af0b 	bne.w	801a326 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801a510:	f1bb 0f01 	cmp.w	fp, #1
 801a514:	f47f af07 	bne.w	801a326 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801a518:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 801a5d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3a0>
 801a51c:	f8db 0000 	ldr.w	r0, [fp]
 801a520:	6803      	ldr	r3, [r0, #0]
 801a522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a524:	4798      	blx	r3
 801a526:	f410 7380 	ands.w	r3, r0, #256	; 0x100
 801a52a:	465a      	mov	r2, fp
 801a52c:	d006      	beq.n	801a53c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 801a52e:	f1b8 0f04 	cmp.w	r8, #4
 801a532:	d13e      	bne.n	801a5b2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x37a>
 801a534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801a536:	3300      	adds	r3, #0
 801a538:	bf18      	it	ne
 801a53a:	2301      	movne	r3, #1
 801a53c:	0580      	lsls	r0, r0, #22
 801a53e:	d56b      	bpl.n	801a618 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 801a540:	f1b8 0f08 	cmp.w	r8, #8
 801a544:	d168      	bne.n	801a618 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3e0>
 801a546:	2b00      	cmp	r3, #0
 801a548:	bf0c      	ite	eq
 801a54a:	f44f 7100 	moveq.w	r1, #512	; 0x200
 801a54e:	f44f 7180 	movne.w	r1, #256	; 0x100
 801a552:	2d00      	cmp	r5, #0
 801a554:	f47f aee7 	bne.w	801a326 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801a558:	2e00      	cmp	r6, #0
 801a55a:	f47f aee4 	bne.w	801a326 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801a55e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801a560:	19e3      	adds	r3, r4, r7
 801a562:	4283      	cmp	r3, r0
 801a564:	f73f aedf 	bgt.w	801a326 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801a568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a56a:	980d      	ldr	r0, [sp, #52]	; 0x34
 801a56c:	444b      	add	r3, r9
 801a56e:	4283      	cmp	r3, r0
 801a570:	f73f aed9 	bgt.w	801a326 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801a574:	2500      	movs	r5, #0
 801a576:	6810      	ldr	r0, [r2, #0]
 801a578:	b2bf      	uxth	r7, r7
 801a57a:	6804      	ldr	r4, [r0, #0]
 801a57c:	f1b8 0f08 	cmp.w	r8, #8
 801a580:	e9cd 1505 	strd	r1, r5, [sp, #20]
 801a584:	990c      	ldr	r1, [sp, #48]	; 0x30
 801a586:	bf1c      	itt	ne
 801a588:	3701      	addne	r7, #1
 801a58a:	f027 0701 	bicne.w	r7, r7, #1
 801a58e:	9104      	str	r1, [sp, #16]
 801a590:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801a592:	bf18      	it	ne
 801a594:	b2bf      	uxthne	r7, r7
 801a596:	e9cd 7102 	strd	r7, r1, [sp, #8]
 801a59a:	e9cd 7900 	strd	r7, r9, [sp]
 801a59e:	f8bd 305e 	ldrh.w	r3, [sp, #94]	; 0x5e
 801a5a2:	f8bd 205c 	ldrh.w	r2, [sp, #92]	; 0x5c
 801a5a6:	6d64      	ldr	r4, [r4, #84]	; 0x54
 801a5a8:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801a5aa:	47a0      	blx	r4
 801a5ac:	b019      	add	sp, #100	; 0x64
 801a5ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a5b2:	2300      	movs	r3, #0
 801a5b4:	e7c2      	b.n	801a53c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x304>
 801a5b6:	2208      	movs	r2, #8
 801a5b8:	fb92 f3f8 	sdiv	r3, r2, r8
 801a5bc:	1e5a      	subs	r2, r3, #1
 801a5be:	443a      	add	r2, r7
 801a5c0:	fb92 f2f3 	sdiv	r2, r2, r3
 801a5c4:	fb12 f203 	smulbb	r2, r2, r3
 801a5c8:	b292      	uxth	r2, r2
 801a5ca:	e6b1      	b.n	801a330 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf8>
 801a5cc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801a5ce:	e6ed      	b.n	801a3ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x174>
 801a5d0:	9810      	ldr	r0, [sp, #64]	; 0x40
 801a5d2:	e783      	b.n	801a4dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a4>
 801a5d4:	2001fe80 	.word	0x2001fe80
 801a5d8:	2001fe88 	.word	0x2001fe88
 801a5dc:	2001fe82 	.word	0x2001fe82
 801a5e0:	00fff800 	.word	0x00fff800
 801a5e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a5e6:	b153      	cbz	r3, 801a5fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3c6>
 801a5e8:	441e      	add	r6, r3
 801a5ea:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801a5ec:	b2b6      	uxth	r6, r6
 801a5ee:	eb03 03d6 	add.w	r3, r3, r6, lsr #3
 801a5f2:	781a      	ldrb	r2, [r3, #0]
 801a5f4:	f006 0607 	and.w	r6, r6, #7
 801a5f8:	4132      	asrs	r2, r6
 801a5fa:	9328      	str	r3, [sp, #160]	; 0xa0
 801a5fc:	b2d2      	uxtb	r2, r2
 801a5fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a600:	445b      	add	r3, fp
 801a602:	930a      	str	r3, [sp, #40]	; 0x28
 801a604:	e708      	b.n	801a418 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e0>
 801a606:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801a608:	2b00      	cmp	r3, #0
 801a60a:	d1cf      	bne.n	801a5ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801a60c:	4b05      	ldr	r3, [pc, #20]	; (801a624 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ec>)
 801a60e:	6818      	ldr	r0, [r3, #0]
 801a610:	6803      	ldr	r3, [r0, #0]
 801a612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a614:	4798      	blx	r3
 801a616:	e7c9      	b.n	801a5ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x374>
 801a618:	2b00      	cmp	r3, #0
 801a61a:	f43f ae84 	beq.w	801a326 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xee>
 801a61e:	f44f 7180 	mov.w	r1, #256	; 0x100
 801a622:	e796      	b.n	801a552 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x31a>
 801a624:	2001fe88 	.word	0x2001fe88

0801a628 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>:
 801a628:	b538      	push	{r3, r4, r5, lr}
 801a62a:	4605      	mov	r5, r0
 801a62c:	4c13      	ldr	r4, [pc, #76]	; (801a67c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x54>)
 801a62e:	e8d4 3f8f 	ldab	r3, [r4]
 801a632:	07da      	lsls	r2, r3, #31
 801a634:	d40b      	bmi.n	801a64e <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 801a636:	4620      	mov	r0, r4
 801a638:	f007 fa45 	bl	8021ac6 <__cxa_guard_acquire>
 801a63c:	b138      	cbz	r0, 801a64e <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x26>
 801a63e:	4620      	mov	r0, r4
 801a640:	f007 fa4d 	bl	8021ade <__cxa_guard_release>
 801a644:	4a0e      	ldr	r2, [pc, #56]	; (801a680 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801a646:	490f      	ldr	r1, [pc, #60]	; (801a684 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x5c>)
 801a648:	480f      	ldr	r0, [pc, #60]	; (801a688 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801a64a:	f007 fa35 	bl	8021ab8 <__aeabi_atexit>
 801a64e:	4c0f      	ldr	r4, [pc, #60]	; (801a68c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x64>)
 801a650:	e8d4 3f8f 	ldab	r3, [r4]
 801a654:	07db      	lsls	r3, r3, #31
 801a656:	d40b      	bmi.n	801a670 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 801a658:	4620      	mov	r0, r4
 801a65a:	f007 fa34 	bl	8021ac6 <__cxa_guard_acquire>
 801a65e:	b138      	cbz	r0, 801a670 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x48>
 801a660:	4620      	mov	r0, r4
 801a662:	f007 fa3c 	bl	8021ade <__cxa_guard_release>
 801a666:	4a06      	ldr	r2, [pc, #24]	; (801a680 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x58>)
 801a668:	4909      	ldr	r1, [pc, #36]	; (801a690 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x68>)
 801a66a:	480a      	ldr	r0, [pc, #40]	; (801a694 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801a66c:	f007 fa24 	bl	8021ab8 <__aeabi_atexit>
 801a670:	4b05      	ldr	r3, [pc, #20]	; (801a688 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x60>)
 801a672:	612b      	str	r3, [r5, #16]
 801a674:	4b07      	ldr	r3, [pc, #28]	; (801a694 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv+0x6c>)
 801a676:	616b      	str	r3, [r5, #20]
 801a678:	bd38      	pop	{r3, r4, r5, pc}
 801a67a:	bf00      	nop
 801a67c:	2001ff54 	.word	0x2001ff54
 801a680:	20000000 	.word	0x20000000
 801a684:	0801884f 	.word	0x0801884f
 801a688:	200000bc 	.word	0x200000bc
 801a68c:	2001ff58 	.word	0x2001ff58
 801a690:	0801884d 	.word	0x0801884d
 801a694:	200000c0 	.word	0x200000c0

0801a698 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>:
 801a698:	b538      	push	{r3, r4, r5, lr}
 801a69a:	4605      	mov	r5, r0
 801a69c:	4c13      	ldr	r4, [pc, #76]	; (801a6ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x54>)
 801a69e:	e8d4 3f8f 	ldab	r3, [r4]
 801a6a2:	07da      	lsls	r2, r3, #31
 801a6a4:	d40b      	bmi.n	801a6be <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 801a6a6:	4620      	mov	r0, r4
 801a6a8:	f007 fa0d 	bl	8021ac6 <__cxa_guard_acquire>
 801a6ac:	b138      	cbz	r0, 801a6be <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x26>
 801a6ae:	4620      	mov	r0, r4
 801a6b0:	f007 fa15 	bl	8021ade <__cxa_guard_release>
 801a6b4:	4a0e      	ldr	r2, [pc, #56]	; (801a6f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801a6b6:	490f      	ldr	r1, [pc, #60]	; (801a6f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x5c>)
 801a6b8:	480f      	ldr	r0, [pc, #60]	; (801a6f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801a6ba:	f007 f9fd 	bl	8021ab8 <__aeabi_atexit>
 801a6be:	4c0f      	ldr	r4, [pc, #60]	; (801a6fc <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x64>)
 801a6c0:	e8d4 3f8f 	ldab	r3, [r4]
 801a6c4:	07db      	lsls	r3, r3, #31
 801a6c6:	d40b      	bmi.n	801a6e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 801a6c8:	4620      	mov	r0, r4
 801a6ca:	f007 f9fc 	bl	8021ac6 <__cxa_guard_acquire>
 801a6ce:	b138      	cbz	r0, 801a6e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x48>
 801a6d0:	4620      	mov	r0, r4
 801a6d2:	f007 fa04 	bl	8021ade <__cxa_guard_release>
 801a6d6:	4a06      	ldr	r2, [pc, #24]	; (801a6f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x58>)
 801a6d8:	4909      	ldr	r1, [pc, #36]	; (801a700 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x68>)
 801a6da:	480a      	ldr	r0, [pc, #40]	; (801a704 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801a6dc:	f007 f9ec 	bl	8021ab8 <__aeabi_atexit>
 801a6e0:	4b05      	ldr	r3, [pc, #20]	; (801a6f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x60>)
 801a6e2:	60ab      	str	r3, [r5, #8]
 801a6e4:	4b07      	ldr	r3, [pc, #28]	; (801a704 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv+0x6c>)
 801a6e6:	60eb      	str	r3, [r5, #12]
 801a6e8:	bd38      	pop	{r3, r4, r5, pc}
 801a6ea:	bf00      	nop
 801a6ec:	2001ff2c 	.word	0x2001ff2c
 801a6f0:	20000000 	.word	0x20000000
 801a6f4:	08018853 	.word	0x08018853
 801a6f8:	20000094 	.word	0x20000094
 801a6fc:	2001ff30 	.word	0x2001ff30
 801a700:	08018851 	.word	0x08018851
 801a704:	20000098 	.word	0x20000098

0801a708 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>:
 801a708:	b510      	push	{r4, lr}
 801a70a:	4604      	mov	r4, r0
 801a70c:	f7ff ff8c 	bl	801a628 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB565_BilinearInterpolationEv>
 801a710:	4620      	mov	r0, r4
 801a712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a716:	f7ff bfbf 	b.w	801a698 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB565_NearestNeighborEv>
	...

0801a71c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801a71c:	b538      	push	{r3, r4, r5, lr}
 801a71e:	4605      	mov	r5, r0
 801a720:	4c13      	ldr	r4, [pc, #76]	; (801a770 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x54>)
 801a722:	e8d4 3f8f 	ldab	r3, [r4]
 801a726:	07da      	lsls	r2, r3, #31
 801a728:	d40b      	bmi.n	801a742 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 801a72a:	4620      	mov	r0, r4
 801a72c:	f007 f9cb 	bl	8021ac6 <__cxa_guard_acquire>
 801a730:	b138      	cbz	r0, 801a742 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x26>
 801a732:	4620      	mov	r0, r4
 801a734:	f007 f9d3 	bl	8021ade <__cxa_guard_release>
 801a738:	4a0e      	ldr	r2, [pc, #56]	; (801a774 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801a73a:	490f      	ldr	r1, [pc, #60]	; (801a778 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801a73c:	480f      	ldr	r0, [pc, #60]	; (801a77c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801a73e:	f007 f9bb 	bl	8021ab8 <__aeabi_atexit>
 801a742:	4c0f      	ldr	r4, [pc, #60]	; (801a780 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801a744:	e8d4 3f8f 	ldab	r3, [r4]
 801a748:	07db      	lsls	r3, r3, #31
 801a74a:	d40b      	bmi.n	801a764 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 801a74c:	4620      	mov	r0, r4
 801a74e:	f007 f9ba 	bl	8021ac6 <__cxa_guard_acquire>
 801a752:	b138      	cbz	r0, 801a764 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x48>
 801a754:	4620      	mov	r0, r4
 801a756:	f007 f9c2 	bl	8021ade <__cxa_guard_release>
 801a75a:	4a06      	ldr	r2, [pc, #24]	; (801a774 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801a75c:	4909      	ldr	r1, [pc, #36]	; (801a784 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801a75e:	480a      	ldr	r0, [pc, #40]	; (801a788 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801a760:	f007 f9aa 	bl	8021ab8 <__aeabi_atexit>
 801a764:	4b05      	ldr	r3, [pc, #20]	; (801a77c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801a766:	622b      	str	r3, [r5, #32]
 801a768:	4b07      	ldr	r3, [pc, #28]	; (801a788 <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801a76a:	626b      	str	r3, [r5, #36]	; 0x24
 801a76c:	bd38      	pop	{r3, r4, r5, pc}
 801a76e:	bf00      	nop
 801a770:	2001ff5c 	.word	0x2001ff5c
 801a774:	20000000 	.word	0x20000000
 801a778:	08018847 	.word	0x08018847
 801a77c:	200000c4 	.word	0x200000c4
 801a780:	2001ff60 	.word	0x2001ff60
 801a784:	08018845 	.word	0x08018845
 801a788:	200000c8 	.word	0x200000c8

0801a78c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801a78c:	b538      	push	{r3, r4, r5, lr}
 801a78e:	4605      	mov	r5, r0
 801a790:	4c13      	ldr	r4, [pc, #76]	; (801a7e0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x54>)
 801a792:	e8d4 3f8f 	ldab	r3, [r4]
 801a796:	07da      	lsls	r2, r3, #31
 801a798:	d40b      	bmi.n	801a7b2 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 801a79a:	4620      	mov	r0, r4
 801a79c:	f007 f993 	bl	8021ac6 <__cxa_guard_acquire>
 801a7a0:	b138      	cbz	r0, 801a7b2 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x26>
 801a7a2:	4620      	mov	r0, r4
 801a7a4:	f007 f99b 	bl	8021ade <__cxa_guard_release>
 801a7a8:	4a0e      	ldr	r2, [pc, #56]	; (801a7e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801a7aa:	490f      	ldr	r1, [pc, #60]	; (801a7e8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801a7ac:	480f      	ldr	r0, [pc, #60]	; (801a7ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801a7ae:	f007 f983 	bl	8021ab8 <__aeabi_atexit>
 801a7b2:	4c0f      	ldr	r4, [pc, #60]	; (801a7f0 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801a7b4:	e8d4 3f8f 	ldab	r3, [r4]
 801a7b8:	07db      	lsls	r3, r3, #31
 801a7ba:	d40b      	bmi.n	801a7d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 801a7bc:	4620      	mov	r0, r4
 801a7be:	f007 f982 	bl	8021ac6 <__cxa_guard_acquire>
 801a7c2:	b138      	cbz	r0, 801a7d4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x48>
 801a7c4:	4620      	mov	r0, r4
 801a7c6:	f007 f98a 	bl	8021ade <__cxa_guard_release>
 801a7ca:	4a06      	ldr	r2, [pc, #24]	; (801a7e4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801a7cc:	4909      	ldr	r1, [pc, #36]	; (801a7f4 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801a7ce:	480a      	ldr	r0, [pc, #40]	; (801a7f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801a7d0:	f007 f972 	bl	8021ab8 <__aeabi_atexit>
 801a7d4:	4b05      	ldr	r3, [pc, #20]	; (801a7ec <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801a7d6:	61ab      	str	r3, [r5, #24]
 801a7d8:	4b07      	ldr	r3, [pc, #28]	; (801a7f8 <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801a7da:	61eb      	str	r3, [r5, #28]
 801a7dc:	bd38      	pop	{r3, r4, r5, pc}
 801a7de:	bf00      	nop
 801a7e0:	2001ff34 	.word	0x2001ff34
 801a7e4:	20000000 	.word	0x20000000
 801a7e8:	0801884b 	.word	0x0801884b
 801a7ec:	2000009c 	.word	0x2000009c
 801a7f0:	2001ff38 	.word	0x2001ff38
 801a7f4:	08018849 	.word	0x08018849
 801a7f8:	200000a0 	.word	0x200000a0

0801a7fc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>:
 801a7fc:	b510      	push	{r4, lr}
 801a7fe:	4604      	mov	r4, r0
 801a800:	f7ff ff8c 	bl	801a71c <_ZN8touchgfx8LCD16bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801a804:	4620      	mov	r0, r4
 801a806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a80a:	f7ff bfbf 	b.w	801a78c <_ZN8touchgfx8LCD16bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801a810 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801a810:	b538      	push	{r3, r4, r5, lr}
 801a812:	4605      	mov	r5, r0
 801a814:	4c13      	ldr	r4, [pc, #76]	; (801a864 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x54>)
 801a816:	e8d4 3f8f 	ldab	r3, [r4]
 801a81a:	07da      	lsls	r2, r3, #31
 801a81c:	d40b      	bmi.n	801a836 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 801a81e:	4620      	mov	r0, r4
 801a820:	f007 f951 	bl	8021ac6 <__cxa_guard_acquire>
 801a824:	b138      	cbz	r0, 801a836 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x26>
 801a826:	4620      	mov	r0, r4
 801a828:	f007 f959 	bl	8021ade <__cxa_guard_release>
 801a82c:	4a0e      	ldr	r2, [pc, #56]	; (801a868 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801a82e:	490f      	ldr	r1, [pc, #60]	; (801a86c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801a830:	480f      	ldr	r0, [pc, #60]	; (801a870 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801a832:	f007 f941 	bl	8021ab8 <__aeabi_atexit>
 801a836:	4c0f      	ldr	r4, [pc, #60]	; (801a874 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801a838:	e8d4 3f8f 	ldab	r3, [r4]
 801a83c:	07db      	lsls	r3, r3, #31
 801a83e:	d40b      	bmi.n	801a858 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 801a840:	4620      	mov	r0, r4
 801a842:	f007 f940 	bl	8021ac6 <__cxa_guard_acquire>
 801a846:	b138      	cbz	r0, 801a858 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x48>
 801a848:	4620      	mov	r0, r4
 801a84a:	f007 f948 	bl	8021ade <__cxa_guard_release>
 801a84e:	4a06      	ldr	r2, [pc, #24]	; (801a868 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801a850:	4909      	ldr	r1, [pc, #36]	; (801a878 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801a852:	480a      	ldr	r0, [pc, #40]	; (801a87c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801a854:	f007 f930 	bl	8021ab8 <__aeabi_atexit>
 801a858:	4b05      	ldr	r3, [pc, #20]	; (801a870 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801a85a:	632b      	str	r3, [r5, #48]	; 0x30
 801a85c:	4b07      	ldr	r3, [pc, #28]	; (801a87c <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801a85e:	636b      	str	r3, [r5, #52]	; 0x34
 801a860:	bd38      	pop	{r3, r4, r5, pc}
 801a862:	bf00      	nop
 801a864:	2001ff6c 	.word	0x2001ff6c
 801a868:	20000000 	.word	0x20000000
 801a86c:	0801883f 	.word	0x0801883f
 801a870:	200000d4 	.word	0x200000d4
 801a874:	2001ff70 	.word	0x2001ff70
 801a878:	0801883d 	.word	0x0801883d
 801a87c:	200000d8 	.word	0x200000d8

0801a880 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801a880:	b538      	push	{r3, r4, r5, lr}
 801a882:	4605      	mov	r5, r0
 801a884:	4c13      	ldr	r4, [pc, #76]	; (801a8d4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x54>)
 801a886:	e8d4 3f8f 	ldab	r3, [r4]
 801a88a:	07da      	lsls	r2, r3, #31
 801a88c:	d40b      	bmi.n	801a8a6 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 801a88e:	4620      	mov	r0, r4
 801a890:	f007 f919 	bl	8021ac6 <__cxa_guard_acquire>
 801a894:	b138      	cbz	r0, 801a8a6 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x26>
 801a896:	4620      	mov	r0, r4
 801a898:	f007 f921 	bl	8021ade <__cxa_guard_release>
 801a89c:	4a0e      	ldr	r2, [pc, #56]	; (801a8d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801a89e:	490f      	ldr	r1, [pc, #60]	; (801a8dc <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801a8a0:	480f      	ldr	r0, [pc, #60]	; (801a8e0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801a8a2:	f007 f909 	bl	8021ab8 <__aeabi_atexit>
 801a8a6:	4c0f      	ldr	r4, [pc, #60]	; (801a8e4 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801a8a8:	e8d4 3f8f 	ldab	r3, [r4]
 801a8ac:	07db      	lsls	r3, r3, #31
 801a8ae:	d40b      	bmi.n	801a8c8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 801a8b0:	4620      	mov	r0, r4
 801a8b2:	f007 f908 	bl	8021ac6 <__cxa_guard_acquire>
 801a8b6:	b138      	cbz	r0, 801a8c8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x48>
 801a8b8:	4620      	mov	r0, r4
 801a8ba:	f007 f910 	bl	8021ade <__cxa_guard_release>
 801a8be:	4a06      	ldr	r2, [pc, #24]	; (801a8d8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801a8c0:	4909      	ldr	r1, [pc, #36]	; (801a8e8 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801a8c2:	480a      	ldr	r0, [pc, #40]	; (801a8ec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801a8c4:	f007 f8f8 	bl	8021ab8 <__aeabi_atexit>
 801a8c8:	4b05      	ldr	r3, [pc, #20]	; (801a8e0 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801a8ca:	62ab      	str	r3, [r5, #40]	; 0x28
 801a8cc:	4b07      	ldr	r3, [pc, #28]	; (801a8ec <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801a8ce:	62eb      	str	r3, [r5, #44]	; 0x2c
 801a8d0:	bd38      	pop	{r3, r4, r5, pc}
 801a8d2:	bf00      	nop
 801a8d4:	2001ff3c 	.word	0x2001ff3c
 801a8d8:	20000000 	.word	0x20000000
 801a8dc:	08018843 	.word	0x08018843
 801a8e0:	200000a4 	.word	0x200000a4
 801a8e4:	2001ff40 	.word	0x2001ff40
 801a8e8:	08018841 	.word	0x08018841
 801a8ec:	200000a8 	.word	0x200000a8

0801a8f0 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>:
 801a8f0:	b510      	push	{r4, lr}
 801a8f2:	4604      	mov	r4, r0
 801a8f4:	f7ff ff8c 	bl	801a810 <_ZN8touchgfx8LCD16bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801a8f8:	4620      	mov	r0, r4
 801a8fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a8fe:	f7ff bfbf 	b.w	801a880 <_ZN8touchgfx8LCD16bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801a904 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>:
 801a904:	b538      	push	{r3, r4, r5, lr}
 801a906:	4605      	mov	r5, r0
 801a908:	4c13      	ldr	r4, [pc, #76]	; (801a958 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x54>)
 801a90a:	e8d4 3f8f 	ldab	r3, [r4]
 801a90e:	07da      	lsls	r2, r3, #31
 801a910:	d40b      	bmi.n	801a92a <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 801a912:	4620      	mov	r0, r4
 801a914:	f007 f8d7 	bl	8021ac6 <__cxa_guard_acquire>
 801a918:	b138      	cbz	r0, 801a92a <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x26>
 801a91a:	4620      	mov	r0, r4
 801a91c:	f007 f8df 	bl	8021ade <__cxa_guard_release>
 801a920:	4a0e      	ldr	r2, [pc, #56]	; (801a95c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801a922:	490f      	ldr	r1, [pc, #60]	; (801a960 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x5c>)
 801a924:	480f      	ldr	r0, [pc, #60]	; (801a964 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801a926:	f007 f8c7 	bl	8021ab8 <__aeabi_atexit>
 801a92a:	4c0f      	ldr	r4, [pc, #60]	; (801a968 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x64>)
 801a92c:	e8d4 3f8f 	ldab	r3, [r4]
 801a930:	07db      	lsls	r3, r3, #31
 801a932:	d40b      	bmi.n	801a94c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 801a934:	4620      	mov	r0, r4
 801a936:	f007 f8c6 	bl	8021ac6 <__cxa_guard_acquire>
 801a93a:	b138      	cbz	r0, 801a94c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x48>
 801a93c:	4620      	mov	r0, r4
 801a93e:	f007 f8ce 	bl	8021ade <__cxa_guard_release>
 801a942:	4a06      	ldr	r2, [pc, #24]	; (801a95c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x58>)
 801a944:	4909      	ldr	r1, [pc, #36]	; (801a96c <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x68>)
 801a946:	480a      	ldr	r0, [pc, #40]	; (801a970 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801a948:	f007 f8b6 	bl	8021ab8 <__aeabi_atexit>
 801a94c:	4b05      	ldr	r3, [pc, #20]	; (801a964 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x60>)
 801a94e:	652b      	str	r3, [r5, #80]	; 0x50
 801a950:	4b07      	ldr	r3, [pc, #28]	; (801a970 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv+0x6c>)
 801a952:	656b      	str	r3, [r5, #84]	; 0x54
 801a954:	bd38      	pop	{r3, r4, r5, pc}
 801a956:	bf00      	nop
 801a958:	2001ff74 	.word	0x2001ff74
 801a95c:	20000000 	.word	0x20000000
 801a960:	0801882f 	.word	0x0801882f
 801a964:	200000dc 	.word	0x200000dc
 801a968:	2001ff78 	.word	0x2001ff78
 801a96c:	0801882d 	.word	0x0801882d
 801a970:	200000e0 	.word	0x200000e0

0801a974 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>:
 801a974:	b538      	push	{r3, r4, r5, lr}
 801a976:	4605      	mov	r5, r0
 801a978:	4c13      	ldr	r4, [pc, #76]	; (801a9c8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x54>)
 801a97a:	e8d4 3f8f 	ldab	r3, [r4]
 801a97e:	07da      	lsls	r2, r3, #31
 801a980:	d40b      	bmi.n	801a99a <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 801a982:	4620      	mov	r0, r4
 801a984:	f007 f89f 	bl	8021ac6 <__cxa_guard_acquire>
 801a988:	b138      	cbz	r0, 801a99a <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x26>
 801a98a:	4620      	mov	r0, r4
 801a98c:	f007 f8a7 	bl	8021ade <__cxa_guard_release>
 801a990:	4a0e      	ldr	r2, [pc, #56]	; (801a9cc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801a992:	490f      	ldr	r1, [pc, #60]	; (801a9d0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x5c>)
 801a994:	480f      	ldr	r0, [pc, #60]	; (801a9d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801a996:	f007 f88f 	bl	8021ab8 <__aeabi_atexit>
 801a99a:	4c0f      	ldr	r4, [pc, #60]	; (801a9d8 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x64>)
 801a99c:	e8d4 3f8f 	ldab	r3, [r4]
 801a9a0:	07db      	lsls	r3, r3, #31
 801a9a2:	d40b      	bmi.n	801a9bc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 801a9a4:	4620      	mov	r0, r4
 801a9a6:	f007 f88e 	bl	8021ac6 <__cxa_guard_acquire>
 801a9aa:	b138      	cbz	r0, 801a9bc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x48>
 801a9ac:	4620      	mov	r0, r4
 801a9ae:	f007 f896 	bl	8021ade <__cxa_guard_release>
 801a9b2:	4a06      	ldr	r2, [pc, #24]	; (801a9cc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x58>)
 801a9b4:	4909      	ldr	r1, [pc, #36]	; (801a9dc <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x68>)
 801a9b6:	480a      	ldr	r0, [pc, #40]	; (801a9e0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801a9b8:	f007 f87e 	bl	8021ab8 <__aeabi_atexit>
 801a9bc:	4b05      	ldr	r3, [pc, #20]	; (801a9d4 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x60>)
 801a9be:	64ab      	str	r3, [r5, #72]	; 0x48
 801a9c0:	4b07      	ldr	r3, [pc, #28]	; (801a9e0 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv+0x6c>)
 801a9c2:	64eb      	str	r3, [r5, #76]	; 0x4c
 801a9c4:	bd38      	pop	{r3, r4, r5, pc}
 801a9c6:	bf00      	nop
 801a9c8:	2001ff7c 	.word	0x2001ff7c
 801a9cc:	20000000 	.word	0x20000000
 801a9d0:	08018833 	.word	0x08018833
 801a9d4:	200000e4 	.word	0x200000e4
 801a9d8:	2001ff80 	.word	0x2001ff80
 801a9dc:	08018831 	.word	0x08018831
 801a9e0:	200000e8 	.word	0x200000e8

0801a9e4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>:
 801a9e4:	b538      	push	{r3, r4, r5, lr}
 801a9e6:	4605      	mov	r5, r0
 801a9e8:	4c13      	ldr	r4, [pc, #76]	; (801aa38 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x54>)
 801a9ea:	e8d4 3f8f 	ldab	r3, [r4]
 801a9ee:	07da      	lsls	r2, r3, #31
 801a9f0:	d40b      	bmi.n	801aa0a <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 801a9f2:	4620      	mov	r0, r4
 801a9f4:	f007 f867 	bl	8021ac6 <__cxa_guard_acquire>
 801a9f8:	b138      	cbz	r0, 801aa0a <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x26>
 801a9fa:	4620      	mov	r0, r4
 801a9fc:	f007 f86f 	bl	8021ade <__cxa_guard_release>
 801aa00:	4a0e      	ldr	r2, [pc, #56]	; (801aa3c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801aa02:	490f      	ldr	r1, [pc, #60]	; (801aa40 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x5c>)
 801aa04:	480f      	ldr	r0, [pc, #60]	; (801aa44 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801aa06:	f007 f857 	bl	8021ab8 <__aeabi_atexit>
 801aa0a:	4c0f      	ldr	r4, [pc, #60]	; (801aa48 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x64>)
 801aa0c:	e8d4 3f8f 	ldab	r3, [r4]
 801aa10:	07db      	lsls	r3, r3, #31
 801aa12:	d40b      	bmi.n	801aa2c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 801aa14:	4620      	mov	r0, r4
 801aa16:	f007 f856 	bl	8021ac6 <__cxa_guard_acquire>
 801aa1a:	b138      	cbz	r0, 801aa2c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x48>
 801aa1c:	4620      	mov	r0, r4
 801aa1e:	f007 f85e 	bl	8021ade <__cxa_guard_release>
 801aa22:	4a06      	ldr	r2, [pc, #24]	; (801aa3c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x58>)
 801aa24:	4909      	ldr	r1, [pc, #36]	; (801aa4c <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x68>)
 801aa26:	480a      	ldr	r0, [pc, #40]	; (801aa50 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801aa28:	f007 f846 	bl	8021ab8 <__aeabi_atexit>
 801aa2c:	4b05      	ldr	r3, [pc, #20]	; (801aa44 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x60>)
 801aa2e:	642b      	str	r3, [r5, #64]	; 0x40
 801aa30:	4b07      	ldr	r3, [pc, #28]	; (801aa50 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv+0x6c>)
 801aa32:	646b      	str	r3, [r5, #68]	; 0x44
 801aa34:	bd38      	pop	{r3, r4, r5, pc}
 801aa36:	bf00      	nop
 801aa38:	2001ff44 	.word	0x2001ff44
 801aa3c:	20000000 	.word	0x20000000
 801aa40:	08018837 	.word	0x08018837
 801aa44:	200000ac 	.word	0x200000ac
 801aa48:	2001ff48 	.word	0x2001ff48
 801aa4c:	08018835 	.word	0x08018835
 801aa50:	200000b0 	.word	0x200000b0

0801aa54 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>:
 801aa54:	b538      	push	{r3, r4, r5, lr}
 801aa56:	4605      	mov	r5, r0
 801aa58:	4c13      	ldr	r4, [pc, #76]	; (801aaa8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x54>)
 801aa5a:	e8d4 3f8f 	ldab	r3, [r4]
 801aa5e:	07da      	lsls	r2, r3, #31
 801aa60:	d40b      	bmi.n	801aa7a <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 801aa62:	4620      	mov	r0, r4
 801aa64:	f007 f82f 	bl	8021ac6 <__cxa_guard_acquire>
 801aa68:	b138      	cbz	r0, 801aa7a <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x26>
 801aa6a:	4620      	mov	r0, r4
 801aa6c:	f007 f837 	bl	8021ade <__cxa_guard_release>
 801aa70:	4a0e      	ldr	r2, [pc, #56]	; (801aaac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801aa72:	490f      	ldr	r1, [pc, #60]	; (801aab0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x5c>)
 801aa74:	480f      	ldr	r0, [pc, #60]	; (801aab4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801aa76:	f007 f81f 	bl	8021ab8 <__aeabi_atexit>
 801aa7a:	4c0f      	ldr	r4, [pc, #60]	; (801aab8 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x64>)
 801aa7c:	e8d4 3f8f 	ldab	r3, [r4]
 801aa80:	07db      	lsls	r3, r3, #31
 801aa82:	d40b      	bmi.n	801aa9c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 801aa84:	4620      	mov	r0, r4
 801aa86:	f007 f81e 	bl	8021ac6 <__cxa_guard_acquire>
 801aa8a:	b138      	cbz	r0, 801aa9c <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x48>
 801aa8c:	4620      	mov	r0, r4
 801aa8e:	f007 f826 	bl	8021ade <__cxa_guard_release>
 801aa92:	4a06      	ldr	r2, [pc, #24]	; (801aaac <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x58>)
 801aa94:	4909      	ldr	r1, [pc, #36]	; (801aabc <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x68>)
 801aa96:	480a      	ldr	r0, [pc, #40]	; (801aac0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801aa98:	f007 f80e 	bl	8021ab8 <__aeabi_atexit>
 801aa9c:	4b05      	ldr	r3, [pc, #20]	; (801aab4 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x60>)
 801aa9e:	63ab      	str	r3, [r5, #56]	; 0x38
 801aaa0:	4b07      	ldr	r3, [pc, #28]	; (801aac0 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv+0x6c>)
 801aaa2:	63eb      	str	r3, [r5, #60]	; 0x3c
 801aaa4:	bd38      	pop	{r3, r4, r5, pc}
 801aaa6:	bf00      	nop
 801aaa8:	2001ff64 	.word	0x2001ff64
 801aaac:	20000000 	.word	0x20000000
 801aab0:	0801883b 	.word	0x0801883b
 801aab4:	200000cc 	.word	0x200000cc
 801aab8:	2001ff68 	.word	0x2001ff68
 801aabc:	08018839 	.word	0x08018839
 801aac0:	200000d0 	.word	0x200000d0

0801aac4 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>:
 801aac4:	b510      	push	{r4, lr}
 801aac6:	4604      	mov	r4, r0
 801aac8:	f7ff ff1c 	bl	801a904 <_ZN8touchgfx8LCD16bpp54enableTextureMapperRGB565_Opaque_BilinearInterpolationEv>
 801aacc:	4620      	mov	r0, r4
 801aace:	f7ff ff89 	bl	801a9e4 <_ZN8touchgfx8LCD16bpp48enableTextureMapperRGB565_Opaque_NearestNeighborEv>
 801aad2:	4620      	mov	r0, r4
 801aad4:	f7ff ff4e 	bl	801a974 <_ZN8touchgfx8LCD16bpp57enableTextureMapperRGB565_NonOpaque_BilinearInterpolationEv>
 801aad8:	4620      	mov	r0, r4
 801aada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aade:	f7ff bfb9 	b.w	801aa54 <_ZN8touchgfx8LCD16bpp51enableTextureMapperRGB565_NonOpaque_NearestNeighborEv>
	...

0801aae4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801aae4:	b538      	push	{r3, r4, r5, lr}
 801aae6:	4605      	mov	r5, r0
 801aae8:	4c13      	ldr	r4, [pc, #76]	; (801ab38 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x54>)
 801aaea:	e8d4 3f8f 	ldab	r3, [r4]
 801aaee:	07da      	lsls	r2, r3, #31
 801aaf0:	d40b      	bmi.n	801ab0a <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 801aaf2:	4620      	mov	r0, r4
 801aaf4:	f006 ffe7 	bl	8021ac6 <__cxa_guard_acquire>
 801aaf8:	b138      	cbz	r0, 801ab0a <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x26>
 801aafa:	4620      	mov	r0, r4
 801aafc:	f006 ffef 	bl	8021ade <__cxa_guard_release>
 801ab00:	4a0e      	ldr	r2, [pc, #56]	; (801ab3c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801ab02:	490f      	ldr	r1, [pc, #60]	; (801ab40 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801ab04:	480f      	ldr	r0, [pc, #60]	; (801ab44 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801ab06:	f006 ffd7 	bl	8021ab8 <__aeabi_atexit>
 801ab0a:	4c0f      	ldr	r4, [pc, #60]	; (801ab48 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801ab0c:	e8d4 3f8f 	ldab	r3, [r4]
 801ab10:	07db      	lsls	r3, r3, #31
 801ab12:	d40b      	bmi.n	801ab2c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 801ab14:	4620      	mov	r0, r4
 801ab16:	f006 ffd6 	bl	8021ac6 <__cxa_guard_acquire>
 801ab1a:	b138      	cbz	r0, 801ab2c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x48>
 801ab1c:	4620      	mov	r0, r4
 801ab1e:	f006 ffde 	bl	8021ade <__cxa_guard_release>
 801ab22:	4a06      	ldr	r2, [pc, #24]	; (801ab3c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801ab24:	4909      	ldr	r1, [pc, #36]	; (801ab4c <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801ab26:	480a      	ldr	r0, [pc, #40]	; (801ab50 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801ab28:	f006 ffc6 	bl	8021ab8 <__aeabi_atexit>
 801ab2c:	4b05      	ldr	r3, [pc, #20]	; (801ab44 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801ab2e:	662b      	str	r3, [r5, #96]	; 0x60
 801ab30:	4b07      	ldr	r3, [pc, #28]	; (801ab50 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801ab32:	666b      	str	r3, [r5, #100]	; 0x64
 801ab34:	bd38      	pop	{r3, r4, r5, pc}
 801ab36:	bf00      	nop
 801ab38:	2001ff4c 	.word	0x2001ff4c
 801ab3c:	20000000 	.word	0x20000000
 801ab40:	08018827 	.word	0x08018827
 801ab44:	200000b4 	.word	0x200000b4
 801ab48:	2001ff50 	.word	0x2001ff50
 801ab4c:	08018825 	.word	0x08018825
 801ab50:	200000b8 	.word	0x200000b8

0801ab54 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801ab54:	b538      	push	{r3, r4, r5, lr}
 801ab56:	4605      	mov	r5, r0
 801ab58:	4c13      	ldr	r4, [pc, #76]	; (801aba8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x54>)
 801ab5a:	e8d4 3f8f 	ldab	r3, [r4]
 801ab5e:	07da      	lsls	r2, r3, #31
 801ab60:	d40b      	bmi.n	801ab7a <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 801ab62:	4620      	mov	r0, r4
 801ab64:	f006 ffaf 	bl	8021ac6 <__cxa_guard_acquire>
 801ab68:	b138      	cbz	r0, 801ab7a <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x26>
 801ab6a:	4620      	mov	r0, r4
 801ab6c:	f006 ffb7 	bl	8021ade <__cxa_guard_release>
 801ab70:	4a0e      	ldr	r2, [pc, #56]	; (801abac <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801ab72:	490f      	ldr	r1, [pc, #60]	; (801abb0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801ab74:	480f      	ldr	r0, [pc, #60]	; (801abb4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801ab76:	f006 ff9f 	bl	8021ab8 <__aeabi_atexit>
 801ab7a:	4c0f      	ldr	r4, [pc, #60]	; (801abb8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801ab7c:	e8d4 3f8f 	ldab	r3, [r4]
 801ab80:	07db      	lsls	r3, r3, #31
 801ab82:	d40b      	bmi.n	801ab9c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 801ab84:	4620      	mov	r0, r4
 801ab86:	f006 ff9e 	bl	8021ac6 <__cxa_guard_acquire>
 801ab8a:	b138      	cbz	r0, 801ab9c <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x48>
 801ab8c:	4620      	mov	r0, r4
 801ab8e:	f006 ffa6 	bl	8021ade <__cxa_guard_release>
 801ab92:	4a06      	ldr	r2, [pc, #24]	; (801abac <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801ab94:	4909      	ldr	r1, [pc, #36]	; (801abbc <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801ab96:	480a      	ldr	r0, [pc, #40]	; (801abc0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801ab98:	f006 ff8e 	bl	8021ab8 <__aeabi_atexit>
 801ab9c:	4b05      	ldr	r3, [pc, #20]	; (801abb4 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801ab9e:	65ab      	str	r3, [r5, #88]	; 0x58
 801aba0:	4b07      	ldr	r3, [pc, #28]	; (801abc0 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801aba2:	65eb      	str	r3, [r5, #92]	; 0x5c
 801aba4:	bd38      	pop	{r3, r4, r5, pc}
 801aba6:	bf00      	nop
 801aba8:	2001ff24 	.word	0x2001ff24
 801abac:	20000000 	.word	0x20000000
 801abb0:	0801882b 	.word	0x0801882b
 801abb4:	2000008c 	.word	0x2000008c
 801abb8:	2001ff28 	.word	0x2001ff28
 801abbc:	08018829 	.word	0x08018829
 801abc0:	20000090 	.word	0x20000090

0801abc4 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>:
 801abc4:	b510      	push	{r4, lr}
 801abc6:	4604      	mov	r4, r0
 801abc8:	f7ff ff8c 	bl	801aae4 <_ZN8touchgfx8LCD16bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801abcc:	4620      	mov	r0, r4
 801abce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801abd2:	f7ff bfbf 	b.w	801ab54 <_ZN8touchgfx8LCD16bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801abd8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801abd8:	b538      	push	{r3, r4, r5, lr}
 801abda:	4605      	mov	r5, r0
 801abdc:	4c13      	ldr	r4, [pc, #76]	; (801ac2c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x54>)
 801abde:	e8d4 3f8f 	ldab	r3, [r4]
 801abe2:	07da      	lsls	r2, r3, #31
 801abe4:	d40b      	bmi.n	801abfe <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 801abe6:	4620      	mov	r0, r4
 801abe8:	f006 ff6d 	bl	8021ac6 <__cxa_guard_acquire>
 801abec:	b138      	cbz	r0, 801abfe <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x26>
 801abee:	4620      	mov	r0, r4
 801abf0:	f006 ff75 	bl	8021ade <__cxa_guard_release>
 801abf4:	4a0e      	ldr	r2, [pc, #56]	; (801ac30 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801abf6:	490f      	ldr	r1, [pc, #60]	; (801ac34 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801abf8:	480f      	ldr	r0, [pc, #60]	; (801ac38 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801abfa:	f006 ff5d 	bl	8021ab8 <__aeabi_atexit>
 801abfe:	4c0f      	ldr	r4, [pc, #60]	; (801ac3c <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801ac00:	e8d4 3f8f 	ldab	r3, [r4]
 801ac04:	07db      	lsls	r3, r3, #31
 801ac06:	d40b      	bmi.n	801ac20 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 801ac08:	4620      	mov	r0, r4
 801ac0a:	f006 ff5c 	bl	8021ac6 <__cxa_guard_acquire>
 801ac0e:	b138      	cbz	r0, 801ac20 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x48>
 801ac10:	4620      	mov	r0, r4
 801ac12:	f006 ff64 	bl	8021ade <__cxa_guard_release>
 801ac16:	4a06      	ldr	r2, [pc, #24]	; (801ac30 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801ac18:	4909      	ldr	r1, [pc, #36]	; (801ac40 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801ac1a:	480a      	ldr	r0, [pc, #40]	; (801ac44 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801ac1c:	f006 ff4c 	bl	8021ab8 <__aeabi_atexit>
 801ac20:	4b05      	ldr	r3, [pc, #20]	; (801ac38 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801ac22:	672b      	str	r3, [r5, #112]	; 0x70
 801ac24:	4b07      	ldr	r3, [pc, #28]	; (801ac44 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801ac26:	676b      	str	r3, [r5, #116]	; 0x74
 801ac28:	bd38      	pop	{r3, r4, r5, pc}
 801ac2a:	bf00      	nop
 801ac2c:	2001ff1c 	.word	0x2001ff1c
 801ac30:	20000000 	.word	0x20000000
 801ac34:	0801881f 	.word	0x0801881f
 801ac38:	20000084 	.word	0x20000084
 801ac3c:	2001ff20 	.word	0x2001ff20
 801ac40:	0801881d 	.word	0x0801881d
 801ac44:	20000088 	.word	0x20000088

0801ac48 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>:
 801ac48:	b538      	push	{r3, r4, r5, lr}
 801ac4a:	4605      	mov	r5, r0
 801ac4c:	4c13      	ldr	r4, [pc, #76]	; (801ac9c <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x54>)
 801ac4e:	e8d4 3f8f 	ldab	r3, [r4]
 801ac52:	07da      	lsls	r2, r3, #31
 801ac54:	d40b      	bmi.n	801ac6e <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 801ac56:	4620      	mov	r0, r4
 801ac58:	f006 ff35 	bl	8021ac6 <__cxa_guard_acquire>
 801ac5c:	b138      	cbz	r0, 801ac6e <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x26>
 801ac5e:	4620      	mov	r0, r4
 801ac60:	f006 ff3d 	bl	8021ade <__cxa_guard_release>
 801ac64:	4a0e      	ldr	r2, [pc, #56]	; (801aca0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801ac66:	490f      	ldr	r1, [pc, #60]	; (801aca4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801ac68:	480f      	ldr	r0, [pc, #60]	; (801aca8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801ac6a:	f006 ff25 	bl	8021ab8 <__aeabi_atexit>
 801ac6e:	4c0f      	ldr	r4, [pc, #60]	; (801acac <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801ac70:	e8d4 3f8f 	ldab	r3, [r4]
 801ac74:	07db      	lsls	r3, r3, #31
 801ac76:	d40b      	bmi.n	801ac90 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 801ac78:	4620      	mov	r0, r4
 801ac7a:	f006 ff24 	bl	8021ac6 <__cxa_guard_acquire>
 801ac7e:	b138      	cbz	r0, 801ac90 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x48>
 801ac80:	4620      	mov	r0, r4
 801ac82:	f006 ff2c 	bl	8021ade <__cxa_guard_release>
 801ac86:	4a06      	ldr	r2, [pc, #24]	; (801aca0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801ac88:	4909      	ldr	r1, [pc, #36]	; (801acb0 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801ac8a:	480a      	ldr	r0, [pc, #40]	; (801acb4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801ac8c:	f006 ff14 	bl	8021ab8 <__aeabi_atexit>
 801ac90:	4b05      	ldr	r3, [pc, #20]	; (801aca8 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801ac92:	66ab      	str	r3, [r5, #104]	; 0x68
 801ac94:	4b07      	ldr	r3, [pc, #28]	; (801acb4 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801ac96:	66eb      	str	r3, [r5, #108]	; 0x6c
 801ac98:	bd38      	pop	{r3, r4, r5, pc}
 801ac9a:	bf00      	nop
 801ac9c:	2001ff14 	.word	0x2001ff14
 801aca0:	20000000 	.word	0x20000000
 801aca4:	08018823 	.word	0x08018823
 801aca8:	2000007c 	.word	0x2000007c
 801acac:	2001ff18 	.word	0x2001ff18
 801acb0:	08018821 	.word	0x08018821
 801acb4:	20000080 	.word	0x20000080

0801acb8 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>:
 801acb8:	b510      	push	{r4, lr}
 801acba:	4604      	mov	r4, r0
 801acbc:	f7ff ff8c 	bl	801abd8 <_ZN8touchgfx8LCD16bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801acc0:	4620      	mov	r0, r4
 801acc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801acc6:	f7ff bfbf 	b.w	801ac48 <_ZN8touchgfx8LCD16bpp37enableTextureMapperA4_NearestNeighborEv>

0801acca <_ZN8touchgfx8LCD16bpp22enableTextureMapperAllEv>:
 801acca:	b510      	push	{r4, lr}
 801accc:	4604      	mov	r4, r0
 801acce:	f7ff fff3 	bl	801acb8 <_ZN8touchgfx8LCD16bpp21enableTextureMapperA4Ev>
 801acd2:	4620      	mov	r0, r4
 801acd4:	f7ff ff76 	bl	801abc4 <_ZN8touchgfx8LCD16bpp27enableTextureMapperARGB8888Ev>
 801acd8:	4620      	mov	r0, r4
 801acda:	f7ff fe09 	bl	801a8f0 <_ZN8touchgfx8LCD16bpp30enableTextureMapperL8_ARGB8888Ev>
 801acde:	4620      	mov	r0, r4
 801ace0:	f7ff fd12 	bl	801a708 <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB565Ev>
 801ace4:	4620      	mov	r0, r4
 801ace6:	f7ff fd89 	bl	801a7fc <_ZN8touchgfx8LCD16bpp28enableTextureMapperL8_RGB888Ev>
 801acea:	4620      	mov	r0, r4
 801acec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801acf0:	f7ff bee8 	b.w	801aac4 <_ZN8touchgfx8LCD16bpp25enableTextureMapperRGB565Ev>

0801acf4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>:
 801acf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801acf8:	f9bd e024 	ldrsh.w	lr, [sp, #36]	; 0x24
 801acfc:	e9dd 450b 	ldrd	r4, r5, [sp, #44]	; 0x2c
 801ad00:	fb05 4c0e 	mla	ip, r5, lr, r4
 801ad04:	2d00      	cmp	r5, #0
 801ad06:	f9bd b028 	ldrsh.w	fp, [sp, #40]	; 0x28
 801ad0a:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 801ad0e:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
 801ad12:	f89d 603c 	ldrb.w	r6, [sp, #60]	; 0x3c
 801ad16:	eb02 0a0c 	add.w	sl, r2, ip
 801ad1a:	8808      	ldrh	r0, [r1, #0]
 801ad1c:	f2c0 80b0 	blt.w	801ae80 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801ad20:	45ab      	cmp	fp, r5
 801ad22:	f340 80ad 	ble.w	801ae80 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x18c>
 801ad26:	2c00      	cmp	r4, #0
 801ad28:	f2c0 80a8 	blt.w	801ae7c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801ad2c:	45a6      	cmp	lr, r4
 801ad2e:	f340 80a5 	ble.w	801ae7c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x188>
 801ad32:	f812 200c 	ldrb.w	r2, [r2, ip]
 801ad36:	f833 8012 	ldrh.w	r8, [r3, r2, lsl #1]
 801ad3a:	1c62      	adds	r2, r4, #1
 801ad3c:	f100 80a3 	bmi.w	801ae86 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801ad40:	4596      	cmp	lr, r2
 801ad42:	f340 80a0 	ble.w	801ae86 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801ad46:	f1b9 0f00 	cmp.w	r9, #0
 801ad4a:	f000 809c 	beq.w	801ae86 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x192>
 801ad4e:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801ad52:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801ad56:	3501      	adds	r5, #1
 801ad58:	f100 8099 	bmi.w	801ae8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801ad5c:	45ab      	cmp	fp, r5
 801ad5e:	f340 8096 	ble.w	801ae8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801ad62:	2f00      	cmp	r7, #0
 801ad64:	f000 8093 	beq.w	801ae8e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x19a>
 801ad68:	2c00      	cmp	r4, #0
 801ad6a:	f2c0 808e 	blt.w	801ae8a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801ad6e:	45a6      	cmp	lr, r4
 801ad70:	f340 808b 	ble.w	801ae8a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x196>
 801ad74:	f81a 200e 	ldrb.w	r2, [sl, lr]
 801ad78:	f833 5012 	ldrh.w	r5, [r3, r2, lsl #1]
 801ad7c:	3401      	adds	r4, #1
 801ad7e:	f100 8089 	bmi.w	801ae94 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801ad82:	45a6      	cmp	lr, r4
 801ad84:	f340 8086 	ble.w	801ae94 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801ad88:	f1b9 0f00 	cmp.w	r9, #0
 801ad8c:	f000 8082 	beq.w	801ae94 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x1a0>
 801ad90:	44d6      	add	lr, sl
 801ad92:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801ad96:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 801ad9a:	fb19 fe07 	smulbb	lr, r9, r7
 801ad9e:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801ada2:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801ada6:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801adaa:	ea44 0808 	orr.w	r8, r4, r8
 801adae:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801adb2:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801adb6:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801adba:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801adbe:	ea44 0c0c 	orr.w	ip, r4, ip
 801adc2:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801adc6:	fb04 f40c 	mul.w	r4, r4, ip
 801adca:	f1c7 0210 	rsb	r2, r7, #16
 801adce:	eba2 0209 	sub.w	r2, r2, r9
 801add2:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801add6:	fb02 4808 	mla	r8, r2, r8, r4
 801adda:	b2b4      	uxth	r4, r6
 801addc:	43f6      	mvns	r6, r6
 801adde:	041a      	lsls	r2, r3, #16
 801ade0:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801ade4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ade8:	4313      	orrs	r3, r2
 801adea:	fb0e 8303 	mla	r3, lr, r3, r8
 801adee:	042a      	lsls	r2, r5, #16
 801adf0:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801adf4:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801adf8:	432a      	orrs	r2, r5
 801adfa:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801adfe:	fb07 3202 	mla	r2, r7, r2, r3
 801ae02:	0d53      	lsrs	r3, r2, #21
 801ae04:	0952      	lsrs	r2, r2, #5
 801ae06:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ae0a:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ae0e:	431a      	orrs	r2, r3
 801ae10:	b293      	uxth	r3, r2
 801ae12:	1202      	asrs	r2, r0, #8
 801ae14:	b2f6      	uxtb	r6, r6
 801ae16:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801ae1a:	fb12 f206 	smulbb	r2, r2, r6
 801ae1e:	10c7      	asrs	r7, r0, #3
 801ae20:	00c0      	lsls	r0, r0, #3
 801ae22:	b2c0      	uxtb	r0, r0
 801ae24:	121d      	asrs	r5, r3, #8
 801ae26:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ae2a:	fb10 f006 	smulbb	r0, r0, r6
 801ae2e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801ae32:	fb17 f706 	smulbb	r7, r7, r6
 801ae36:	fb05 2504 	mla	r5, r5, r4, r2
 801ae3a:	10da      	asrs	r2, r3, #3
 801ae3c:	00db      	lsls	r3, r3, #3
 801ae3e:	b2db      	uxtb	r3, r3
 801ae40:	fb03 0004 	mla	r0, r3, r4, r0
 801ae44:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801ae48:	fb02 7204 	mla	r2, r2, r4, r7
 801ae4c:	b2ad      	uxth	r5, r5
 801ae4e:	b280      	uxth	r0, r0
 801ae50:	1c6b      	adds	r3, r5, #1
 801ae52:	b292      	uxth	r2, r2
 801ae54:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801ae58:	1c43      	adds	r3, r0, #1
 801ae5a:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801ae5e:	1c50      	adds	r0, r2, #1
 801ae60:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801ae64:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801ae68:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ae6c:	0952      	lsrs	r2, r2, #5
 801ae6e:	432b      	orrs	r3, r5
 801ae70:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ae74:	4313      	orrs	r3, r2
 801ae76:	800b      	strh	r3, [r1, #0]
 801ae78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ae7c:	4680      	mov	r8, r0
 801ae7e:	e75c      	b.n	801ad3a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x46>
 801ae80:	4684      	mov	ip, r0
 801ae82:	4680      	mov	r8, r0
 801ae84:	e767      	b.n	801ad56 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801ae86:	4684      	mov	ip, r0
 801ae88:	e765      	b.n	801ad56 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x62>
 801ae8a:	4605      	mov	r5, r0
 801ae8c:	e776      	b.n	801ad7c <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0x88>
 801ae8e:	4603      	mov	r3, r0
 801ae90:	4605      	mov	r5, r0
 801ae92:	e782      	b.n	801ad9a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>
 801ae94:	4603      	mov	r3, r0
 801ae96:	e780      	b.n	801ad9a <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh+0xa6>

0801ae98 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ae98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae9c:	b099      	sub	sp, #100	; 0x64
 801ae9e:	9215      	str	r2, [sp, #84]	; 0x54
 801aea0:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 801aea2:	9016      	str	r0, [sp, #88]	; 0x58
 801aea4:	9309      	str	r3, [sp, #36]	; 0x24
 801aea6:	6850      	ldr	r0, [r2, #4]
 801aea8:	f89d 30ac 	ldrb.w	r3, [sp, #172]	; 0xac
 801aeac:	910c      	str	r1, [sp, #48]	; 0x30
 801aeae:	930d      	str	r3, [sp, #52]	; 0x34
 801aeb0:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	; 0xa0
 801aeb4:	fb00 1303 	mla	r3, r0, r3, r1
 801aeb8:	e9dd a523 	ldrd	sl, r5, [sp, #140]	; 0x8c
 801aebc:	6812      	ldr	r2, [r2, #0]
 801aebe:	eb02 0843 	add.w	r8, r2, r3, lsl #1
 801aec2:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801aec4:	681b      	ldr	r3, [r3, #0]
 801aec6:	930b      	str	r3, [sp, #44]	; 0x2c
 801aec8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801aeca:	685e      	ldr	r6, [r3, #4]
 801aecc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aece:	3604      	adds	r6, #4
 801aed0:	43db      	mvns	r3, r3
 801aed2:	b2db      	uxtb	r3, r3
 801aed4:	930a      	str	r3, [sp, #40]	; 0x28
 801aed6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801aed8:	2b00      	cmp	r3, #0
 801aeda:	dc03      	bgt.n	801aee4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801aedc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801aede:	2b00      	cmp	r3, #0
 801aee0:	f340 8225 	ble.w	801b32e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801aee4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801aee6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801aeea:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801aeee:	1e48      	subs	r0, r1, #1
 801aef0:	1e57      	subs	r7, r2, #1
 801aef2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aef4:	2b00      	cmp	r3, #0
 801aef6:	f340 80e3 	ble.w	801b0c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 801aefa:	ea5f 4c2a 	movs.w	ip, sl, asr #16
 801aefe:	ea4f 4325 	mov.w	r3, r5, asr #16
 801af02:	d406      	bmi.n	801af12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801af04:	4584      	cmp	ip, r0
 801af06:	da04      	bge.n	801af12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801af08:	2b00      	cmp	r3, #0
 801af0a:	db02      	blt.n	801af12 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801af0c:	42bb      	cmp	r3, r7
 801af0e:	f2c0 80d8 	blt.w	801b0c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801af12:	f11c 0c01 	adds.w	ip, ip, #1
 801af16:	f100 80c9 	bmi.w	801b0ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801af1a:	4561      	cmp	r1, ip
 801af1c:	f2c0 80c6 	blt.w	801b0ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801af20:	3301      	adds	r3, #1
 801af22:	f100 80c3 	bmi.w	801b0ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801af26:	429a      	cmp	r2, r3
 801af28:	f2c0 80c0 	blt.w	801b0ac <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801af2c:	4647      	mov	r7, r8
 801af2e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801af32:	f1bb 0f00 	cmp.w	fp, #0
 801af36:	f340 80e3 	ble.w	801b100 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801af3a:	9a2a      	ldr	r2, [sp, #168]	; 0xa8
 801af3c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801af3e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801af42:	ea5f 422a 	movs.w	r2, sl, asr #16
 801af46:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801af4a:	f3ca 3003 	ubfx	r0, sl, #12, #4
 801af4e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801af52:	689b      	ldr	r3, [r3, #8]
 801af54:	f100 8121 	bmi.w	801b19a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801af58:	f103 39ff 	add.w	r9, r3, #4294967295
 801af5c:	454a      	cmp	r2, r9
 801af5e:	f280 811c 	bge.w	801b19a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801af62:	f1bc 0f00 	cmp.w	ip, #0
 801af66:	f2c0 8118 	blt.w	801b19a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801af6a:	f10e 39ff 	add.w	r9, lr, #4294967295
 801af6e:	45cc      	cmp	ip, r9
 801af70:	f280 8113 	bge.w	801b19a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x302>
 801af74:	b21b      	sxth	r3, r3
 801af76:	fb0c 2203 	mla	r2, ip, r3, r2
 801af7a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801af7c:	eb04 0902 	add.w	r9, r4, r2
 801af80:	5ca2      	ldrb	r2, [r4, r2]
 801af82:	f836 e012 	ldrh.w	lr, [r6, r2, lsl #1]
 801af86:	2800      	cmp	r0, #0
 801af88:	f000 80fe 	beq.w	801b188 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801af8c:	f899 2001 	ldrb.w	r2, [r9, #1]
 801af90:	f836 2012 	ldrh.w	r2, [r6, r2, lsl #1]
 801af94:	9211      	str	r2, [sp, #68]	; 0x44
 801af96:	b151      	cbz	r1, 801afae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801af98:	eb09 0203 	add.w	r2, r9, r3
 801af9c:	f819 3003 	ldrb.w	r3, [r9, r3]
 801afa0:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801afa4:	930f      	str	r3, [sp, #60]	; 0x3c
 801afa6:	7853      	ldrb	r3, [r2, #1]
 801afa8:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801afac:	9312      	str	r3, [sp, #72]	; 0x48
 801afae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801afb0:	fb10 f201 	smulbb	r2, r0, r1
 801afb4:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801afb8:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801afbc:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801afc0:	ea4c 0c03 	orr.w	ip, ip, r3
 801afc4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801afc6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801afc8:	041b      	lsls	r3, r3, #16
 801afca:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801afce:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801afd2:	10d2      	asrs	r2, r2, #3
 801afd4:	4323      	orrs	r3, r4
 801afd6:	4353      	muls	r3, r2
 801afd8:	ebc2 0940 	rsb	r9, r2, r0, lsl #1
 801afdc:	fb09 330c 	mla	r3, r9, ip, r3
 801afe0:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801afe4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801afe8:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801afec:	ea4c 0e0e 	orr.w	lr, ip, lr
 801aff0:	f1c1 0c10 	rsb	ip, r1, #16
 801aff4:	ebac 0c00 	sub.w	ip, ip, r0
 801aff8:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801affc:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801b000:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b002:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801b006:	0418      	lsls	r0, r3, #16
 801b008:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801b00c:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801b010:	4318      	orrs	r0, r3
 801b012:	fb02 c200 	mla	r2, r2, r0, ip
 801b016:	8838      	ldrh	r0, [r7, #0]
 801b018:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801b01a:	0d53      	lsrs	r3, r2, #21
 801b01c:	1201      	asrs	r1, r0, #8
 801b01e:	0952      	lsrs	r2, r2, #5
 801b020:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b024:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801b028:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801b02c:	431a      	orrs	r2, r3
 801b02e:	fb11 f104 	smulbb	r1, r1, r4
 801b032:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801b036:	00c0      	lsls	r0, r0, #3
 801b038:	b292      	uxth	r2, r2
 801b03a:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801b03e:	b2c0      	uxtb	r0, r0
 801b040:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801b044:	ea4f 2c22 	mov.w	ip, r2, asr #8
 801b048:	fb1e fe04 	smulbb	lr, lr, r4
 801b04c:	fb10 f004 	smulbb	r0, r0, r4
 801b050:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801b054:	fb0c 1c03 	mla	ip, ip, r3, r1
 801b058:	10d1      	asrs	r1, r2, #3
 801b05a:	00d2      	lsls	r2, r2, #3
 801b05c:	b2d2      	uxtb	r2, r2
 801b05e:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801b062:	fb01 e103 	mla	r1, r1, r3, lr
 801b066:	fb02 0303 	mla	r3, r2, r3, r0
 801b06a:	fa1f fc8c 	uxth.w	ip, ip
 801b06e:	b29a      	uxth	r2, r3
 801b070:	f10c 0301 	add.w	r3, ip, #1
 801b074:	b289      	uxth	r1, r1
 801b076:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801b07a:	1c53      	adds	r3, r2, #1
 801b07c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801b080:	1c4a      	adds	r2, r1, #1
 801b082:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801b086:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801b08a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801b08e:	0949      	lsrs	r1, r1, #5
 801b090:	ea43 030c 	orr.w	r3, r3, ip
 801b094:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801b098:	430b      	orrs	r3, r1
 801b09a:	803b      	strh	r3, [r7, #0]
 801b09c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801b09e:	3702      	adds	r7, #2
 801b0a0:	449a      	add	sl, r3
 801b0a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b0a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b0a8:	441d      	add	r5, r3
 801b0aa:	e742      	b.n	801af32 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801b0ac:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801b0ae:	f108 0802 	add.w	r8, r8, #2
 801b0b2:	449a      	add	sl, r3
 801b0b4:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b0b6:	441d      	add	r5, r3
 801b0b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b0ba:	3b01      	subs	r3, #1
 801b0bc:	9309      	str	r3, [sp, #36]	; 0x24
 801b0be:	e718      	b.n	801aef2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801b0c0:	d023      	beq.n	801b10a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x272>
 801b0c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b0c4:	9825      	ldr	r0, [sp, #148]	; 0x94
 801b0c6:	3b01      	subs	r3, #1
 801b0c8:	fb00 a003 	mla	r0, r0, r3, sl
 801b0cc:	1400      	asrs	r0, r0, #16
 801b0ce:	f53f af2d 	bmi.w	801af2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b0d2:	3901      	subs	r1, #1
 801b0d4:	4288      	cmp	r0, r1
 801b0d6:	f6bf af29 	bge.w	801af2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b0da:	9926      	ldr	r1, [sp, #152]	; 0x98
 801b0dc:	fb01 5303 	mla	r3, r1, r3, r5
 801b0e0:	141b      	asrs	r3, r3, #16
 801b0e2:	f53f af23 	bmi.w	801af2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b0e6:	3a01      	subs	r2, #1
 801b0e8:	4293      	cmp	r3, r2
 801b0ea:	f6bf af1f 	bge.w	801af2c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b0ee:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801b0f2:	f8bd 9034 	ldrh.w	r9, [sp, #52]	; 0x34
 801b0f6:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801b0fa:	f1be 0f00 	cmp.w	lr, #0
 801b0fe:	dc6c      	bgt.n	801b1da <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801b100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b102:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b106:	eb08 0844 	add.w	r8, r8, r4, lsl #1
 801b10a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b10c:	2b00      	cmp	r3, #0
 801b10e:	f340 810e 	ble.w	801b32e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x496>
 801b112:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801b116:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b11a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b11e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b122:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b126:	eef0 6a62 	vmov.f32	s13, s5
 801b12a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b12e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b132:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b136:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b13a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b13e:	ee16 aa90 	vmov	sl, s13
 801b142:	eef0 6a43 	vmov.f32	s13, s6
 801b146:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b14a:	ee12 2a90 	vmov	r2, s5
 801b14e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b152:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801b154:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b158:	fb92 f3f3 	sdiv	r3, r2, r3
 801b15c:	ee13 2a10 	vmov	r2, s6
 801b160:	9325      	str	r3, [sp, #148]	; 0x94
 801b162:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801b164:	ee16 5a90 	vmov	r5, s13
 801b168:	fb92 f3f3 	sdiv	r3, r2, r3
 801b16c:	9326      	str	r3, [sp, #152]	; 0x98
 801b16e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b170:	9a15      	ldr	r2, [sp, #84]	; 0x54
 801b172:	3b01      	subs	r3, #1
 801b174:	930c      	str	r3, [sp, #48]	; 0x30
 801b176:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801b178:	bf08      	it	eq
 801b17a:	4613      	moveq	r3, r2
 801b17c:	eeb0 3a67 	vmov.f32	s6, s15
 801b180:	9309      	str	r3, [sp, #36]	; 0x24
 801b182:	eef0 2a47 	vmov.f32	s5, s14
 801b186:	e6a6      	b.n	801aed6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b188:	2900      	cmp	r1, #0
 801b18a:	f43f af10 	beq.w	801afae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801b18e:	f819 3003 	ldrb.w	r3, [r9, r3]
 801b192:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801b196:	930f      	str	r3, [sp, #60]	; 0x3c
 801b198:	e709      	b.n	801afae <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801b19a:	f112 0901 	adds.w	r9, r2, #1
 801b19e:	f53f af7d 	bmi.w	801b09c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801b1a2:	454b      	cmp	r3, r9
 801b1a4:	f6ff af7a 	blt.w	801b09c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801b1a8:	f11c 0901 	adds.w	r9, ip, #1
 801b1ac:	f53f af76 	bmi.w	801b09c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801b1b0:	45ce      	cmp	lr, r9
 801b1b2:	f6ff af73 	blt.w	801b09c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801b1b6:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801b1b8:	9202      	str	r2, [sp, #8]
 801b1ba:	b21b      	sxth	r3, r3
 801b1bc:	fa0f f28e 	sxth.w	r2, lr
 801b1c0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801b1c4:	e9cd c003 	strd	ip, r0, [sp, #12]
 801b1c8:	9201      	str	r2, [sp, #4]
 801b1ca:	9300      	str	r3, [sp, #0]
 801b1cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b1ce:	4633      	mov	r3, r6
 801b1d0:	4639      	mov	r1, r7
 801b1d2:	9816      	ldr	r0, [sp, #88]	; 0x58
 801b1d4:	f7ff fd8e 	bl	801acf4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKtssiihhh>
 801b1d8:	e760      	b.n	801b09c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 801b1da:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801b1dc:	ea4f 422a 	mov.w	r2, sl, asr #16
 801b1e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801b1e4:	1429      	asrs	r1, r5, #16
 801b1e6:	fb03 2101 	mla	r1, r3, r1, r2
 801b1ea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801b1ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801b1ee:	f3ca 3c03 	ubfx	ip, sl, #12, #4
 801b1f2:	440a      	add	r2, r1
 801b1f4:	5c61      	ldrb	r1, [r4, r1]
 801b1f6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801b1fa:	f836 1011 	ldrh.w	r1, [r6, r1, lsl #1]
 801b1fe:	f1bc 0f00 	cmp.w	ip, #0
 801b202:	f000 808c 	beq.w	801b31e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x486>
 801b206:	7857      	ldrb	r7, [r2, #1]
 801b208:	f836 4017 	ldrh.w	r4, [r6, r7, lsl #1]
 801b20c:	9413      	str	r4, [sp, #76]	; 0x4c
 801b20e:	b140      	cbz	r0, 801b222 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801b210:	18d7      	adds	r7, r2, r3
 801b212:	5cd3      	ldrb	r3, [r2, r3]
 801b214:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801b218:	9310      	str	r3, [sp, #64]	; 0x40
 801b21a:	787b      	ldrb	r3, [r7, #1]
 801b21c:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801b220:	9314      	str	r3, [sp, #80]	; 0x50
 801b222:	fb1c f200 	smulbb	r2, ip, r0
 801b226:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801b228:	10d2      	asrs	r2, r2, #3
 801b22a:	041f      	lsls	r7, r3, #16
 801b22c:	f007 67fc 	and.w	r7, r7, #132120576	; 0x7e00000
 801b230:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801b234:	431f      	orrs	r7, r3
 801b236:	ebc2 034c 	rsb	r3, r2, ip, lsl #1
 801b23a:	9317      	str	r3, [sp, #92]	; 0x5c
 801b23c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801b23e:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801b240:	041b      	lsls	r3, r3, #16
 801b242:	f424 6bfc 	bic.w	fp, r4, #2016	; 0x7e0
 801b246:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801b24a:	ea43 030b 	orr.w	r3, r3, fp
 801b24e:	4353      	muls	r3, r2
 801b250:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801b252:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801b256:	fb04 3707 	mla	r7, r4, r7, r3
 801b25a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801b25e:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801b262:	ea43 0b01 	orr.w	fp, r3, r1
 801b266:	f1c0 0110 	rsb	r1, r0, #16
 801b26a:	eba1 0c0c 	sub.w	ip, r1, ip
 801b26e:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801b272:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801b274:	fb0c 770b 	mla	r7, ip, fp, r7
 801b278:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801b27c:	f423 6bfc 	bic.w	fp, r3, #2016	; 0x7e0
 801b280:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801b284:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801b288:	ea4c 0c0b 	orr.w	ip, ip, fp
 801b28c:	fb02 770c 	mla	r7, r2, ip, r7
 801b290:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b292:	0d79      	lsrs	r1, r7, #21
 801b294:	8812      	ldrh	r2, [r2, #0]
 801b296:	097f      	lsrs	r7, r7, #5
 801b298:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801b29c:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801b2a0:	430f      	orrs	r7, r1
 801b2a2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801b2a4:	1211      	asrs	r1, r2, #8
 801b2a6:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801b2aa:	b2bb      	uxth	r3, r7
 801b2ac:	fb11 f104 	smulbb	r1, r1, r4
 801b2b0:	10d7      	asrs	r7, r2, #3
 801b2b2:	00d2      	lsls	r2, r2, #3
 801b2b4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b2b8:	b2d2      	uxtb	r2, r2
 801b2ba:	1218      	asrs	r0, r3, #8
 801b2bc:	fb17 f704 	smulbb	r7, r7, r4
 801b2c0:	fb12 f204 	smulbb	r2, r2, r4
 801b2c4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801b2c8:	fb00 1009 	mla	r0, r0, r9, r1
 801b2cc:	10d9      	asrs	r1, r3, #3
 801b2ce:	00db      	lsls	r3, r3, #3
 801b2d0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801b2d4:	b2db      	uxtb	r3, r3
 801b2d6:	fb01 7109 	mla	r1, r1, r9, r7
 801b2da:	fb03 2309 	mla	r3, r3, r9, r2
 801b2de:	b280      	uxth	r0, r0
 801b2e0:	b29b      	uxth	r3, r3
 801b2e2:	b289      	uxth	r1, r1
 801b2e4:	1c42      	adds	r2, r0, #1
 801b2e6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801b2ea:	1c4f      	adds	r7, r1, #1
 801b2ec:	1c5a      	adds	r2, r3, #1
 801b2ee:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801b2f2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801b2f6:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801b2fa:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801b2fe:	0949      	lsrs	r1, r1, #5
 801b300:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b302:	4310      	orrs	r0, r2
 801b304:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801b308:	4308      	orrs	r0, r1
 801b30a:	f823 0b02 	strh.w	r0, [r3], #2
 801b30e:	930e      	str	r3, [sp, #56]	; 0x38
 801b310:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801b312:	f10e 3eff 	add.w	lr, lr, #4294967295
 801b316:	449a      	add	sl, r3
 801b318:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b31a:	441d      	add	r5, r3
 801b31c:	e6ed      	b.n	801b0fa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x262>
 801b31e:	2800      	cmp	r0, #0
 801b320:	f43f af7f 	beq.w	801b222 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801b324:	5cd3      	ldrb	r3, [r2, r3]
 801b326:	f836 3013 	ldrh.w	r3, [r6, r3, lsl #1]
 801b32a:	9310      	str	r3, [sp, #64]	; 0x40
 801b32c:	e779      	b.n	801b222 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801b32e:	b019      	add	sp, #100	; 0x64
 801b330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b334 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801b334:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b338:	f9bd e020 	ldrsh.w	lr, [sp, #32]
 801b33c:	e9dd 480a 	ldrd	r4, r8, [sp, #40]	; 0x28
 801b340:	fb08 470e 	mla	r7, r8, lr, r4
 801b344:	f1b8 0f00 	cmp.w	r8, #0
 801b348:	f9bd a024 	ldrsh.w	sl, [sp, #36]	; 0x24
 801b34c:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801b350:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801b354:	eb02 0907 	add.w	r9, r2, r7
 801b358:	8808      	ldrh	r0, [r1, #0]
 801b35a:	db67      	blt.n	801b42c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801b35c:	45c2      	cmp	sl, r8
 801b35e:	dd65      	ble.n	801b42c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf8>
 801b360:	2c00      	cmp	r4, #0
 801b362:	db61      	blt.n	801b428 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801b364:	45a6      	cmp	lr, r4
 801b366:	dd5f      	ble.n	801b428 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xf4>
 801b368:	5dd2      	ldrb	r2, [r2, r7]
 801b36a:	f833 c012 	ldrh.w	ip, [r3, r2, lsl #1]
 801b36e:	1c62      	adds	r2, r4, #1
 801b370:	d45f      	bmi.n	801b432 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801b372:	4596      	cmp	lr, r2
 801b374:	dd5d      	ble.n	801b432 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801b376:	2d00      	cmp	r5, #0
 801b378:	d05b      	beq.n	801b432 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xfe>
 801b37a:	f899 2001 	ldrb.w	r2, [r9, #1]
 801b37e:	f833 7012 	ldrh.w	r7, [r3, r2, lsl #1]
 801b382:	f118 0801 	adds.w	r8, r8, #1
 801b386:	d458      	bmi.n	801b43a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801b388:	45c2      	cmp	sl, r8
 801b38a:	dd56      	ble.n	801b43a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801b38c:	2e00      	cmp	r6, #0
 801b38e:	d054      	beq.n	801b43a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x106>
 801b390:	2c00      	cmp	r4, #0
 801b392:	db50      	blt.n	801b436 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801b394:	45a6      	cmp	lr, r4
 801b396:	dd4e      	ble.n	801b436 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x102>
 801b398:	f819 200e 	ldrb.w	r2, [r9, lr]
 801b39c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 801b3a0:	3401      	adds	r4, #1
 801b3a2:	d407      	bmi.n	801b3b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801b3a4:	45a6      	cmp	lr, r4
 801b3a6:	dd05      	ble.n	801b3b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801b3a8:	b125      	cbz	r5, 801b3b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>
 801b3aa:	44ce      	add	lr, r9
 801b3ac:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801b3b0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 801b3b4:	fb15 f406 	smulbb	r4, r5, r6
 801b3b8:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801b3bc:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801b3c0:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801b3c4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801b3c8:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801b3cc:	ea43 0c0c 	orr.w	ip, r3, ip
 801b3d0:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801b3d4:	f1c6 0310 	rsb	r3, r6, #16
 801b3d8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801b3dc:	1b5b      	subs	r3, r3, r5
 801b3de:	ea4e 0707 	orr.w	r7, lr, r7
 801b3e2:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801b3e6:	437d      	muls	r5, r7
 801b3e8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801b3ec:	fb03 5c0c 	mla	ip, r3, ip, r5
 801b3f0:	0403      	lsls	r3, r0, #16
 801b3f2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801b3f6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801b3fa:	4318      	orrs	r0, r3
 801b3fc:	fb04 c000 	mla	r0, r4, r0, ip
 801b400:	0413      	lsls	r3, r2, #16
 801b402:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801b406:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801b40a:	4313      	orrs	r3, r2
 801b40c:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801b410:	fb06 0003 	mla	r0, r6, r3, r0
 801b414:	0d43      	lsrs	r3, r0, #21
 801b416:	0940      	lsrs	r0, r0, #5
 801b418:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b41c:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801b420:	4318      	orrs	r0, r3
 801b422:	8008      	strh	r0, [r1, #0]
 801b424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b428:	4684      	mov	ip, r0
 801b42a:	e7a0      	b.n	801b36e <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x3a>
 801b42c:	4607      	mov	r7, r0
 801b42e:	4684      	mov	ip, r0
 801b430:	e7a7      	b.n	801b382 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801b432:	4607      	mov	r7, r0
 801b434:	e7a5      	b.n	801b382 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x4e>
 801b436:	4602      	mov	r2, r0
 801b438:	e7b2      	b.n	801b3a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x6c>
 801b43a:	4602      	mov	r2, r0
 801b43c:	e7ba      	b.n	801b3b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x80>

0801b43e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b43e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801b442:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b446:	b093      	sub	sp, #76	; 0x4c
 801b448:	920f      	str	r2, [sp, #60]	; 0x3c
 801b44a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801b44c:	9010      	str	r0, [sp, #64]	; 0x40
 801b44e:	6850      	ldr	r0, [r2, #4]
 801b450:	9108      	str	r1, [sp, #32]
 801b452:	9306      	str	r3, [sp, #24]
 801b454:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801b458:	fb00 1303 	mla	r3, r0, r3, r1
 801b45c:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801b460:	6812      	ldr	r2, [r2, #0]
 801b462:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 801b466:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b468:	681b      	ldr	r3, [r3, #0]
 801b46a:	9307      	str	r3, [sp, #28]
 801b46c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b46e:	685f      	ldr	r7, [r3, #4]
 801b470:	3704      	adds	r7, #4
 801b472:	9b08      	ldr	r3, [sp, #32]
 801b474:	2b00      	cmp	r3, #0
 801b476:	dc03      	bgt.n	801b480 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801b478:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b47a:	2b00      	cmp	r3, #0
 801b47c:	f340 81b2 	ble.w	801b7e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801b480:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b482:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b486:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b48a:	1e48      	subs	r0, r1, #1
 801b48c:	f102 3cff 	add.w	ip, r2, #4294967295
 801b490:	9b06      	ldr	r3, [sp, #24]
 801b492:	2b00      	cmp	r3, #0
 801b494:	f340 80a9 	ble.w	801b5ea <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801b498:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801b49c:	ea4f 4326 	mov.w	r3, r6, asr #16
 801b4a0:	d406      	bmi.n	801b4b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b4a2:	4586      	cmp	lr, r0
 801b4a4:	da04      	bge.n	801b4b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b4a6:	2b00      	cmp	r3, #0
 801b4a8:	db02      	blt.n	801b4b0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b4aa:	4563      	cmp	r3, ip
 801b4ac:	f2c0 809e 	blt.w	801b5ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801b4b0:	f11e 0e01 	adds.w	lr, lr, #1
 801b4b4:	f100 808f 	bmi.w	801b5d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801b4b8:	4571      	cmp	r1, lr
 801b4ba:	f2c0 808c 	blt.w	801b5d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801b4be:	3301      	adds	r3, #1
 801b4c0:	f100 8089 	bmi.w	801b5d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801b4c4:	429a      	cmp	r2, r3
 801b4c6:	f2c0 8086 	blt.w	801b5d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801b4ca:	46c8      	mov	r8, r9
 801b4cc:	f8dd b018 	ldr.w	fp, [sp, #24]
 801b4d0:	f1bb 0f00 	cmp.w	fp, #0
 801b4d4:	f340 80a6 	ble.w	801b624 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801b4d8:	9a24      	ldr	r2, [sp, #144]	; 0x90
 801b4da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b4dc:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801b4e0:	1422      	asrs	r2, r4, #16
 801b4e2:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801b4e6:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801b4ea:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801b4ee:	689b      	ldr	r3, [r3, #8]
 801b4f0:	f100 80e3 	bmi.w	801b6ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801b4f4:	f103 3aff 	add.w	sl, r3, #4294967295
 801b4f8:	4552      	cmp	r2, sl
 801b4fa:	f280 80de 	bge.w	801b6ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801b4fe:	f1bc 0f00 	cmp.w	ip, #0
 801b502:	f2c0 80da 	blt.w	801b6ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801b506:	f10e 3aff 	add.w	sl, lr, #4294967295
 801b50a:	45d4      	cmp	ip, sl
 801b50c:	f280 80d5 	bge.w	801b6ba <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801b510:	b21b      	sxth	r3, r3
 801b512:	fb0c 2203 	mla	r2, ip, r3, r2
 801b516:	9d07      	ldr	r5, [sp, #28]
 801b518:	eb05 0a02 	add.w	sl, r5, r2
 801b51c:	5caa      	ldrb	r2, [r5, r2]
 801b51e:	f837 e012 	ldrh.w	lr, [r7, r2, lsl #1]
 801b522:	2800      	cmp	r0, #0
 801b524:	f000 80c0 	beq.w	801b6a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801b528:	f89a 2001 	ldrb.w	r2, [sl, #1]
 801b52c:	f837 2012 	ldrh.w	r2, [r7, r2, lsl #1]
 801b530:	920b      	str	r2, [sp, #44]	; 0x2c
 801b532:	b151      	cbz	r1, 801b54a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801b534:	eb0a 0203 	add.w	r2, sl, r3
 801b538:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801b53c:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801b540:	9309      	str	r3, [sp, #36]	; 0x24
 801b542:	7853      	ldrb	r3, [r2, #1]
 801b544:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801b548:	930c      	str	r3, [sp, #48]	; 0x30
 801b54a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801b54c:	fb10 f201 	smulbb	r2, r0, r1
 801b550:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801b554:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801b558:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801b55c:	ea4c 0c03 	orr.w	ip, ip, r3
 801b560:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801b562:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801b564:	041b      	lsls	r3, r3, #16
 801b566:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801b56a:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801b56e:	10d2      	asrs	r2, r2, #3
 801b570:	432b      	orrs	r3, r5
 801b572:	4353      	muls	r3, r2
 801b574:	ebc2 0a40 	rsb	sl, r2, r0, lsl #1
 801b578:	fb0a 330c 	mla	r3, sl, ip, r3
 801b57c:	ea4f 4c0e 	mov.w	ip, lr, lsl #16
 801b580:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801b584:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801b588:	ea4c 0e0e 	orr.w	lr, ip, lr
 801b58c:	f1c1 0c10 	rsb	ip, r1, #16
 801b590:	ebac 0c00 	sub.w	ip, ip, r0
 801b594:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 801b598:	fb0c 3c0e 	mla	ip, ip, lr, r3
 801b59c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b59e:	ebc2 0241 	rsb	r2, r2, r1, lsl #1
 801b5a2:	0418      	lsls	r0, r3, #16
 801b5a4:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801b5a8:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801b5ac:	4318      	orrs	r0, r3
 801b5ae:	fb02 c200 	mla	r2, r2, r0, ip
 801b5b2:	0d53      	lsrs	r3, r2, #21
 801b5b4:	0952      	lsrs	r2, r2, #5
 801b5b6:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b5ba:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801b5be:	431a      	orrs	r2, r3
 801b5c0:	f8a8 2000 	strh.w	r2, [r8]
 801b5c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b5c6:	f108 0802 	add.w	r8, r8, #2
 801b5ca:	441c      	add	r4, r3
 801b5cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b5ce:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b5d2:	441e      	add	r6, r3
 801b5d4:	e77c      	b.n	801b4d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801b5d6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b5d8:	f109 0902 	add.w	r9, r9, #2
 801b5dc:	441c      	add	r4, r3
 801b5de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b5e0:	441e      	add	r6, r3
 801b5e2:	9b06      	ldr	r3, [sp, #24]
 801b5e4:	3b01      	subs	r3, #1
 801b5e6:	9306      	str	r3, [sp, #24]
 801b5e8:	e752      	b.n	801b490 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801b5ea:	d020      	beq.n	801b62e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801b5ec:	9b06      	ldr	r3, [sp, #24]
 801b5ee:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801b5f0:	3b01      	subs	r3, #1
 801b5f2:	fb00 4003 	mla	r0, r0, r3, r4
 801b5f6:	1400      	asrs	r0, r0, #16
 801b5f8:	f53f af67 	bmi.w	801b4ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801b5fc:	3901      	subs	r1, #1
 801b5fe:	4288      	cmp	r0, r1
 801b600:	f6bf af63 	bge.w	801b4ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801b604:	9920      	ldr	r1, [sp, #128]	; 0x80
 801b606:	fb01 6303 	mla	r3, r1, r3, r6
 801b60a:	141b      	asrs	r3, r3, #16
 801b60c:	f53f af5d 	bmi.w	801b4ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801b610:	3a01      	subs	r2, #1
 801b612:	4293      	cmp	r3, r2
 801b614:	f6bf af59 	bge.w	801b4ca <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801b618:	46ca      	mov	sl, r9
 801b61a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801b61e:	f1b8 0f00 	cmp.w	r8, #0
 801b622:	dc67      	bgt.n	801b6f4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801b624:	9b06      	ldr	r3, [sp, #24]
 801b626:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801b62a:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 801b62e:	9b08      	ldr	r3, [sp, #32]
 801b630:	2b00      	cmp	r3, #0
 801b632:	f340 80d7 	ble.w	801b7e4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801b636:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b63a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b63e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b642:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b646:	eeb0 6a62 	vmov.f32	s12, s5
 801b64a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b64e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b652:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b656:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b65a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b65e:	ee16 4a10 	vmov	r4, s12
 801b662:	eeb0 6a43 	vmov.f32	s12, s6
 801b666:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b66a:	ee12 2a90 	vmov	r2, s5
 801b66e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b672:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b674:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b678:	fb92 f3f3 	sdiv	r3, r2, r3
 801b67c:	ee13 2a10 	vmov	r2, s6
 801b680:	931f      	str	r3, [sp, #124]	; 0x7c
 801b682:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b684:	ee16 6a10 	vmov	r6, s12
 801b688:	fb92 f3f3 	sdiv	r3, r2, r3
 801b68c:	9320      	str	r3, [sp, #128]	; 0x80
 801b68e:	9b08      	ldr	r3, [sp, #32]
 801b690:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801b692:	3b01      	subs	r3, #1
 801b694:	9308      	str	r3, [sp, #32]
 801b696:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801b698:	bf08      	it	eq
 801b69a:	4613      	moveq	r3, r2
 801b69c:	eeb0 3a67 	vmov.f32	s6, s15
 801b6a0:	9306      	str	r3, [sp, #24]
 801b6a2:	eef0 2a47 	vmov.f32	s5, s14
 801b6a6:	e6e4      	b.n	801b472 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801b6a8:	2900      	cmp	r1, #0
 801b6aa:	f43f af4e 	beq.w	801b54a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801b6ae:	f81a 3003 	ldrb.w	r3, [sl, r3]
 801b6b2:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801b6b6:	9309      	str	r3, [sp, #36]	; 0x24
 801b6b8:	e747      	b.n	801b54a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x10c>
 801b6ba:	f112 0a01 	adds.w	sl, r2, #1
 801b6be:	d481      	bmi.n	801b5c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b6c0:	4553      	cmp	r3, sl
 801b6c2:	f6ff af7f 	blt.w	801b5c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b6c6:	f11c 0a01 	adds.w	sl, ip, #1
 801b6ca:	f53f af7b 	bmi.w	801b5c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b6ce:	45d6      	cmp	lr, sl
 801b6d0:	f6ff af78 	blt.w	801b5c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b6d4:	e9cd 2c02 	strd	r2, ip, [sp, #8]
 801b6d8:	b21b      	sxth	r3, r3
 801b6da:	fa0f f28e 	sxth.w	r2, lr
 801b6de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801b6e2:	9201      	str	r2, [sp, #4]
 801b6e4:	9300      	str	r3, [sp, #0]
 801b6e6:	9a07      	ldr	r2, [sp, #28]
 801b6e8:	463b      	mov	r3, r7
 801b6ea:	4641      	mov	r1, r8
 801b6ec:	9810      	ldr	r0, [sp, #64]	; 0x40
 801b6ee:	f7ff fe21 	bl	801b334 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801b6f2:	e767      	b.n	801b5c4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801b6f4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801b6f6:	1422      	asrs	r2, r4, #16
 801b6f8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801b6fc:	1431      	asrs	r1, r6, #16
 801b6fe:	fb03 2101 	mla	r1, r3, r1, r2
 801b702:	9d07      	ldr	r5, [sp, #28]
 801b704:	9a07      	ldr	r2, [sp, #28]
 801b706:	f3c4 3e03 	ubfx	lr, r4, #12, #4
 801b70a:	440a      	add	r2, r1
 801b70c:	5c69      	ldrb	r1, [r5, r1]
 801b70e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801b712:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
 801b716:	f1be 0f00 	cmp.w	lr, #0
 801b71a:	d05c      	beq.n	801b7d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x398>
 801b71c:	f892 c001 	ldrb.w	ip, [r2, #1]
 801b720:	f837 501c 	ldrh.w	r5, [r7, ip, lsl #1]
 801b724:	950d      	str	r5, [sp, #52]	; 0x34
 801b726:	b150      	cbz	r0, 801b73e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801b728:	eb02 0c03 	add.w	ip, r2, r3
 801b72c:	5cd3      	ldrb	r3, [r2, r3]
 801b72e:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801b732:	930a      	str	r3, [sp, #40]	; 0x28
 801b734:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801b738:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801b73c:	930e      	str	r3, [sp, #56]	; 0x38
 801b73e:	fb1e f200 	smulbb	r2, lr, r0
 801b742:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801b744:	10d2      	asrs	r2, r2, #3
 801b746:	ea4f 4c03 	mov.w	ip, r3, lsl #16
 801b74a:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801b74e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801b752:	ea4c 0c03 	orr.w	ip, ip, r3
 801b756:	ebc2 034e 	rsb	r3, r2, lr, lsl #1
 801b75a:	9311      	str	r3, [sp, #68]	; 0x44
 801b75c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801b75e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801b760:	041b      	lsls	r3, r3, #16
 801b762:	f425 6bfc 	bic.w	fp, r5, #2016	; 0x7e0
 801b766:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801b76a:	ea43 030b 	orr.w	r3, r3, fp
 801b76e:	4353      	muls	r3, r2
 801b770:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801b772:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801b776:	fb05 3c0c 	mla	ip, r5, ip, r3
 801b77a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801b77e:	f00b 63fc 	and.w	r3, fp, #132120576	; 0x7e00000
 801b782:	ea43 0b01 	orr.w	fp, r3, r1
 801b786:	f1c0 0110 	rsb	r1, r0, #16
 801b78a:	eba1 0e0e 	sub.w	lr, r1, lr
 801b78e:	eb02 0e4e 	add.w	lr, r2, lr, lsl #1
 801b792:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801b794:	fb0e cc0b 	mla	ip, lr, fp, ip
 801b798:	ea4f 4b03 	mov.w	fp, r3, lsl #16
 801b79c:	f423 6efc 	bic.w	lr, r3, #2016	; 0x7e0
 801b7a0:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801b7a4:	ea4b 0e0e 	orr.w	lr, fp, lr
 801b7a8:	ebc2 0240 	rsb	r2, r2, r0, lsl #1
 801b7ac:	fb02 cc0e 	mla	ip, r2, lr, ip
 801b7b0:	ea4f 535c 	mov.w	r3, ip, lsr #21
 801b7b4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801b7b8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801b7bc:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801b7c0:	ea43 0c0c 	orr.w	ip, r3, ip
 801b7c4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801b7c6:	f82a cb02 	strh.w	ip, [sl], #2
 801b7ca:	441c      	add	r4, r3
 801b7cc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801b7ce:	f108 38ff 	add.w	r8, r8, #4294967295
 801b7d2:	441e      	add	r6, r3
 801b7d4:	e723      	b.n	801b61e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801b7d6:	2800      	cmp	r0, #0
 801b7d8:	d0b1      	beq.n	801b73e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801b7da:	5cd3      	ldrb	r3, [r2, r3]
 801b7dc:	f837 3013 	ldrh.w	r3, [r7, r3, lsl #1]
 801b7e0:	930a      	str	r3, [sp, #40]	; 0x28
 801b7e2:	e7ac      	b.n	801b73e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x300>
 801b7e4:	b013      	add	sp, #76	; 0x4c
 801b7e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b7ea <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>:
 801b7ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b7ee:	880d      	ldrh	r5, [r1, #0]
 801b7f0:	b087      	sub	sp, #28
 801b7f2:	10ef      	asrs	r7, r5, #3
 801b7f4:	ea4f 2a25 	mov.w	sl, r5, asr #8
 801b7f8:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801b7fc:	00ed      	lsls	r5, r5, #3
 801b7fe:	9701      	str	r7, [sp, #4]
 801b800:	b2ed      	uxtb	r5, r5
 801b802:	f9bd 9040 	ldrsh.w	r9, [sp, #64]	; 0x40
 801b806:	9502      	str	r5, [sp, #8]
 801b808:	9d01      	ldr	r5, [sp, #4]
 801b80a:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	; 0x48
 801b80e:	fb06 0709 	mla	r7, r6, r9, r0
 801b812:	9103      	str	r1, [sp, #12]
 801b814:	f00a 0af8 	and.w	sl, sl, #248	; 0xf8
 801b818:	022d      	lsls	r5, r5, #8
 801b81a:	9902      	ldr	r1, [sp, #8]
 801b81c:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801b820:	430d      	orrs	r5, r1
 801b822:	2e00      	cmp	r6, #0
 801b824:	f9bd b044 	ldrsh.w	fp, [sp, #68]	; 0x44
 801b828:	f89d 4050 	ldrb.w	r4, [sp, #80]	; 0x50
 801b82c:	f89d e054 	ldrb.w	lr, [sp, #84]	; 0x54
 801b830:	f89d 8058 	ldrb.w	r8, [sp, #88]	; 0x58
 801b834:	eb02 0c07 	add.w	ip, r2, r7
 801b838:	9505      	str	r5, [sp, #20]
 801b83a:	f2c0 80b6 	blt.w	801b9aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801b83e:	45b3      	cmp	fp, r6
 801b840:	f340 80b3 	ble.w	801b9aa <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c0>
 801b844:	2800      	cmp	r0, #0
 801b846:	f2c0 80ae 	blt.w	801b9a6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801b84a:	4581      	cmp	r9, r0
 801b84c:	f340 80ab 	ble.w	801b9a6 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1bc>
 801b850:	5dd7      	ldrb	r7, [r2, r7]
 801b852:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b856:	441f      	add	r7, r3
 801b858:	1c42      	adds	r2, r0, #1
 801b85a:	f100 80a9 	bmi.w	801b9b0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801b85e:	4591      	cmp	r9, r2
 801b860:	f340 80a6 	ble.w	801b9b0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801b864:	2c00      	cmp	r4, #0
 801b866:	f000 80a3 	beq.w	801b9b0 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1c6>
 801b86a:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801b86e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b872:	441d      	add	r5, r3
 801b874:	3601      	adds	r6, #1
 801b876:	f100 809f 	bmi.w	801b9b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801b87a:	45b3      	cmp	fp, r6
 801b87c:	f340 809c 	ble.w	801b9b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801b880:	f1be 0f00 	cmp.w	lr, #0
 801b884:	f000 8098 	beq.w	801b9b8 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ce>
 801b888:	2800      	cmp	r0, #0
 801b88a:	f2c0 8093 	blt.w	801b9b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801b88e:	4581      	cmp	r9, r0
 801b890:	f340 8090 	ble.w	801b9b4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1ca>
 801b894:	f81c 6009 	ldrb.w	r6, [ip, r9]
 801b898:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b89c:	441e      	add	r6, r3
 801b89e:	3001      	adds	r0, #1
 801b8a0:	f100 808d 	bmi.w	801b9be <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801b8a4:	4581      	cmp	r9, r0
 801b8a6:	f340 808a 	ble.w	801b9be <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801b8aa:	2c00      	cmp	r4, #0
 801b8ac:	f000 8087 	beq.w	801b9be <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x1d4>
 801b8b0:	44e1      	add	r9, ip
 801b8b2:	f899 2001 	ldrb.w	r2, [r9, #1]
 801b8b6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b8ba:	4413      	add	r3, r2
 801b8bc:	b2a4      	uxth	r4, r4
 801b8be:	fa1f fe8e 	uxth.w	lr, lr
 801b8c2:	fb04 fb0e 	mul.w	fp, r4, lr
 801b8c6:	ebcb 1e0e 	rsb	lr, fp, lr, lsl #4
 801b8ca:	fa1f f08e 	uxth.w	r0, lr
 801b8ce:	fa1f fe88 	uxth.w	lr, r8
 801b8d2:	ea6f 0808 	mvn.w	r8, r8
 801b8d6:	0124      	lsls	r4, r4, #4
 801b8d8:	f5c4 7980 	rsb	r9, r4, #256	; 0x100
 801b8dc:	eba4 040b 	sub.w	r4, r4, fp
 801b8e0:	b2a2      	uxth	r2, r4
 801b8e2:	78ac      	ldrb	r4, [r5, #2]
 801b8e4:	f897 c002 	ldrb.w	ip, [r7, #2]
 801b8e8:	4354      	muls	r4, r2
 801b8ea:	eba9 0900 	sub.w	r9, r9, r0
 801b8ee:	fa1f f989 	uxth.w	r9, r9
 801b8f2:	fb09 440c 	mla	r4, r9, ip, r4
 801b8f6:	f896 c002 	ldrb.w	ip, [r6, #2]
 801b8fa:	fa5f f888 	uxtb.w	r8, r8
 801b8fe:	fb00 440c 	mla	r4, r0, ip, r4
 801b902:	f893 c002 	ldrb.w	ip, [r3, #2]
 801b906:	fb1a fa08 	smulbb	sl, sl, r8
 801b90a:	fb0b 4c0c 	mla	ip, fp, ip, r4
 801b90e:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801b912:	fb0c ac0e 	mla	ip, ip, lr, sl
 801b916:	f895 a001 	ldrb.w	sl, [r5, #1]
 801b91a:	782d      	ldrb	r5, [r5, #0]
 801b91c:	fb02 fa0a 	mul.w	sl, r2, sl
 801b920:	436a      	muls	r2, r5
 801b922:	787c      	ldrb	r4, [r7, #1]
 801b924:	783f      	ldrb	r7, [r7, #0]
 801b926:	fb09 aa04 	mla	sl, r9, r4, sl
 801b92a:	fb09 2207 	mla	r2, r9, r7, r2
 801b92e:	7874      	ldrb	r4, [r6, #1]
 801b930:	7835      	ldrb	r5, [r6, #0]
 801b932:	fb00 aa04 	mla	sl, r0, r4, sl
 801b936:	fb00 2005 	mla	r0, r0, r5, r2
 801b93a:	785c      	ldrb	r4, [r3, #1]
 801b93c:	781b      	ldrb	r3, [r3, #0]
 801b93e:	fb0b a404 	mla	r4, fp, r4, sl
 801b942:	9901      	ldr	r1, [sp, #4]
 801b944:	fb0b 0b03 	mla	fp, fp, r3, r0
 801b948:	9b02      	ldr	r3, [sp, #8]
 801b94a:	fb11 fa08 	smulbb	sl, r1, r8
 801b94e:	fb13 f808 	smulbb	r8, r3, r8
 801b952:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801b956:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801b95a:	fb04 a40e 	mla	r4, r4, lr, sl
 801b95e:	fb0b 8e0e 	mla	lr, fp, lr, r8
 801b962:	fa1f fc8c 	uxth.w	ip, ip
 801b966:	f10c 0301 	add.w	r3, ip, #1
 801b96a:	fa1f fe8e 	uxth.w	lr, lr
 801b96e:	b2a4      	uxth	r4, r4
 801b970:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801b974:	f40c 4378 	and.w	r3, ip, #63488	; 0xf800
 801b978:	f104 0a01 	add.w	sl, r4, #1
 801b97c:	f10e 0c01 	add.w	ip, lr, #1
 801b980:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801b984:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801b988:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 801b98c:	0964      	lsrs	r4, r4, #5
 801b98e:	ea4c 0c03 	orr.w	ip, ip, r3
 801b992:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801b996:	9b03      	ldr	r3, [sp, #12]
 801b998:	ea4c 0c04 	orr.w	ip, ip, r4
 801b99c:	f8a3 c000 	strh.w	ip, [r3]
 801b9a0:	b007      	add	sp, #28
 801b9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b9a6:	af05      	add	r7, sp, #20
 801b9a8:	e756      	b.n	801b858 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x6e>
 801b9aa:	ad05      	add	r5, sp, #20
 801b9ac:	462f      	mov	r7, r5
 801b9ae:	e761      	b.n	801b874 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801b9b0:	ad05      	add	r5, sp, #20
 801b9b2:	e75f      	b.n	801b874 <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0x8a>
 801b9b4:	ae05      	add	r6, sp, #20
 801b9b6:	e772      	b.n	801b89e <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xb4>
 801b9b8:	ab05      	add	r3, sp, #20
 801b9ba:	461e      	mov	r6, r3
 801b9bc:	e77e      	b.n	801b8bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>
 801b9be:	ab05      	add	r3, sp, #20
 801b9c0:	e77c      	b.n	801b8bc <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh+0xd2>

0801b9c2 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b9c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b9c6:	b095      	sub	sp, #84	; 0x54
 801b9c8:	9212      	str	r2, [sp, #72]	; 0x48
 801b9ca:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801b9cc:	9013      	str	r0, [sp, #76]	; 0x4c
 801b9ce:	9309      	str	r3, [sp, #36]	; 0x24
 801b9d0:	6850      	ldr	r0, [r2, #4]
 801b9d2:	f89d 309c 	ldrb.w	r3, [sp, #156]	; 0x9c
 801b9d6:	910e      	str	r1, [sp, #56]	; 0x38
 801b9d8:	930f      	str	r3, [sp, #60]	; 0x3c
 801b9da:	e9dd 1324 	ldrd	r1, r3, [sp, #144]	; 0x90
 801b9de:	fb00 1303 	mla	r3, r0, r3, r1
 801b9e2:	6812      	ldr	r2, [r2, #0]
 801b9e4:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801b9e8:	930a      	str	r3, [sp, #40]	; 0x28
 801b9ea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b9ec:	681b      	ldr	r3, [r3, #0]
 801b9ee:	930d      	str	r3, [sp, #52]	; 0x34
 801b9f0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801b9f2:	685c      	ldr	r4, [r3, #4]
 801b9f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b9f6:	3404      	adds	r4, #4
 801b9f8:	43db      	mvns	r3, r3
 801b9fa:	b2db      	uxtb	r3, r3
 801b9fc:	930b      	str	r3, [sp, #44]	; 0x2c
 801b9fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ba00:	2b00      	cmp	r3, #0
 801ba02:	dc03      	bgt.n	801ba0c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801ba04:	9b12      	ldr	r3, [sp, #72]	; 0x48
 801ba06:	2b00      	cmp	r3, #0
 801ba08:	f340 8255 	ble.w	801beb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801ba0c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801ba0e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ba12:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ba16:	1e48      	subs	r0, r1, #1
 801ba18:	1e55      	subs	r5, r2, #1
 801ba1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	f340 80f9 	ble.w	801bc14 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x252>
 801ba22:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801ba24:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ba26:	1436      	asrs	r6, r6, #16
 801ba28:	ea4f 4323 	mov.w	r3, r3, asr #16
 801ba2c:	d406      	bmi.n	801ba3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ba2e:	4286      	cmp	r6, r0
 801ba30:	da04      	bge.n	801ba3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ba32:	2b00      	cmp	r3, #0
 801ba34:	db02      	blt.n	801ba3c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801ba36:	42ab      	cmp	r3, r5
 801ba38:	f2c0 80ed 	blt.w	801bc16 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801ba3c:	3601      	adds	r6, #1
 801ba3e:	f100 80da 	bmi.w	801bbf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801ba42:	42b1      	cmp	r1, r6
 801ba44:	f2c0 80d7 	blt.w	801bbf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801ba48:	3301      	adds	r3, #1
 801ba4a:	f100 80d4 	bmi.w	801bbf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801ba4e:	429a      	cmp	r2, r3
 801ba50:	f2c0 80d1 	blt.w	801bbf6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x234>
 801ba54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ba56:	9311      	str	r3, [sp, #68]	; 0x44
 801ba58:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801ba5a:	930c      	str	r3, [sp, #48]	; 0x30
 801ba5c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801ba5e:	2b00      	cmp	r3, #0
 801ba60:	f340 80fa 	ble.w	801bc58 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801ba64:	9826      	ldr	r0, [sp, #152]	; 0x98
 801ba66:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ba68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ba6a:	68c6      	ldr	r6, [r0, #12]
 801ba6c:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801ba6e:	141d      	asrs	r5, r3, #16
 801ba70:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ba74:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801ba76:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801ba78:	1400      	asrs	r0, r0, #16
 801ba7a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801ba7e:	6892      	ldr	r2, [r2, #8]
 801ba80:	f100 813e 	bmi.w	801bd00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ba84:	1e57      	subs	r7, r2, #1
 801ba86:	42b8      	cmp	r0, r7
 801ba88:	f280 813a 	bge.w	801bd00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ba8c:	2d00      	cmp	r5, #0
 801ba8e:	f2c0 8137 	blt.w	801bd00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ba92:	1e77      	subs	r7, r6, #1
 801ba94:	42bd      	cmp	r5, r7
 801ba96:	f280 8133 	bge.w	801bd00 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33e>
 801ba9a:	b212      	sxth	r2, r2
 801ba9c:	fb05 0002 	mla	r0, r5, r2, r0
 801baa0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801baa2:	f815 a000 	ldrb.w	sl, [r5, r0]
 801baa6:	182e      	adds	r6, r5, r0
 801baa8:	eb0a 0a4a 	add.w	sl, sl, sl, lsl #1
 801baac:	eb04 050a 	add.w	r5, r4, sl
 801bab0:	2b00      	cmp	r3, #0
 801bab2:	f000 8117 	beq.w	801bce4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801bab6:	f896 c001 	ldrb.w	ip, [r6, #1]
 801baba:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801babe:	44a4      	add	ip, r4
 801bac0:	2900      	cmp	r1, #0
 801bac2:	f000 8117 	beq.w	801bcf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801bac6:	18b0      	adds	r0, r6, r2
 801bac8:	7840      	ldrb	r0, [r0, #1]
 801baca:	5cb2      	ldrb	r2, [r6, r2]
 801bacc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bad0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bad4:	4422      	add	r2, r4
 801bad6:	4420      	add	r0, r4
 801bad8:	b29b      	uxth	r3, r3
 801bada:	b289      	uxth	r1, r1
 801badc:	fb03 f901 	mul.w	r9, r3, r1
 801bae0:	011b      	lsls	r3, r3, #4
 801bae2:	f89c 7002 	ldrb.w	r7, [ip, #2]
 801bae6:	f5c3 7880 	rsb	r8, r3, #256	; 0x100
 801baea:	eba3 0309 	sub.w	r3, r3, r9
 801baee:	b29b      	uxth	r3, r3
 801baf0:	435f      	muls	r7, r3
 801baf2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801baf6:	b289      	uxth	r1, r1
 801baf8:	f895 b002 	ldrb.w	fp, [r5, #2]
 801bafc:	eba8 0801 	sub.w	r8, r8, r1
 801bb00:	fa1f f888 	uxth.w	r8, r8
 801bb04:	fb08 770b 	mla	r7, r8, fp, r7
 801bb08:	f892 b002 	ldrb.w	fp, [r2, #2]
 801bb0c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801bb0e:	fb01 770b 	mla	r7, r1, fp, r7
 801bb12:	f8b6 e000 	ldrh.w	lr, [r6]
 801bb16:	f890 b002 	ldrb.w	fp, [r0, #2]
 801bb1a:	9310      	str	r3, [sp, #64]	; 0x40
 801bb1c:	fb09 770b 	mla	r7, r9, fp, r7
 801bb20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bb22:	ea4f 2b2e 	mov.w	fp, lr, asr #8
 801bb26:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801bb2a:	fb1b fb03 	smulbb	fp, fp, r3
 801bb2e:	f8bd 603c 	ldrh.w	r6, [sp, #60]	; 0x3c
 801bb32:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801bb36:	fb07 b706 	mla	r7, r7, r6, fp
 801bb3a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bb3c:	f895 b001 	ldrb.w	fp, [r5, #1]
 801bb40:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801bb44:	f89c c000 	ldrb.w	ip, [ip]
 801bb48:	435d      	muls	r5, r3
 801bb4a:	fb08 550b 	mla	r5, r8, fp, r5
 801bb4e:	f892 b001 	ldrb.w	fp, [r2, #1]
 801bb52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bb54:	fb01 550b 	mla	r5, r1, fp, r5
 801bb58:	f890 b001 	ldrb.w	fp, [r0, #1]
 801bb5c:	f814 a00a 	ldrb.w	sl, [r4, sl]
 801bb60:	fb09 550b 	mla	r5, r9, fp, r5
 801bb64:	ea4f 0bee 	mov.w	fp, lr, asr #3
 801bb68:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801bb6c:	fb1b fb03 	smulbb	fp, fp, r3
 801bb70:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bb72:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 801bb76:	fb03 f30c 	mul.w	r3, r3, ip
 801bb7a:	fb08 330a 	mla	r3, r8, sl, r3
 801bb7e:	f892 c000 	ldrb.w	ip, [r2]
 801bb82:	fa5f fe8e 	uxtb.w	lr, lr
 801bb86:	fb01 330c 	mla	r3, r1, ip, r3
 801bb8a:	f890 c000 	ldrb.w	ip, [r0]
 801bb8e:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801bb92:	fb09 3c0c 	mla	ip, r9, ip, r3
 801bb96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bb98:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801bb9c:	fb1e fe03 	smulbb	lr, lr, r3
 801bba0:	fb05 b506 	mla	r5, r5, r6, fp
 801bba4:	fb0c e606 	mla	r6, ip, r6, lr
 801bba8:	b2bf      	uxth	r7, r7
 801bbaa:	1c7b      	adds	r3, r7, #1
 801bbac:	b2ad      	uxth	r5, r5
 801bbae:	b2b6      	uxth	r6, r6
 801bbb0:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801bbb4:	f407 4378 	and.w	r3, r7, #63488	; 0xf800
 801bbb8:	f105 0b01 	add.w	fp, r5, #1
 801bbbc:	1c77      	adds	r7, r6, #1
 801bbbe:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801bbc2:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801bbc6:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801bbca:	096d      	lsrs	r5, r5, #5
 801bbcc:	431f      	orrs	r7, r3
 801bbce:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801bbd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bbd4:	433d      	orrs	r5, r7
 801bbd6:	801d      	strh	r5, [r3, #0]
 801bbd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801bbda:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801bbdc:	3302      	adds	r3, #2
 801bbde:	930c      	str	r3, [sp, #48]	; 0x30
 801bbe0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801bbe2:	4413      	add	r3, r2
 801bbe4:	931f      	str	r3, [sp, #124]	; 0x7c
 801bbe6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801bbe8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801bbea:	4413      	add	r3, r2
 801bbec:	9320      	str	r3, [sp, #128]	; 0x80
 801bbee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bbf0:	3b01      	subs	r3, #1
 801bbf2:	9311      	str	r3, [sp, #68]	; 0x44
 801bbf4:	e732      	b.n	801ba5c <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801bbf6:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801bbf8:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801bbfa:	4433      	add	r3, r6
 801bbfc:	931f      	str	r3, [sp, #124]	; 0x7c
 801bbfe:	9e22      	ldr	r6, [sp, #136]	; 0x88
 801bc00:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801bc02:	4433      	add	r3, r6
 801bc04:	9320      	str	r3, [sp, #128]	; 0x80
 801bc06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc08:	3b01      	subs	r3, #1
 801bc0a:	9309      	str	r3, [sp, #36]	; 0x24
 801bc0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bc0e:	3302      	adds	r3, #2
 801bc10:	930a      	str	r3, [sp, #40]	; 0x28
 801bc12:	e702      	b.n	801ba1a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801bc14:	d027      	beq.n	801bc66 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a4>
 801bc16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc18:	9821      	ldr	r0, [sp, #132]	; 0x84
 801bc1a:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801bc1c:	3b01      	subs	r3, #1
 801bc1e:	fb00 5003 	mla	r0, r0, r3, r5
 801bc22:	1400      	asrs	r0, r0, #16
 801bc24:	f53f af16 	bmi.w	801ba54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801bc28:	3901      	subs	r1, #1
 801bc2a:	4288      	cmp	r0, r1
 801bc2c:	f6bf af12 	bge.w	801ba54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801bc30:	9922      	ldr	r1, [sp, #136]	; 0x88
 801bc32:	9820      	ldr	r0, [sp, #128]	; 0x80
 801bc34:	fb01 0303 	mla	r3, r1, r3, r0
 801bc38:	141b      	asrs	r3, r3, #16
 801bc3a:	f53f af0b 	bmi.w	801ba54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801bc3e:	3a01      	subs	r2, #1
 801bc40:	4293      	cmp	r3, r2
 801bc42:	f6bf af07 	bge.w	801ba54 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801bc46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc48:	f8bd a03c 	ldrh.w	sl, [sp, #60]	; 0x3c
 801bc4c:	9311      	str	r3, [sp, #68]	; 0x44
 801bc4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bc50:	930c      	str	r3, [sp, #48]	; 0x30
 801bc52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801bc54:	2b00      	cmp	r3, #0
 801bc56:	dc70      	bgt.n	801bd3a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801bc58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bc5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801bc5c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bc60:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801bc64:	930a      	str	r3, [sp, #40]	; 0x28
 801bc66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bc68:	2b00      	cmp	r3, #0
 801bc6a:	f340 8124 	ble.w	801beb6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f4>
 801bc6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801bc72:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bc76:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bc7a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801bc7e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bc82:	eef0 6a62 	vmov.f32	s13, s5
 801bc86:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bc8a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bc8e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bc92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bc96:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bc9a:	edcd 6a1f 	vstr	s13, [sp, #124]	; 0x7c
 801bc9e:	eef0 6a43 	vmov.f32	s13, s6
 801bca2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bca6:	ee12 2a90 	vmov	r2, s5
 801bcaa:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bcae:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bcb0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801bcb4:	fb92 f3f3 	sdiv	r3, r2, r3
 801bcb8:	ee13 2a10 	vmov	r2, s6
 801bcbc:	9321      	str	r3, [sp, #132]	; 0x84
 801bcbe:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bcc0:	edcd 6a20 	vstr	s13, [sp, #128]	; 0x80
 801bcc4:	fb92 f3f3 	sdiv	r3, r2, r3
 801bcc8:	9322      	str	r3, [sp, #136]	; 0x88
 801bcca:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801bccc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801bcce:	3b01      	subs	r3, #1
 801bcd0:	930e      	str	r3, [sp, #56]	; 0x38
 801bcd2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801bcd4:	bf08      	it	eq
 801bcd6:	4613      	moveq	r3, r2
 801bcd8:	eeb0 3a67 	vmov.f32	s6, s15
 801bcdc:	9309      	str	r3, [sp, #36]	; 0x24
 801bcde:	eef0 2a47 	vmov.f32	s5, s14
 801bce2:	e68c      	b.n	801b9fe <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801bce4:	b149      	cbz	r1, 801bcfa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x338>
 801bce6:	4628      	mov	r0, r5
 801bce8:	5cb2      	ldrb	r2, [r6, r2]
 801bcea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bcee:	4422      	add	r2, r4
 801bcf0:	46ac      	mov	ip, r5
 801bcf2:	e6f1      	b.n	801bad8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801bcf4:	4628      	mov	r0, r5
 801bcf6:	462a      	mov	r2, r5
 801bcf8:	e6ee      	b.n	801bad8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x116>
 801bcfa:	4628      	mov	r0, r5
 801bcfc:	462a      	mov	r2, r5
 801bcfe:	e7f7      	b.n	801bcf0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 801bd00:	1c47      	adds	r7, r0, #1
 801bd02:	f53f af69 	bmi.w	801bbd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801bd06:	42ba      	cmp	r2, r7
 801bd08:	f6ff af66 	blt.w	801bbd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801bd0c:	1c6f      	adds	r7, r5, #1
 801bd0e:	f53f af63 	bmi.w	801bbd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801bd12:	42be      	cmp	r6, r7
 801bd14:	f6ff af60 	blt.w	801bbd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801bd18:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 801bd1a:	b236      	sxth	r6, r6
 801bd1c:	b212      	sxth	r2, r2
 801bd1e:	e9cd 1705 	strd	r1, r7, [sp, #20]
 801bd22:	e9cd 5303 	strd	r5, r3, [sp, #12]
 801bd26:	9002      	str	r0, [sp, #8]
 801bd28:	9200      	str	r2, [sp, #0]
 801bd2a:	9601      	str	r6, [sp, #4]
 801bd2c:	4623      	mov	r3, r4
 801bd2e:	e9dd 120c 	ldrd	r1, r2, [sp, #48]	; 0x30
 801bd32:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801bd34:	f7ff fd59 	bl	801b7ea <_ZNK8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhS4_ssiihhh>
 801bd38:	e74e      	b.n	801bbd8 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x216>
 801bd3a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801bd3c:	9820      	ldr	r0, [sp, #128]	; 0x80
 801bd3e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801bd42:	9a26      	ldr	r2, [sp, #152]	; 0x98
 801bd44:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 801bd46:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801bd4a:	142d      	asrs	r5, r5, #16
 801bd4c:	1400      	asrs	r0, r0, #16
 801bd4e:	fb02 5000 	mla	r0, r2, r0, r5
 801bd52:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801bd54:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801bd56:	f815 9000 	ldrb.w	r9, [r5, r0]
 801bd5a:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801bd5e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801bd62:	182e      	adds	r6, r5, r0
 801bd64:	eb04 0509 	add.w	r5, r4, r9
 801bd68:	2b00      	cmp	r3, #0
 801bd6a:	f000 8096 	beq.w	801be9a <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 801bd6e:	7877      	ldrb	r7, [r6, #1]
 801bd70:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801bd74:	4427      	add	r7, r4
 801bd76:	2900      	cmp	r1, #0
 801bd78:	f000 8097 	beq.w	801beaa <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e8>
 801bd7c:	18b0      	adds	r0, r6, r2
 801bd7e:	7840      	ldrb	r0, [r0, #1]
 801bd80:	5cb2      	ldrb	r2, [r6, r2]
 801bd82:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bd86:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bd8a:	4422      	add	r2, r4
 801bd8c:	4420      	add	r0, r4
 801bd8e:	b29b      	uxth	r3, r3
 801bd90:	b289      	uxth	r1, r1
 801bd92:	fb03 f801 	mul.w	r8, r3, r1
 801bd96:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801bd98:	011b      	lsls	r3, r3, #4
 801bd9a:	f8b6 c000 	ldrh.w	ip, [r6]
 801bd9e:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801bda2:	78be      	ldrb	r6, [r7, #2]
 801bda4:	eba3 0308 	sub.w	r3, r3, r8
 801bda8:	b29b      	uxth	r3, r3
 801bdaa:	435e      	muls	r6, r3
 801bdac:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801bdb0:	b289      	uxth	r1, r1
 801bdb2:	f895 b002 	ldrb.w	fp, [r5, #2]
 801bdb6:	ebae 0e01 	sub.w	lr, lr, r1
 801bdba:	fa1f fe8e 	uxth.w	lr, lr
 801bdbe:	fb0e 660b 	mla	r6, lr, fp, r6
 801bdc2:	f892 b002 	ldrb.w	fp, [r2, #2]
 801bdc6:	9310      	str	r3, [sp, #64]	; 0x40
 801bdc8:	fb01 660b 	mla	r6, r1, fp, r6
 801bdcc:	f890 b002 	ldrb.w	fp, [r0, #2]
 801bdd0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bdd2:	fb08 660b 	mla	r6, r8, fp, r6
 801bdd6:	ea4f 2b2c 	mov.w	fp, ip, asr #8
 801bdda:	f00b 0bf8 	and.w	fp, fp, #248	; 0xf8
 801bdde:	fb1b fb03 	smulbb	fp, fp, r3
 801bde2:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801bde6:	fb06 b60a 	mla	r6, r6, sl, fp
 801bdea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801bdec:	f895 b001 	ldrb.w	fp, [r5, #1]
 801bdf0:	787d      	ldrb	r5, [r7, #1]
 801bdf2:	783f      	ldrb	r7, [r7, #0]
 801bdf4:	435d      	muls	r5, r3
 801bdf6:	fb0e 550b 	mla	r5, lr, fp, r5
 801bdfa:	f892 b001 	ldrb.w	fp, [r2, #1]
 801bdfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801be00:	fb01 550b 	mla	r5, r1, fp, r5
 801be04:	f890 b001 	ldrb.w	fp, [r0, #1]
 801be08:	f814 9009 	ldrb.w	r9, [r4, r9]
 801be0c:	fb08 550b 	mla	r5, r8, fp, r5
 801be10:	ea4f 0bec 	mov.w	fp, ip, asr #3
 801be14:	f00b 0bfc 	and.w	fp, fp, #252	; 0xfc
 801be18:	fb1b fb03 	smulbb	fp, fp, r3
 801be1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801be1e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 801be22:	437b      	muls	r3, r7
 801be24:	fb0e 3309 	mla	r3, lr, r9, r3
 801be28:	7817      	ldrb	r7, [r2, #0]
 801be2a:	fa5f fc8c 	uxtb.w	ip, ip
 801be2e:	fb01 3307 	mla	r3, r1, r7, r3
 801be32:	7807      	ldrb	r7, [r0, #0]
 801be34:	f3c5 2507 	ubfx	r5, r5, #8, #8
 801be38:	fb08 3707 	mla	r7, r8, r7, r3
 801be3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801be3e:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801be42:	fb1c fc03 	smulbb	ip, ip, r3
 801be46:	fb05 b50a 	mla	r5, r5, sl, fp
 801be4a:	fb07 c70a 	mla	r7, r7, sl, ip
 801be4e:	b2b6      	uxth	r6, r6
 801be50:	b2ad      	uxth	r5, r5
 801be52:	b2bf      	uxth	r7, r7
 801be54:	1c73      	adds	r3, r6, #1
 801be56:	1c7a      	adds	r2, r7, #1
 801be58:	f105 0b01 	add.w	fp, r5, #1
 801be5c:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801be60:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801be64:	eb0b 2515 	add.w	r5, fp, r5, lsr #8
 801be68:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801be6c:	f406 4678 	and.w	r6, r6, #63488	; 0xf800
 801be70:	096d      	lsrs	r5, r5, #5
 801be72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801be74:	4316      	orrs	r6, r2
 801be76:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801be7a:	432e      	orrs	r6, r5
 801be7c:	f823 6b02 	strh.w	r6, [r3], #2
 801be80:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801be82:	930c      	str	r3, [sp, #48]	; 0x30
 801be84:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801be86:	4413      	add	r3, r2
 801be88:	931f      	str	r3, [sp, #124]	; 0x7c
 801be8a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801be8c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801be8e:	4413      	add	r3, r2
 801be90:	9320      	str	r3, [sp, #128]	; 0x80
 801be92:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801be94:	3b01      	subs	r3, #1
 801be96:	9311      	str	r3, [sp, #68]	; 0x44
 801be98:	e6db      	b.n	801bc52 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x290>
 801be9a:	b149      	cbz	r1, 801beb0 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801be9c:	4628      	mov	r0, r5
 801be9e:	5cb2      	ldrb	r2, [r6, r2]
 801bea0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bea4:	4422      	add	r2, r4
 801bea6:	462f      	mov	r7, r5
 801bea8:	e771      	b.n	801bd8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801beaa:	4628      	mov	r0, r5
 801beac:	462a      	mov	r2, r5
 801beae:	e76e      	b.n	801bd8e <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3cc>
 801beb0:	4628      	mov	r0, r5
 801beb2:	462a      	mov	r2, r5
 801beb4:	e7f7      	b.n	801bea6 <_ZN8touchgfx8LCD16bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 801beb6:	b015      	add	sp, #84	; 0x54
 801beb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bebc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>:
 801bebc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bec0:	880f      	ldrh	r7, [r1, #0]
 801bec2:	f9bd e030 	ldrsh.w	lr, [sp, #48]	; 0x30
 801bec6:	023c      	lsls	r4, r7, #8
 801bec8:	e9dd c50e 	ldrd	ip, r5, [sp, #56]	; 0x38
 801becc:	f404 0b78 	and.w	fp, r4, #16252928	; 0xf80000
 801bed0:	fb05 ca0e 	mla	sl, r5, lr, ip
 801bed4:	017c      	lsls	r4, r7, #5
 801bed6:	f404 447c 	and.w	r4, r4, #64512	; 0xfc00
 801beda:	00ff      	lsls	r7, r7, #3
 801bedc:	ea4b 0404 	orr.w	r4, fp, r4
 801bee0:	b2ff      	uxtb	r7, r7
 801bee2:	4327      	orrs	r7, r4
 801bee4:	2d00      	cmp	r5, #0
 801bee6:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	; 0x34
 801beea:	f89d 0040 	ldrb.w	r0, [sp, #64]	; 0x40
 801beee:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 801bef2:	eb02 080a 	add.w	r8, r2, sl
 801bef6:	9701      	str	r7, [sp, #4]
 801bef8:	db7e      	blt.n	801bff8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801befa:	45a9      	cmp	r9, r5
 801befc:	dd7c      	ble.n	801bff8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x13c>
 801befe:	f1bc 0f00 	cmp.w	ip, #0
 801bf02:	db77      	blt.n	801bff4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801bf04:	45e6      	cmp	lr, ip
 801bf06:	dd75      	ble.n	801bff4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x138>
 801bf08:	f812 700a 	ldrb.w	r7, [r2, sl]
 801bf0c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801bf10:	441f      	add	r7, r3
 801bf12:	f11c 0201 	adds.w	r2, ip, #1
 801bf16:	d472      	bmi.n	801bffe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801bf18:	4596      	cmp	lr, r2
 801bf1a:	dd70      	ble.n	801bffe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801bf1c:	2800      	cmp	r0, #0
 801bf1e:	d06e      	beq.n	801bffe <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x142>
 801bf20:	f898 4001 	ldrb.w	r4, [r8, #1]
 801bf24:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bf28:	441c      	add	r4, r3
 801bf2a:	3501      	adds	r5, #1
 801bf2c:	d46b      	bmi.n	801c006 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801bf2e:	45a9      	cmp	r9, r5
 801bf30:	dd69      	ble.n	801c006 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801bf32:	2e00      	cmp	r6, #0
 801bf34:	d067      	beq.n	801c006 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x14a>
 801bf36:	f1bc 0f00 	cmp.w	ip, #0
 801bf3a:	db62      	blt.n	801c002 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801bf3c:	45e6      	cmp	lr, ip
 801bf3e:	dd60      	ble.n	801c002 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x146>
 801bf40:	f818 500e 	ldrb.w	r5, [r8, lr]
 801bf44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bf48:	441d      	add	r5, r3
 801bf4a:	f11c 0201 	adds.w	r2, ip, #1
 801bf4e:	d45d      	bmi.n	801c00c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801bf50:	4596      	cmp	lr, r2
 801bf52:	dd5b      	ble.n	801c00c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801bf54:	2800      	cmp	r0, #0
 801bf56:	d059      	beq.n	801c00c <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x150>
 801bf58:	44c6      	add	lr, r8
 801bf5a:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801bf5e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bf62:	4413      	add	r3, r2
 801bf64:	b280      	uxth	r0, r0
 801bf66:	b2b2      	uxth	r2, r6
 801bf68:	fb00 f602 	mul.w	r6, r0, r2
 801bf6c:	0100      	lsls	r0, r0, #4
 801bf6e:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801bf72:	f5c0 7880 	rsb	r8, r0, #256	; 0x100
 801bf76:	1b80      	subs	r0, r0, r6
 801bf78:	fa1f fc82 	uxth.w	ip, r2
 801bf7c:	b282      	uxth	r2, r0
 801bf7e:	78a0      	ldrb	r0, [r4, #2]
 801bf80:	f897 e002 	ldrb.w	lr, [r7, #2]
 801bf84:	4350      	muls	r0, r2
 801bf86:	eba8 080c 	sub.w	r8, r8, ip
 801bf8a:	fa1f f888 	uxth.w	r8, r8
 801bf8e:	fb08 0e0e 	mla	lr, r8, lr, r0
 801bf92:	78a8      	ldrb	r0, [r5, #2]
 801bf94:	f897 9000 	ldrb.w	r9, [r7]
 801bf98:	fb0c e000 	mla	r0, ip, r0, lr
 801bf9c:	f893 e002 	ldrb.w	lr, [r3, #2]
 801bfa0:	787f      	ldrb	r7, [r7, #1]
 801bfa2:	fb06 0e0e 	mla	lr, r6, lr, r0
 801bfa6:	f40e 4078 	and.w	r0, lr, #63488	; 0xf800
 801bfaa:	f894 e000 	ldrb.w	lr, [r4]
 801bfae:	fb02 fe0e 	mul.w	lr, r2, lr
 801bfb2:	fb08 e909 	mla	r9, r8, r9, lr
 801bfb6:	f895 e000 	ldrb.w	lr, [r5]
 801bfba:	fb0c 990e 	mla	r9, ip, lr, r9
 801bfbe:	f893 e000 	ldrb.w	lr, [r3]
 801bfc2:	785b      	ldrb	r3, [r3, #1]
 801bfc4:	fb06 9e0e 	mla	lr, r6, lr, r9
 801bfc8:	f3ce 2ec4 	ubfx	lr, lr, #11, #5
 801bfcc:	ea4e 0e00 	orr.w	lr, lr, r0
 801bfd0:	7860      	ldrb	r0, [r4, #1]
 801bfd2:	4350      	muls	r0, r2
 801bfd4:	fb08 0007 	mla	r0, r8, r7, r0
 801bfd8:	786a      	ldrb	r2, [r5, #1]
 801bfda:	fb0c 0202 	mla	r2, ip, r2, r0
 801bfde:	fb06 2303 	mla	r3, r6, r3, r2
 801bfe2:	095b      	lsrs	r3, r3, #5
 801bfe4:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801bfe8:	ea4e 0303 	orr.w	r3, lr, r3
 801bfec:	800b      	strh	r3, [r1, #0]
 801bfee:	b003      	add	sp, #12
 801bff0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bff4:	af01      	add	r7, sp, #4
 801bff6:	e78c      	b.n	801bf12 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x56>
 801bff8:	ac01      	add	r4, sp, #4
 801bffa:	4627      	mov	r7, r4
 801bffc:	e795      	b.n	801bf2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801bffe:	ac01      	add	r4, sp, #4
 801c000:	e793      	b.n	801bf2a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x6e>
 801c002:	ad01      	add	r5, sp, #4
 801c004:	e7a1      	b.n	801bf4a <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0x8e>
 801c006:	ab01      	add	r3, sp, #4
 801c008:	461d      	mov	r5, r3
 801c00a:	e7ab      	b.n	801bf64 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>
 801c00c:	ab01      	add	r3, sp, #4
 801c00e:	e7a9      	b.n	801bf64 <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh+0xa8>

0801c010 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c014:	b08f      	sub	sp, #60	; 0x3c
 801c016:	920c      	str	r2, [sp, #48]	; 0x30
 801c018:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801c01a:	900d      	str	r0, [sp, #52]	; 0x34
 801c01c:	6850      	ldr	r0, [r2, #4]
 801c01e:	910a      	str	r1, [sp, #40]	; 0x28
 801c020:	9306      	str	r3, [sp, #24]
 801c022:	e9dd 131e 	ldrd	r1, r3, [sp, #120]	; 0x78
 801c026:	fb00 1303 	mla	r3, r0, r3, r1
 801c02a:	e9dd b519 	ldrd	fp, r5, [sp, #100]	; 0x64
 801c02e:	6812      	ldr	r2, [r2, #0]
 801c030:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c034:	9307      	str	r3, [sp, #28]
 801c036:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c038:	681b      	ldr	r3, [r3, #0]
 801c03a:	9308      	str	r3, [sp, #32]
 801c03c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c03e:	685c      	ldr	r4, [r3, #4]
 801c040:	3404      	adds	r4, #4
 801c042:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c044:	2b00      	cmp	r3, #0
 801c046:	dc03      	bgt.n	801c050 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801c048:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801c04a:	2b00      	cmp	r3, #0
 801c04c:	f340 81d6 	ble.w	801c3fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 801c050:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801c052:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c056:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c05a:	1e48      	subs	r0, r1, #1
 801c05c:	1e56      	subs	r6, r2, #1
 801c05e:	9b06      	ldr	r3, [sp, #24]
 801c060:	2b00      	cmp	r3, #0
 801c062:	f340 80b7 	ble.w	801c1d4 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c4>
 801c066:	ea5f 472b 	movs.w	r7, fp, asr #16
 801c06a:	ea4f 4325 	mov.w	r3, r5, asr #16
 801c06e:	d406      	bmi.n	801c07e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c070:	4287      	cmp	r7, r0
 801c072:	da04      	bge.n	801c07e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c074:	2b00      	cmp	r3, #0
 801c076:	db02      	blt.n	801c07e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801c078:	42b3      	cmp	r3, r6
 801c07a:	f2c0 80ac 	blt.w	801c1d6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801c07e:	3701      	adds	r7, #1
 801c080:	f100 809d 	bmi.w	801c1be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801c084:	42b9      	cmp	r1, r7
 801c086:	f2c0 809a 	blt.w	801c1be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801c08a:	3301      	adds	r3, #1
 801c08c:	f100 8097 	bmi.w	801c1be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801c090:	429a      	cmp	r2, r3
 801c092:	f2c0 8094 	blt.w	801c1be <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ae>
 801c096:	9b06      	ldr	r3, [sp, #24]
 801c098:	930b      	str	r3, [sp, #44]	; 0x2c
 801c09a:	9b07      	ldr	r3, [sp, #28]
 801c09c:	9309      	str	r3, [sp, #36]	; 0x24
 801c09e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c0a0:	2b00      	cmp	r3, #0
 801c0a2:	f340 80b5 	ble.w	801c210 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801c0a6:	9820      	ldr	r0, [sp, #128]	; 0x80
 801c0a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c0aa:	68c7      	ldr	r7, [r0, #12]
 801c0ac:	ea5f 402b 	movs.w	r0, fp, asr #16
 801c0b0:	ea4f 4625 	mov.w	r6, r5, asr #16
 801c0b4:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801c0b8:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c0bc:	6892      	ldr	r2, [r2, #8]
 801c0be:	f100 80fb 	bmi.w	801c2b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801c0c2:	f102 3cff 	add.w	ip, r2, #4294967295
 801c0c6:	4560      	cmp	r0, ip
 801c0c8:	f280 80f6 	bge.w	801c2b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801c0cc:	2e00      	cmp	r6, #0
 801c0ce:	f2c0 80f3 	blt.w	801c2b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801c0d2:	f107 3cff 	add.w	ip, r7, #4294967295
 801c0d6:	4566      	cmp	r6, ip
 801c0d8:	f280 80ee 	bge.w	801c2b8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a8>
 801c0dc:	b212      	sxth	r2, r2
 801c0de:	fb06 0002 	mla	r0, r6, r2, r0
 801c0e2:	9e08      	ldr	r6, [sp, #32]
 801c0e4:	1837      	adds	r7, r6, r0
 801c0e6:	5c30      	ldrb	r0, [r6, r0]
 801c0e8:	eb00 0840 	add.w	r8, r0, r0, lsl #1
 801c0ec:	eb04 0c08 	add.w	ip, r4, r8
 801c0f0:	2b00      	cmp	r3, #0
 801c0f2:	f000 80d3 	beq.w	801c29c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28c>
 801c0f6:	787e      	ldrb	r6, [r7, #1]
 801c0f8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c0fc:	4426      	add	r6, r4
 801c0fe:	2900      	cmp	r1, #0
 801c100:	f000 80d4 	beq.w	801c2ac <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29c>
 801c104:	18b8      	adds	r0, r7, r2
 801c106:	7840      	ldrb	r0, [r0, #1]
 801c108:	5cba      	ldrb	r2, [r7, r2]
 801c10a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c10e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c112:	4422      	add	r2, r4
 801c114:	4420      	add	r0, r4
 801c116:	b29b      	uxth	r3, r3
 801c118:	b289      	uxth	r1, r1
 801c11a:	fb03 f901 	mul.w	r9, r3, r1
 801c11e:	011b      	lsls	r3, r3, #4
 801c120:	78b7      	ldrb	r7, [r6, #2]
 801c122:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801c126:	eba3 0309 	sub.w	r3, r3, r9
 801c12a:	b29b      	uxth	r3, r3
 801c12c:	435f      	muls	r7, r3
 801c12e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c132:	b289      	uxth	r1, r1
 801c134:	f89c a002 	ldrb.w	sl, [ip, #2]
 801c138:	ebae 0e01 	sub.w	lr, lr, r1
 801c13c:	fa1f fe8e 	uxth.w	lr, lr
 801c140:	fb0e 770a 	mla	r7, lr, sl, r7
 801c144:	f892 a002 	ldrb.w	sl, [r2, #2]
 801c148:	f89c c001 	ldrb.w	ip, [ip, #1]
 801c14c:	fb01 770a 	mla	r7, r1, sl, r7
 801c150:	f890 a002 	ldrb.w	sl, [r0, #2]
 801c154:	fb09 7a0a 	mla	sl, r9, sl, r7
 801c158:	f814 7008 	ldrb.w	r7, [r4, r8]
 801c15c:	f896 8000 	ldrb.w	r8, [r6]
 801c160:	7876      	ldrb	r6, [r6, #1]
 801c162:	fb03 f808 	mul.w	r8, r3, r8
 801c166:	fb0e 8807 	mla	r8, lr, r7, r8
 801c16a:	7817      	ldrb	r7, [r2, #0]
 801c16c:	4373      	muls	r3, r6
 801c16e:	fb01 8807 	mla	r8, r1, r7, r8
 801c172:	7807      	ldrb	r7, [r0, #0]
 801c174:	fb0e 330c 	mla	r3, lr, ip, r3
 801c178:	fb09 8707 	mla	r7, r9, r7, r8
 801c17c:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801c180:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801c184:	ea47 070a 	orr.w	r7, r7, sl
 801c188:	f892 a001 	ldrb.w	sl, [r2, #1]
 801c18c:	fb01 310a 	mla	r1, r1, sl, r3
 801c190:	f890 a001 	ldrb.w	sl, [r0, #1]
 801c194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c196:	fb09 1a0a 	mla	sl, r9, sl, r1
 801c19a:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c19e:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c1a2:	ea47 070a 	orr.w	r7, r7, sl
 801c1a6:	801f      	strh	r7, [r3, #0]
 801c1a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c1aa:	3302      	adds	r3, #2
 801c1ac:	9309      	str	r3, [sp, #36]	; 0x24
 801c1ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c1b0:	449b      	add	fp, r3
 801c1b2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c1b4:	441d      	add	r5, r3
 801c1b6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c1b8:	3b01      	subs	r3, #1
 801c1ba:	930b      	str	r3, [sp, #44]	; 0x2c
 801c1bc:	e76f      	b.n	801c09e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801c1be:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c1c0:	449b      	add	fp, r3
 801c1c2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c1c4:	441d      	add	r5, r3
 801c1c6:	9b06      	ldr	r3, [sp, #24]
 801c1c8:	3b01      	subs	r3, #1
 801c1ca:	9306      	str	r3, [sp, #24]
 801c1cc:	9b07      	ldr	r3, [sp, #28]
 801c1ce:	3302      	adds	r3, #2
 801c1d0:	9307      	str	r3, [sp, #28]
 801c1d2:	e744      	b.n	801c05e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801c1d4:	d023      	beq.n	801c21e <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801c1d6:	9b06      	ldr	r3, [sp, #24]
 801c1d8:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801c1da:	3b01      	subs	r3, #1
 801c1dc:	fb00 b003 	mla	r0, r0, r3, fp
 801c1e0:	1400      	asrs	r0, r0, #16
 801c1e2:	f53f af58 	bmi.w	801c096 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c1e6:	3901      	subs	r1, #1
 801c1e8:	4288      	cmp	r0, r1
 801c1ea:	f6bf af54 	bge.w	801c096 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c1ee:	991c      	ldr	r1, [sp, #112]	; 0x70
 801c1f0:	fb01 5303 	mla	r3, r1, r3, r5
 801c1f4:	141b      	asrs	r3, r3, #16
 801c1f6:	f53f af4e 	bmi.w	801c096 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c1fa:	3a01      	subs	r2, #1
 801c1fc:	4293      	cmp	r3, r2
 801c1fe:	f6bf af4a 	bge.w	801c096 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801c202:	9b06      	ldr	r3, [sp, #24]
 801c204:	9309      	str	r3, [sp, #36]	; 0x24
 801c206:	9b07      	ldr	r3, [sp, #28]
 801c208:	930b      	str	r3, [sp, #44]	; 0x2c
 801c20a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c20c:	2b00      	cmp	r3, #0
 801c20e:	dc70      	bgt.n	801c2f2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e2>
 801c210:	9b06      	ldr	r3, [sp, #24]
 801c212:	9a07      	ldr	r2, [sp, #28]
 801c214:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c218:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c21c:	9307      	str	r3, [sp, #28]
 801c21e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c220:	2b00      	cmp	r3, #0
 801c222:	f340 80eb 	ble.w	801c3fc <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ec>
 801c226:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801c22a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c22e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c232:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c236:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c23a:	eef0 6a62 	vmov.f32	s13, s5
 801c23e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c242:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c246:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c24a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c24e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c252:	ee16 ba90 	vmov	fp, s13
 801c256:	eef0 6a43 	vmov.f32	s13, s6
 801c25a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c25e:	ee12 2a90 	vmov	r2, s5
 801c262:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c266:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c268:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c26c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c270:	ee13 2a10 	vmov	r2, s6
 801c274:	931b      	str	r3, [sp, #108]	; 0x6c
 801c276:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c278:	ee16 5a90 	vmov	r5, s13
 801c27c:	fb92 f3f3 	sdiv	r3, r2, r3
 801c280:	931c      	str	r3, [sp, #112]	; 0x70
 801c282:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c284:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801c286:	3b01      	subs	r3, #1
 801c288:	930a      	str	r3, [sp, #40]	; 0x28
 801c28a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801c28c:	bf08      	it	eq
 801c28e:	4613      	moveq	r3, r2
 801c290:	eeb0 3a67 	vmov.f32	s6, s15
 801c294:	9306      	str	r3, [sp, #24]
 801c296:	eef0 2a47 	vmov.f32	s5, s14
 801c29a:	e6d2      	b.n	801c042 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32>
 801c29c:	b149      	cbz	r1, 801c2b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a2>
 801c29e:	4660      	mov	r0, ip
 801c2a0:	5cba      	ldrb	r2, [r7, r2]
 801c2a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c2a6:	4422      	add	r2, r4
 801c2a8:	4666      	mov	r6, ip
 801c2aa:	e734      	b.n	801c116 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801c2ac:	4660      	mov	r0, ip
 801c2ae:	4662      	mov	r2, ip
 801c2b0:	e731      	b.n	801c116 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x106>
 801c2b2:	4660      	mov	r0, ip
 801c2b4:	4662      	mov	r2, ip
 801c2b6:	e7f7      	b.n	801c2a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x298>
 801c2b8:	f110 0c01 	adds.w	ip, r0, #1
 801c2bc:	f53f af74 	bmi.w	801c1a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c2c0:	4562      	cmp	r2, ip
 801c2c2:	f6ff af71 	blt.w	801c1a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c2c6:	f116 0c01 	adds.w	ip, r6, #1
 801c2ca:	f53f af6d 	bmi.w	801c1a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c2ce:	4567      	cmp	r7, ip
 801c2d0:	f6ff af6a 	blt.w	801c1a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c2d4:	b23f      	sxth	r7, r7
 801c2d6:	b212      	sxth	r2, r2
 801c2d8:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801c2dc:	e9cd 0602 	strd	r0, r6, [sp, #8]
 801c2e0:	9200      	str	r2, [sp, #0]
 801c2e2:	9701      	str	r7, [sp, #4]
 801c2e4:	4623      	mov	r3, r4
 801c2e6:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801c2ea:	980d      	ldr	r0, [sp, #52]	; 0x34
 801c2ec:	f7ff fde6 	bl	801bebc <_ZNK8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhS4_ssiihh>
 801c2f0:	e75a      	b.n	801c1a8 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x198>
 801c2f2:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801c2f4:	ea4f 462b 	mov.w	r6, fp, asr #16
 801c2f8:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801c2fc:	1428      	asrs	r0, r5, #16
 801c2fe:	fb02 6000 	mla	r0, r2, r0, r6
 801c302:	9e08      	ldr	r6, [sp, #32]
 801c304:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801c308:	f816 8000 	ldrb.w	r8, [r6, r0]
 801c30c:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c310:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801c314:	1837      	adds	r7, r6, r0
 801c316:	eb04 0c08 	add.w	ip, r4, r8
 801c31a:	2b00      	cmp	r3, #0
 801c31c:	d060      	beq.n	801c3e0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d0>
 801c31e:	787e      	ldrb	r6, [r7, #1]
 801c320:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c324:	4426      	add	r6, r4
 801c326:	2900      	cmp	r1, #0
 801c328:	d062      	beq.n	801c3f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e0>
 801c32a:	18b8      	adds	r0, r7, r2
 801c32c:	7840      	ldrb	r0, [r0, #1]
 801c32e:	5cba      	ldrb	r2, [r7, r2]
 801c330:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c334:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c338:	4422      	add	r2, r4
 801c33a:	4420      	add	r0, r4
 801c33c:	b29b      	uxth	r3, r3
 801c33e:	b289      	uxth	r1, r1
 801c340:	fb03 f901 	mul.w	r9, r3, r1
 801c344:	011b      	lsls	r3, r3, #4
 801c346:	78b7      	ldrb	r7, [r6, #2]
 801c348:	f5c3 7e80 	rsb	lr, r3, #256	; 0x100
 801c34c:	eba3 0309 	sub.w	r3, r3, r9
 801c350:	b29b      	uxth	r3, r3
 801c352:	435f      	muls	r7, r3
 801c354:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c358:	b289      	uxth	r1, r1
 801c35a:	f89c a002 	ldrb.w	sl, [ip, #2]
 801c35e:	ebae 0e01 	sub.w	lr, lr, r1
 801c362:	fa1f fe8e 	uxth.w	lr, lr
 801c366:	fb0e 770a 	mla	r7, lr, sl, r7
 801c36a:	f892 a002 	ldrb.w	sl, [r2, #2]
 801c36e:	f89c c001 	ldrb.w	ip, [ip, #1]
 801c372:	fb01 770a 	mla	r7, r1, sl, r7
 801c376:	f890 a002 	ldrb.w	sl, [r0, #2]
 801c37a:	fb09 7a0a 	mla	sl, r9, sl, r7
 801c37e:	f814 7008 	ldrb.w	r7, [r4, r8]
 801c382:	f896 8000 	ldrb.w	r8, [r6]
 801c386:	7876      	ldrb	r6, [r6, #1]
 801c388:	fb03 f808 	mul.w	r8, r3, r8
 801c38c:	fb0e 8807 	mla	r8, lr, r7, r8
 801c390:	7817      	ldrb	r7, [r2, #0]
 801c392:	4373      	muls	r3, r6
 801c394:	fb01 8807 	mla	r8, r1, r7, r8
 801c398:	7807      	ldrb	r7, [r0, #0]
 801c39a:	fb0e 330c 	mla	r3, lr, ip, r3
 801c39e:	fb09 8707 	mla	r7, r9, r7, r8
 801c3a2:	7856      	ldrb	r6, [r2, #1]
 801c3a4:	f40a 4a78 	and.w	sl, sl, #63488	; 0xf800
 801c3a8:	fb01 3306 	mla	r3, r1, r6, r3
 801c3ac:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801c3b0:	ea47 070a 	orr.w	r7, r7, sl
 801c3b4:	f890 a001 	ldrb.w	sl, [r0, #1]
 801c3b8:	fb09 3a0a 	mla	sl, r9, sl, r3
 801c3bc:	ea4f 1a5a 	mov.w	sl, sl, lsr #5
 801c3c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801c3c2:	f40a 6afc 	and.w	sl, sl, #2016	; 0x7e0
 801c3c6:	ea47 070a 	orr.w	r7, r7, sl
 801c3ca:	f823 7b02 	strh.w	r7, [r3], #2
 801c3ce:	930b      	str	r3, [sp, #44]	; 0x2c
 801c3d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c3d2:	449b      	add	fp, r3
 801c3d4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801c3d6:	441d      	add	r5, r3
 801c3d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c3da:	3b01      	subs	r3, #1
 801c3dc:	9309      	str	r3, [sp, #36]	; 0x24
 801c3de:	e714      	b.n	801c20a <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801c3e0:	b149      	cbz	r1, 801c3f6 <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 801c3e2:	4660      	mov	r0, ip
 801c3e4:	5cba      	ldrb	r2, [r7, r2]
 801c3e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c3ea:	4422      	add	r2, r4
 801c3ec:	4666      	mov	r6, ip
 801c3ee:	e7a5      	b.n	801c33c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801c3f0:	4660      	mov	r0, ip
 801c3f2:	4662      	mov	r2, ip
 801c3f4:	e7a2      	b.n	801c33c <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801c3f6:	4660      	mov	r0, ip
 801c3f8:	4662      	mov	r2, ip
 801c3fa:	e7f7      	b.n	801c3ec <_ZN8touchgfx8LCD16bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3dc>
 801c3fc:	b00f      	add	sp, #60	; 0x3c
 801c3fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c402 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>:
 801c402:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c406:	b085      	sub	sp, #20
 801c408:	f9bd c038 	ldrsh.w	ip, [sp, #56]	; 0x38
 801c40c:	e9dd 7410 	ldrd	r7, r4, [sp, #64]	; 0x40
 801c410:	9102      	str	r1, [sp, #8]
 801c412:	fb04 710c 	mla	r1, r4, ip, r7
 801c416:	2c00      	cmp	r4, #0
 801c418:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	; 0x3c
 801c41c:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 801c420:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801c424:	eb02 0e01 	add.w	lr, r2, r1
 801c428:	f2c0 8122 	blt.w	801c670 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801c42c:	45a0      	cmp	r8, r4
 801c42e:	f340 811f 	ble.w	801c670 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26e>
 801c432:	2f00      	cmp	r7, #0
 801c434:	f2c0 811a 	blt.w	801c66c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801c438:	45bc      	cmp	ip, r7
 801c43a:	f340 8117 	ble.w	801c66c <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x26a>
 801c43e:	5c52      	ldrb	r2, [r2, r1]
 801c440:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801c444:	1c7a      	adds	r2, r7, #1
 801c446:	f100 8116 	bmi.w	801c676 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801c44a:	4594      	cmp	ip, r2
 801c44c:	f340 8113 	ble.w	801c676 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x274>
 801c450:	2e00      	cmp	r6, #0
 801c452:	f000 8112 	beq.w	801c67a <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x278>
 801c456:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801c45a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c45e:	3401      	adds	r4, #1
 801c460:	f100 810f 	bmi.w	801c682 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801c464:	45a0      	cmp	r8, r4
 801c466:	f340 810c 	ble.w	801c682 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x280>
 801c46a:	2800      	cmp	r0, #0
 801c46c:	f000 810c 	beq.w	801c688 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x286>
 801c470:	2f00      	cmp	r7, #0
 801c472:	f2c0 8104 	blt.w	801c67e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801c476:	45bc      	cmp	ip, r7
 801c478:	f340 8101 	ble.w	801c67e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x27c>
 801c47c:	f81e 200c 	ldrb.w	r2, [lr, ip]
 801c480:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 801c484:	3701      	adds	r7, #1
 801c486:	f100 8102 	bmi.w	801c68e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801c48a:	45bc      	cmp	ip, r7
 801c48c:	f340 80ff 	ble.w	801c68e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x28c>
 801c490:	2e00      	cmp	r6, #0
 801c492:	f000 80fe 	beq.w	801c692 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x290>
 801c496:	44f4      	add	ip, lr
 801c498:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801c49c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801c4a0:	b2b6      	uxth	r6, r6
 801c4a2:	b280      	uxth	r0, r0
 801c4a4:	fb00 fe06 	mul.w	lr, r0, r6
 801c4a8:	0136      	lsls	r6, r6, #4
 801c4aa:	eba6 070e 	sub.w	r7, r6, lr
 801c4ae:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801c4b2:	b2bf      	uxth	r7, r7
 801c4b4:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 801c4b8:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801c4bc:	fb0a f607 	mul.w	r6, sl, r7
 801c4c0:	b280      	uxth	r0, r0
 801c4c2:	1a1b      	subs	r3, r3, r0
 801c4c4:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801c4c8:	b29b      	uxth	r3, r3
 801c4ca:	fb0b 6603 	mla	r6, fp, r3, r6
 801c4ce:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801c4d2:	fb00 6609 	mla	r6, r0, r9, r6
 801c4d6:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801c4da:	fb0e 6608 	mla	r6, lr, r8, r6
 801c4de:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801c4e2:	9600      	str	r6, [sp, #0]
 801c4e4:	2e00      	cmp	r6, #0
 801c4e6:	f000 80be 	beq.w	801c666 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x264>
 801c4ea:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801c4ee:	fb0b fc0c 	mul.w	ip, fp, ip
 801c4f2:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801c4f6:	fb0b f505 	mul.w	r5, fp, r5
 801c4fa:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801c4fe:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801c502:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c506:	44dc      	add	ip, fp
 801c508:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c50c:	9501      	str	r5, [sp, #4]
 801c50e:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801c512:	9503      	str	r5, [sp, #12]
 801c514:	9d01      	ldr	r5, [sp, #4]
 801c516:	9e02      	ldr	r6, [sp, #8]
 801c518:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801c51c:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801c520:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 801c524:	fb0a fc0c 	mul.w	ip, sl, ip
 801c528:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801c52c:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801c530:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801c534:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c538:	4465      	add	r5, ip
 801c53a:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c53e:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801c542:	fb09 fc0c 	mul.w	ip, r9, ip
 801c546:	fb09 f904 	mul.w	r9, r9, r4
 801c54a:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801c54e:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801c552:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 801c556:	fb08 f404 	mul.w	r4, r8, r4
 801c55a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801c55e:	fb08 f802 	mul.w	r8, r8, r2
 801c562:	0a2d      	lsrs	r5, r5, #8
 801c564:	0a22      	lsrs	r2, r4, #8
 801c566:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801c56a:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801c56e:	437d      	muls	r5, r7
 801c570:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801c574:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801c578:	4414      	add	r4, r2
 801c57a:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801c57e:	fb0a fa01 	mul.w	sl, sl, r1
 801c582:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801c586:	9a03      	ldr	r2, [sp, #12]
 801c588:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 801c58c:	fb02 5503 	mla	r5, r2, r3, r5
 801c590:	0a24      	lsrs	r4, r4, #8
 801c592:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801c596:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801c59a:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801c59e:	fb04 540e 	mla	r4, r4, lr, r5
 801c5a2:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801c5a6:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801c5aa:	4461      	add	r1, ip
 801c5ac:	0a09      	lsrs	r1, r1, #8
 801c5ae:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801c5b2:	fb01 4100 	mla	r1, r1, r0, r4
 801c5b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c5ba:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c5be:	fb07 f70a 	mul.w	r7, r7, sl
 801c5c2:	0a09      	lsrs	r1, r1, #8
 801c5c4:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 801c5c8:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 801c5cc:	fb03 7101 	mla	r1, r3, r1, r7
 801c5d0:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801c5d4:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801c5d8:	fb0e 1e08 	mla	lr, lr, r8, r1
 801c5dc:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c5e0:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 801c5e4:	fb00 e101 	mla	r1, r0, r1, lr
 801c5e8:	f89d 0050 	ldrb.w	r0, [sp, #80]	; 0x50
 801c5ec:	9a00      	ldr	r2, [sp, #0]
 801c5ee:	b287      	uxth	r7, r0
 801c5f0:	437a      	muls	r2, r7
 801c5f2:	1c53      	adds	r3, r2, #1
 801c5f4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c5f8:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801c5fc:	0a09      	lsrs	r1, r1, #8
 801c5fe:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801c602:	4321      	orrs	r1, r4
 801c604:	0c0a      	lsrs	r2, r1, #16
 801c606:	8836      	ldrh	r6, [r6, #0]
 801c608:	fb12 f207 	smulbb	r2, r2, r7
 801c60c:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801c610:	b2c8      	uxtb	r0, r1
 801c612:	1235      	asrs	r5, r6, #8
 801c614:	fb14 f407 	smulbb	r4, r4, r7
 801c618:	fb10 f007 	smulbb	r0, r0, r7
 801c61c:	b2db      	uxtb	r3, r3
 801c61e:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801c622:	fb05 2503 	mla	r5, r5, r3, r2
 801c626:	10f2      	asrs	r2, r6, #3
 801c628:	00f6      	lsls	r6, r6, #3
 801c62a:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801c62e:	b2f6      	uxtb	r6, r6
 801c630:	fb02 4203 	mla	r2, r2, r3, r4
 801c634:	fb06 0303 	mla	r3, r6, r3, r0
 801c638:	b2ad      	uxth	r5, r5
 801c63a:	b299      	uxth	r1, r3
 801c63c:	b294      	uxth	r4, r2
 801c63e:	1c6b      	adds	r3, r5, #1
 801c640:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801c644:	1c62      	adds	r2, r4, #1
 801c646:	1c4b      	adds	r3, r1, #1
 801c648:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801c64c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801c650:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801c654:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801c658:	0952      	lsrs	r2, r2, #5
 801c65a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c65e:	432b      	orrs	r3, r5
 801c660:	4313      	orrs	r3, r2
 801c662:	9a02      	ldr	r2, [sp, #8]
 801c664:	8013      	strh	r3, [r2, #0]
 801c666:	b005      	add	sp, #20
 801c668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c66c:	2500      	movs	r5, #0
 801c66e:	e6e9      	b.n	801c444 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x42>
 801c670:	2100      	movs	r1, #0
 801c672:	460d      	mov	r5, r1
 801c674:	e6f3      	b.n	801c45e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801c676:	2100      	movs	r1, #0
 801c678:	e6f1      	b.n	801c45e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801c67a:	4631      	mov	r1, r6
 801c67c:	e6ef      	b.n	801c45e <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x5c>
 801c67e:	2400      	movs	r4, #0
 801c680:	e700      	b.n	801c484 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x82>
 801c682:	2200      	movs	r2, #0
 801c684:	4614      	mov	r4, r2
 801c686:	e70b      	b.n	801c4a0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801c688:	4602      	mov	r2, r0
 801c68a:	4604      	mov	r4, r0
 801c68c:	e708      	b.n	801c4a0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801c68e:	2200      	movs	r2, #0
 801c690:	e706      	b.n	801c4a0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>
 801c692:	4632      	mov	r2, r6
 801c694:	e704      	b.n	801c4a0 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh+0x9e>

0801c696 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c696:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c69a:	b09f      	sub	sp, #124	; 0x7c
 801c69c:	921b      	str	r2, [sp, #108]	; 0x6c
 801c69e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 801c6a0:	901d      	str	r0, [sp, #116]	; 0x74
 801c6a2:	9309      	str	r3, [sp, #36]	; 0x24
 801c6a4:	6850      	ldr	r0, [r2, #4]
 801c6a6:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 801c6aa:	9119      	str	r1, [sp, #100]	; 0x64
 801c6ac:	931c      	str	r3, [sp, #112]	; 0x70
 801c6ae:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	; 0xb8
 801c6b2:	fb00 1303 	mla	r3, r0, r3, r1
 801c6b6:	6812      	ldr	r2, [r2, #0]
 801c6b8:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 801c6ba:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801c6be:	930c      	str	r3, [sp, #48]	; 0x30
 801c6c0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801c6c2:	681b      	ldr	r3, [r3, #0]
 801c6c4:	9312      	str	r3, [sp, #72]	; 0x48
 801c6c6:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801c6c8:	685e      	ldr	r6, [r3, #4]
 801c6ca:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 801c6ce:	3604      	adds	r6, #4
 801c6d0:	930d      	str	r3, [sp, #52]	; 0x34
 801c6d2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801c6d4:	2b00      	cmp	r3, #0
 801c6d6:	dc03      	bgt.n	801c6e0 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c6d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801c6da:	2b00      	cmp	r3, #0
 801c6dc:	f340 8387 	ble.w	801cdee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801c6e0:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801c6e2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c6e6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c6ea:	1e48      	subs	r0, r1, #1
 801c6ec:	1e57      	subs	r7, r2, #1
 801c6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c6f0:	2b00      	cmp	r3, #0
 801c6f2:	f340 8194 	ble.w	801ca1e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x388>
 801c6f6:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801c6f8:	142b      	asrs	r3, r5, #16
 801c6fa:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801c6fe:	d406      	bmi.n	801c70e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c700:	4584      	cmp	ip, r0
 801c702:	da04      	bge.n	801c70e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c704:	2b00      	cmp	r3, #0
 801c706:	db02      	blt.n	801c70e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c708:	42bb      	cmp	r3, r7
 801c70a:	f2c0 8189 	blt.w	801ca20 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801c70e:	f11c 0c01 	adds.w	ip, ip, #1
 801c712:	f100 8177 	bmi.w	801ca04 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801c716:	4561      	cmp	r1, ip
 801c718:	f2c0 8174 	blt.w	801ca04 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801c71c:	3301      	adds	r3, #1
 801c71e:	f100 8171 	bmi.w	801ca04 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801c722:	429a      	cmp	r2, r3
 801c724:	f2c0 816e 	blt.w	801ca04 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801c728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c72a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 801c72c:	931a      	str	r3, [sp, #104]	; 0x68
 801c72e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801c730:	2b00      	cmp	r3, #0
 801c732:	f340 8193 	ble.w	801ca5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801c736:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c738:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801c73c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801c740:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801c742:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c746:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801c74a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801c74c:	141b      	asrs	r3, r3, #16
 801c74e:	f100 81d6 	bmi.w	801cafe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801c752:	f100 38ff 	add.w	r8, r0, #4294967295
 801c756:	4543      	cmp	r3, r8
 801c758:	f280 81d1 	bge.w	801cafe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801c75c:	f1bc 0f00 	cmp.w	ip, #0
 801c760:	f2c0 81cd 	blt.w	801cafe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801c764:	f10e 38ff 	add.w	r8, lr, #4294967295
 801c768:	45c4      	cmp	ip, r8
 801c76a:	f280 81c8 	bge.w	801cafe <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x468>
 801c76e:	b200      	sxth	r0, r0
 801c770:	fb0c 3300 	mla	r3, ip, r0, r3
 801c774:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801c776:	eb04 0803 	add.w	r8, r4, r3
 801c77a:	5ce3      	ldrb	r3, [r4, r3]
 801c77c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801c780:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801c784:	2a00      	cmp	r2, #0
 801c786:	f000 81af 	beq.w	801cae8 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801c78a:	f898 c001 	ldrb.w	ip, [r8, #1]
 801c78e:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801c792:	940e      	str	r4, [sp, #56]	; 0x38
 801c794:	0e24      	lsrs	r4, r4, #24
 801c796:	9415      	str	r4, [sp, #84]	; 0x54
 801c798:	b179      	cbz	r1, 801c7ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801c79a:	eb08 0c00 	add.w	ip, r8, r0
 801c79e:	f818 0000 	ldrb.w	r0, [r8, r0]
 801c7a2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801c7a6:	900a      	str	r0, [sp, #40]	; 0x28
 801c7a8:	0e00      	lsrs	r0, r0, #24
 801c7aa:	9013      	str	r0, [sp, #76]	; 0x4c
 801c7ac:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801c7b0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801c7b4:	900f      	str	r0, [sp, #60]	; 0x3c
 801c7b6:	0e00      	lsrs	r0, r0, #24
 801c7b8:	9016      	str	r0, [sp, #88]	; 0x58
 801c7ba:	b292      	uxth	r2, r2
 801c7bc:	b289      	uxth	r1, r1
 801c7be:	fb02 f901 	mul.w	r9, r2, r1
 801c7c2:	0112      	lsls	r2, r2, #4
 801c7c4:	eba2 0809 	sub.w	r8, r2, r9
 801c7c8:	9815      	ldr	r0, [sp, #84]	; 0x54
 801c7ca:	fa1f f888 	uxth.w	r8, r8
 801c7ce:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c7d2:	fb08 f000 	mul.w	r0, r8, r0
 801c7d6:	b289      	uxth	r1, r1
 801c7d8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801c7dc:	1a52      	subs	r2, r2, r1
 801c7de:	b292      	uxth	r2, r2
 801c7e0:	fb02 000e 	mla	r0, r2, lr, r0
 801c7e4:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c7e6:	fb01 0004 	mla	r0, r1, r4, r0
 801c7ea:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c7ec:	fb09 0004 	mla	r0, r9, r4, r0
 801c7f0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c7f4:	2800      	cmp	r0, #0
 801c7f6:	f000 80fa 	beq.w	801c9ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801c7fa:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801c7fe:	d01b      	beq.n	801c838 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 801c800:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801c804:	fb0e fa0a 	mul.w	sl, lr, sl
 801c808:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c80c:	fb0e fe03 	mul.w	lr, lr, r3
 801c810:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801c814:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c818:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801c81c:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801c820:	4453      	add	r3, sl
 801c822:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801c826:	0a1b      	lsrs	r3, r3, #8
 801c828:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c82c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801c830:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801c834:	ea43 030c 	orr.w	r3, r3, ip
 801c838:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c83a:	2cff      	cmp	r4, #255	; 0xff
 801c83c:	d021      	beq.n	801c882 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ec>
 801c83e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c840:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801c844:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c846:	fb04 fb0b 	mul.w	fp, r4, fp
 801c84a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c84c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c850:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c854:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801c856:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c85a:	fb04 fa0a 	mul.w	sl, r4, sl
 801c85e:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c862:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c866:	44de      	add	lr, fp
 801c868:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c86c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c870:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c874:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c878:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c87c:	ea4e 040a 	orr.w	r4, lr, sl
 801c880:	940e      	str	r4, [sp, #56]	; 0x38
 801c882:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c884:	2cff      	cmp	r4, #255	; 0xff
 801c886:	d021      	beq.n	801c8cc <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801c888:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c88a:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801c88e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c890:	fb04 fb0b 	mul.w	fp, r4, fp
 801c894:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c896:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c89a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c89e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801c8a0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c8a4:	fb04 fa0a 	mul.w	sl, r4, sl
 801c8a8:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c8ac:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c8b0:	44de      	add	lr, fp
 801c8b2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c8b6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c8ba:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c8be:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c8c2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c8c6:	ea4e 040a 	orr.w	r4, lr, sl
 801c8ca:	940a      	str	r4, [sp, #40]	; 0x28
 801c8cc:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c8ce:	2cff      	cmp	r4, #255	; 0xff
 801c8d0:	d021      	beq.n	801c916 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x280>
 801c8d2:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c8d4:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801c8d8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c8da:	fb04 fb0b 	mul.w	fp, r4, fp
 801c8de:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c8e0:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c8e4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801c8e8:	9c16      	ldr	r4, [sp, #88]	; 0x58
 801c8ea:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c8ee:	fb04 fa0a 	mul.w	sl, r4, sl
 801c8f2:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801c8f6:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801c8fa:	44de      	add	lr, fp
 801c8fc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c900:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c904:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c908:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801c90c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801c910:	ea4e 040a 	orr.w	r4, lr, sl
 801c914:	940f      	str	r4, [sp, #60]	; 0x3c
 801c916:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c918:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801c91c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801c920:	fb08 fc0c 	mul.w	ip, r8, ip
 801c924:	fb02 cc0e 	mla	ip, r2, lr, ip
 801c928:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801c92a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c92e:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c932:	fb01 cc0e 	mla	ip, r1, lr, ip
 801c936:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801c938:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801c93c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801c93e:	fb09 cc0e 	mla	ip, r9, lr, ip
 801c942:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801c946:	fb08 f80e 	mul.w	r8, r8, lr
 801c94a:	fb02 8303 	mla	r3, r2, r3, r8
 801c94e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c950:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c954:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801c958:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801c95a:	fb01 330a 	mla	r3, r1, sl, r3
 801c95e:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
 801c962:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801c964:	fb09 3901 	mla	r9, r9, r1, r3
 801c968:	4342      	muls	r2, r0
 801c96a:	1c50      	adds	r0, r2, #1
 801c96c:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801c970:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801c974:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c978:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801c97c:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801c980:	ea4c 0c09 	orr.w	ip, ip, r9
 801c984:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801c986:	ea4f 421c 	mov.w	r2, ip, lsr #16
 801c98a:	883b      	ldrh	r3, [r7, #0]
 801c98c:	fb12 f204 	smulbb	r2, r2, r4
 801c990:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801c994:	fa5f fc8c 	uxtb.w	ip, ip
 801c998:	1219      	asrs	r1, r3, #8
 801c99a:	fb1c fc04 	smulbb	ip, ip, r4
 801c99e:	b2c0      	uxtb	r0, r0
 801c9a0:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801c9a4:	fb01 2100 	mla	r1, r1, r0, r2
 801c9a8:	10da      	asrs	r2, r3, #3
 801c9aa:	00db      	lsls	r3, r3, #3
 801c9ac:	fb1e fe04 	smulbb	lr, lr, r4
 801c9b0:	b2db      	uxtb	r3, r3
 801c9b2:	fb03 c300 	mla	r3, r3, r0, ip
 801c9b6:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801c9ba:	b289      	uxth	r1, r1
 801c9bc:	fb02 e200 	mla	r2, r2, r0, lr
 801c9c0:	fa1f fc83 	uxth.w	ip, r3
 801c9c4:	1c4b      	adds	r3, r1, #1
 801c9c6:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801c9ca:	f10c 0301 	add.w	r3, ip, #1
 801c9ce:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801c9d2:	b292      	uxth	r2, r2
 801c9d4:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801c9d8:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801c9dc:	430b      	orrs	r3, r1
 801c9de:	1c51      	adds	r1, r2, #1
 801c9e0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801c9e4:	0952      	lsrs	r2, r2, #5
 801c9e6:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801c9ea:	4313      	orrs	r3, r2
 801c9ec:	803b      	strh	r3, [r7, #0]
 801c9ee:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801c9f0:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801c9f2:	3702      	adds	r7, #2
 801c9f4:	441a      	add	r2, r3
 801c9f6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801c9f8:	9229      	str	r2, [sp, #164]	; 0xa4
 801c9fa:	441d      	add	r5, r3
 801c9fc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 801c9fe:	3b01      	subs	r3, #1
 801ca00:	931a      	str	r3, [sp, #104]	; 0x68
 801ca02:	e694      	b.n	801c72e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801ca04:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801ca06:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801ca08:	441c      	add	r4, r3
 801ca0a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801ca0c:	9429      	str	r4, [sp, #164]	; 0xa4
 801ca0e:	441d      	add	r5, r3
 801ca10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca12:	3b01      	subs	r3, #1
 801ca14:	9309      	str	r3, [sp, #36]	; 0x24
 801ca16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ca18:	3302      	adds	r3, #2
 801ca1a:	930c      	str	r3, [sp, #48]	; 0x30
 801ca1c:	e667      	b.n	801c6ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801ca1e:	d024      	beq.n	801ca6a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3d4>
 801ca20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca22:	982b      	ldr	r0, [sp, #172]	; 0xac
 801ca24:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801ca26:	3b01      	subs	r3, #1
 801ca28:	fb00 4003 	mla	r0, r0, r3, r4
 801ca2c:	1400      	asrs	r0, r0, #16
 801ca2e:	f53f ae7b 	bmi.w	801c728 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ca32:	3901      	subs	r1, #1
 801ca34:	4288      	cmp	r0, r1
 801ca36:	f6bf ae77 	bge.w	801c728 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ca3a:	992c      	ldr	r1, [sp, #176]	; 0xb0
 801ca3c:	fb01 5303 	mla	r3, r1, r3, r5
 801ca40:	141b      	asrs	r3, r3, #16
 801ca42:	f53f ae71 	bmi.w	801c728 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ca46:	3a01      	subs	r2, #1
 801ca48:	4293      	cmp	r3, r2
 801ca4a:	f6bf ae6d 	bge.w	801c728 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801ca4e:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 801ca52:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 801ca56:	f1bb 0f00 	cmp.w	fp, #0
 801ca5a:	dc70      	bgt.n	801cb3e <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a8>
 801ca5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ca5e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ca62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801ca64:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801ca68:	930c      	str	r3, [sp, #48]	; 0x30
 801ca6a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801ca6c:	2b00      	cmp	r3, #0
 801ca6e:	f340 81be 	ble.w	801cdee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x758>
 801ca72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801ca76:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ca7a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ca7e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ca82:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ca86:	eef0 6a62 	vmov.f32	s13, s5
 801ca8a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ca8e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ca92:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ca96:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ca9a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ca9e:	edcd 6a29 	vstr	s13, [sp, #164]	; 0xa4
 801caa2:	eef0 6a43 	vmov.f32	s13, s6
 801caa6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801caaa:	ee12 2a90 	vmov	r2, s5
 801caae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801cab2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cab4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801cab8:	fb92 f3f3 	sdiv	r3, r2, r3
 801cabc:	ee13 2a10 	vmov	r2, s6
 801cac0:	932b      	str	r3, [sp, #172]	; 0xac
 801cac2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cac4:	ee16 5a90 	vmov	r5, s13
 801cac8:	fb92 f3f3 	sdiv	r3, r2, r3
 801cacc:	932c      	str	r3, [sp, #176]	; 0xb0
 801cace:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801cad0:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 801cad2:	3b01      	subs	r3, #1
 801cad4:	9319      	str	r3, [sp, #100]	; 0x64
 801cad6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801cad8:	bf08      	it	eq
 801cada:	4613      	moveq	r3, r2
 801cadc:	eeb0 3a67 	vmov.f32	s6, s15
 801cae0:	9309      	str	r3, [sp, #36]	; 0x24
 801cae2:	eef0 2a47 	vmov.f32	s5, s14
 801cae6:	e5f4      	b.n	801c6d2 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801cae8:	2900      	cmp	r1, #0
 801caea:	f43f ae66 	beq.w	801c7ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801caee:	f818 0000 	ldrb.w	r0, [r8, r0]
 801caf2:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801caf6:	900a      	str	r0, [sp, #40]	; 0x28
 801caf8:	0e00      	lsrs	r0, r0, #24
 801cafa:	9013      	str	r0, [sp, #76]	; 0x4c
 801cafc:	e65d      	b.n	801c7ba <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801cafe:	f113 0801 	adds.w	r8, r3, #1
 801cb02:	f53f af74 	bmi.w	801c9ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801cb06:	4540      	cmp	r0, r8
 801cb08:	f6ff af71 	blt.w	801c9ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801cb0c:	f11c 0801 	adds.w	r8, ip, #1
 801cb10:	f53f af6d 	bmi.w	801c9ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801cb14:	45c6      	cmp	lr, r8
 801cb16:	f6ff af6a 	blt.w	801c9ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801cb1a:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801cb1c:	9302      	str	r3, [sp, #8]
 801cb1e:	b200      	sxth	r0, r0
 801cb20:	fa0f f38e 	sxth.w	r3, lr
 801cb24:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801cb28:	e9cd c203 	strd	ip, r2, [sp, #12]
 801cb2c:	9301      	str	r3, [sp, #4]
 801cb2e:	9000      	str	r0, [sp, #0]
 801cb30:	4633      	mov	r3, r6
 801cb32:	9a12      	ldr	r2, [sp, #72]	; 0x48
 801cb34:	4639      	mov	r1, r7
 801cb36:	981d      	ldr	r0, [sp, #116]	; 0x74
 801cb38:	f7ff fc63 	bl	801c402 <_ZNK8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKhPKmssiihhh>
 801cb3c:	e757      	b.n	801c9ee <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801cb3e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801cb40:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 801cb42:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801cb46:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 801cb48:	1427      	asrs	r7, r4, #16
 801cb4a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cb4e:	142b      	asrs	r3, r5, #16
 801cb50:	fb01 7303 	mla	r3, r1, r3, r7
 801cb54:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801cb56:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801cb5a:	18e7      	adds	r7, r4, r3
 801cb5c:	5ce3      	ldrb	r3, [r4, r3]
 801cb5e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801cb62:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801cb66:	2a00      	cmp	r2, #0
 801cb68:	f000 8137 	beq.w	801cdda <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x744>
 801cb6c:	f897 e001 	ldrb.w	lr, [r7, #1]
 801cb70:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801cb74:	9410      	str	r4, [sp, #64]	; 0x40
 801cb76:	0e24      	lsrs	r4, r4, #24
 801cb78:	9417      	str	r4, [sp, #92]	; 0x5c
 801cb7a:	b170      	cbz	r0, 801cb9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801cb7c:	eb07 0e01 	add.w	lr, r7, r1
 801cb80:	5c79      	ldrb	r1, [r7, r1]
 801cb82:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801cb86:	910b      	str	r1, [sp, #44]	; 0x2c
 801cb88:	0e09      	lsrs	r1, r1, #24
 801cb8a:	9114      	str	r1, [sp, #80]	; 0x50
 801cb8c:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801cb90:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801cb94:	9111      	str	r1, [sp, #68]	; 0x44
 801cb96:	0e09      	lsrs	r1, r1, #24
 801cb98:	9118      	str	r1, [sp, #96]	; 0x60
 801cb9a:	b292      	uxth	r2, r2
 801cb9c:	b280      	uxth	r0, r0
 801cb9e:	fb02 f800 	mul.w	r8, r2, r0
 801cba2:	0112      	lsls	r2, r2, #4
 801cba4:	eba2 0e08 	sub.w	lr, r2, r8
 801cba8:	9917      	ldr	r1, [sp, #92]	; 0x5c
 801cbaa:	fa1f fe8e 	uxth.w	lr, lr
 801cbae:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801cbb2:	fb0e f101 	mul.w	r1, lr, r1
 801cbb6:	b280      	uxth	r0, r0
 801cbb8:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801cbbc:	1a12      	subs	r2, r2, r0
 801cbbe:	b292      	uxth	r2, r2
 801cbc0:	fb02 110c 	mla	r1, r2, ip, r1
 801cbc4:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cbc6:	fb00 1104 	mla	r1, r0, r4, r1
 801cbca:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801cbcc:	fb08 1104 	mla	r1, r8, r4, r1
 801cbd0:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801cbd4:	2900      	cmp	r1, #0
 801cbd6:	f000 80f5 	beq.w	801cdc4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72e>
 801cbda:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801cbde:	d019      	beq.n	801cc14 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x57e>
 801cbe0:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801cbe4:	fb0c fa0a 	mul.w	sl, ip, sl
 801cbe8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cbec:	fb0c fc03 	mul.w	ip, ip, r3
 801cbf0:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801cbf4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801cbf8:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801cbfc:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801cc00:	4453      	add	r3, sl
 801cc02:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801cc06:	0a1b      	lsrs	r3, r3, #8
 801cc08:	0a3f      	lsrs	r7, r7, #8
 801cc0a:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801cc0e:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801cc12:	433b      	orrs	r3, r7
 801cc14:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801cc16:	2cff      	cmp	r4, #255	; 0xff
 801cc18:	d020      	beq.n	801cc5c <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c6>
 801cc1a:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cc1c:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801cc20:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801cc22:	4367      	muls	r7, r4
 801cc24:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cc26:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801cc2a:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801cc2e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 801cc30:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801cc34:	fb04 fa0a 	mul.w	sl, r4, sl
 801cc38:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cc3c:	44bc      	add	ip, r7
 801cc3e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801cc42:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cc46:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cc4a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cc4e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cc52:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cc56:	ea4c 040a 	orr.w	r4, ip, sl
 801cc5a:	9410      	str	r4, [sp, #64]	; 0x40
 801cc5c:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cc5e:	2cff      	cmp	r4, #255	; 0xff
 801cc60:	d020      	beq.n	801cca4 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x60e>
 801cc62:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cc64:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801cc68:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cc6a:	4367      	muls	r7, r4
 801cc6c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cc6e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801cc72:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801cc76:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801cc78:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801cc7c:	fb04 fa0a 	mul.w	sl, r4, sl
 801cc80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cc84:	44bc      	add	ip, r7
 801cc86:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801cc8a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801cc8e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cc92:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cc96:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cc9a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cc9e:	ea4c 040a 	orr.w	r4, ip, sl
 801cca2:	940b      	str	r4, [sp, #44]	; 0x2c
 801cca4:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801cca6:	2cff      	cmp	r4, #255	; 0xff
 801cca8:	d020      	beq.n	801ccec <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x656>
 801ccaa:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ccac:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ccb0:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801ccb2:	4367      	muls	r7, r4
 801ccb4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801ccb6:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ccba:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801ccbe:	9c18      	ldr	r4, [sp, #96]	; 0x60
 801ccc0:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ccc4:	fb04 fa0a 	mul.w	sl, r4, sl
 801ccc8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cccc:	44bc      	add	ip, r7
 801ccce:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ccd2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ccd6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ccda:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ccde:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cce2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801cce6:	ea4c 040a 	orr.w	r4, ip, sl
 801ccea:	9411      	str	r4, [sp, #68]	; 0x44
 801ccec:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801ccee:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801ccf2:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801ccf6:	fb0e f707 	mul.w	r7, lr, r7
 801ccfa:	fb02 770c 	mla	r7, r2, ip, r7
 801ccfe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801cd00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cd04:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801cd08:	fb00 770c 	mla	r7, r0, ip, r7
 801cd0c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801cd0e:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801cd12:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801cd14:	fb08 770c 	mla	r7, r8, ip, r7
 801cd18:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801cd1c:	fb0e fe0c 	mul.w	lr, lr, ip
 801cd20:	fb02 e303 	mla	r3, r2, r3, lr
 801cd24:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801cd26:	0a3f      	lsrs	r7, r7, #8
 801cd28:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801cd2c:	fb00 330a 	mla	r3, r0, sl, r3
 801cd30:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801cd32:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801cd36:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 801cd3a:	fb08 3c0c 	mla	ip, r8, ip, r3
 801cd3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801cd40:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cd44:	434b      	muls	r3, r1
 801cd46:	1c59      	adds	r1, r3, #1
 801cd48:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801cd4c:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801cd50:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801cd54:	ea47 070c 	orr.w	r7, r7, ip
 801cd58:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801cd5a:	0c3b      	lsrs	r3, r7, #16
 801cd5c:	f8b9 0000 	ldrh.w	r0, [r9]
 801cd60:	fb13 f304 	smulbb	r3, r3, r4
 801cd64:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 801cd68:	b2ff      	uxtb	r7, r7
 801cd6a:	1202      	asrs	r2, r0, #8
 801cd6c:	fb17 f704 	smulbb	r7, r7, r4
 801cd70:	b2c9      	uxtb	r1, r1
 801cd72:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801cd76:	fb02 3201 	mla	r2, r2, r1, r3
 801cd7a:	10c3      	asrs	r3, r0, #3
 801cd7c:	00c0      	lsls	r0, r0, #3
 801cd7e:	fb1c fc04 	smulbb	ip, ip, r4
 801cd82:	b2c0      	uxtb	r0, r0
 801cd84:	fb00 7001 	mla	r0, r0, r1, r7
 801cd88:	b292      	uxth	r2, r2
 801cd8a:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801cd8e:	fb03 c301 	mla	r3, r3, r1, ip
 801cd92:	f102 0c01 	add.w	ip, r2, #1
 801cd96:	b280      	uxth	r0, r0
 801cd98:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801cd9c:	f402 4c78 	and.w	ip, r2, #63488	; 0xf800
 801cda0:	1c42      	adds	r2, r0, #1
 801cda2:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801cda6:	b29b      	uxth	r3, r3
 801cda8:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801cdac:	ea42 020c 	orr.w	r2, r2, ip
 801cdb0:	f103 0c01 	add.w	ip, r3, #1
 801cdb4:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801cdb8:	095b      	lsrs	r3, r3, #5
 801cdba:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801cdbe:	431a      	orrs	r2, r3
 801cdc0:	f8a9 2000 	strh.w	r2, [r9]
 801cdc4:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 801cdc6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801cdc8:	f109 0902 	add.w	r9, r9, #2
 801cdcc:	441a      	add	r2, r3
 801cdce:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801cdd0:	9229      	str	r2, [sp, #164]	; 0xa4
 801cdd2:	441d      	add	r5, r3
 801cdd4:	f10b 3bff 	add.w	fp, fp, #4294967295
 801cdd8:	e63d      	b.n	801ca56 <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801cdda:	2800      	cmp	r0, #0
 801cddc:	f43f aedd 	beq.w	801cb9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801cde0:	5c79      	ldrb	r1, [r7, r1]
 801cde2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801cde6:	910b      	str	r1, [sp, #44]	; 0x2c
 801cde8:	0e09      	lsrs	r1, r1, #24
 801cdea:	9114      	str	r1, [sp, #80]	; 0x50
 801cdec:	e6d5      	b.n	801cb9a <_ZN8touchgfx8LCD16bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x504>
 801cdee:	b01f      	add	sp, #124	; 0x7c
 801cdf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cdf4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>:
 801cdf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cdf8:	b089      	sub	sp, #36	; 0x24
 801cdfa:	9101      	str	r1, [sp, #4]
 801cdfc:	9801      	ldr	r0, [sp, #4]
 801cdfe:	f9bd c048 	ldrsh.w	ip, [sp, #72]	; 0x48
 801ce02:	8800      	ldrh	r0, [r0, #0]
 801ce04:	e9dd 1714 	ldrd	r1, r7, [sp, #80]	; 0x50
 801ce08:	1206      	asrs	r6, r0, #8
 801ce0a:	f006 06f8 	and.w	r6, r6, #248	; 0xf8
 801ce0e:	9602      	str	r6, [sp, #8]
 801ce10:	10c6      	asrs	r6, r0, #3
 801ce12:	00c0      	lsls	r0, r0, #3
 801ce14:	b2c0      	uxtb	r0, r0
 801ce16:	9004      	str	r0, [sp, #16]
 801ce18:	fb07 100c 	mla	r0, r7, ip, r1
 801ce1c:	f006 06fc 	and.w	r6, r6, #252	; 0xfc
 801ce20:	2f00      	cmp	r7, #0
 801ce22:	f9bd 804c 	ldrsh.w	r8, [sp, #76]	; 0x4c
 801ce26:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
 801ce2a:	f89d 405c 	ldrb.w	r4, [sp, #92]	; 0x5c
 801ce2e:	9603      	str	r6, [sp, #12]
 801ce30:	eb02 0e00 	add.w	lr, r2, r0
 801ce34:	f2c0 810a 	blt.w	801d04c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801ce38:	45b8      	cmp	r8, r7
 801ce3a:	f340 8107 	ble.w	801d04c <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x258>
 801ce3e:	2900      	cmp	r1, #0
 801ce40:	f2c0 8102 	blt.w	801d048 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801ce44:	458c      	cmp	ip, r1
 801ce46:	f340 80ff 	ble.w	801d048 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x254>
 801ce4a:	5c12      	ldrb	r2, [r2, r0]
 801ce4c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801ce50:	1c4a      	adds	r2, r1, #1
 801ce52:	f100 80fe 	bmi.w	801d052 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801ce56:	4594      	cmp	ip, r2
 801ce58:	f340 80fb 	ble.w	801d052 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x25e>
 801ce5c:	2d00      	cmp	r5, #0
 801ce5e:	f000 80fa 	beq.w	801d056 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x262>
 801ce62:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801ce66:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801ce6a:	3701      	adds	r7, #1
 801ce6c:	f100 80f7 	bmi.w	801d05e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801ce70:	45b8      	cmp	r8, r7
 801ce72:	f340 80f4 	ble.w	801d05e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x26a>
 801ce76:	2c00      	cmp	r4, #0
 801ce78:	f000 80f4 	beq.w	801d064 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x270>
 801ce7c:	2900      	cmp	r1, #0
 801ce7e:	eb0e 020c 	add.w	r2, lr, ip
 801ce82:	f2c0 80ea 	blt.w	801d05a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801ce86:	458c      	cmp	ip, r1
 801ce88:	f340 80e7 	ble.w	801d05a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x266>
 801ce8c:	f81e 700c 	ldrb.w	r7, [lr, ip]
 801ce90:	f853 7027 	ldr.w	r7, [r3, r7, lsl #2]
 801ce94:	3101      	adds	r1, #1
 801ce96:	f100 80e8 	bmi.w	801d06a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801ce9a:	458c      	cmp	ip, r1
 801ce9c:	f340 80e5 	ble.w	801d06a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x276>
 801cea0:	2d00      	cmp	r5, #0
 801cea2:	f000 80e4 	beq.w	801d06e <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x27a>
 801cea6:	7852      	ldrb	r2, [r2, #1]
 801cea8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801ceac:	0e0b      	lsrs	r3, r1, #24
 801ceae:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801ceb2:	9300      	str	r3, [sp, #0]
 801ceb4:	b2a4      	uxth	r4, r4
 801ceb6:	b2ab      	uxth	r3, r5
 801ceb8:	f000 15ff 	and.w	r5, r0, #16711935	; 0xff00ff
 801cebc:	fb03 f904 	mul.w	r9, r3, r4
 801cec0:	fb0a f505 	mul.w	r5, sl, r5
 801cec4:	011b      	lsls	r3, r3, #4
 801cec6:	eba3 0e09 	sub.w	lr, r3, r9
 801ceca:	f5c3 7280 	rsb	r2, r3, #256	; 0x100
 801cece:	f400 437f 	and.w	r3, r0, #65280	; 0xff00
 801ced2:	0a28      	lsrs	r0, r5, #8
 801ced4:	fb0a f303 	mul.w	r3, sl, r3
 801ced8:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801cedc:	f105 1501 	add.w	r5, r5, #65537	; 0x10001
 801cee0:	4405      	add	r5, r0
 801cee2:	0a2d      	lsrs	r5, r5, #8
 801cee4:	f005 10ff 	and.w	r0, r5, #16711935	; 0xff00ff
 801cee8:	9005      	str	r0, [sp, #20]
 801ceea:	f503 7080 	add.w	r0, r3, #256	; 0x100
 801ceee:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801cef2:	0a1b      	lsrs	r3, r3, #8
 801cef4:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801cef8:	9306      	str	r3, [sp, #24]
 801cefa:	f006 13ff 	and.w	r3, r6, #16711935	; 0xff00ff
 801cefe:	fb0b f303 	mul.w	r3, fp, r3
 801cf02:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801cf06:	ea4f 6817 	mov.w	r8, r7, lsr #24
 801cf0a:	fb0b f606 	mul.w	r6, fp, r6
 801cf0e:	f007 1cff 	and.w	ip, r7, #16711935	; 0xff00ff
 801cf12:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801cf16:	fb08 f707 	mul.w	r7, r8, r7
 801cf1a:	0a1d      	lsrs	r5, r3, #8
 801cf1c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801cf20:	f103 1301 	add.w	r3, r3, #65537	; 0x10001
 801cf24:	441d      	add	r5, r3
 801cf26:	f506 7380 	add.w	r3, r6, #256	; 0x100
 801cf2a:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801cf2e:	f507 7380 	add.w	r3, r7, #256	; 0x100
 801cf32:	eb03 2317 	add.w	r3, r3, r7, lsr #8
 801cf36:	fb08 fc0c 	mul.w	ip, r8, ip
 801cf3a:	0a1b      	lsrs	r3, r3, #8
 801cf3c:	9307      	str	r3, [sp, #28]
 801cf3e:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 801cf42:	0e0b      	lsrs	r3, r1, #24
 801cf44:	0a2d      	lsrs	r5, r5, #8
 801cf46:	fa1f fe8e 	uxth.w	lr, lr
 801cf4a:	435f      	muls	r7, r3
 801cf4c:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801cf50:	ebc9 1404 	rsb	r4, r9, r4, lsl #4
 801cf54:	fb05 f50e 	mul.w	r5, r5, lr
 801cf58:	b2a4      	uxth	r4, r4
 801cf5a:	ea4f 201c 	mov.w	r0, ip, lsr #8
 801cf5e:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801cf62:	4359      	muls	r1, r3
 801cf64:	1b12      	subs	r2, r2, r4
 801cf66:	9b05      	ldr	r3, [sp, #20]
 801cf68:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801cf6c:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801cf70:	b292      	uxth	r2, r2
 801cf72:	4460      	add	r0, ip
 801cf74:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801cf78:	fb03 5502 	mla	r5, r3, r2, r5
 801cf7c:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801cf80:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cf84:	44bc      	add	ip, r7
 801cf86:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cf8a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801cf8e:	0a36      	lsrs	r6, r6, #8
 801cf90:	fb0c 5509 	mla	r5, ip, r9, r5
 801cf94:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 801cf98:	fb0e f606 	mul.w	r6, lr, r6
 801cf9c:	9b06      	ldr	r3, [sp, #24]
 801cf9e:	0a00      	lsrs	r0, r0, #8
 801cfa0:	f000 10ff 	and.w	r0, r0, #16711935	; 0xff00ff
 801cfa4:	fb00 5504 	mla	r5, r0, r4, r5
 801cfa8:	f403 407f 	and.w	r0, r3, #65280	; 0xff00
 801cfac:	fb02 6000 	mla	r0, r2, r0, r6
 801cfb0:	f501 7780 	add.w	r7, r1, #256	; 0x100
 801cfb4:	fb0e fe0b 	mul.w	lr, lr, fp
 801cfb8:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801cfbc:	0a09      	lsrs	r1, r1, #8
 801cfbe:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801cfc2:	fb09 0001 	mla	r0, r9, r1, r0
 801cfc6:	fb02 e20a 	mla	r2, r2, sl, lr
 801cfca:	9b07      	ldr	r3, [sp, #28]
 801cfcc:	0a2d      	lsrs	r5, r5, #8
 801cfce:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cfd2:	fb04 0003 	mla	r0, r4, r3, r0
 801cfd6:	fb04 2408 	mla	r4, r4, r8, r2
 801cfda:	9b00      	ldr	r3, [sp, #0]
 801cfdc:	9a04      	ldr	r2, [sp, #16]
 801cfde:	fb09 4903 	mla	r9, r9, r3, r4
 801cfe2:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801cfe6:	9b02      	ldr	r3, [sp, #8]
 801cfe8:	fa5f f989 	uxtb.w	r9, r9
 801cfec:	fb03 f109 	mul.w	r1, r3, r9
 801cff0:	9b03      	ldr	r3, [sp, #12]
 801cff2:	0a00      	lsrs	r0, r0, #8
 801cff4:	fb03 f309 	mul.w	r3, r3, r9
 801cff8:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 801cffc:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801d000:	4305      	orrs	r5, r0
 801d002:	fb02 f909 	mul.w	r9, r2, r9
 801d006:	1c58      	adds	r0, r3, #1
 801d008:	1c4a      	adds	r2, r1, #1
 801d00a:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801d00e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801d012:	0a2b      	lsrs	r3, r5, #8
 801d014:	0c2a      	lsrs	r2, r5, #16
 801d016:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801d01a:	eb02 2211 	add.w	r2, r2, r1, lsr #8
 801d01e:	00db      	lsls	r3, r3, #3
 801d020:	0212      	lsls	r2, r2, #8
 801d022:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 801d026:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d02a:	4313      	orrs	r3, r2
 801d02c:	f109 0201 	add.w	r2, r9, #1
 801d030:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801d034:	eb05 2519 	add.w	r5, r5, r9, lsr #8
 801d038:	f3c5 05c4 	ubfx	r5, r5, #3, #5
 801d03c:	431d      	orrs	r5, r3
 801d03e:	9b01      	ldr	r3, [sp, #4]
 801d040:	801d      	strh	r5, [r3, #0]
 801d042:	b009      	add	sp, #36	; 0x24
 801d044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d048:	2000      	movs	r0, #0
 801d04a:	e701      	b.n	801ce50 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x5c>
 801d04c:	2600      	movs	r6, #0
 801d04e:	4630      	mov	r0, r6
 801d050:	e70b      	b.n	801ce6a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801d052:	2600      	movs	r6, #0
 801d054:	e709      	b.n	801ce6a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801d056:	462e      	mov	r6, r5
 801d058:	e707      	b.n	801ce6a <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0x76>
 801d05a:	2700      	movs	r7, #0
 801d05c:	e71a      	b.n	801ce94 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xa0>
 801d05e:	2100      	movs	r1, #0
 801d060:	460f      	mov	r7, r1
 801d062:	e723      	b.n	801ceac <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801d064:	4621      	mov	r1, r4
 801d066:	4627      	mov	r7, r4
 801d068:	e720      	b.n	801ceac <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801d06a:	2100      	movs	r1, #0
 801d06c:	e71e      	b.n	801ceac <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
 801d06e:	4629      	mov	r1, r5
 801d070:	e71c      	b.n	801ceac <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh+0xb8>
	...

0801d074 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d078:	b09b      	sub	sp, #108	; 0x6c
 801d07a:	9218      	str	r2, [sp, #96]	; 0x60
 801d07c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 801d07e:	9019      	str	r0, [sp, #100]	; 0x64
 801d080:	6850      	ldr	r0, [r2, #4]
 801d082:	9116      	str	r1, [sp, #88]	; 0x58
 801d084:	9307      	str	r3, [sp, #28]
 801d086:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 801d08a:	fb00 1303 	mla	r3, r0, r3, r1
 801d08e:	6812      	ldr	r2, [r2, #0]
 801d090:	9d26      	ldr	r5, [sp, #152]	; 0x98
 801d092:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801d096:	930a      	str	r3, [sp, #40]	; 0x28
 801d098:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d09a:	681b      	ldr	r3, [r3, #0]
 801d09c:	930f      	str	r3, [sp, #60]	; 0x3c
 801d09e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d0a0:	685e      	ldr	r6, [r3, #4]
 801d0a2:	3604      	adds	r6, #4
 801d0a4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d0a6:	2b00      	cmp	r3, #0
 801d0a8:	dc03      	bgt.n	801d0b2 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801d0aa:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801d0ac:	2b00      	cmp	r3, #0
 801d0ae:	f340 8373 	ble.w	801d798 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801d0b2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d0b4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d0b8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d0bc:	1e48      	subs	r0, r1, #1
 801d0be:	1e57      	subs	r7, r2, #1
 801d0c0:	9b07      	ldr	r3, [sp, #28]
 801d0c2:	2b00      	cmp	r3, #0
 801d0c4:	f340 818f 	ble.w	801d3e6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x372>
 801d0c8:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801d0ca:	142b      	asrs	r3, r5, #16
 801d0cc:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801d0d0:	d406      	bmi.n	801d0e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d0d2:	4584      	cmp	ip, r0
 801d0d4:	da04      	bge.n	801d0e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d0d6:	2b00      	cmp	r3, #0
 801d0d8:	db02      	blt.n	801d0e0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801d0da:	42bb      	cmp	r3, r7
 801d0dc:	f2c0 8184 	blt.w	801d3e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x374>
 801d0e0:	f11c 0c01 	adds.w	ip, ip, #1
 801d0e4:	f100 8172 	bmi.w	801d3cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801d0e8:	4561      	cmp	r1, ip
 801d0ea:	f2c0 816f 	blt.w	801d3cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801d0ee:	3301      	adds	r3, #1
 801d0f0:	f100 816c 	bmi.w	801d3cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801d0f4:	429a      	cmp	r2, r3
 801d0f6:	f2c0 8169 	blt.w	801d3cc <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x358>
 801d0fa:	9b07      	ldr	r3, [sp, #28]
 801d0fc:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801d0fe:	9317      	str	r3, [sp, #92]	; 0x5c
 801d100:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d102:	2b00      	cmp	r3, #0
 801d104:	f340 818e 	ble.w	801d424 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b0>
 801d108:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801d10a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801d10e:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d112:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d114:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d118:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801d11c:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801d11e:	141b      	asrs	r3, r3, #16
 801d120:	f100 81d1 	bmi.w	801d4c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801d124:	f101 38ff 	add.w	r8, r1, #4294967295
 801d128:	4543      	cmp	r3, r8
 801d12a:	f280 81cc 	bge.w	801d4c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801d12e:	f1bc 0f00 	cmp.w	ip, #0
 801d132:	f2c0 81c8 	blt.w	801d4c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801d136:	f10e 38ff 	add.w	r8, lr, #4294967295
 801d13a:	45c4      	cmp	ip, r8
 801d13c:	f280 81c3 	bge.w	801d4c6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801d140:	b209      	sxth	r1, r1
 801d142:	fb0c 3301 	mla	r3, ip, r1, r3
 801d146:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d148:	eb04 0803 	add.w	r8, r4, r3
 801d14c:	5ce3      	ldrb	r3, [r4, r3]
 801d14e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d152:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801d156:	2a00      	cmp	r2, #0
 801d158:	f000 81aa 	beq.w	801d4b0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x43c>
 801d15c:	f898 c001 	ldrb.w	ip, [r8, #1]
 801d160:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801d164:	940b      	str	r4, [sp, #44]	; 0x2c
 801d166:	0e24      	lsrs	r4, r4, #24
 801d168:	9412      	str	r4, [sp, #72]	; 0x48
 801d16a:	b178      	cbz	r0, 801d18c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801d16c:	eb08 0c01 	add.w	ip, r8, r1
 801d170:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d174:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d178:	9108      	str	r1, [sp, #32]
 801d17a:	0e09      	lsrs	r1, r1, #24
 801d17c:	9110      	str	r1, [sp, #64]	; 0x40
 801d17e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801d182:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d186:	910c      	str	r1, [sp, #48]	; 0x30
 801d188:	0e09      	lsrs	r1, r1, #24
 801d18a:	9113      	str	r1, [sp, #76]	; 0x4c
 801d18c:	b292      	uxth	r2, r2
 801d18e:	b280      	uxth	r0, r0
 801d190:	fb02 f900 	mul.w	r9, r2, r0
 801d194:	0112      	lsls	r2, r2, #4
 801d196:	eba2 0809 	sub.w	r8, r2, r9
 801d19a:	9912      	ldr	r1, [sp, #72]	; 0x48
 801d19c:	fa1f f888 	uxth.w	r8, r8
 801d1a0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801d1a4:	fb08 f101 	mul.w	r1, r8, r1
 801d1a8:	b280      	uxth	r0, r0
 801d1aa:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801d1ae:	1a12      	subs	r2, r2, r0
 801d1b0:	b292      	uxth	r2, r2
 801d1b2:	fb02 110e 	mla	r1, r2, lr, r1
 801d1b6:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d1b8:	fb00 1104 	mla	r1, r0, r4, r1
 801d1bc:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d1be:	fb09 1104 	mla	r1, r9, r4, r1
 801d1c2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d1c6:	2900      	cmp	r1, #0
 801d1c8:	f000 80f5 	beq.w	801d3b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801d1cc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801d1d0:	d01b      	beq.n	801d20a <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801d1d2:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801d1d6:	fb0e fa0a 	mul.w	sl, lr, sl
 801d1da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d1de:	fb0e fe03 	mul.w	lr, lr, r3
 801d1e2:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d1e6:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d1ea:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d1ee:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801d1f2:	4453      	add	r3, sl
 801d1f4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d1f8:	0a1b      	lsrs	r3, r3, #8
 801d1fa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d1fe:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d202:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d206:	ea43 030c 	orr.w	r3, r3, ip
 801d20a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d20c:	2cff      	cmp	r4, #255	; 0xff
 801d20e:	d021      	beq.n	801d254 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e0>
 801d210:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d212:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d216:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d218:	fb04 fb0b 	mul.w	fp, r4, fp
 801d21c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d21e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d222:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d226:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801d228:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d22c:	fb04 fa0a 	mul.w	sl, r4, sl
 801d230:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d234:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d238:	44de      	add	lr, fp
 801d23a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d23e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d242:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d246:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d24a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d24e:	ea4e 040a 	orr.w	r4, lr, sl
 801d252:	940b      	str	r4, [sp, #44]	; 0x2c
 801d254:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d256:	2cff      	cmp	r4, #255	; 0xff
 801d258:	d021      	beq.n	801d29e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22a>
 801d25a:	9c08      	ldr	r4, [sp, #32]
 801d25c:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d260:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d262:	fb04 fb0b 	mul.w	fp, r4, fp
 801d266:	9c08      	ldr	r4, [sp, #32]
 801d268:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d26c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d270:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801d272:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d276:	fb04 fa0a 	mul.w	sl, r4, sl
 801d27a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d27e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d282:	44de      	add	lr, fp
 801d284:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d288:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d28c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d290:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d294:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d298:	ea4e 040a 	orr.w	r4, lr, sl
 801d29c:	9408      	str	r4, [sp, #32]
 801d29e:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d2a0:	2cff      	cmp	r4, #255	; 0xff
 801d2a2:	d021      	beq.n	801d2e8 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x274>
 801d2a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d2a6:	f004 1bff 	and.w	fp, r4, #16711935	; 0xff00ff
 801d2aa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d2ac:	fb04 fb0b 	mul.w	fp, r4, fp
 801d2b0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d2b2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d2b6:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d2ba:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 801d2bc:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d2c0:	fb04 fa0a 	mul.w	sl, r4, sl
 801d2c4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801d2c8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801d2cc:	44de      	add	lr, fp
 801d2ce:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d2d2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d2d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d2da:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801d2de:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d2e2:	ea4e 040a 	orr.w	r4, lr, sl
 801d2e6:	940c      	str	r4, [sp, #48]	; 0x30
 801d2e8:	43c9      	mvns	r1, r1
 801d2ea:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d2ec:	f003 1eff 	and.w	lr, r3, #16711935	; 0xff00ff
 801d2f0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d2f4:	fb08 fc0c 	mul.w	ip, r8, ip
 801d2f8:	fb02 cc0e 	mla	ip, r2, lr, ip
 801d2fc:	9c08      	ldr	r4, [sp, #32]
 801d2fe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d302:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801d306:	fb00 cc0e 	mla	ip, r0, lr, ip
 801d30a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801d30c:	f004 1eff 	and.w	lr, r4, #16711935	; 0xff00ff
 801d310:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801d312:	fb09 cc0e 	mla	ip, r9, lr, ip
 801d316:	f404 4e7f 	and.w	lr, r4, #65280	; 0xff00
 801d31a:	fb08 f80e 	mul.w	r8, r8, lr
 801d31e:	fb02 8303 	mla	r3, r2, r3, r8
 801d322:	9a08      	ldr	r2, [sp, #32]
 801d324:	f8b7 8000 	ldrh.w	r8, [r7]
 801d328:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 801d32c:	fb00 330a 	mla	r3, r0, sl, r3
 801d330:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801d332:	fa5f fe81 	uxtb.w	lr, r1
 801d336:	f402 407f 	and.w	r0, r2, #65280	; 0xff00
 801d33a:	fb09 3900 	mla	r9, r9, r0, r3
 801d33e:	ea4f 2228 	mov.w	r2, r8, asr #8
 801d342:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801d346:	fb02 f20e 	mul.w	r2, r2, lr
 801d34a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d34e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d352:	ea4f 00e8 	mov.w	r0, r8, asr #3
 801d356:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d35a:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801d35e:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801d362:	ea4c 0c09 	orr.w	ip, ip, r9
 801d366:	fb00 f00e 	mul.w	r0, r0, lr
 801d36a:	1c53      	adds	r3, r2, #1
 801d36c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801d370:	ea4f 431c 	mov.w	r3, ip, lsr #16
 801d374:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d378:	4a62      	ldr	r2, [pc, #392]	; (801d504 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>)
 801d37a:	b2db      	uxtb	r3, r3
 801d37c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 801d380:	ea02 2203 	and.w	r2, r2, r3, lsl #8
 801d384:	b2c9      	uxtb	r1, r1
 801d386:	1c43      	adds	r3, r0, #1
 801d388:	fb01 f10e 	mul.w	r1, r1, lr
 801d38c:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801d390:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801d394:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801d398:	00db      	lsls	r3, r3, #3
 801d39a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d39e:	4313      	orrs	r3, r2
 801d3a0:	1c4a      	adds	r2, r1, #1
 801d3a2:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801d3a6:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801d3aa:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 801d3ae:	ea4c 0c03 	orr.w	ip, ip, r3
 801d3b2:	f8a7 c000 	strh.w	ip, [r7]
 801d3b6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d3b8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801d3ba:	3702      	adds	r7, #2
 801d3bc:	441a      	add	r2, r3
 801d3be:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d3c0:	9225      	str	r2, [sp, #148]	; 0x94
 801d3c2:	441d      	add	r5, r3
 801d3c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801d3c6:	3b01      	subs	r3, #1
 801d3c8:	9317      	str	r3, [sp, #92]	; 0x5c
 801d3ca:	e699      	b.n	801d100 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d3cc:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d3ce:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801d3d0:	441c      	add	r4, r3
 801d3d2:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d3d4:	9425      	str	r4, [sp, #148]	; 0x94
 801d3d6:	441d      	add	r5, r3
 801d3d8:	9b07      	ldr	r3, [sp, #28]
 801d3da:	3b01      	subs	r3, #1
 801d3dc:	9307      	str	r3, [sp, #28]
 801d3de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d3e0:	3302      	adds	r3, #2
 801d3e2:	930a      	str	r3, [sp, #40]	; 0x28
 801d3e4:	e66c      	b.n	801d0c0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801d3e6:	d024      	beq.n	801d432 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3be>
 801d3e8:	9b07      	ldr	r3, [sp, #28]
 801d3ea:	9827      	ldr	r0, [sp, #156]	; 0x9c
 801d3ec:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801d3ee:	3b01      	subs	r3, #1
 801d3f0:	fb00 4003 	mla	r0, r0, r3, r4
 801d3f4:	1400      	asrs	r0, r0, #16
 801d3f6:	f53f ae80 	bmi.w	801d0fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d3fa:	3901      	subs	r1, #1
 801d3fc:	4288      	cmp	r0, r1
 801d3fe:	f6bf ae7c 	bge.w	801d0fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d402:	9928      	ldr	r1, [sp, #160]	; 0xa0
 801d404:	fb01 5303 	mla	r3, r1, r3, r5
 801d408:	141b      	asrs	r3, r3, #16
 801d40a:	f53f ae76 	bmi.w	801d0fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d40e:	3a01      	subs	r2, #1
 801d410:	4293      	cmp	r3, r2
 801d412:	f6bf ae72 	bge.w	801d0fa <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801d416:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801d41a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801d41e:	f1bb 0f00 	cmp.w	fp, #0
 801d422:	dc71      	bgt.n	801d508 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x494>
 801d424:	9b07      	ldr	r3, [sp, #28]
 801d426:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d42a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801d42c:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801d430:	930a      	str	r3, [sp, #40]	; 0x28
 801d432:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d434:	2b00      	cmp	r3, #0
 801d436:	f340 81af 	ble.w	801d798 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x724>
 801d43a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801d43e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d442:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d446:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d44a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d44e:	eef0 6a62 	vmov.f32	s13, s5
 801d452:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d456:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d45a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d45e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d462:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d466:	edcd 6a25 	vstr	s13, [sp, #148]	; 0x94
 801d46a:	eef0 6a43 	vmov.f32	s13, s6
 801d46e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d472:	ee12 2a90 	vmov	r2, s5
 801d476:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d47a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d47c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d480:	fb92 f3f3 	sdiv	r3, r2, r3
 801d484:	ee13 2a10 	vmov	r2, s6
 801d488:	9327      	str	r3, [sp, #156]	; 0x9c
 801d48a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d48c:	ee16 5a90 	vmov	r5, s13
 801d490:	fb92 f3f3 	sdiv	r3, r2, r3
 801d494:	9328      	str	r3, [sp, #160]	; 0xa0
 801d496:	9b16      	ldr	r3, [sp, #88]	; 0x58
 801d498:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801d49a:	3b01      	subs	r3, #1
 801d49c:	9316      	str	r3, [sp, #88]	; 0x58
 801d49e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801d4a0:	bf08      	it	eq
 801d4a2:	4613      	moveq	r3, r2
 801d4a4:	eeb0 3a67 	vmov.f32	s6, s15
 801d4a8:	9307      	str	r3, [sp, #28]
 801d4aa:	eef0 2a47 	vmov.f32	s5, s14
 801d4ae:	e5f9      	b.n	801d0a4 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30>
 801d4b0:	2800      	cmp	r0, #0
 801d4b2:	f43f ae6b 	beq.w	801d18c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801d4b6:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d4ba:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d4be:	9108      	str	r1, [sp, #32]
 801d4c0:	0e09      	lsrs	r1, r1, #24
 801d4c2:	9110      	str	r1, [sp, #64]	; 0x40
 801d4c4:	e662      	b.n	801d18c <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801d4c6:	f113 0801 	adds.w	r8, r3, #1
 801d4ca:	f53f af74 	bmi.w	801d3b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801d4ce:	4541      	cmp	r1, r8
 801d4d0:	f6ff af71 	blt.w	801d3b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801d4d4:	f11c 0801 	adds.w	r8, ip, #1
 801d4d8:	f53f af6d 	bmi.w	801d3b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801d4dc:	45c6      	cmp	lr, r8
 801d4de:	f6ff af6a 	blt.w	801d3b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801d4e2:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801d4e6:	b209      	sxth	r1, r1
 801d4e8:	fa0f f38e 	sxth.w	r3, lr
 801d4ec:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801d4f0:	9301      	str	r3, [sp, #4]
 801d4f2:	9100      	str	r1, [sp, #0]
 801d4f4:	4633      	mov	r3, r6
 801d4f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801d4f8:	4639      	mov	r1, r7
 801d4fa:	9819      	ldr	r0, [sp, #100]	; 0x64
 801d4fc:	f7ff fc7a 	bl	801cdf4 <_ZNK8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKmssiihh>
 801d500:	e759      	b.n	801d3b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x342>
 801d502:	bf00      	nop
 801d504:	fffff800 	.word	0xfffff800
 801d508:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801d50a:	9c25      	ldr	r4, [sp, #148]	; 0x94
 801d50c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d510:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 801d512:	1427      	asrs	r7, r4, #16
 801d514:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d518:	142b      	asrs	r3, r5, #16
 801d51a:	fb01 7303 	mla	r3, r1, r3, r7
 801d51e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801d520:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d524:	18e7      	adds	r7, r4, r3
 801d526:	5ce3      	ldrb	r3, [r4, r3]
 801d528:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d52c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801d530:	2a00      	cmp	r2, #0
 801d532:	f000 8127 	beq.w	801d784 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 801d536:	f897 e001 	ldrb.w	lr, [r7, #1]
 801d53a:	f856 402e 	ldr.w	r4, [r6, lr, lsl #2]
 801d53e:	940d      	str	r4, [sp, #52]	; 0x34
 801d540:	0e24      	lsrs	r4, r4, #24
 801d542:	9414      	str	r4, [sp, #80]	; 0x50
 801d544:	b170      	cbz	r0, 801d564 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801d546:	eb07 0e01 	add.w	lr, r7, r1
 801d54a:	5c79      	ldrb	r1, [r7, r1]
 801d54c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d550:	9109      	str	r1, [sp, #36]	; 0x24
 801d552:	0e09      	lsrs	r1, r1, #24
 801d554:	9111      	str	r1, [sp, #68]	; 0x44
 801d556:	f89e 1001 	ldrb.w	r1, [lr, #1]
 801d55a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d55e:	910e      	str	r1, [sp, #56]	; 0x38
 801d560:	0e09      	lsrs	r1, r1, #24
 801d562:	9115      	str	r1, [sp, #84]	; 0x54
 801d564:	b292      	uxth	r2, r2
 801d566:	b280      	uxth	r0, r0
 801d568:	fb02 f800 	mul.w	r8, r2, r0
 801d56c:	0112      	lsls	r2, r2, #4
 801d56e:	eba2 0e08 	sub.w	lr, r2, r8
 801d572:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 801d576:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801d578:	fa1f fe8e 	uxth.w	lr, lr
 801d57c:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801d580:	fb0e f202 	mul.w	r2, lr, r2
 801d584:	b280      	uxth	r0, r0
 801d586:	1a09      	subs	r1, r1, r0
 801d588:	b289      	uxth	r1, r1
 801d58a:	fb01 220c 	mla	r2, r1, ip, r2
 801d58e:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d590:	fb00 2204 	mla	r2, r0, r4, r2
 801d594:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d596:	fb08 2204 	mla	r2, r8, r4, r2
 801d59a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801d59e:	2a00      	cmp	r2, #0
 801d5a0:	f000 80e5 	beq.w	801d76e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fa>
 801d5a4:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801d5a8:	d019      	beq.n	801d5de <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56a>
 801d5aa:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801d5ae:	fb0c fa0a 	mul.w	sl, ip, sl
 801d5b2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d5b6:	fb0c fc03 	mul.w	ip, ip, r3
 801d5ba:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d5be:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d5c2:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801d5c6:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801d5ca:	4453      	add	r3, sl
 801d5cc:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d5d0:	0a1b      	lsrs	r3, r3, #8
 801d5d2:	0a3f      	lsrs	r7, r7, #8
 801d5d4:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801d5d8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801d5dc:	433b      	orrs	r3, r7
 801d5de:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d5e0:	2cff      	cmp	r4, #255	; 0xff
 801d5e2:	d020      	beq.n	801d626 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5b2>
 801d5e4:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d5e6:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d5ea:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d5ec:	4367      	muls	r7, r4
 801d5ee:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d5f0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d5f4:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d5f8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 801d5fa:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d5fe:	fb04 fa0a 	mul.w	sl, r4, sl
 801d602:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d606:	44bc      	add	ip, r7
 801d608:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d60c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d610:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d614:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d618:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d61c:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d620:	ea4c 040a 	orr.w	r4, ip, sl
 801d624:	940d      	str	r4, [sp, #52]	; 0x34
 801d626:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d628:	2cff      	cmp	r4, #255	; 0xff
 801d62a:	d020      	beq.n	801d66e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fa>
 801d62c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801d62e:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d632:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d634:	4367      	muls	r7, r4
 801d636:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801d638:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d63c:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d640:	9c11      	ldr	r4, [sp, #68]	; 0x44
 801d642:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d646:	fb04 fa0a 	mul.w	sl, r4, sl
 801d64a:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d64e:	44bc      	add	ip, r7
 801d650:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d654:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d658:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d65c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d660:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d664:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d668:	ea4c 040a 	orr.w	r4, ip, sl
 801d66c:	9409      	str	r4, [sp, #36]	; 0x24
 801d66e:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d670:	2cff      	cmp	r4, #255	; 0xff
 801d672:	d020      	beq.n	801d6b6 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x642>
 801d674:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d676:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d67a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d67c:	4367      	muls	r7, r4
 801d67e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d680:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d684:	f404 4a7f 	and.w	sl, r4, #65280	; 0xff00
 801d688:	9c15      	ldr	r4, [sp, #84]	; 0x54
 801d68a:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801d68e:	fb04 fa0a 	mul.w	sl, r4, sl
 801d692:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d696:	44bc      	add	ip, r7
 801d698:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801d69c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d6a0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d6a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d6a8:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801d6ac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801d6b0:	ea4c 040a 	orr.w	r4, ip, sl
 801d6b4:	940e      	str	r4, [sp, #56]	; 0x38
 801d6b6:	43d2      	mvns	r2, r2
 801d6b8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d6ba:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 801d6be:	f004 17ff 	and.w	r7, r4, #16711935	; 0xff00ff
 801d6c2:	fb0e f707 	mul.w	r7, lr, r7
 801d6c6:	fb01 770c 	mla	r7, r1, ip, r7
 801d6ca:	9c09      	ldr	r4, [sp, #36]	; 0x24
 801d6cc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801d6d0:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d6d4:	fb00 770c 	mla	r7, r0, ip, r7
 801d6d8:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801d6da:	b2d2      	uxtb	r2, r2
 801d6dc:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801d6e0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801d6e2:	fb08 770c 	mla	r7, r8, ip, r7
 801d6e6:	f404 4c7f 	and.w	ip, r4, #65280	; 0xff00
 801d6ea:	fb0e fe0c 	mul.w	lr, lr, ip
 801d6ee:	fb01 e303 	mla	r3, r1, r3, lr
 801d6f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 801d6f4:	0a3f      	lsrs	r7, r7, #8
 801d6f6:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 801d6fa:	fb00 330a 	mla	r3, r0, sl, r3
 801d6fe:	990e      	ldr	r1, [sp, #56]	; 0x38
 801d700:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 801d704:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 801d708:	fb08 3c0c 	mla	ip, r8, ip, r3
 801d70c:	f8b9 3000 	ldrh.w	r3, [r9]
 801d710:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d714:	1218      	asrs	r0, r3, #8
 801d716:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801d71a:	4350      	muls	r0, r2
 801d71c:	10d9      	asrs	r1, r3, #3
 801d71e:	00db      	lsls	r3, r3, #3
 801d720:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801d724:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801d728:	b2db      	uxtb	r3, r3
 801d72a:	ea47 070c 	orr.w	r7, r7, ip
 801d72e:	4351      	muls	r1, r2
 801d730:	4353      	muls	r3, r2
 801d732:	1c42      	adds	r2, r0, #1
 801d734:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801d738:	0c3a      	lsrs	r2, r7, #16
 801d73a:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801d73e:	4a18      	ldr	r2, [pc, #96]	; (801d7a0 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72c>)
 801d740:	b2c0      	uxtb	r0, r0
 801d742:	ea02 2000 	and.w	r0, r2, r0, lsl #8
 801d746:	1c4a      	adds	r2, r1, #1
 801d748:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801d74c:	0a3a      	lsrs	r2, r7, #8
 801d74e:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801d752:	00c9      	lsls	r1, r1, #3
 801d754:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801d758:	4301      	orrs	r1, r0
 801d75a:	1c58      	adds	r0, r3, #1
 801d75c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801d760:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801d764:	f3c7 00c4 	ubfx	r0, r7, #3, #5
 801d768:	4308      	orrs	r0, r1
 801d76a:	f8a9 0000 	strh.w	r0, [r9]
 801d76e:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 801d770:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801d772:	f109 0902 	add.w	r9, r9, #2
 801d776:	441a      	add	r2, r3
 801d778:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801d77a:	9225      	str	r2, [sp, #148]	; 0x94
 801d77c:	441d      	add	r5, r3
 801d77e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d782:	e64c      	b.n	801d41e <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801d784:	2800      	cmp	r0, #0
 801d786:	f43f aeed 	beq.w	801d564 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801d78a:	5c79      	ldrb	r1, [r7, r1]
 801d78c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d790:	9109      	str	r1, [sp, #36]	; 0x24
 801d792:	0e09      	lsrs	r1, r1, #24
 801d794:	9111      	str	r1, [sp, #68]	; 0x44
 801d796:	e6e5      	b.n	801d564 <_ZN8touchgfx8LCD16bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4f0>
 801d798:	b01b      	add	sp, #108	; 0x6c
 801d79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d79e:	bf00      	nop
 801d7a0:	fffff800 	.word	0xfffff800

0801d7a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>:
 801d7a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d7a8:	b085      	sub	sp, #20
 801d7aa:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801d7ae:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 801d7b2:	fb00 7406 	mla	r4, r0, r6, r7
 801d7b6:	2800      	cmp	r0, #0
 801d7b8:	eb02 0544 	add.w	r5, r2, r4, lsl #1
 801d7bc:	9103      	str	r1, [sp, #12]
 801d7be:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 801d7c2:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 801d7c6:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801d7ca:	9501      	str	r5, [sp, #4]
 801d7cc:	eb03 0904 	add.w	r9, r3, r4
 801d7d0:	f2c0 8150 	blt.w	801da74 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 801d7d4:	4583      	cmp	fp, r0
 801d7d6:	f340 814d 	ble.w	801da74 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2d0>
 801d7da:	2f00      	cmp	r7, #0
 801d7dc:	f2c0 8146 	blt.w	801da6c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 801d7e0:	42be      	cmp	r6, r7
 801d7e2:	f340 8143 	ble.w	801da6c <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2c8>
 801d7e6:	f813 c004 	ldrb.w	ip, [r3, r4]
 801d7ea:	f832 3014 	ldrh.w	r3, [r2, r4, lsl #1]
 801d7ee:	f64f 041f 	movw	r4, #63519	; 0xf81f
 801d7f2:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801d7f6:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 801d7fa:	4355      	muls	r5, r2
 801d7fc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d800:	fb0c f203 	mul.w	r2, ip, r3
 801d804:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 801d808:	f605 0501 	addw	r5, r5, #2049	; 0x801
 801d80c:	441d      	add	r5, r3
 801d80e:	f102 0320 	add.w	r3, r2, #32
 801d812:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801d816:	0a1b      	lsrs	r3, r3, #8
 801d818:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 801d81c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801d820:	431c      	orrs	r4, r3
 801d822:	1c7b      	adds	r3, r7, #1
 801d824:	f100 812b 	bmi.w	801da7e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 801d828:	429e      	cmp	r6, r3
 801d82a:	f340 8128 	ble.w	801da7e <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2da>
 801d82e:	2900      	cmp	r1, #0
 801d830:	f000 8128 	beq.w	801da84 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e0>
 801d834:	9a01      	ldr	r2, [sp, #4]
 801d836:	f899 3001 	ldrb.w	r3, [r9, #1]
 801d83a:	8855      	ldrh	r5, [r2, #2]
 801d83c:	ea4f 08e3 	mov.w	r8, r3, asr #3
 801d840:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 801d844:	fb08 f802 	mul.w	r8, r8, r2
 801d848:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801d84c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d850:	435d      	muls	r5, r3
 801d852:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801d856:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801d85a:	44d0      	add	r8, sl
 801d85c:	f105 0a20 	add.w	sl, r5, #32
 801d860:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801d864:	0a2d      	lsrs	r5, r5, #8
 801d866:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801d86a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801d86e:	432a      	orrs	r2, r5
 801d870:	3001      	adds	r0, #1
 801d872:	f100 810d 	bmi.w	801da90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 801d876:	4583      	cmp	fp, r0
 801d878:	f340 810a 	ble.w	801da90 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2ec>
 801d87c:	f1be 0f00 	cmp.w	lr, #0
 801d880:	f000 810b 	beq.w	801da9a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2f6>
 801d884:	2f00      	cmp	r7, #0
 801d886:	f2c0 8100 	blt.w	801da8a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 801d88a:	42be      	cmp	r6, r7
 801d88c:	f340 80fd 	ble.w	801da8a <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x2e6>
 801d890:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801d894:	9801      	ldr	r0, [sp, #4]
 801d896:	f819 5006 	ldrb.w	r5, [r9, r6]
 801d89a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 801d89e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801d8a2:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 801d8a6:	fb0a fa00 	mul.w	sl, sl, r0
 801d8aa:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801d8ae:	fb05 f808 	mul.w	r8, r5, r8
 801d8b2:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801d8b6:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801d8ba:	4482      	add	sl, r0
 801d8bc:	f108 0020 	add.w	r0, r8, #32
 801d8c0:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801d8c4:	0a00      	lsrs	r0, r0, #8
 801d8c6:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 801d8ca:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801d8ce:	ea4b 0b00 	orr.w	fp, fp, r0
 801d8d2:	3701      	adds	r7, #1
 801d8d4:	f100 80e6 	bmi.w	801daa4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 801d8d8:	42be      	cmp	r6, r7
 801d8da:	f340 80e3 	ble.w	801daa4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x300>
 801d8de:	2900      	cmp	r1, #0
 801d8e0:	f000 80e3 	beq.w	801daaa <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x306>
 801d8e4:	9801      	ldr	r0, [sp, #4]
 801d8e6:	3601      	adds	r6, #1
 801d8e8:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 801d8ec:	f819 7006 	ldrb.w	r7, [r9, r6]
 801d8f0:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 801d8f4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801d8f8:	fb07 f800 	mul.w	r8, r7, r0
 801d8fc:	f64f 001f 	movw	r0, #63519	; 0xf81f
 801d900:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801d904:	fb09 f906 	mul.w	r9, r9, r6
 801d908:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 801d90c:	f609 0901 	addw	r9, r9, #2049	; 0x801
 801d910:	44d1      	add	r9, sl
 801d912:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 801d916:	f108 0020 	add.w	r0, r8, #32
 801d91a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801d91e:	0a00      	lsrs	r0, r0, #8
 801d920:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801d924:	4330      	orrs	r0, r6
 801d926:	b28e      	uxth	r6, r1
 801d928:	fa1f f98e 	uxth.w	r9, lr
 801d92c:	fb06 f809 	mul.w	r8, r6, r9
 801d930:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 801d934:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801d938:	0136      	lsls	r6, r6, #4
 801d93a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801d93e:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801d942:	9601      	str	r6, [sp, #4]
 801d944:	ea4a 0404 	orr.w	r4, sl, r4
 801d948:	fa1f f689 	uxth.w	r6, r9
 801d94c:	9602      	str	r6, [sp, #8]
 801d94e:	4626      	mov	r6, r4
 801d950:	fb11 f90e 	smulbb	r9, r1, lr
 801d954:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801d958:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 801d95c:	f1ce 0410 	rsb	r4, lr, #16
 801d960:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801d964:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801d968:	1a64      	subs	r4, r4, r1
 801d96a:	ea4a 0202 	orr.w	r2, sl, r2
 801d96e:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801d972:	434a      	muls	r2, r1
 801d974:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 801d978:	fb04 2406 	mla	r4, r4, r6, r2
 801d97c:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801d980:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801d984:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801d988:	ea4a 0000 	orr.w	r0, sl, r0
 801d98c:	fb09 4200 	mla	r2, r9, r0, r4
 801d990:	ea4f 440b 	mov.w	r4, fp, lsl #16
 801d994:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801d998:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801d99c:	ea44 0b0b 	orr.w	fp, r4, fp
 801d9a0:	9c01      	ldr	r4, [sp, #4]
 801d9a2:	9e02      	ldr	r6, [sp, #8]
 801d9a4:	f5c4 7480 	rsb	r4, r4, #256	; 0x100
 801d9a8:	1ba4      	subs	r4, r4, r6
 801d9aa:	9e01      	ldr	r6, [sp, #4]
 801d9ac:	b2a4      	uxth	r4, r4
 801d9ae:	eba6 0608 	sub.w	r6, r6, r8
 801d9b2:	b2b6      	uxth	r6, r6
 801d9b4:	4373      	muls	r3, r6
 801d9b6:	fb0c 3304 	mla	r3, ip, r4, r3
 801d9ba:	9c02      	ldr	r4, [sp, #8]
 801d9bc:	9903      	ldr	r1, [sp, #12]
 801d9be:	fb04 3505 	mla	r5, r4, r5, r3
 801d9c2:	fb08 5707 	mla	r7, r8, r7, r5
 801d9c6:	8808      	ldrh	r0, [r1, #0]
 801d9c8:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
 801d9cc:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801d9d0:	b289      	uxth	r1, r1
 801d9d2:	434f      	muls	r7, r1
 801d9d4:	1c7b      	adds	r3, r7, #1
 801d9d6:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801d9da:	ea6f 2717 	mvn.w	r7, r7, lsr #8
 801d9de:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801d9e2:	fb0e 2e0b 	mla	lr, lr, fp, r2
 801d9e6:	1203      	asrs	r3, r0, #8
 801d9e8:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801d9ec:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801d9f0:	b2ff      	uxtb	r7, r7
 801d9f2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801d9f6:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801d9fa:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801d9fe:	fb13 f307 	smulbb	r3, r3, r7
 801da02:	ea42 0e0e 	orr.w	lr, r2, lr
 801da06:	fa1f f28e 	uxth.w	r2, lr
 801da0a:	1215      	asrs	r5, r2, #8
 801da0c:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801da10:	fb05 3501 	mla	r5, r5, r1, r3
 801da14:	10c3      	asrs	r3, r0, #3
 801da16:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801da1a:	fb13 f307 	smulbb	r3, r3, r7
 801da1e:	10d4      	asrs	r4, r2, #3
 801da20:	f004 04fc 	and.w	r4, r4, #252	; 0xfc
 801da24:	fb04 3401 	mla	r4, r4, r1, r3
 801da28:	00c3      	lsls	r3, r0, #3
 801da2a:	b2db      	uxtb	r3, r3
 801da2c:	fb13 f307 	smulbb	r3, r3, r7
 801da30:	00d2      	lsls	r2, r2, #3
 801da32:	b2d2      	uxtb	r2, r2
 801da34:	fb02 3101 	mla	r1, r2, r1, r3
 801da38:	b2ad      	uxth	r5, r5
 801da3a:	b289      	uxth	r1, r1
 801da3c:	b2a4      	uxth	r4, r4
 801da3e:	1c6b      	adds	r3, r5, #1
 801da40:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801da44:	1c62      	adds	r2, r4, #1
 801da46:	1c4b      	adds	r3, r1, #1
 801da48:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801da4c:	eb02 2414 	add.w	r4, r2, r4, lsr #8
 801da50:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801da54:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801da58:	0964      	lsrs	r4, r4, #5
 801da5a:	432b      	orrs	r3, r5
 801da5c:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 801da60:	9a03      	ldr	r2, [sp, #12]
 801da62:	4323      	orrs	r3, r4
 801da64:	8013      	strh	r3, [r2, #0]
 801da66:	b005      	add	sp, #20
 801da68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da6c:	f04f 0c00 	mov.w	ip, #0
 801da70:	4664      	mov	r4, ip
 801da72:	e6d6      	b.n	801d822 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x7e>
 801da74:	2300      	movs	r3, #0
 801da76:	469c      	mov	ip, r3
 801da78:	461a      	mov	r2, r3
 801da7a:	461c      	mov	r4, r3
 801da7c:	e6f8      	b.n	801d870 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801da7e:	2300      	movs	r3, #0
 801da80:	461a      	mov	r2, r3
 801da82:	e6f5      	b.n	801d870 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801da84:	460b      	mov	r3, r1
 801da86:	460a      	mov	r2, r1
 801da88:	e6f2      	b.n	801d870 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0xcc>
 801da8a:	2500      	movs	r5, #0
 801da8c:	46ab      	mov	fp, r5
 801da8e:	e720      	b.n	801d8d2 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x12e>
 801da90:	2700      	movs	r7, #0
 801da92:	463d      	mov	r5, r7
 801da94:	4638      	mov	r0, r7
 801da96:	46bb      	mov	fp, r7
 801da98:	e745      	b.n	801d926 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801da9a:	4677      	mov	r7, lr
 801da9c:	4675      	mov	r5, lr
 801da9e:	4670      	mov	r0, lr
 801daa0:	46f3      	mov	fp, lr
 801daa2:	e740      	b.n	801d926 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801daa4:	2700      	movs	r7, #0
 801daa6:	4638      	mov	r0, r7
 801daa8:	e73d      	b.n	801d926 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>
 801daaa:	460f      	mov	r7, r1
 801daac:	4608      	mov	r0, r1
 801daae:	e73a      	b.n	801d926 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh+0x182>

0801dab0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dab4:	b097      	sub	sp, #92	; 0x5c
 801dab6:	9214      	str	r2, [sp, #80]	; 0x50
 801dab8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801daba:	9015      	str	r0, [sp, #84]	; 0x54
 801dabc:	9308      	str	r3, [sp, #32]
 801dabe:	6850      	ldr	r0, [r2, #4]
 801dac0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 801dac4:	9111      	str	r1, [sp, #68]	; 0x44
 801dac6:	9312      	str	r3, [sp, #72]	; 0x48
 801dac8:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 801dacc:	fb00 1303 	mla	r3, r0, r3, r1
 801dad0:	6812      	ldr	r2, [r2, #0]
 801dad2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801dad6:	9309      	str	r3, [sp, #36]	; 0x24
 801dad8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dada:	681b      	ldr	r3, [r3, #0]
 801dadc:	930b      	str	r3, [sp, #44]	; 0x2c
 801dade:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dae0:	685b      	ldr	r3, [r3, #4]
 801dae2:	930c      	str	r3, [sp, #48]	; 0x30
 801dae4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 801dae8:	930a      	str	r3, [sp, #40]	; 0x28
 801daea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801daec:	2b00      	cmp	r3, #0
 801daee:	dc03      	bgt.n	801daf8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801daf0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801daf2:	2b00      	cmp	r3, #0
 801daf4:	f340 83cb 	ble.w	801e28e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 801daf8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dafa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801dafe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801db02:	1e48      	subs	r0, r1, #1
 801db04:	1e55      	subs	r5, r2, #1
 801db06:	9b08      	ldr	r3, [sp, #32]
 801db08:	2b00      	cmp	r3, #0
 801db0a:	f340 81a3 	ble.w	801de54 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801db0e:	9e21      	ldr	r6, [sp, #132]	; 0x84
 801db10:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801db12:	1436      	asrs	r6, r6, #16
 801db14:	ea4f 4323 	mov.w	r3, r3, asr #16
 801db18:	d406      	bmi.n	801db28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801db1a:	4286      	cmp	r6, r0
 801db1c:	da04      	bge.n	801db28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801db1e:	2b00      	cmp	r3, #0
 801db20:	db02      	blt.n	801db28 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801db22:	42ab      	cmp	r3, r5
 801db24:	f2c0 8197 	blt.w	801de56 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a6>
 801db28:	3601      	adds	r6, #1
 801db2a:	f100 8184 	bmi.w	801de36 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 801db2e:	42b1      	cmp	r1, r6
 801db30:	f2c0 8181 	blt.w	801de36 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 801db34:	3301      	adds	r3, #1
 801db36:	f100 817e 	bmi.w	801de36 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 801db3a:	429a      	cmp	r2, r3
 801db3c:	f2c0 817b 	blt.w	801de36 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x386>
 801db40:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801db44:	9b08      	ldr	r3, [sp, #32]
 801db46:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801db48:	9313      	str	r3, [sp, #76]	; 0x4c
 801db4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801db4c:	2b00      	cmp	r3, #0
 801db4e:	f340 81a4 	ble.w	801de9a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801db52:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801db54:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801db56:	1418      	asrs	r0, r3, #16
 801db58:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801db5a:	142d      	asrs	r5, r5, #16
 801db5c:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801db60:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801db62:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801db66:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801db68:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801db6c:	f100 81f8 	bmi.w	801df60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801db70:	f102 3eff 	add.w	lr, r2, #4294967295
 801db74:	4575      	cmp	r5, lr
 801db76:	f280 81f3 	bge.w	801df60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801db7a:	2800      	cmp	r0, #0
 801db7c:	f2c0 81f0 	blt.w	801df60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801db80:	f103 3eff 	add.w	lr, r3, #4294967295
 801db84:	4570      	cmp	r0, lr
 801db86:	f280 81eb 	bge.w	801df60 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 801db8a:	b212      	sxth	r2, r2
 801db8c:	fb00 5002 	mla	r0, r0, r2, r5
 801db90:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801db92:	fa1f fe81 	uxth.w	lr, r1
 801db96:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801db9a:	eb03 0a00 	add.w	sl, r3, r0
 801db9e:	f813 9000 	ldrb.w	r9, [r3, r0]
 801dba2:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801dba6:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801dbaa:	b29b      	uxth	r3, r3
 801dbac:	f1bc 0f00 	cmp.w	ip, #0
 801dbb0:	f000 81b9 	beq.w	801df26 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x476>
 801dbb4:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801dbb8:	eb0a 0b02 	add.w	fp, sl, r2
 801dbbc:	fa1f fa8c 	uxth.w	sl, ip
 801dbc0:	fb0a fe0e 	mul.w	lr, sl, lr
 801dbc4:	eba5 050e 	sub.w	r5, r5, lr
 801dbc8:	b2ad      	uxth	r5, r5
 801dbca:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801dbce:	fb08 f505 	mul.w	r5, r8, r5
 801dbd2:	fa1f fa8a 	uxth.w	sl, sl
 801dbd6:	eba3 030a 	sub.w	r3, r3, sl
 801dbda:	b29b      	uxth	r3, r3
 801dbdc:	940d      	str	r4, [sp, #52]	; 0x34
 801dbde:	fb09 5303 	mla	r3, r9, r3, r5
 801dbe2:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801dbe6:	940e      	str	r4, [sp, #56]	; 0x38
 801dbe8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801dbea:	fb0a 3304 	mla	r3, sl, r4, r3
 801dbee:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801dbf0:	fb0e 3304 	mla	r3, lr, r4, r3
 801dbf4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801dbf8:	2b00      	cmp	r3, #0
 801dbfa:	f000 810f 	beq.w	801de1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801dbfe:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801dc00:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801dc04:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801dc08:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801dc0c:	f000 8190 	beq.w	801df30 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>
 801dc10:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801dc14:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801dc18:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801dc1c:	fb09 f000 	mul.w	r0, r9, r0
 801dc20:	fb0a fe0e 	mul.w	lr, sl, lr
 801dc24:	f100 0b20 	add.w	fp, r0, #32
 801dc28:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801dc2c:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801dc30:	44ce      	add	lr, r9
 801dc32:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801dc36:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801dc3a:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801dc3e:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801dc42:	ea4e 0909 	orr.w	r9, lr, r9
 801dc46:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801dc4a:	8868      	ldrh	r0, [r5, #2]
 801dc4c:	d019      	beq.n	801dc82 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 801dc4e:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801dc52:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801dc56:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801dc5a:	fb08 f800 	mul.w	r8, r8, r0
 801dc5e:	fb0a fe0e 	mul.w	lr, sl, lr
 801dc62:	f108 0b20 	add.w	fp, r8, #32
 801dc66:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801dc6a:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801dc6e:	4486      	add	lr, r0
 801dc70:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801dc74:	0a00      	lsrs	r0, r0, #8
 801dc76:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801dc7a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801dc7e:	ea4e 0000 	orr.w	r0, lr, r0
 801dc82:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801dc86:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801dc8a:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801dc8e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801dc92:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801dc96:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801dc9a:	ea4e 0909 	orr.w	r9, lr, r9
 801dc9e:	ea4a 0000 	orr.w	r0, sl, r0
 801dca2:	f1bc 0f00 	cmp.w	ip, #0
 801dca6:	f000 8145 	beq.w	801df34 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>
 801dcaa:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801dcae:	3a01      	subs	r2, #1
 801dcb0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801dcb2:	0052      	lsls	r2, r2, #1
 801dcb4:	3202      	adds	r2, #2
 801dcb6:	2cff      	cmp	r4, #255	; 0xff
 801dcb8:	eb05 0e02 	add.w	lr, r5, r2
 801dcbc:	5aaa      	ldrh	r2, [r5, r2]
 801dcbe:	d018      	beq.n	801dcf2 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x242>
 801dcc0:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 801dcc4:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801dcc8:	fb04 fa02 	mul.w	sl, r4, r2
 801dccc:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801dcd0:	fb08 f805 	mul.w	r8, r8, r5
 801dcd4:	f10a 0520 	add.w	r5, sl, #32
 801dcd8:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801dcdc:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801dce0:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801dce4:	4442      	add	r2, r8
 801dce6:	0a2d      	lsrs	r5, r5, #8
 801dce8:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801dcec:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801dcf0:	432a      	orrs	r2, r5
 801dcf2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 801dcf4:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801dcf8:	2cff      	cmp	r4, #255	; 0xff
 801dcfa:	d01a      	beq.n	801dd32 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801dcfc:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 801dd00:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801dd04:	fb04 fa05 	mul.w	sl, r4, r5
 801dd08:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801dd0c:	fb08 f80e 	mul.w	r8, r8, lr
 801dd10:	f10a 0e20 	add.w	lr, sl, #32
 801dd14:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801dd18:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801dd1c:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801dd20:	4445      	add	r5, r8
 801dd22:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dd26:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801dd2a:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801dd2e:	ea45 050e 	orr.w	r5, r5, lr
 801dd32:	fb1c fe01 	smulbb	lr, ip, r1
 801dd36:	f1cc 0810 	rsb	r8, ip, #16
 801dd3a:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801dd3e:	eba8 0801 	sub.w	r8, r8, r1
 801dd42:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801dd46:	4341      	muls	r1, r0
 801dd48:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801dd4c:	fb09 1108 	mla	r1, r9, r8, r1
 801dd50:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801dd54:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801dd58:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801dd5c:	ea4a 0202 	orr.w	r2, sl, r2
 801dd60:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801dd64:	fb0c 1102 	mla	r1, ip, r2, r1
 801dd68:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801dd6c:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801dd70:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801dd74:	ea4b 0505 	orr.w	r5, fp, r5
 801dd78:	fb0e 1e05 	mla	lr, lr, r5, r1
 801dd7c:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801dd80:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801dd84:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801dd88:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801dd8c:	ea42 0e0e 	orr.w	lr, r2, lr
 801dd90:	fa1f f28e 	uxth.w	r2, lr
 801dd94:	2bff      	cmp	r3, #255	; 0xff
 801dd96:	d103      	bne.n	801dda0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f0>
 801dd98:	9912      	ldr	r1, [sp, #72]	; 0x48
 801dd9a:	29ff      	cmp	r1, #255	; 0xff
 801dd9c:	f000 80de 	beq.w	801df5c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>
 801dda0:	990a      	ldr	r1, [sp, #40]	; 0x28
 801dda2:	8838      	ldrh	r0, [r7, #0]
 801dda4:	434b      	muls	r3, r1
 801dda6:	f103 0c01 	add.w	ip, r3, #1
 801ddaa:	eb0c 2323 	add.w	r3, ip, r3, asr #8
 801ddae:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801ddb2:	fa5f fc83 	uxtb.w	ip, r3
 801ddb6:	1203      	asrs	r3, r0, #8
 801ddb8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801ddbc:	fb13 f30c 	smulbb	r3, r3, ip
 801ddc0:	1215      	asrs	r5, r2, #8
 801ddc2:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801ddc6:	fb05 3501 	mla	r5, r5, r1, r3
 801ddca:	10c3      	asrs	r3, r0, #3
 801ddcc:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 801ddd0:	fb13 f30c 	smulbb	r3, r3, ip
 801ddd4:	10d1      	asrs	r1, r2, #3
 801ddd6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801ddd8:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801dddc:	fb01 3104 	mla	r1, r1, r4, r3
 801dde0:	00c3      	lsls	r3, r0, #3
 801dde2:	b2db      	uxtb	r3, r3
 801dde4:	fb13 f30c 	smulbb	r3, r3, ip
 801dde8:	00d2      	lsls	r2, r2, #3
 801ddea:	b2d2      	uxtb	r2, r2
 801ddec:	fb02 3304 	mla	r3, r2, r4, r3
 801ddf0:	b2ad      	uxth	r5, r5
 801ddf2:	b29a      	uxth	r2, r3
 801ddf4:	1c6b      	adds	r3, r5, #1
 801ddf6:	b289      	uxth	r1, r1
 801ddf8:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801ddfc:	1c53      	adds	r3, r2, #1
 801ddfe:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801de02:	1c4a      	adds	r2, r1, #1
 801de04:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801de08:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801de0c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801de10:	0949      	lsrs	r1, r1, #5
 801de12:	432b      	orrs	r3, r5
 801de14:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801de18:	430b      	orrs	r3, r1
 801de1a:	803b      	strh	r3, [r7, #0]
 801de1c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801de1e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801de20:	3702      	adds	r7, #2
 801de22:	4413      	add	r3, r2
 801de24:	9321      	str	r3, [sp, #132]	; 0x84
 801de26:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801de28:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801de2a:	441a      	add	r2, r3
 801de2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801de2e:	9222      	str	r2, [sp, #136]	; 0x88
 801de30:	3b01      	subs	r3, #1
 801de32:	9313      	str	r3, [sp, #76]	; 0x4c
 801de34:	e689      	b.n	801db4a <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801de36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801de38:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 801de3a:	9c22      	ldr	r4, [sp, #136]	; 0x88
 801de3c:	4433      	add	r3, r6
 801de3e:	9321      	str	r3, [sp, #132]	; 0x84
 801de40:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801de42:	441c      	add	r4, r3
 801de44:	9b08      	ldr	r3, [sp, #32]
 801de46:	9422      	str	r4, [sp, #136]	; 0x88
 801de48:	3b01      	subs	r3, #1
 801de4a:	9308      	str	r3, [sp, #32]
 801de4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801de4e:	3302      	adds	r3, #2
 801de50:	9309      	str	r3, [sp, #36]	; 0x24
 801de52:	e658      	b.n	801db06 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801de54:	d028      	beq.n	801dea8 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 801de56:	9b08      	ldr	r3, [sp, #32]
 801de58:	9823      	ldr	r0, [sp, #140]	; 0x8c
 801de5a:	9d21      	ldr	r5, [sp, #132]	; 0x84
 801de5c:	3b01      	subs	r3, #1
 801de5e:	fb00 5003 	mla	r0, r0, r3, r5
 801de62:	1400      	asrs	r0, r0, #16
 801de64:	f53f ae6c 	bmi.w	801db40 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801de68:	3901      	subs	r1, #1
 801de6a:	4288      	cmp	r0, r1
 801de6c:	f6bf ae68 	bge.w	801db40 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801de70:	9924      	ldr	r1, [sp, #144]	; 0x90
 801de72:	9822      	ldr	r0, [sp, #136]	; 0x88
 801de74:	fb01 0303 	mla	r3, r1, r3, r0
 801de78:	141b      	asrs	r3, r3, #16
 801de7a:	f53f ae61 	bmi.w	801db40 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801de7e:	3a01      	subs	r2, #1
 801de80:	4293      	cmp	r3, r2
 801de82:	f6bf ae5d 	bge.w	801db40 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801de86:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801de8a:	9b08      	ldr	r3, [sp, #32]
 801de8c:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 801de90:	9313      	str	r3, [sp, #76]	; 0x4c
 801de92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801de94:	2b00      	cmp	r3, #0
 801de96:	f300 8082 	bgt.w	801df9e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ee>
 801de9a:	9b08      	ldr	r3, [sp, #32]
 801de9c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801dea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801dea2:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801dea6:	9309      	str	r3, [sp, #36]	; 0x24
 801dea8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801deaa:	2b00      	cmp	r3, #0
 801deac:	f340 81ef 	ble.w	801e28e <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7de>
 801deb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801deb4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801deb8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801debc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801dec0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dec4:	eef0 6a62 	vmov.f32	s13, s5
 801dec8:	ee31 1a05 	vadd.f32	s2, s2, s10
 801decc:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ded0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ded4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ded8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dedc:	edcd 6a21 	vstr	s13, [sp, #132]	; 0x84
 801dee0:	eef0 6a43 	vmov.f32	s13, s6
 801dee4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dee8:	ee12 2a90 	vmov	r2, s5
 801deec:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801def0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801def2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801def6:	fb92 f3f3 	sdiv	r3, r2, r3
 801defa:	ee13 2a10 	vmov	r2, s6
 801defe:	9323      	str	r3, [sp, #140]	; 0x8c
 801df00:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801df02:	edcd 6a22 	vstr	s13, [sp, #136]	; 0x88
 801df06:	fb92 f3f3 	sdiv	r3, r2, r3
 801df0a:	9324      	str	r3, [sp, #144]	; 0x90
 801df0c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801df0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 801df10:	3b01      	subs	r3, #1
 801df12:	9311      	str	r3, [sp, #68]	; 0x44
 801df14:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801df16:	bf08      	it	eq
 801df18:	4613      	moveq	r3, r2
 801df1a:	eeb0 3a67 	vmov.f32	s6, s15
 801df1e:	9308      	str	r3, [sp, #32]
 801df20:	eef0 2a47 	vmov.f32	s5, s14
 801df24:	e5e1      	b.n	801daea <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801df26:	fb08 f505 	mul.w	r5, r8, r5
 801df2a:	fb09 5303 	mla	r3, r9, r3, r5
 801df2e:	e661      	b.n	801dbf4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x144>
 801df30:	4681      	mov	r9, r0
 801df32:	e688      	b.n	801dc46 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x196>
 801df34:	f1c1 0210 	rsb	r2, r1, #16
 801df38:	4341      	muls	r1, r0
 801df3a:	fb09 1902 	mla	r9, r9, r2, r1
 801df3e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801df42:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801df46:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801df4a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801df4e:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801df52:	ea42 0909 	orr.w	r9, r2, r9
 801df56:	fa1f f289 	uxth.w	r2, r9
 801df5a:	e71b      	b.n	801dd94 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e4>
 801df5c:	803a      	strh	r2, [r7, #0]
 801df5e:	e75d      	b.n	801de1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801df60:	f115 0e01 	adds.w	lr, r5, #1
 801df64:	f53f af5a 	bmi.w	801de1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801df68:	4572      	cmp	r2, lr
 801df6a:	f6ff af57 	blt.w	801de1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801df6e:	f110 0e01 	adds.w	lr, r0, #1
 801df72:	f53f af53 	bmi.w	801de1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801df76:	4573      	cmp	r3, lr
 801df78:	f6ff af50 	blt.w	801de1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801df7c:	9c12      	ldr	r4, [sp, #72]	; 0x48
 801df7e:	b21b      	sxth	r3, r3
 801df80:	b212      	sxth	r2, r2
 801df82:	e9cd 0103 	strd	r0, r1, [sp, #12]
 801df86:	9301      	str	r3, [sp, #4]
 801df88:	9200      	str	r2, [sp, #0]
 801df8a:	e9cd c405 	strd	ip, r4, [sp, #20]
 801df8e:	e9dd 230b 	ldrd	r2, r3, [sp, #44]	; 0x2c
 801df92:	9502      	str	r5, [sp, #8]
 801df94:	4639      	mov	r1, r7
 801df96:	9815      	ldr	r0, [sp, #84]	; 0x54
 801df98:	f7ff fc04 	bl	801d7a4 <_ZNK8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtPKhssiihhh>
 801df9c:	e73e      	b.n	801de1c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801df9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801dfa0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801dfa4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801dfa6:	fa1f fc82 	uxth.w	ip, r2
 801dfaa:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801dfae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 801dfb0:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801dfb4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801dfb8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 801dfba:	141f      	asrs	r7, r3, #16
 801dfbc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801dfbe:	141b      	asrs	r3, r3, #16
 801dfc0:	fb01 3707 	mla	r7, r1, r7, r3
 801dfc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dfc6:	eb03 0a07 	add.w	sl, r3, r7
 801dfca:	f813 9007 	ldrb.w	r9, [r3, r7]
 801dfce:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801dfd2:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801dfd6:	b29b      	uxth	r3, r3
 801dfd8:	2d00      	cmp	r5, #0
 801dfda:	f000 813d 	beq.w	801e258 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a8>
 801dfde:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801dfe2:	eb0a 0b01 	add.w	fp, sl, r1
 801dfe6:	fa1f fa85 	uxth.w	sl, r5
 801dfea:	fb0a fc0c 	mul.w	ip, sl, ip
 801dfee:	eba0 000c 	sub.w	r0, r0, ip
 801dff2:	b280      	uxth	r0, r0
 801dff4:	fb08 f000 	mul.w	r0, r8, r0
 801dff8:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801dffc:	fa1f fa8a 	uxth.w	sl, sl
 801e000:	eba3 030a 	sub.w	r3, r3, sl
 801e004:	b29b      	uxth	r3, r3
 801e006:	fb09 0303 	mla	r3, r9, r3, r0
 801e00a:	940f      	str	r4, [sp, #60]	; 0x3c
 801e00c:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e00e:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801e012:	fb0a 3300 	mla	r3, sl, r0, r3
 801e016:	fb0c 3304 	mla	r3, ip, r4, r3
 801e01a:	9410      	str	r4, [sp, #64]	; 0x40
 801e01c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e020:	2b00      	cmp	r3, #0
 801e022:	f000 810b 	beq.w	801e23c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 801e026:	980b      	ldr	r0, [sp, #44]	; 0x2c
 801e028:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e02a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e02e:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801e032:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801e036:	f000 8114 	beq.w	801e262 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b2>
 801e03a:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801e03e:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801e042:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801e046:	fb09 f707 	mul.w	r7, r9, r7
 801e04a:	fb0a fc0c 	mul.w	ip, sl, ip
 801e04e:	f107 0b20 	add.w	fp, r7, #32
 801e052:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801e056:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801e05a:	44cc      	add	ip, r9
 801e05c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801e060:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e064:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801e068:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e06c:	ea4c 0909 	orr.w	r9, ip, r9
 801e070:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e074:	8847      	ldrh	r7, [r0, #2]
 801e076:	d019      	beq.n	801e0ac <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5fc>
 801e078:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801e07c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801e080:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801e084:	fb08 f807 	mul.w	r8, r8, r7
 801e088:	fb0a fc0c 	mul.w	ip, sl, ip
 801e08c:	f108 0b20 	add.w	fp, r8, #32
 801e090:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801e094:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801e098:	44bc      	add	ip, r7
 801e09a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801e09e:	0a3f      	lsrs	r7, r7, #8
 801e0a0:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801e0a4:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801e0a8:	ea4c 0707 	orr.w	r7, ip, r7
 801e0ac:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801e0b0:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801e0b4:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801e0b8:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801e0bc:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e0c0:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801e0c4:	ea4c 0909 	orr.w	r9, ip, r9
 801e0c8:	ea4a 0707 	orr.w	r7, sl, r7
 801e0cc:	2d00      	cmp	r5, #0
 801e0ce:	f000 80ca 	beq.w	801e266 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7b6>
 801e0d2:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801e0d6:	3901      	subs	r1, #1
 801e0d8:	0049      	lsls	r1, r1, #1
 801e0da:	3102      	adds	r1, #2
 801e0dc:	eb00 0c01 	add.w	ip, r0, r1
 801e0e0:	5a41      	ldrh	r1, [r0, r1]
 801e0e2:	980f      	ldr	r0, [sp, #60]	; 0x3c
 801e0e4:	28ff      	cmp	r0, #255	; 0xff
 801e0e6:	d019      	beq.n	801e11c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66c>
 801e0e8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 801e0ea:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801e0ee:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e0f2:	fb04 fa01 	mul.w	sl, r4, r1
 801e0f6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801e0fa:	fb08 f800 	mul.w	r8, r8, r0
 801e0fe:	f10a 0020 	add.w	r0, sl, #32
 801e102:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801e106:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801e10a:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801e10e:	4441      	add	r1, r8
 801e110:	0a00      	lsrs	r0, r0, #8
 801e112:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801e116:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e11a:	4301      	orrs	r1, r0
 801e11c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 801e11e:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801e122:	2cff      	cmp	r4, #255	; 0xff
 801e124:	d01a      	beq.n	801e15c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ac>
 801e126:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 801e12a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e12e:	fb04 fa00 	mul.w	sl, r4, r0
 801e132:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801e136:	fb08 f80c 	mul.w	r8, r8, ip
 801e13a:	f10a 0c20 	add.w	ip, sl, #32
 801e13e:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801e142:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801e146:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801e14a:	4440      	add	r0, r8
 801e14c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e150:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801e154:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801e158:	ea40 000c 	orr.w	r0, r0, ip
 801e15c:	fb15 fc02 	smulbb	ip, r5, r2
 801e160:	f1c5 0810 	rsb	r8, r5, #16
 801e164:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801e168:	eba8 0802 	sub.w	r8, r8, r2
 801e16c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801e170:	437a      	muls	r2, r7
 801e172:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801e176:	fb09 2208 	mla	r2, r9, r8, r2
 801e17a:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801e17e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e182:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801e186:	ea4a 0101 	orr.w	r1, sl, r1
 801e18a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801e18e:	fb05 2201 	mla	r2, r5, r1, r2
 801e192:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801e196:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801e19a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801e19e:	ea4b 0000 	orr.w	r0, fp, r0
 801e1a2:	fb0c 2200 	mla	r2, ip, r0, r2
 801e1a6:	0d57      	lsrs	r7, r2, #21
 801e1a8:	0952      	lsrs	r2, r2, #5
 801e1aa:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801e1ae:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e1b2:	433a      	orrs	r2, r7
 801e1b4:	2bff      	cmp	r3, #255	; 0xff
 801e1b6:	b292      	uxth	r2, r2
 801e1b8:	d102      	bne.n	801e1c0 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 801e1ba:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e1bc:	29ff      	cmp	r1, #255	; 0xff
 801e1be:	d063      	beq.n	801e288 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7d8>
 801e1c0:	980a      	ldr	r0, [sp, #40]	; 0x28
 801e1c2:	f8be 1000 	ldrh.w	r1, [lr]
 801e1c6:	4343      	muls	r3, r0
 801e1c8:	1c58      	adds	r0, r3, #1
 801e1ca:	eb00 2323 	add.w	r3, r0, r3, asr #8
 801e1ce:	ea6f 2323 	mvn.w	r3, r3, asr #8
 801e1d2:	1208      	asrs	r0, r1, #8
 801e1d4:	b2db      	uxtb	r3, r3
 801e1d6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e1da:	fb10 f003 	smulbb	r0, r0, r3
 801e1de:	10cf      	asrs	r7, r1, #3
 801e1e0:	00c9      	lsls	r1, r1, #3
 801e1e2:	b2c9      	uxtb	r1, r1
 801e1e4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e1e6:	1215      	asrs	r5, r2, #8
 801e1e8:	fb11 f103 	smulbb	r1, r1, r3
 801e1ec:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801e1f0:	fb05 0504 	mla	r5, r5, r4, r0
 801e1f4:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801e1f8:	10d0      	asrs	r0, r2, #3
 801e1fa:	00d2      	lsls	r2, r2, #3
 801e1fc:	fb17 f703 	smulbb	r7, r7, r3
 801e200:	b2d2      	uxtb	r2, r2
 801e202:	fb02 1204 	mla	r2, r2, r4, r1
 801e206:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801e20a:	fb00 7004 	mla	r0, r0, r4, r7
 801e20e:	b2ad      	uxth	r5, r5
 801e210:	b292      	uxth	r2, r2
 801e212:	1c6b      	adds	r3, r5, #1
 801e214:	1c57      	adds	r7, r2, #1
 801e216:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801e21a:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801e21e:	b280      	uxth	r0, r0
 801e220:	f3c7 27c4 	ubfx	r7, r7, #11, #5
 801e224:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801e228:	433d      	orrs	r5, r7
 801e22a:	1c47      	adds	r7, r0, #1
 801e22c:	eb07 2710 	add.w	r7, r7, r0, lsr #8
 801e230:	097f      	lsrs	r7, r7, #5
 801e232:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801e236:	433d      	orrs	r5, r7
 801e238:	f8ae 5000 	strh.w	r5, [lr]
 801e23c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e23e:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 801e240:	f10e 0e02 	add.w	lr, lr, #2
 801e244:	4413      	add	r3, r2
 801e246:	9321      	str	r3, [sp, #132]	; 0x84
 801e248:	9a22      	ldr	r2, [sp, #136]	; 0x88
 801e24a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e24c:	441a      	add	r2, r3
 801e24e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801e250:	9222      	str	r2, [sp, #136]	; 0x88
 801e252:	3b01      	subs	r3, #1
 801e254:	9313      	str	r3, [sp, #76]	; 0x4c
 801e256:	e61c      	b.n	801de92 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e2>
 801e258:	fb08 f000 	mul.w	r0, r8, r0
 801e25c:	fb09 0303 	mla	r3, r9, r3, r0
 801e260:	e6dc      	b.n	801e01c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56c>
 801e262:	46b9      	mov	r9, r7
 801e264:	e704      	b.n	801e070 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c0>
 801e266:	f1c2 0110 	rsb	r1, r2, #16
 801e26a:	437a      	muls	r2, r7
 801e26c:	fb09 2901 	mla	r9, r9, r1, r2
 801e270:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801e274:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801e278:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801e27c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e280:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e284:	4302      	orrs	r2, r0
 801e286:	e795      	b.n	801e1b4 <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x704>
 801e288:	f8ae 2000 	strh.w	r2, [lr]
 801e28c:	e7d6      	b.n	801e23c <_ZN8touchgfx8LCD16bpp55TextureMapper_RGB565_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78c>
 801e28e:	b017      	add	sp, #92	; 0x5c
 801e290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e294 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>:
 801e294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e298:	b085      	sub	sp, #20
 801e29a:	f9bd 6038 	ldrsh.w	r6, [sp, #56]	; 0x38
 801e29e:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 801e2a2:	fb00 7406 	mla	r4, r0, r6, r7
 801e2a6:	2800      	cmp	r0, #0
 801e2a8:	eb03 0544 	add.w	r5, r3, r4, lsl #1
 801e2ac:	9103      	str	r1, [sp, #12]
 801e2ae:	f9bd b03c 	ldrsh.w	fp, [sp, #60]	; 0x3c
 801e2b2:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 801e2b6:	f89d e04c 	ldrb.w	lr, [sp, #76]	; 0x4c
 801e2ba:	9501      	str	r5, [sp, #4]
 801e2bc:	eb02 0904 	add.w	r9, r2, r4
 801e2c0:	f2c0 8141 	blt.w	801e546 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 801e2c4:	4583      	cmp	fp, r0
 801e2c6:	f340 813e 	ble.w	801e546 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2b2>
 801e2ca:	2f00      	cmp	r7, #0
 801e2cc:	f2c0 8137 	blt.w	801e53e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 801e2d0:	42be      	cmp	r6, r7
 801e2d2:	f340 8134 	ble.w	801e53e <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2aa>
 801e2d6:	f812 c004 	ldrb.w	ip, [r2, r4]
 801e2da:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
 801e2de:	f64f 041f 	movw	r4, #63519	; 0xf81f
 801e2e2:	ea4f 02ec 	mov.w	r2, ip, asr #3
 801e2e6:	f423 65fc 	bic.w	r5, r3, #2016	; 0x7e0
 801e2ea:	4355      	muls	r5, r2
 801e2ec:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e2f0:	fb0c f203 	mul.w	r2, ip, r3
 801e2f4:	ea04 1355 	and.w	r3, r4, r5, lsr #5
 801e2f8:	f605 0501 	addw	r5, r5, #2049	; 0x801
 801e2fc:	441d      	add	r5, r3
 801e2fe:	f102 0320 	add.w	r3, r2, #32
 801e302:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801e306:	0a1b      	lsrs	r3, r3, #8
 801e308:	ea04 1455 	and.w	r4, r4, r5, lsr #5
 801e30c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801e310:	431c      	orrs	r4, r3
 801e312:	1c7b      	adds	r3, r7, #1
 801e314:	f100 811c 	bmi.w	801e550 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 801e318:	429e      	cmp	r6, r3
 801e31a:	f340 8119 	ble.w	801e550 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2bc>
 801e31e:	2900      	cmp	r1, #0
 801e320:	f000 8119 	beq.w	801e556 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c2>
 801e324:	9a01      	ldr	r2, [sp, #4]
 801e326:	f899 3001 	ldrb.w	r3, [r9, #1]
 801e32a:	8855      	ldrh	r5, [r2, #2]
 801e32c:	ea4f 08e3 	mov.w	r8, r3, asr #3
 801e330:	f425 62fc 	bic.w	r2, r5, #2016	; 0x7e0
 801e334:	fb08 f802 	mul.w	r8, r8, r2
 801e338:	f64f 021f 	movw	r2, #63519	; 0xf81f
 801e33c:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e340:	435d      	muls	r5, r3
 801e342:	ea02 1a58 	and.w	sl, r2, r8, lsr #5
 801e346:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801e34a:	44d0      	add	r8, sl
 801e34c:	f105 0a20 	add.w	sl, r5, #32
 801e350:	eb0a 2515 	add.w	r5, sl, r5, lsr #8
 801e354:	0a2d      	lsrs	r5, r5, #8
 801e356:	ea02 1258 	and.w	r2, r2, r8, lsr #5
 801e35a:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e35e:	432a      	orrs	r2, r5
 801e360:	3001      	adds	r0, #1
 801e362:	f100 80fe 	bmi.w	801e562 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 801e366:	4583      	cmp	fp, r0
 801e368:	f340 80fb 	ble.w	801e562 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2ce>
 801e36c:	f1be 0f00 	cmp.w	lr, #0
 801e370:	f000 80fc 	beq.w	801e56c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2d8>
 801e374:	2f00      	cmp	r7, #0
 801e376:	f2c0 80f1 	blt.w	801e55c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 801e37a:	42be      	cmp	r6, r7
 801e37c:	f340 80ee 	ble.w	801e55c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2c8>
 801e380:	f64f 0b1f 	movw	fp, #63519	; 0xf81f
 801e384:	9801      	ldr	r0, [sp, #4]
 801e386:	f819 5006 	ldrb.w	r5, [r9, r6]
 801e38a:	f830 8016 	ldrh.w	r8, [r0, r6, lsl #1]
 801e38e:	ea4f 0ae5 	mov.w	sl, r5, asr #3
 801e392:	f428 60fc 	bic.w	r0, r8, #2016	; 0x7e0
 801e396:	fb0a fa00 	mul.w	sl, sl, r0
 801e39a:	f408 68fc 	and.w	r8, r8, #2016	; 0x7e0
 801e39e:	fb05 f808 	mul.w	r8, r5, r8
 801e3a2:	ea0b 105a 	and.w	r0, fp, sl, lsr #5
 801e3a6:	f60a 0a01 	addw	sl, sl, #2049	; 0x801
 801e3aa:	4482      	add	sl, r0
 801e3ac:	f108 0020 	add.w	r0, r8, #32
 801e3b0:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801e3b4:	0a00      	lsrs	r0, r0, #8
 801e3b6:	ea0b 1b5a 	and.w	fp, fp, sl, lsr #5
 801e3ba:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e3be:	ea4b 0b00 	orr.w	fp, fp, r0
 801e3c2:	3701      	adds	r7, #1
 801e3c4:	f100 80d7 	bmi.w	801e576 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 801e3c8:	42be      	cmp	r6, r7
 801e3ca:	f340 80d4 	ble.w	801e576 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e2>
 801e3ce:	2900      	cmp	r1, #0
 801e3d0:	f000 80d4 	beq.w	801e57c <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x2e8>
 801e3d4:	9801      	ldr	r0, [sp, #4]
 801e3d6:	3601      	adds	r6, #1
 801e3d8:	f830 0016 	ldrh.w	r0, [r0, r6, lsl #1]
 801e3dc:	f819 7006 	ldrb.w	r7, [r9, r6]
 801e3e0:	f420 66fc 	bic.w	r6, r0, #2016	; 0x7e0
 801e3e4:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e3e8:	fb07 f800 	mul.w	r8, r7, r0
 801e3ec:	f64f 001f 	movw	r0, #63519	; 0xf81f
 801e3f0:	ea4f 09e7 	mov.w	r9, r7, asr #3
 801e3f4:	fb09 f906 	mul.w	r9, r9, r6
 801e3f8:	ea00 1a59 	and.w	sl, r0, r9, lsr #5
 801e3fc:	f609 0901 	addw	r9, r9, #2049	; 0x801
 801e400:	44d1      	add	r9, sl
 801e402:	ea00 1659 	and.w	r6, r0, r9, lsr #5
 801e406:	f108 0020 	add.w	r0, r8, #32
 801e40a:	eb00 2018 	add.w	r0, r0, r8, lsr #8
 801e40e:	0a00      	lsrs	r0, r0, #8
 801e410:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e414:	4330      	orrs	r0, r6
 801e416:	b28e      	uxth	r6, r1
 801e418:	fa1f f98e 	uxth.w	r9, lr
 801e41c:	fb06 f809 	mul.w	r8, r6, r9
 801e420:	ea4f 4a04 	mov.w	sl, r4, lsl #16
 801e424:	ebc8 1909 	rsb	r9, r8, r9, lsl #4
 801e428:	0136      	lsls	r6, r6, #4
 801e42a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e42e:	f424 64fc 	bic.w	r4, r4, #2016	; 0x7e0
 801e432:	9601      	str	r6, [sp, #4]
 801e434:	ea4a 0404 	orr.w	r4, sl, r4
 801e438:	fa1f f689 	uxth.w	r6, r9
 801e43c:	9602      	str	r6, [sp, #8]
 801e43e:	4626      	mov	r6, r4
 801e440:	fb11 f90e 	smulbb	r9, r1, lr
 801e444:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801e448:	f3c9 09c7 	ubfx	r9, r9, #3, #8
 801e44c:	f1ce 0410 	rsb	r4, lr, #16
 801e450:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e454:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e458:	1a64      	subs	r4, r4, r1
 801e45a:	ea4a 0202 	orr.w	r2, sl, r2
 801e45e:	ebc9 0141 	rsb	r1, r9, r1, lsl #1
 801e462:	434a      	muls	r2, r1
 801e464:	eb09 0444 	add.w	r4, r9, r4, lsl #1
 801e468:	fb04 2406 	mla	r4, r4, r6, r2
 801e46c:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801e470:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e474:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801e478:	ea4a 0000 	orr.w	r0, sl, r0
 801e47c:	fb09 4200 	mla	r2, r9, r0, r4
 801e480:	ea4f 440b 	mov.w	r4, fp, lsl #16
 801e484:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801e488:	9801      	ldr	r0, [sp, #4]
 801e48a:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801e48e:	ea44 0b0b 	orr.w	fp, r4, fp
 801e492:	9c02      	ldr	r4, [sp, #8]
 801e494:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 801e498:	1b00      	subs	r0, r0, r4
 801e49a:	9c01      	ldr	r4, [sp, #4]
 801e49c:	b280      	uxth	r0, r0
 801e49e:	eba4 0608 	sub.w	r6, r4, r8
 801e4a2:	b2b6      	uxth	r6, r6
 801e4a4:	4373      	muls	r3, r6
 801e4a6:	fb0c 3300 	mla	r3, ip, r0, r3
 801e4aa:	9802      	ldr	r0, [sp, #8]
 801e4ac:	9903      	ldr	r1, [sp, #12]
 801e4ae:	fb00 3505 	mla	r5, r0, r5, r3
 801e4b2:	fb08 5707 	mla	r7, r8, r7, r5
 801e4b6:	ea6f 2727 	mvn.w	r7, r7, asr #8
 801e4ba:	8809      	ldrh	r1, [r1, #0]
 801e4bc:	ebc9 0e4e 	rsb	lr, r9, lr, lsl #1
 801e4c0:	fb0e 2e0b 	mla	lr, lr, fp, r2
 801e4c4:	120b      	asrs	r3, r1, #8
 801e4c6:	b2ff      	uxtb	r7, r7
 801e4c8:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 801e4cc:	437b      	muls	r3, r7
 801e4ce:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801e4d2:	10c8      	asrs	r0, r1, #3
 801e4d4:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801e4d8:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e4dc:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801e4e0:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 801e4e4:	00c9      	lsls	r1, r1, #3
 801e4e6:	4378      	muls	r0, r7
 801e4e8:	ea42 0e0e 	orr.w	lr, r2, lr
 801e4ec:	b2c9      	uxtb	r1, r1
 801e4ee:	fa1f f28e 	uxth.w	r2, lr
 801e4f2:	434f      	muls	r7, r1
 801e4f4:	1c59      	adds	r1, r3, #1
 801e4f6:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e4fa:	1213      	asrs	r3, r2, #8
 801e4fc:	f023 0307 	bic.w	r3, r3, #7
 801e500:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e504:	1c41      	adds	r1, r0, #1
 801e506:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801e50a:	10d1      	asrs	r1, r2, #3
 801e50c:	f021 0103 	bic.w	r1, r1, #3
 801e510:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801e514:	021b      	lsls	r3, r3, #8
 801e516:	00c9      	lsls	r1, r1, #3
 801e518:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e51c:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 801e520:	430b      	orrs	r3, r1
 801e522:	1c79      	adds	r1, r7, #1
 801e524:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801e528:	00d2      	lsls	r2, r2, #3
 801e52a:	eb02 2217 	add.w	r2, r2, r7, lsr #8
 801e52e:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801e532:	431a      	orrs	r2, r3
 801e534:	9b03      	ldr	r3, [sp, #12]
 801e536:	801a      	strh	r2, [r3, #0]
 801e538:	b005      	add	sp, #20
 801e53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e53e:	f04f 0c00 	mov.w	ip, #0
 801e542:	4664      	mov	r4, ip
 801e544:	e6e5      	b.n	801e312 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x7e>
 801e546:	2300      	movs	r3, #0
 801e548:	469c      	mov	ip, r3
 801e54a:	461a      	mov	r2, r3
 801e54c:	461c      	mov	r4, r3
 801e54e:	e707      	b.n	801e360 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801e550:	2300      	movs	r3, #0
 801e552:	461a      	mov	r2, r3
 801e554:	e704      	b.n	801e360 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801e556:	460b      	mov	r3, r1
 801e558:	460a      	mov	r2, r1
 801e55a:	e701      	b.n	801e360 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0xcc>
 801e55c:	2500      	movs	r5, #0
 801e55e:	46ab      	mov	fp, r5
 801e560:	e72f      	b.n	801e3c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x12e>
 801e562:	2700      	movs	r7, #0
 801e564:	463d      	mov	r5, r7
 801e566:	4638      	mov	r0, r7
 801e568:	46bb      	mov	fp, r7
 801e56a:	e754      	b.n	801e416 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801e56c:	4677      	mov	r7, lr
 801e56e:	4675      	mov	r5, lr
 801e570:	4670      	mov	r0, lr
 801e572:	46f3      	mov	fp, lr
 801e574:	e74f      	b.n	801e416 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801e576:	2700      	movs	r7, #0
 801e578:	4638      	mov	r0, r7
 801e57a:	e74c      	b.n	801e416 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
 801e57c:	460f      	mov	r7, r1
 801e57e:	4608      	mov	r0, r1
 801e580:	e749      	b.n	801e416 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh+0x182>
	...

0801e584 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e588:	b093      	sub	sp, #76	; 0x4c
 801e58a:	9210      	str	r2, [sp, #64]	; 0x40
 801e58c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801e58e:	9011      	str	r0, [sp, #68]	; 0x44
 801e590:	6850      	ldr	r0, [r2, #4]
 801e592:	910e      	str	r1, [sp, #56]	; 0x38
 801e594:	9306      	str	r3, [sp, #24]
 801e596:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 801e59a:	fb00 1303 	mla	r3, r0, r3, r1
 801e59e:	6812      	ldr	r2, [r2, #0]
 801e5a0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801e5a4:	9307      	str	r3, [sp, #28]
 801e5a6:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e5a8:	681b      	ldr	r3, [r3, #0]
 801e5aa:	9308      	str	r3, [sp, #32]
 801e5ac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e5ae:	685b      	ldr	r3, [r3, #4]
 801e5b0:	9309      	str	r3, [sp, #36]	; 0x24
 801e5b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e5b4:	2b00      	cmp	r3, #0
 801e5b6:	dc03      	bgt.n	801e5c0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801e5b8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801e5ba:	2b00      	cmp	r3, #0
 801e5bc:	f340 83b4 	ble.w	801ed28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 801e5c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e5c2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e5c6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e5ca:	1e48      	subs	r0, r1, #1
 801e5cc:	1e55      	subs	r5, r2, #1
 801e5ce:	9b06      	ldr	r3, [sp, #24]
 801e5d0:	2b00      	cmp	r3, #0
 801e5d2:	f340 8163 	ble.w	801e89c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x318>
 801e5d6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 801e5d8:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e5da:	1436      	asrs	r6, r6, #16
 801e5dc:	ea4f 4323 	mov.w	r3, r3, asr #16
 801e5e0:	d406      	bmi.n	801e5f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e5e2:	4286      	cmp	r6, r0
 801e5e4:	da04      	bge.n	801e5f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e5e6:	2b00      	cmp	r3, #0
 801e5e8:	db02      	blt.n	801e5f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801e5ea:	42ab      	cmp	r3, r5
 801e5ec:	f2c0 8157 	blt.w	801e89e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e5f0:	3601      	adds	r6, #1
 801e5f2:	f100 8144 	bmi.w	801e87e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 801e5f6:	42b1      	cmp	r1, r6
 801e5f8:	f2c0 8141 	blt.w	801e87e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 801e5fc:	3301      	adds	r3, #1
 801e5fe:	f100 813e 	bmi.w	801e87e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 801e602:	429a      	cmp	r2, r3
 801e604:	f2c0 813b 	blt.w	801e87e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fa>
 801e608:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801e60c:	9b06      	ldr	r3, [sp, #24]
 801e60e:	9f07      	ldr	r7, [sp, #28]
 801e610:	930f      	str	r3, [sp, #60]	; 0x3c
 801e612:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e614:	2b00      	cmp	r3, #0
 801e616:	f340 8164 	ble.w	801e8e2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35e>
 801e61a:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e61c:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801e61e:	1418      	asrs	r0, r3, #16
 801e620:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e622:	142d      	asrs	r5, r5, #16
 801e624:	f3c3 3103 	ubfx	r1, r3, #12, #4
 801e628:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801e62a:	f3c3 3c03 	ubfx	ip, r3, #12, #4
 801e62e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801e630:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 801e634:	f100 81ee 	bmi.w	801ea14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801e638:	f102 3eff 	add.w	lr, r2, #4294967295
 801e63c:	4575      	cmp	r5, lr
 801e63e:	f280 81e9 	bge.w	801ea14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801e642:	2800      	cmp	r0, #0
 801e644:	f2c0 81e6 	blt.w	801ea14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801e648:	f103 3eff 	add.w	lr, r3, #4294967295
 801e64c:	4570      	cmp	r0, lr
 801e64e:	f280 81e1 	bge.w	801ea14 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801e652:	b212      	sxth	r2, r2
 801e654:	fb00 5002 	mla	r0, r0, r2, r5
 801e658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e65a:	fa1f fe81 	uxth.w	lr, r1
 801e65e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 801e662:	eb03 0a00 	add.w	sl, r3, r0
 801e666:	f813 9000 	ldrb.w	r9, [r3, r0]
 801e66a:	f5c5 7380 	rsb	r3, r5, #256	; 0x100
 801e66e:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801e672:	b29b      	uxth	r3, r3
 801e674:	f1bc 0f00 	cmp.w	ip, #0
 801e678:	f000 8179 	beq.w	801e96e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ea>
 801e67c:	f81a 4002 	ldrb.w	r4, [sl, r2]
 801e680:	eb0a 0b02 	add.w	fp, sl, r2
 801e684:	fa1f fa8c 	uxth.w	sl, ip
 801e688:	fb0a fe0e 	mul.w	lr, sl, lr
 801e68c:	eba5 050e 	sub.w	r5, r5, lr
 801e690:	b2ad      	uxth	r5, r5
 801e692:	ebce 1a0a 	rsb	sl, lr, sl, lsl #4
 801e696:	fb08 f505 	mul.w	r5, r8, r5
 801e69a:	fa1f fa8a 	uxth.w	sl, sl
 801e69e:	eba3 030a 	sub.w	r3, r3, sl
 801e6a2:	b29b      	uxth	r3, r3
 801e6a4:	940a      	str	r4, [sp, #40]	; 0x28
 801e6a6:	fb09 5303 	mla	r3, r9, r3, r5
 801e6aa:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801e6ae:	940b      	str	r4, [sp, #44]	; 0x2c
 801e6b0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e6b2:	fb0a 3304 	mla	r3, sl, r4, r3
 801e6b6:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e6b8:	fb0e 3304 	mla	r3, lr, r4, r3
 801e6bc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e6c0:	2b00      	cmp	r3, #0
 801e6c2:	f000 80cf 	beq.w	801e864 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801e6c6:	9c08      	ldr	r4, [sp, #32]
 801e6c8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801e6cc:	eb04 0540 	add.w	r5, r4, r0, lsl #1
 801e6d0:	f834 0010 	ldrh.w	r0, [r4, r0, lsl #1]
 801e6d4:	f000 8150 	beq.w	801e978 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f4>
 801e6d8:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801e6dc:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801e6e0:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e6e4:	fb09 f000 	mul.w	r0, r9, r0
 801e6e8:	fb0a fe0e 	mul.w	lr, sl, lr
 801e6ec:	f100 0b20 	add.w	fp, r0, #32
 801e6f0:	ea06 195e 	and.w	r9, r6, lr, lsr #5
 801e6f4:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801e6f8:	44ce      	add	lr, r9
 801e6fa:	eb0b 2910 	add.w	r9, fp, r0, lsr #8
 801e6fe:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e702:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801e706:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801e70a:	ea4e 0909 	orr.w	r9, lr, r9
 801e70e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801e712:	8868      	ldrh	r0, [r5, #2]
 801e714:	d019      	beq.n	801e74a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801e716:	f420 6efc 	bic.w	lr, r0, #2016	; 0x7e0
 801e71a:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801e71e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e722:	fb08 f800 	mul.w	r8, r8, r0
 801e726:	fb0a fe0e 	mul.w	lr, sl, lr
 801e72a:	f108 0b20 	add.w	fp, r8, #32
 801e72e:	ea06 105e 	and.w	r0, r6, lr, lsr #5
 801e732:	f60e 0e01 	addw	lr, lr, #2049	; 0x801
 801e736:	4486      	add	lr, r0
 801e738:	eb0b 2018 	add.w	r0, fp, r8, lsr #8
 801e73c:	0a00      	lsrs	r0, r0, #8
 801e73e:	ea06 1e5e 	and.w	lr, r6, lr, lsr #5
 801e742:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801e746:	ea4e 0000 	orr.w	r0, lr, r0
 801e74a:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 801e74e:	ea4f 4a00 	mov.w	sl, r0, lsl #16
 801e752:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801e756:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801e75a:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e75e:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801e762:	ea4e 0909 	orr.w	r9, lr, r9
 801e766:	ea4a 0000 	orr.w	r0, sl, r0
 801e76a:	f1bc 0f00 	cmp.w	ip, #0
 801e76e:	f000 8105 	beq.w	801e97c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 801e772:	f102 4200 	add.w	r2, r2, #2147483648	; 0x80000000
 801e776:	3a01      	subs	r2, #1
 801e778:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 801e77a:	0052      	lsls	r2, r2, #1
 801e77c:	3202      	adds	r2, #2
 801e77e:	2cff      	cmp	r4, #255	; 0xff
 801e780:	eb05 0e02 	add.w	lr, r5, r2
 801e784:	5aaa      	ldrh	r2, [r5, r2]
 801e786:	d018      	beq.n	801e7ba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x236>
 801e788:	f422 65fc 	bic.w	r5, r2, #2016	; 0x7e0
 801e78c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e790:	fb04 fa02 	mul.w	sl, r4, r2
 801e794:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801e798:	fb08 f805 	mul.w	r8, r8, r5
 801e79c:	f10a 0520 	add.w	r5, sl, #32
 801e7a0:	ea06 1258 	and.w	r2, r6, r8, lsr #5
 801e7a4:	eb05 251a 	add.w	r5, r5, sl, lsr #8
 801e7a8:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801e7ac:	4442      	add	r2, r8
 801e7ae:	0a2d      	lsrs	r5, r5, #8
 801e7b0:	ea06 1252 	and.w	r2, r6, r2, lsr #5
 801e7b4:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e7b8:	432a      	orrs	r2, r5
 801e7ba:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 801e7bc:	f8be 5002 	ldrh.w	r5, [lr, #2]
 801e7c0:	2cff      	cmp	r4, #255	; 0xff
 801e7c2:	d01a      	beq.n	801e7fa <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801e7c4:	f425 6efc 	bic.w	lr, r5, #2016	; 0x7e0
 801e7c8:	f405 65fc 	and.w	r5, r5, #2016	; 0x7e0
 801e7cc:	fb04 fa05 	mul.w	sl, r4, r5
 801e7d0:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801e7d4:	fb08 f80e 	mul.w	r8, r8, lr
 801e7d8:	f10a 0e20 	add.w	lr, sl, #32
 801e7dc:	ea06 1558 	and.w	r5, r6, r8, lsr #5
 801e7e0:	eb0e 2e1a 	add.w	lr, lr, sl, lsr #8
 801e7e4:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801e7e8:	4445      	add	r5, r8
 801e7ea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e7ee:	ea06 1555 	and.w	r5, r6, r5, lsr #5
 801e7f2:	f40e 6efc 	and.w	lr, lr, #2016	; 0x7e0
 801e7f6:	ea45 050e 	orr.w	r5, r5, lr
 801e7fa:	fb1c fe01 	smulbb	lr, ip, r1
 801e7fe:	f1cc 0810 	rsb	r8, ip, #16
 801e802:	ea4f 0eee 	mov.w	lr, lr, asr #3
 801e806:	eba8 0801 	sub.w	r8, r8, r1
 801e80a:	ebce 0141 	rsb	r1, lr, r1, lsl #1
 801e80e:	4341      	muls	r1, r0
 801e810:	eb0e 0848 	add.w	r8, lr, r8, lsl #1
 801e814:	fb09 1108 	mla	r1, r9, r8, r1
 801e818:	ea4f 4a02 	mov.w	sl, r2, lsl #16
 801e81c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801e820:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801e824:	ea4a 0202 	orr.w	r2, sl, r2
 801e828:	ebce 0c4c 	rsb	ip, lr, ip, lsl #1
 801e82c:	fb0c 1102 	mla	r1, ip, r2, r1
 801e830:	ea4f 4b05 	mov.w	fp, r5, lsl #16
 801e834:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801e838:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801e83c:	ea4b 0505 	orr.w	r5, fp, r5
 801e840:	fb0e 1e05 	mla	lr, lr, r5, r1
 801e844:	ea4f 525e 	mov.w	r2, lr, lsr #21
 801e848:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 801e84c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e850:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801e854:	ea42 0e0e 	orr.w	lr, r2, lr
 801e858:	fa1f f28e 	uxth.w	r2, lr
 801e85c:	2bff      	cmp	r3, #255	; 0xff
 801e85e:	f040 80a1 	bne.w	801e9a4 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x420>
 801e862:	803a      	strh	r2, [r7, #0]
 801e864:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e866:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801e868:	3702      	adds	r7, #2
 801e86a:	4413      	add	r3, r2
 801e86c:	931d      	str	r3, [sp, #116]	; 0x74
 801e86e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801e870:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e872:	441a      	add	r2, r3
 801e874:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e876:	921e      	str	r2, [sp, #120]	; 0x78
 801e878:	3b01      	subs	r3, #1
 801e87a:	930f      	str	r3, [sp, #60]	; 0x3c
 801e87c:	e6c9      	b.n	801e612 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801e87e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801e880:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 801e882:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 801e884:	4433      	add	r3, r6
 801e886:	931d      	str	r3, [sp, #116]	; 0x74
 801e888:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801e88a:	441c      	add	r4, r3
 801e88c:	9b06      	ldr	r3, [sp, #24]
 801e88e:	941e      	str	r4, [sp, #120]	; 0x78
 801e890:	3b01      	subs	r3, #1
 801e892:	9306      	str	r3, [sp, #24]
 801e894:	9b07      	ldr	r3, [sp, #28]
 801e896:	3302      	adds	r3, #2
 801e898:	9307      	str	r3, [sp, #28]
 801e89a:	e698      	b.n	801e5ce <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801e89c:	d028      	beq.n	801e8f0 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801e89e:	9b06      	ldr	r3, [sp, #24]
 801e8a0:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801e8a2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 801e8a4:	3b01      	subs	r3, #1
 801e8a6:	fb00 5003 	mla	r0, r0, r3, r5
 801e8aa:	1400      	asrs	r0, r0, #16
 801e8ac:	f53f aeac 	bmi.w	801e608 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e8b0:	3901      	subs	r1, #1
 801e8b2:	4288      	cmp	r0, r1
 801e8b4:	f6bf aea8 	bge.w	801e608 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e8b8:	9920      	ldr	r1, [sp, #128]	; 0x80
 801e8ba:	981e      	ldr	r0, [sp, #120]	; 0x78
 801e8bc:	fb01 0303 	mla	r3, r1, r3, r0
 801e8c0:	141b      	asrs	r3, r3, #16
 801e8c2:	f53f aea1 	bmi.w	801e608 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e8c6:	3a01      	subs	r2, #1
 801e8c8:	4293      	cmp	r3, r2
 801e8ca:	f6bf ae9d 	bge.w	801e608 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801e8ce:	f64f 061f 	movw	r6, #63519	; 0xf81f
 801e8d2:	9b06      	ldr	r3, [sp, #24]
 801e8d4:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801e8d8:	930f      	str	r3, [sp, #60]	; 0x3c
 801e8da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e8dc:	2b00      	cmp	r3, #0
 801e8de:	f300 80b6 	bgt.w	801ea4e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ca>
 801e8e2:	9b06      	ldr	r3, [sp, #24]
 801e8e4:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e8e8:	9b07      	ldr	r3, [sp, #28]
 801e8ea:	eb03 0344 	add.w	r3, r3, r4, lsl #1
 801e8ee:	9307      	str	r3, [sp, #28]
 801e8f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e8f2:	2b00      	cmp	r3, #0
 801e8f4:	f340 8218 	ble.w	801ed28 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a4>
 801e8f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801e8fc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e900:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e904:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e908:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e90c:	eef0 6a62 	vmov.f32	s13, s5
 801e910:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e914:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e918:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e91c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e920:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e924:	edcd 6a1d 	vstr	s13, [sp, #116]	; 0x74
 801e928:	eef0 6a43 	vmov.f32	s13, s6
 801e92c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e930:	ee12 2a90 	vmov	r2, s5
 801e934:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e938:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e93a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e93e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e942:	ee13 2a10 	vmov	r2, s6
 801e946:	931f      	str	r3, [sp, #124]	; 0x7c
 801e948:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e94a:	edcd 6a1e 	vstr	s13, [sp, #120]	; 0x78
 801e94e:	fb92 f3f3 	sdiv	r3, r2, r3
 801e952:	9320      	str	r3, [sp, #128]	; 0x80
 801e954:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e956:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801e958:	3b01      	subs	r3, #1
 801e95a:	930e      	str	r3, [sp, #56]	; 0x38
 801e95c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801e95e:	bf08      	it	eq
 801e960:	4613      	moveq	r3, r2
 801e962:	eeb0 3a67 	vmov.f32	s6, s15
 801e966:	9306      	str	r3, [sp, #24]
 801e968:	eef0 2a47 	vmov.f32	s5, s14
 801e96c:	e621      	b.n	801e5b2 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801e96e:	fb08 f505 	mul.w	r5, r8, r5
 801e972:	fb09 5303 	mla	r3, r9, r3, r5
 801e976:	e6a1      	b.n	801e6bc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801e978:	4681      	mov	r9, r0
 801e97a:	e6c8      	b.n	801e70e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801e97c:	f1c1 0210 	rsb	r2, r1, #16
 801e980:	4341      	muls	r1, r0
 801e982:	fb09 1902 	mla	r9, r9, r2, r1
 801e986:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801e98a:	ea4f 5259 	mov.w	r2, r9, lsr #21
 801e98e:	ea4f 1959 	mov.w	r9, r9, lsr #5
 801e992:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801e996:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801e99a:	ea42 0909 	orr.w	r9, r2, r9
 801e99e:	fa1f f289 	uxth.w	r2, r9
 801e9a2:	e75b      	b.n	801e85c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801e9a4:	43db      	mvns	r3, r3
 801e9a6:	f8b7 c000 	ldrh.w	ip, [r7]
 801e9aa:	fa5f fe83 	uxtb.w	lr, r3
 801e9ae:	ea4f 202c 	mov.w	r0, ip, asr #8
 801e9b2:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801e9b6:	fb00 f00e 	mul.w	r0, r0, lr
 801e9ba:	ea4f 05ec 	mov.w	r5, ip, asr #3
 801e9be:	1c41      	adds	r1, r0, #1
 801e9c0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801e9c4:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 801e9c8:	fb05 f50e 	mul.w	r5, r5, lr
 801e9cc:	1211      	asrs	r1, r2, #8
 801e9ce:	f021 0107 	bic.w	r1, r1, #7
 801e9d2:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801e9d6:	48d6      	ldr	r0, [pc, #856]	; (801ed30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 801e9d8:	b2c9      	uxtb	r1, r1
 801e9da:	ea00 2001 	and.w	r0, r0, r1, lsl #8
 801e9de:	ea4f 03cc 	mov.w	r3, ip, lsl #3
 801e9e2:	1c69      	adds	r1, r5, #1
 801e9e4:	eb01 2515 	add.w	r5, r1, r5, lsr #8
 801e9e8:	b2db      	uxtb	r3, r3
 801e9ea:	10d1      	asrs	r1, r2, #3
 801e9ec:	fb03 f30e 	mul.w	r3, r3, lr
 801e9f0:	f021 0103 	bic.w	r1, r1, #3
 801e9f4:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801e9f8:	00c9      	lsls	r1, r1, #3
 801e9fa:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801e9fe:	4301      	orrs	r1, r0
 801ea00:	1c58      	adds	r0, r3, #1
 801ea02:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801ea06:	00d2      	lsls	r2, r2, #3
 801ea08:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ea0c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 801ea10:	430a      	orrs	r2, r1
 801ea12:	e726      	b.n	801e862 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2de>
 801ea14:	f115 0e01 	adds.w	lr, r5, #1
 801ea18:	f53f af24 	bmi.w	801e864 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801ea1c:	4572      	cmp	r2, lr
 801ea1e:	f6ff af21 	blt.w	801e864 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801ea22:	f110 0e01 	adds.w	lr, r0, #1
 801ea26:	f53f af1d 	bmi.w	801e864 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801ea2a:	4573      	cmp	r3, lr
 801ea2c:	f6ff af1a 	blt.w	801e864 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801ea30:	b21b      	sxth	r3, r3
 801ea32:	b212      	sxth	r2, r2
 801ea34:	e9cd 1c04 	strd	r1, ip, [sp, #16]
 801ea38:	e9cd 5002 	strd	r5, r0, [sp, #8]
 801ea3c:	9301      	str	r3, [sp, #4]
 801ea3e:	9200      	str	r2, [sp, #0]
 801ea40:	4639      	mov	r1, r7
 801ea42:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 801ea46:	9811      	ldr	r0, [sp, #68]	; 0x44
 801ea48:	f7ff fc24 	bl	801e294 <_ZNK8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKhPKtssiihh>
 801ea4c:	e70a      	b.n	801e864 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e0>
 801ea4e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ea50:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801ea54:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ea56:	fa1f fc82 	uxth.w	ip, r2
 801ea5a:	f3c3 3503 	ubfx	r5, r3, #12, #4
 801ea5e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ea60:	ea4f 100c 	mov.w	r0, ip, lsl #4
 801ea64:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ea68:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 801ea6a:	141f      	asrs	r7, r3, #16
 801ea6c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ea6e:	141b      	asrs	r3, r3, #16
 801ea70:	fb01 3707 	mla	r7, r1, r7, r3
 801ea74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ea76:	eb03 0a07 	add.w	sl, r3, r7
 801ea7a:	f813 9007 	ldrb.w	r9, [r3, r7]
 801ea7e:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801ea82:	f89a 8001 	ldrb.w	r8, [sl, #1]
 801ea86:	b29b      	uxth	r3, r3
 801ea88:	2d00      	cmp	r5, #0
 801ea8a:	f000 80fe 	beq.w	801ec8a <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801ea8e:	f81a 4001 	ldrb.w	r4, [sl, r1]
 801ea92:	eb0a 0b01 	add.w	fp, sl, r1
 801ea96:	fa1f fa85 	uxth.w	sl, r5
 801ea9a:	fb0a fc0c 	mul.w	ip, sl, ip
 801ea9e:	eba0 000c 	sub.w	r0, r0, ip
 801eaa2:	b280      	uxth	r0, r0
 801eaa4:	fb08 f000 	mul.w	r0, r8, r0
 801eaa8:	ebcc 1a0a 	rsb	sl, ip, sl, lsl #4
 801eaac:	fa1f fa8a 	uxth.w	sl, sl
 801eab0:	eba3 030a 	sub.w	r3, r3, sl
 801eab4:	b29b      	uxth	r3, r3
 801eab6:	fb09 0303 	mla	r3, r9, r3, r0
 801eaba:	940c      	str	r4, [sp, #48]	; 0x30
 801eabc:	980c      	ldr	r0, [sp, #48]	; 0x30
 801eabe:	f89b 4001 	ldrb.w	r4, [fp, #1]
 801eac2:	fb0a 3300 	mla	r3, sl, r0, r3
 801eac6:	fb0c 3304 	mla	r3, ip, r4, r3
 801eaca:	940d      	str	r4, [sp, #52]	; 0x34
 801eacc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ead0:	2b00      	cmp	r3, #0
 801ead2:	f000 80cc 	beq.w	801ec6e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 801ead6:	9808      	ldr	r0, [sp, #32]
 801ead8:	9c08      	ldr	r4, [sp, #32]
 801eada:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 801eade:	eb00 0047 	add.w	r0, r0, r7, lsl #1
 801eae2:	f834 7017 	ldrh.w	r7, [r4, r7, lsl #1]
 801eae6:	f000 80d5 	beq.w	801ec94 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x710>
 801eaea:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801eaee:	ea4f 0ae9 	mov.w	sl, r9, asr #3
 801eaf2:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801eaf6:	fb09 f707 	mul.w	r7, r9, r7
 801eafa:	fb0a fc0c 	mul.w	ip, sl, ip
 801eafe:	f107 0b20 	add.w	fp, r7, #32
 801eb02:	ea06 195c 	and.w	r9, r6, ip, lsr #5
 801eb06:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801eb0a:	44cc      	add	ip, r9
 801eb0c:	eb0b 2917 	add.w	r9, fp, r7, lsr #8
 801eb10:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801eb14:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801eb18:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 801eb1c:	ea4c 0909 	orr.w	r9, ip, r9
 801eb20:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 801eb24:	8847      	ldrh	r7, [r0, #2]
 801eb26:	d019      	beq.n	801eb5c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d8>
 801eb28:	f427 6cfc 	bic.w	ip, r7, #2016	; 0x7e0
 801eb2c:	ea4f 0ae8 	mov.w	sl, r8, asr #3
 801eb30:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801eb34:	fb08 f807 	mul.w	r8, r8, r7
 801eb38:	fb0a fc0c 	mul.w	ip, sl, ip
 801eb3c:	f108 0b20 	add.w	fp, r8, #32
 801eb40:	ea06 175c 	and.w	r7, r6, ip, lsr #5
 801eb44:	f60c 0c01 	addw	ip, ip, #2049	; 0x801
 801eb48:	44bc      	add	ip, r7
 801eb4a:	eb0b 2718 	add.w	r7, fp, r8, lsr #8
 801eb4e:	0a3f      	lsrs	r7, r7, #8
 801eb50:	ea06 1c5c 	and.w	ip, r6, ip, lsr #5
 801eb54:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801eb58:	ea4c 0707 	orr.w	r7, ip, r7
 801eb5c:	ea4f 4c09 	mov.w	ip, r9, lsl #16
 801eb60:	ea4f 4a07 	mov.w	sl, r7, lsl #16
 801eb64:	f00c 6cfc 	and.w	ip, ip, #132120576	; 0x7e00000
 801eb68:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 801eb6c:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801eb70:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801eb74:	ea4c 0909 	orr.w	r9, ip, r9
 801eb78:	ea4a 0707 	orr.w	r7, sl, r7
 801eb7c:	2d00      	cmp	r5, #0
 801eb7e:	f000 808b 	beq.w	801ec98 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x714>
 801eb82:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801eb86:	3901      	subs	r1, #1
 801eb88:	0049      	lsls	r1, r1, #1
 801eb8a:	3102      	adds	r1, #2
 801eb8c:	eb00 0c01 	add.w	ip, r0, r1
 801eb90:	5a41      	ldrh	r1, [r0, r1]
 801eb92:	980c      	ldr	r0, [sp, #48]	; 0x30
 801eb94:	28ff      	cmp	r0, #255	; 0xff
 801eb96:	d019      	beq.n	801ebcc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x648>
 801eb98:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 801eb9a:	f421 60fc 	bic.w	r0, r1, #2016	; 0x7e0
 801eb9e:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801eba2:	fb04 fa01 	mul.w	sl, r4, r1
 801eba6:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801ebaa:	fb08 f800 	mul.w	r8, r8, r0
 801ebae:	f10a 0020 	add.w	r0, sl, #32
 801ebb2:	ea06 1158 	and.w	r1, r6, r8, lsr #5
 801ebb6:	eb00 201a 	add.w	r0, r0, sl, lsr #8
 801ebba:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801ebbe:	4441      	add	r1, r8
 801ebc0:	0a00      	lsrs	r0, r0, #8
 801ebc2:	ea06 1151 	and.w	r1, r6, r1, lsr #5
 801ebc6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ebca:	4301      	orrs	r1, r0
 801ebcc:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 801ebce:	f8bc 0002 	ldrh.w	r0, [ip, #2]
 801ebd2:	2cff      	cmp	r4, #255	; 0xff
 801ebd4:	d01a      	beq.n	801ec0c <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x688>
 801ebd6:	f420 6cfc 	bic.w	ip, r0, #2016	; 0x7e0
 801ebda:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ebde:	fb04 fa00 	mul.w	sl, r4, r0
 801ebe2:	ea4f 08e4 	mov.w	r8, r4, asr #3
 801ebe6:	fb08 f80c 	mul.w	r8, r8, ip
 801ebea:	f10a 0c20 	add.w	ip, sl, #32
 801ebee:	ea06 1058 	and.w	r0, r6, r8, lsr #5
 801ebf2:	eb0c 2c1a 	add.w	ip, ip, sl, lsr #8
 801ebf6:	f608 0801 	addw	r8, r8, #2049	; 0x801
 801ebfa:	4440      	add	r0, r8
 801ebfc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ec00:	ea06 1050 	and.w	r0, r6, r0, lsr #5
 801ec04:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801ec08:	ea40 000c 	orr.w	r0, r0, ip
 801ec0c:	fb15 fc02 	smulbb	ip, r5, r2
 801ec10:	f1c5 0810 	rsb	r8, r5, #16
 801ec14:	ea4f 0cec 	mov.w	ip, ip, asr #3
 801ec18:	eba8 0802 	sub.w	r8, r8, r2
 801ec1c:	ebcc 0242 	rsb	r2, ip, r2, lsl #1
 801ec20:	437a      	muls	r2, r7
 801ec22:	eb0c 0848 	add.w	r8, ip, r8, lsl #1
 801ec26:	fb09 2208 	mla	r2, r9, r8, r2
 801ec2a:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801ec2e:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801ec32:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801ec36:	ea4a 0101 	orr.w	r1, sl, r1
 801ec3a:	ebcc 0545 	rsb	r5, ip, r5, lsl #1
 801ec3e:	fb05 2201 	mla	r2, r5, r1, r2
 801ec42:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801ec46:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801ec4a:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801ec4e:	ea4b 0000 	orr.w	r0, fp, r0
 801ec52:	fb0c 2200 	mla	r2, ip, r0, r2
 801ec56:	0d57      	lsrs	r7, r2, #21
 801ec58:	0952      	lsrs	r2, r2, #5
 801ec5a:	f407 67fc 	and.w	r7, r7, #2016	; 0x7e0
 801ec5e:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ec62:	433a      	orrs	r2, r7
 801ec64:	2bff      	cmp	r3, #255	; 0xff
 801ec66:	b292      	uxth	r2, r2
 801ec68:	d127      	bne.n	801ecba <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x736>
 801ec6a:	f8ae 2000 	strh.w	r2, [lr]
 801ec6e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ec70:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 801ec72:	f10e 0e02 	add.w	lr, lr, #2
 801ec76:	4413      	add	r3, r2
 801ec78:	931d      	str	r3, [sp, #116]	; 0x74
 801ec7a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 801ec7c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801ec7e:	441a      	add	r2, r3
 801ec80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ec82:	921e      	str	r2, [sp, #120]	; 0x78
 801ec84:	3b01      	subs	r3, #1
 801ec86:	930f      	str	r3, [sp, #60]	; 0x3c
 801ec88:	e627      	b.n	801e8da <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801ec8a:	fb08 f000 	mul.w	r0, r8, r0
 801ec8e:	fb09 0303 	mla	r3, r9, r3, r0
 801ec92:	e71b      	b.n	801eacc <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x548>
 801ec94:	46b9      	mov	r9, r7
 801ec96:	e743      	b.n	801eb20 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59c>
 801ec98:	f1c2 0110 	rsb	r1, r2, #16
 801ec9c:	437a      	muls	r2, r7
 801ec9e:	fb09 2901 	mla	r9, r9, r1, r2
 801eca2:	ea4f 0949 	mov.w	r9, r9, lsl #1
 801eca6:	ea4f 5059 	mov.w	r0, r9, lsr #21
 801ecaa:	ea4f 1259 	mov.w	r2, r9, lsr #5
 801ecae:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 801ecb2:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ecb6:	4302      	orrs	r2, r0
 801ecb8:	e7d4      	b.n	801ec64 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801ecba:	43db      	mvns	r3, r3
 801ecbc:	f8be 7000 	ldrh.w	r7, [lr]
 801ecc0:	fa5f fc83 	uxtb.w	ip, r3
 801ecc4:	1238      	asrs	r0, r7, #8
 801ecc6:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801ecca:	fb00 f00c 	mul.w	r0, r0, ip
 801ecce:	10fd      	asrs	r5, r7, #3
 801ecd0:	f005 05fc 	and.w	r5, r5, #252	; 0xfc
 801ecd4:	fb05 f10c 	mul.w	r1, r5, ip
 801ecd8:	1c45      	adds	r5, r0, #1
 801ecda:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801ecde:	1215      	asrs	r5, r2, #8
 801ece0:	f025 0507 	bic.w	r5, r5, #7
 801ece4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801ece8:	00fb      	lsls	r3, r7, #3
 801ecea:	1c4d      	adds	r5, r1, #1
 801ecec:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 801ecf0:	b2db      	uxtb	r3, r3
 801ecf2:	10d1      	asrs	r1, r2, #3
 801ecf4:	fb03 f30c 	mul.w	r3, r3, ip
 801ecf8:	f021 0103 	bic.w	r1, r1, #3
 801ecfc:	4c0c      	ldr	r4, [pc, #48]	; (801ed30 <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7ac>)
 801ecfe:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801ed02:	b2c0      	uxtb	r0, r0
 801ed04:	00c9      	lsls	r1, r1, #3
 801ed06:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801ed0a:	ea04 2000 	and.w	r0, r4, r0, lsl #8
 801ed0e:	4308      	orrs	r0, r1
 801ed10:	1c59      	adds	r1, r3, #1
 801ed12:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801ed16:	00d2      	lsls	r2, r2, #3
 801ed18:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ed1c:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 801ed20:	4318      	orrs	r0, r3
 801ed22:	f8ae 0000 	strh.w	r0, [lr]
 801ed26:	e7a2      	b.n	801ec6e <_ZN8touchgfx8LCD16bpp57TextureMapper_RGB565_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ea>
 801ed28:	b013      	add	sp, #76	; 0x4c
 801ed2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ed2e:	bf00      	nop
 801ed30:	fffff800 	.word	0xfffff800

0801ed34 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>:
 801ed34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ed38:	e9dd 4509 	ldrd	r4, r5, [sp, #36]	; 0x24
 801ed3c:	fb05 4c03 	mla	ip, r5, r3, r4
 801ed40:	2d00      	cmp	r5, #0
 801ed42:	f9bd a020 	ldrsh.w	sl, [sp, #32]
 801ed46:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 801ed4a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 801ed4e:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 801ed52:	eb02 0e4c 	add.w	lr, r2, ip, lsl #1
 801ed56:	8808      	ldrh	r0, [r1, #0]
 801ed58:	f2c0 80a7 	blt.w	801eeaa <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 801ed5c:	45aa      	cmp	sl, r5
 801ed5e:	f340 80a4 	ble.w	801eeaa <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x176>
 801ed62:	2c00      	cmp	r4, #0
 801ed64:	f2c0 809f 	blt.w	801eea6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 801ed68:	42a3      	cmp	r3, r4
 801ed6a:	f340 809c 	ble.w	801eea6 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x172>
 801ed6e:	f832 801c 	ldrh.w	r8, [r2, ip, lsl #1]
 801ed72:	1c62      	adds	r2, r4, #1
 801ed74:	f100 809c 	bmi.w	801eeb0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 801ed78:	4293      	cmp	r3, r2
 801ed7a:	f340 8099 	ble.w	801eeb0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 801ed7e:	f1b9 0f00 	cmp.w	r9, #0
 801ed82:	f000 8095 	beq.w	801eeb0 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x17c>
 801ed86:	f8be c002 	ldrh.w	ip, [lr, #2]
 801ed8a:	3501      	adds	r5, #1
 801ed8c:	f100 8094 	bmi.w	801eeb8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 801ed90:	45aa      	cmp	sl, r5
 801ed92:	f340 8091 	ble.w	801eeb8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 801ed96:	2f00      	cmp	r7, #0
 801ed98:	f000 808e 	beq.w	801eeb8 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x184>
 801ed9c:	2c00      	cmp	r4, #0
 801ed9e:	f2c0 8089 	blt.w	801eeb4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 801eda2:	42a3      	cmp	r3, r4
 801eda4:	f340 8086 	ble.w	801eeb4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x180>
 801eda8:	f83e 5013 	ldrh.w	r5, [lr, r3, lsl #1]
 801edac:	3401      	adds	r4, #1
 801edae:	f100 8086 	bmi.w	801eebe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 801edb2:	42a3      	cmp	r3, r4
 801edb4:	f340 8083 	ble.w	801eebe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 801edb8:	f1b9 0f00 	cmp.w	r9, #0
 801edbc:	d07f      	beq.n	801eebe <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x18a>
 801edbe:	3301      	adds	r3, #1
 801edc0:	f83e 3013 	ldrh.w	r3, [lr, r3, lsl #1]
 801edc4:	fb19 fe07 	smulbb	lr, r9, r7
 801edc8:	ea4f 4408 	mov.w	r4, r8, lsl #16
 801edcc:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801edd0:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 801edd4:	ea44 0808 	orr.w	r8, r4, r8
 801edd8:	ea4f 440c 	mov.w	r4, ip, lsl #16
 801eddc:	f3ce 0ec7 	ubfx	lr, lr, #3, #8
 801ede0:	f004 64fc 	and.w	r4, r4, #132120576	; 0x7e00000
 801ede4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801ede8:	ea44 0c0c 	orr.w	ip, r4, ip
 801edec:	ebce 0449 	rsb	r4, lr, r9, lsl #1
 801edf0:	fb04 f40c 	mul.w	r4, r4, ip
 801edf4:	f1c7 0210 	rsb	r2, r7, #16
 801edf8:	eba2 0209 	sub.w	r2, r2, r9
 801edfc:	eb0e 0242 	add.w	r2, lr, r2, lsl #1
 801ee00:	fb02 4808 	mla	r8, r2, r8, r4
 801ee04:	b2b4      	uxth	r4, r6
 801ee06:	43f6      	mvns	r6, r6
 801ee08:	041a      	lsls	r2, r3, #16
 801ee0a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801ee0e:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801ee12:	4313      	orrs	r3, r2
 801ee14:	fb0e 8303 	mla	r3, lr, r3, r8
 801ee18:	042a      	lsls	r2, r5, #16
 801ee1a:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801ee1e:	f425 65fc 	bic.w	r5, r5, #2016	; 0x7e0
 801ee22:	432a      	orrs	r2, r5
 801ee24:	ebce 0747 	rsb	r7, lr, r7, lsl #1
 801ee28:	fb07 3202 	mla	r2, r7, r2, r3
 801ee2c:	0d53      	lsrs	r3, r2, #21
 801ee2e:	0952      	lsrs	r2, r2, #5
 801ee30:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801ee34:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801ee38:	431a      	orrs	r2, r3
 801ee3a:	b293      	uxth	r3, r2
 801ee3c:	1202      	asrs	r2, r0, #8
 801ee3e:	b2f6      	uxtb	r6, r6
 801ee40:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 801ee44:	fb12 f206 	smulbb	r2, r2, r6
 801ee48:	10c7      	asrs	r7, r0, #3
 801ee4a:	00c0      	lsls	r0, r0, #3
 801ee4c:	b2c0      	uxtb	r0, r0
 801ee4e:	121d      	asrs	r5, r3, #8
 801ee50:	f007 07fc 	and.w	r7, r7, #252	; 0xfc
 801ee54:	fb10 f006 	smulbb	r0, r0, r6
 801ee58:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801ee5c:	fb17 f706 	smulbb	r7, r7, r6
 801ee60:	fb05 2504 	mla	r5, r5, r4, r2
 801ee64:	10da      	asrs	r2, r3, #3
 801ee66:	00db      	lsls	r3, r3, #3
 801ee68:	b2db      	uxtb	r3, r3
 801ee6a:	fb03 0004 	mla	r0, r3, r4, r0
 801ee6e:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801ee72:	fb02 7204 	mla	r2, r2, r4, r7
 801ee76:	b2ad      	uxth	r5, r5
 801ee78:	b280      	uxth	r0, r0
 801ee7a:	1c6b      	adds	r3, r5, #1
 801ee7c:	b292      	uxth	r2, r2
 801ee7e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801ee82:	1c43      	adds	r3, r0, #1
 801ee84:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801ee88:	1c50      	adds	r0, r2, #1
 801ee8a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801ee8e:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801ee92:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801ee96:	0952      	lsrs	r2, r2, #5
 801ee98:	432b      	orrs	r3, r5
 801ee9a:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801ee9e:	4313      	orrs	r3, r2
 801eea0:	800b      	strh	r3, [r1, #0]
 801eea2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eea6:	4680      	mov	r8, r0
 801eea8:	e763      	b.n	801ed72 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x3e>
 801eeaa:	4684      	mov	ip, r0
 801eeac:	4680      	mov	r8, r0
 801eeae:	e76c      	b.n	801ed8a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 801eeb0:	4684      	mov	ip, r0
 801eeb2:	e76a      	b.n	801ed8a <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x56>
 801eeb4:	4605      	mov	r5, r0
 801eeb6:	e779      	b.n	801edac <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x78>
 801eeb8:	4603      	mov	r3, r0
 801eeba:	4605      	mov	r5, r0
 801eebc:	e782      	b.n	801edc4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>
 801eebe:	4603      	mov	r3, r0
 801eec0:	e780      	b.n	801edc4 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh+0x90>

0801eec2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eec2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eec6:	b093      	sub	sp, #76	; 0x4c
 801eec8:	461d      	mov	r5, r3
 801eeca:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 801eece:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801eed0:	910a      	str	r1, [sp, #40]	; 0x28
 801eed2:	9210      	str	r2, [sp, #64]	; 0x40
 801eed4:	6859      	ldr	r1, [r3, #4]
 801eed6:	f89d 2094 	ldrb.w	r2, [sp, #148]	; 0x94
 801eeda:	681b      	ldr	r3, [r3, #0]
 801eedc:	920b      	str	r2, [sp, #44]	; 0x2c
 801eede:	e9dd 2722 	ldrd	r2, r7, [sp, #136]	; 0x88
 801eee2:	fb01 2707 	mla	r7, r1, r7, r2
 801eee6:	eb03 0347 	add.w	r3, r3, r7, lsl #1
 801eeea:	9307      	str	r3, [sp, #28]
 801eeec:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801eeee:	9011      	str	r0, [sp, #68]	; 0x44
 801eef0:	681b      	ldr	r3, [r3, #0]
 801eef2:	9309      	str	r3, [sp, #36]	; 0x24
 801eef4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801eef6:	43db      	mvns	r3, r3
 801eef8:	b2db      	uxtb	r3, r3
 801eefa:	9308      	str	r3, [sp, #32]
 801eefc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801eefe:	2b00      	cmp	r3, #0
 801ef00:	dc03      	bgt.n	801ef0a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ef02:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ef04:	2b00      	cmp	r3, #0
 801ef06:	f340 8203 	ble.w	801f310 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801ef0a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ef0c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801ef10:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801ef14:	1e48      	subs	r0, r1, #1
 801ef16:	f102 3cff 	add.w	ip, r2, #4294967295
 801ef1a:	2d00      	cmp	r5, #0
 801ef1c:	f340 80da 	ble.w	801f0d4 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x212>
 801ef20:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801ef24:	ea4f 4326 	mov.w	r3, r6, asr #16
 801ef28:	d406      	bmi.n	801ef38 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ef2a:	4586      	cmp	lr, r0
 801ef2c:	da04      	bge.n	801ef38 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ef2e:	2b00      	cmp	r3, #0
 801ef30:	db02      	blt.n	801ef38 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801ef32:	4563      	cmp	r3, ip
 801ef34:	f2c0 80cf 	blt.w	801f0d6 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801ef38:	f11e 0e01 	adds.w	lr, lr, #1
 801ef3c:	f100 80c1 	bmi.w	801f0c2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801ef40:	4571      	cmp	r1, lr
 801ef42:	f2c0 80be 	blt.w	801f0c2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801ef46:	3301      	adds	r3, #1
 801ef48:	f100 80bb 	bmi.w	801f0c2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801ef4c:	429a      	cmp	r2, r3
 801ef4e:	f2c0 80b8 	blt.w	801f0c2 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801ef52:	46a9      	mov	r9, r5
 801ef54:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801ef58:	f1b9 0f00 	cmp.w	r9, #0
 801ef5c:	f340 80d8 	ble.w	801f110 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24e>
 801ef60:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801ef62:	1421      	asrs	r1, r4, #16
 801ef64:	ea4f 4026 	mov.w	r0, r6, asr #16
 801ef68:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801ef6c:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801ef70:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801ef74:	f100 8111 	bmi.w	801f19a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ef78:	f10e 3aff 	add.w	sl, lr, #4294967295
 801ef7c:	4551      	cmp	r1, sl
 801ef7e:	f280 810c 	bge.w	801f19a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ef82:	2800      	cmp	r0, #0
 801ef84:	f2c0 8109 	blt.w	801f19a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ef88:	f103 3aff 	add.w	sl, r3, #4294967295
 801ef8c:	4550      	cmp	r0, sl
 801ef8e:	f280 8104 	bge.w	801f19a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801ef92:	fa0f f38e 	sxth.w	r3, lr
 801ef96:	fb00 1103 	mla	r1, r0, r3, r1
 801ef9a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ef9c:	eb00 0a41 	add.w	sl, r0, r1, lsl #1
 801efa0:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 801efa4:	f8ba 1002 	ldrh.w	r1, [sl, #2]
 801efa8:	f1bc 0f00 	cmp.w	ip, #0
 801efac:	d007      	beq.n	801efbe <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xfc>
 801efae:	005b      	lsls	r3, r3, #1
 801efb0:	eb0a 0003 	add.w	r0, sl, r3
 801efb4:	f83a 3003 	ldrh.w	r3, [sl, r3]
 801efb8:	930c      	str	r3, [sp, #48]	; 0x30
 801efba:	8843      	ldrh	r3, [r0, #2]
 801efbc:	930d      	str	r3, [sp, #52]	; 0x34
 801efbe:	fb12 f30c 	smulbb	r3, r2, ip
 801efc2:	ea4f 400e 	mov.w	r0, lr, lsl #16
 801efc6:	ea4f 4a01 	mov.w	sl, r1, lsl #16
 801efca:	f42e 6efc 	bic.w	lr, lr, #2016	; 0x7e0
 801efce:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801efd2:	10db      	asrs	r3, r3, #3
 801efd4:	ea40 000e 	orr.w	r0, r0, lr
 801efd8:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 801efdc:	f1cc 0e10 	rsb	lr, ip, #16
 801efe0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801efe4:	ebae 0e02 	sub.w	lr, lr, r2
 801efe8:	ea4a 0101 	orr.w	r1, sl, r1
 801efec:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801eff0:	4351      	muls	r1, r2
 801eff2:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 801eff6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801eff8:	fb0e 1e00 	mla	lr, lr, r0, r1
 801effc:	0410      	lsls	r0, r2, #16
 801effe:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801f002:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f006:	4310      	orrs	r0, r2
 801f008:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f00a:	fb03 e000 	mla	r0, r3, r0, lr
 801f00e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f010:	0412      	lsls	r2, r2, #16
 801f012:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801f016:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801f01a:	ea42 020e 	orr.w	r2, r2, lr
 801f01e:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801f022:	fb03 0302 	mla	r3, r3, r2, r0
 801f026:	f8b8 0000 	ldrh.w	r0, [r8]
 801f02a:	9f08      	ldr	r7, [sp, #32]
 801f02c:	0d5a      	lsrs	r2, r3, #21
 801f02e:	1201      	asrs	r1, r0, #8
 801f030:	095b      	lsrs	r3, r3, #5
 801f032:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f036:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f03a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801f03e:	4313      	orrs	r3, r2
 801f040:	fb11 f107 	smulbb	r1, r1, r7
 801f044:	ea4f 0ee0 	mov.w	lr, r0, asr #3
 801f048:	00c0      	lsls	r0, r0, #3
 801f04a:	b29b      	uxth	r3, r3
 801f04c:	b2c0      	uxtb	r0, r0
 801f04e:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
 801f052:	ea4f 2c23 	mov.w	ip, r3, asr #8
 801f056:	f00e 0efc 	and.w	lr, lr, #252	; 0xfc
 801f05a:	fb10 f007 	smulbb	r0, r0, r7
 801f05e:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 801f062:	fb1e fe07 	smulbb	lr, lr, r7
 801f066:	fb0c 1c02 	mla	ip, ip, r2, r1
 801f06a:	10d9      	asrs	r1, r3, #3
 801f06c:	00db      	lsls	r3, r3, #3
 801f06e:	b2db      	uxtb	r3, r3
 801f070:	fb03 0302 	mla	r3, r3, r2, r0
 801f074:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f078:	fb01 e102 	mla	r1, r1, r2, lr
 801f07c:	fa1f fc8c 	uxth.w	ip, ip
 801f080:	b29a      	uxth	r2, r3
 801f082:	f10c 0301 	add.w	r3, ip, #1
 801f086:	b289      	uxth	r1, r1
 801f088:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801f08c:	1c53      	adds	r3, r2, #1
 801f08e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f092:	1c4a      	adds	r2, r1, #1
 801f094:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801f098:	f40c 4c78 	and.w	ip, ip, #63488	; 0xf800
 801f09c:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f0a0:	0949      	lsrs	r1, r1, #5
 801f0a2:	ea43 030c 	orr.w	r3, r3, ip
 801f0a6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 801f0aa:	430b      	orrs	r3, r1
 801f0ac:	f8a8 3000 	strh.w	r3, [r8]
 801f0b0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f0b2:	f108 0802 	add.w	r8, r8, #2
 801f0b6:	441c      	add	r4, r3
 801f0b8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f0ba:	f109 39ff 	add.w	r9, r9, #4294967295
 801f0be:	441e      	add	r6, r3
 801f0c0:	e74a      	b.n	801ef58 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f0c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f0c4:	3d01      	subs	r5, #1
 801f0c6:	441c      	add	r4, r3
 801f0c8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f0ca:	441e      	add	r6, r3
 801f0cc:	9b07      	ldr	r3, [sp, #28]
 801f0ce:	3302      	adds	r3, #2
 801f0d0:	9307      	str	r3, [sp, #28]
 801f0d2:	e722      	b.n	801ef1a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801f0d4:	d022      	beq.n	801f11c <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801f0d6:	981f      	ldr	r0, [sp, #124]	; 0x7c
 801f0d8:	1e6b      	subs	r3, r5, #1
 801f0da:	fb00 4003 	mla	r0, r0, r3, r4
 801f0de:	1400      	asrs	r0, r0, #16
 801f0e0:	f53f af37 	bmi.w	801ef52 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f0e4:	3901      	subs	r1, #1
 801f0e6:	4288      	cmp	r0, r1
 801f0e8:	f6bf af33 	bge.w	801ef52 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f0ec:	9920      	ldr	r1, [sp, #128]	; 0x80
 801f0ee:	fb01 6303 	mla	r3, r1, r3, r6
 801f0f2:	141b      	asrs	r3, r3, #16
 801f0f4:	f53f af2d 	bmi.w	801ef52 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f0f8:	3a01      	subs	r2, #1
 801f0fa:	4293      	cmp	r3, r2
 801f0fc:	f6bf af29 	bge.w	801ef52 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801f100:	46a8      	mov	r8, r5
 801f102:	f8dd 901c 	ldr.w	r9, [sp, #28]
 801f106:	f8bd a02c 	ldrh.w	sl, [sp, #44]	; 0x2c
 801f10a:	f1b8 0f00 	cmp.w	r8, #0
 801f10e:	dc5e      	bgt.n	801f1ce <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30c>
 801f110:	9b07      	ldr	r3, [sp, #28]
 801f112:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801f116:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801f11a:	9307      	str	r3, [sp, #28]
 801f11c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f11e:	2b00      	cmp	r3, #0
 801f120:	f340 80f6 	ble.w	801f310 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44e>
 801f124:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f128:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f12c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f130:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f134:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f138:	eef0 6a62 	vmov.f32	s13, s5
 801f13c:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f140:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f144:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f148:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f14c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f150:	ee16 4a90 	vmov	r4, s13
 801f154:	eef0 6a43 	vmov.f32	s13, s6
 801f158:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f15c:	ee12 2a90 	vmov	r2, s5
 801f160:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f164:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f166:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f16a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f16e:	ee13 2a10 	vmov	r2, s6
 801f172:	931f      	str	r3, [sp, #124]	; 0x7c
 801f174:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f176:	ee16 6a90 	vmov	r6, s13
 801f17a:	fb92 f3f3 	sdiv	r3, r2, r3
 801f17e:	9320      	str	r3, [sp, #128]	; 0x80
 801f180:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801f182:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801f184:	3b01      	subs	r3, #1
 801f186:	930a      	str	r3, [sp, #40]	; 0x28
 801f188:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f18a:	bf0c      	ite	eq
 801f18c:	4615      	moveq	r5, r2
 801f18e:	461d      	movne	r5, r3
 801f190:	eeb0 3a67 	vmov.f32	s6, s15
 801f194:	eef0 2a47 	vmov.f32	s5, s14
 801f198:	e6b0      	b.n	801eefc <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801f19a:	f111 0a01 	adds.w	sl, r1, #1
 801f19e:	d487      	bmi.n	801f0b0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801f1a0:	45d6      	cmp	lr, sl
 801f1a2:	db85      	blt.n	801f0b0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801f1a4:	f110 0a01 	adds.w	sl, r0, #1
 801f1a8:	d482      	bmi.n	801f0b0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801f1aa:	4553      	cmp	r3, sl
 801f1ac:	db80      	blt.n	801f0b0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801f1ae:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 801f1b0:	b21b      	sxth	r3, r3
 801f1b2:	e9cd 0202 	strd	r0, r2, [sp, #8]
 801f1b6:	9101      	str	r1, [sp, #4]
 801f1b8:	9300      	str	r3, [sp, #0]
 801f1ba:	e9cd c704 	strd	ip, r7, [sp, #16]
 801f1be:	fa0f f38e 	sxth.w	r3, lr
 801f1c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f1c4:	4641      	mov	r1, r8
 801f1c6:	9811      	ldr	r0, [sp, #68]	; 0x44
 801f1c8:	f7ff fdb4 	bl	801ed34 <_ZNK8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtssiihhh>
 801f1cc:	e770      	b.n	801f0b0 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801f1ce:	9b24      	ldr	r3, [sp, #144]	; 0x90
 801f1d0:	1430      	asrs	r0, r6, #16
 801f1d2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f1d6:	1423      	asrs	r3, r4, #16
 801f1d8:	fb01 3000 	mla	r0, r1, r0, r3
 801f1dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f1de:	9f09      	ldr	r7, [sp, #36]	; 0x24
 801f1e0:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 801f1e4:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801f1e8:	f837 c010 	ldrh.w	ip, [r7, r0, lsl #1]
 801f1ec:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801f1f0:	8858      	ldrh	r0, [r3, #2]
 801f1f2:	f1be 0f00 	cmp.w	lr, #0
 801f1f6:	d00b      	beq.n	801f210 <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34e>
 801f1f8:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 801f1fc:	3901      	subs	r1, #1
 801f1fe:	0049      	lsls	r1, r1, #1
 801f200:	3102      	adds	r1, #2
 801f202:	eb03 0b01 	add.w	fp, r3, r1
 801f206:	5a5b      	ldrh	r3, [r3, r1]
 801f208:	930e      	str	r3, [sp, #56]	; 0x38
 801f20a:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801f20e:	930f      	str	r3, [sp, #60]	; 0x3c
 801f210:	fb12 f30e 	smulbb	r3, r2, lr
 801f214:	ea4f 410c 	mov.w	r1, ip, lsl #16
 801f218:	ea4f 4b00 	mov.w	fp, r0, lsl #16
 801f21c:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801f220:	f001 61fc 	and.w	r1, r1, #132120576	; 0x7e00000
 801f224:	10db      	asrs	r3, r3, #3
 801f226:	ea41 010c 	orr.w	r1, r1, ip
 801f22a:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f22e:	f1ce 0c10 	rsb	ip, lr, #16
 801f232:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f236:	ebac 0c02 	sub.w	ip, ip, r2
 801f23a:	ea4b 0000 	orr.w	r0, fp, r0
 801f23e:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801f242:	4350      	muls	r0, r2
 801f244:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 801f248:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801f24a:	fb0c 0c01 	mla	ip, ip, r1, r0
 801f24e:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801f252:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f256:	f422 61fc 	bic.w	r1, r2, #2016	; 0x7e0
 801f25a:	ea4b 0101 	orr.w	r1, fp, r1
 801f25e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801f260:	fb03 c101 	mla	r1, r3, r1, ip
 801f264:	980e      	ldr	r0, [sp, #56]	; 0x38
 801f266:	0412      	lsls	r2, r2, #16
 801f268:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f26c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801f270:	4302      	orrs	r2, r0
 801f272:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 801f276:	fb03 1202 	mla	r2, r3, r2, r1
 801f27a:	ea4f 5b52 	mov.w	fp, r2, lsr #21
 801f27e:	0952      	lsrs	r2, r2, #5
 801f280:	f422 63fc 	bic.w	r3, r2, #2016	; 0x7e0
 801f284:	f8b9 2000 	ldrh.w	r2, [r9]
 801f288:	9f08      	ldr	r7, [sp, #32]
 801f28a:	1211      	asrs	r1, r2, #8
 801f28c:	f40b 6bfc 	and.w	fp, fp, #2016	; 0x7e0
 801f290:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801f294:	fb11 f107 	smulbb	r1, r1, r7
 801f298:	ea4f 0ce2 	mov.w	ip, r2, asr #3
 801f29c:	ea4b 0303 	orr.w	r3, fp, r3
 801f2a0:	00d2      	lsls	r2, r2, #3
 801f2a2:	b29b      	uxth	r3, r3
 801f2a4:	f00c 0cfc 	and.w	ip, ip, #252	; 0xfc
 801f2a8:	b2d2      	uxtb	r2, r2
 801f2aa:	1218      	asrs	r0, r3, #8
 801f2ac:	fb1c fc07 	smulbb	ip, ip, r7
 801f2b0:	fb12 f207 	smulbb	r2, r2, r7
 801f2b4:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 801f2b8:	fb00 100a 	mla	r0, r0, sl, r1
 801f2bc:	10d9      	asrs	r1, r3, #3
 801f2be:	00db      	lsls	r3, r3, #3
 801f2c0:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 801f2c4:	b2db      	uxtb	r3, r3
 801f2c6:	fb01 c10a 	mla	r1, r1, sl, ip
 801f2ca:	fb03 230a 	mla	r3, r3, sl, r2
 801f2ce:	b280      	uxth	r0, r0
 801f2d0:	b29b      	uxth	r3, r3
 801f2d2:	b289      	uxth	r1, r1
 801f2d4:	1c42      	adds	r2, r0, #1
 801f2d6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801f2da:	f101 0c01 	add.w	ip, r1, #1
 801f2de:	1c5a      	adds	r2, r3, #1
 801f2e0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f2e4:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801f2e8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 801f2ea:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 801f2ee:	f3c2 22c4 	ubfx	r2, r2, #11, #5
 801f2f2:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 801f2f6:	4310      	orrs	r0, r2
 801f2f8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 801f2fc:	441c      	add	r4, r3
 801f2fe:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f300:	ea40 000c 	orr.w	r0, r0, ip
 801f304:	f829 0b02 	strh.w	r0, [r9], #2
 801f308:	441e      	add	r6, r3
 801f30a:	f108 38ff 	add.w	r8, r8, #4294967295
 801f30e:	e6fc      	b.n	801f10a <_ZN8touchgfx8LCD16bpp52TextureMapper_RGB565_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801f310:	b013      	add	sp, #76	; 0x4c
 801f312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f316 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>:
 801f316:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801f31a:	e9dd 4e08 	ldrd	r4, lr, [sp, #32]
 801f31e:	fb0e 4703 	mla	r7, lr, r3, r4
 801f322:	f1be 0f00 	cmp.w	lr, #0
 801f326:	f9bd 901c 	ldrsh.w	r9, [sp, #28]
 801f32a:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 801f32e:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 801f332:	eb02 0847 	add.w	r8, r2, r7, lsl #1
 801f336:	8808      	ldrh	r0, [r1, #0]
 801f338:	db60      	blt.n	801f3fc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 801f33a:	45f1      	cmp	r9, lr
 801f33c:	dd5e      	ble.n	801f3fc <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe6>
 801f33e:	2c00      	cmp	r4, #0
 801f340:	db5a      	blt.n	801f3f8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 801f342:	42a3      	cmp	r3, r4
 801f344:	dd58      	ble.n	801f3f8 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xe2>
 801f346:	f832 c017 	ldrh.w	ip, [r2, r7, lsl #1]
 801f34a:	1c62      	adds	r2, r4, #1
 801f34c:	d459      	bmi.n	801f402 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 801f34e:	4293      	cmp	r3, r2
 801f350:	dd57      	ble.n	801f402 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 801f352:	2d00      	cmp	r5, #0
 801f354:	d055      	beq.n	801f402 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xec>
 801f356:	f8b8 7002 	ldrh.w	r7, [r8, #2]
 801f35a:	f11e 0e01 	adds.w	lr, lr, #1
 801f35e:	d454      	bmi.n	801f40a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 801f360:	45f1      	cmp	r9, lr
 801f362:	dd52      	ble.n	801f40a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 801f364:	2e00      	cmp	r6, #0
 801f366:	d050      	beq.n	801f40a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf4>
 801f368:	2c00      	cmp	r4, #0
 801f36a:	db4c      	blt.n	801f406 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 801f36c:	42a3      	cmp	r3, r4
 801f36e:	dd4a      	ble.n	801f406 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0xf0>
 801f370:	f838 2013 	ldrh.w	r2, [r8, r3, lsl #1]
 801f374:	3401      	adds	r4, #1
 801f376:	d405      	bmi.n	801f384 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801f378:	42a3      	cmp	r3, r4
 801f37a:	dd03      	ble.n	801f384 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801f37c:	b115      	cbz	r5, 801f384 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>
 801f37e:	3301      	adds	r3, #1
 801f380:	f838 0013 	ldrh.w	r0, [r8, r3, lsl #1]
 801f384:	fb15 f406 	smulbb	r4, r5, r6
 801f388:	ea4f 430c 	mov.w	r3, ip, lsl #16
 801f38c:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f390:	ea4f 4e07 	mov.w	lr, r7, lsl #16
 801f394:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801f398:	f3c4 04c7 	ubfx	r4, r4, #3, #8
 801f39c:	ea43 0c0c 	orr.w	ip, r3, ip
 801f3a0:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 801f3a4:	f1c6 0310 	rsb	r3, r6, #16
 801f3a8:	f427 67fc 	bic.w	r7, r7, #2016	; 0x7e0
 801f3ac:	1b5b      	subs	r3, r3, r5
 801f3ae:	ea4e 0707 	orr.w	r7, lr, r7
 801f3b2:	ebc4 0545 	rsb	r5, r4, r5, lsl #1
 801f3b6:	437d      	muls	r5, r7
 801f3b8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 801f3bc:	fb03 5c0c 	mla	ip, r3, ip, r5
 801f3c0:	0403      	lsls	r3, r0, #16
 801f3c2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f3c6:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f3ca:	4318      	orrs	r0, r3
 801f3cc:	fb04 c000 	mla	r0, r4, r0, ip
 801f3d0:	0413      	lsls	r3, r2, #16
 801f3d2:	f003 63fc 	and.w	r3, r3, #132120576	; 0x7e00000
 801f3d6:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f3da:	4313      	orrs	r3, r2
 801f3dc:	ebc4 0646 	rsb	r6, r4, r6, lsl #1
 801f3e0:	fb06 0003 	mla	r0, r6, r3, r0
 801f3e4:	0d43      	lsrs	r3, r0, #21
 801f3e6:	0940      	lsrs	r0, r0, #5
 801f3e8:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f3ec:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f3f0:	4318      	orrs	r0, r3
 801f3f2:	8008      	strh	r0, [r1, #0]
 801f3f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801f3f8:	4684      	mov	ip, r0
 801f3fa:	e7a6      	b.n	801f34a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x34>
 801f3fc:	4607      	mov	r7, r0
 801f3fe:	4684      	mov	ip, r0
 801f400:	e7ab      	b.n	801f35a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 801f402:	4607      	mov	r7, r0
 801f404:	e7a9      	b.n	801f35a <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x44>
 801f406:	4602      	mov	r2, r0
 801f408:	e7b4      	b.n	801f374 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x5e>
 801f40a:	4602      	mov	r2, r0
 801f40c:	e7ba      	b.n	801f384 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh+0x6e>

0801f40e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f40e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f412:	b08f      	sub	sp, #60	; 0x3c
 801f414:	461d      	mov	r5, r3
 801f416:	e9dd 4619 	ldrd	r4, r6, [sp, #100]	; 0x64
 801f41a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801f41c:	9107      	str	r1, [sp, #28]
 801f41e:	6859      	ldr	r1, [r3, #4]
 801f420:	920c      	str	r2, [sp, #48]	; 0x30
 801f422:	e9dd 271e 	ldrd	r2, r7, [sp, #120]	; 0x78
 801f426:	fb01 2707 	mla	r7, r1, r7, r2
 801f42a:	681b      	ldr	r3, [r3, #0]
 801f42c:	900d      	str	r0, [sp, #52]	; 0x34
 801f42e:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 801f432:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f434:	f8d3 8000 	ldr.w	r8, [r3]
 801f438:	9b07      	ldr	r3, [sp, #28]
 801f43a:	2b00      	cmp	r3, #0
 801f43c:	dc03      	bgt.n	801f446 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801f43e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801f440:	2b00      	cmp	r3, #0
 801f442:	f340 8181 	ble.w	801f748 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801f446:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f448:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f44c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f450:	1e48      	subs	r0, r1, #1
 801f452:	f102 3cff 	add.w	ip, r2, #4294967295
 801f456:	2d00      	cmp	r5, #0
 801f458:	f340 809b 	ble.w	801f592 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x184>
 801f45c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801f460:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f464:	d406      	bmi.n	801f474 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f466:	4586      	cmp	lr, r0
 801f468:	da04      	bge.n	801f474 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f46a:	2b00      	cmp	r3, #0
 801f46c:	db02      	blt.n	801f474 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801f46e:	4563      	cmp	r3, ip
 801f470:	f2c0 8090 	blt.w	801f594 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x186>
 801f474:	f11e 0e01 	adds.w	lr, lr, #1
 801f478:	f100 8084 	bmi.w	801f584 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801f47c:	4571      	cmp	r1, lr
 801f47e:	f2c0 8081 	blt.w	801f584 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801f482:	3301      	adds	r3, #1
 801f484:	d47e      	bmi.n	801f584 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801f486:	429a      	cmp	r2, r3
 801f488:	db7c      	blt.n	801f584 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801f48a:	46aa      	mov	sl, r5
 801f48c:	46b9      	mov	r9, r7
 801f48e:	f1ba 0f00 	cmp.w	sl, #0
 801f492:	f340 8099 	ble.w	801f5c8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801f496:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f498:	1421      	asrs	r1, r4, #16
 801f49a:	ea4f 4026 	mov.w	r0, r6, asr #16
 801f49e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801f4a2:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801f4a6:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801f4aa:	f100 80d0 	bmi.w	801f64e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801f4ae:	f10e 3bff 	add.w	fp, lr, #4294967295
 801f4b2:	4559      	cmp	r1, fp
 801f4b4:	f280 80cb 	bge.w	801f64e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801f4b8:	2800      	cmp	r0, #0
 801f4ba:	f2c0 80c8 	blt.w	801f64e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801f4be:	f103 3bff 	add.w	fp, r3, #4294967295
 801f4c2:	4558      	cmp	r0, fp
 801f4c4:	f280 80c3 	bge.w	801f64e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801f4c8:	fa0f fe8e 	sxth.w	lr, lr
 801f4cc:	fb00 110e 	mla	r1, r0, lr, r1
 801f4d0:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 801f4d4:	f838 b011 	ldrh.w	fp, [r8, r1, lsl #1]
 801f4d8:	8841      	ldrh	r1, [r0, #2]
 801f4da:	f1bc 0f00 	cmp.w	ip, #0
 801f4de:	d00b      	beq.n	801f4f8 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xea>
 801f4e0:	f10e 4300 	add.w	r3, lr, #2147483648	; 0x80000000
 801f4e4:	3b01      	subs	r3, #1
 801f4e6:	005b      	lsls	r3, r3, #1
 801f4e8:	3302      	adds	r3, #2
 801f4ea:	eb00 0e03 	add.w	lr, r0, r3
 801f4ee:	5ac3      	ldrh	r3, [r0, r3]
 801f4f0:	9308      	str	r3, [sp, #32]
 801f4f2:	f8be 3002 	ldrh.w	r3, [lr, #2]
 801f4f6:	9309      	str	r3, [sp, #36]	; 0x24
 801f4f8:	fb12 f30c 	smulbb	r3, r2, ip
 801f4fc:	ea4f 400b 	mov.w	r0, fp, lsl #16
 801f500:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801f504:	f42b 6bfc 	bic.w	fp, fp, #2016	; 0x7e0
 801f508:	ea40 000b 	orr.w	r0, r0, fp
 801f50c:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801f510:	10db      	asrs	r3, r3, #3
 801f512:	f1cc 0e10 	rsb	lr, ip, #16
 801f516:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f51a:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f51e:	ebae 0e02 	sub.w	lr, lr, r2
 801f522:	ea4b 0101 	orr.w	r1, fp, r1
 801f526:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801f52a:	4351      	muls	r1, r2
 801f52c:	eb03 0e4e 	add.w	lr, r3, lr, lsl #1
 801f530:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f532:	fb0e 1e00 	mla	lr, lr, r0, r1
 801f536:	0410      	lsls	r0, r2, #16
 801f538:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801f53c:	f422 62fc 	bic.w	r2, r2, #2016	; 0x7e0
 801f540:	4310      	orrs	r0, r2
 801f542:	9a08      	ldr	r2, [sp, #32]
 801f544:	fb03 e000 	mla	r0, r3, r0, lr
 801f548:	9908      	ldr	r1, [sp, #32]
 801f54a:	0412      	lsls	r2, r2, #16
 801f54c:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801f550:	f421 6efc 	bic.w	lr, r1, #2016	; 0x7e0
 801f554:	ea42 020e 	orr.w	r2, r2, lr
 801f558:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
 801f55c:	fb03 0302 	mla	r3, r3, r2, r0
 801f560:	0d5a      	lsrs	r2, r3, #21
 801f562:	095b      	lsrs	r3, r3, #5
 801f564:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f568:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 801f56c:	4313      	orrs	r3, r2
 801f56e:	f8a9 3000 	strh.w	r3, [r9]
 801f572:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f574:	f109 0902 	add.w	r9, r9, #2
 801f578:	441c      	add	r4, r3
 801f57a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f57c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801f580:	441e      	add	r6, r3
 801f582:	e784      	b.n	801f48e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801f584:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f586:	3d01      	subs	r5, #1
 801f588:	441c      	add	r4, r3
 801f58a:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f58c:	3702      	adds	r7, #2
 801f58e:	441e      	add	r6, r3
 801f590:	e761      	b.n	801f456 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801f592:	d01d      	beq.n	801f5d0 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c2>
 801f594:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801f596:	1e6b      	subs	r3, r5, #1
 801f598:	fb00 4003 	mla	r0, r0, r3, r4
 801f59c:	1400      	asrs	r0, r0, #16
 801f59e:	f53f af74 	bmi.w	801f48a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f5a2:	3901      	subs	r1, #1
 801f5a4:	4288      	cmp	r0, r1
 801f5a6:	f6bf af70 	bge.w	801f48a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f5aa:	991c      	ldr	r1, [sp, #112]	; 0x70
 801f5ac:	fb01 6303 	mla	r3, r1, r3, r6
 801f5b0:	141b      	asrs	r3, r3, #16
 801f5b2:	f53f af6a 	bmi.w	801f48a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f5b6:	3a01      	subs	r2, #1
 801f5b8:	4293      	cmp	r3, r2
 801f5ba:	f6bf af66 	bge.w	801f48a <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f5be:	46a9      	mov	r9, r5
 801f5c0:	46ba      	mov	sl, r7
 801f5c2:	f1b9 0f00 	cmp.w	r9, #0
 801f5c6:	dc5a      	bgt.n	801f67e <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x270>
 801f5c8:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801f5cc:	eb07 0745 	add.w	r7, r7, r5, lsl #1
 801f5d0:	9b07      	ldr	r3, [sp, #28]
 801f5d2:	2b00      	cmp	r3, #0
 801f5d4:	f340 80b8 	ble.w	801f748 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801f5d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f5dc:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f5e0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f5e4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f5e8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f5ec:	eef0 6a62 	vmov.f32	s13, s5
 801f5f0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f5f4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f5f8:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f5fc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f600:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f604:	ee16 4a90 	vmov	r4, s13
 801f608:	eef0 6a43 	vmov.f32	s13, s6
 801f60c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f610:	ee12 2a90 	vmov	r2, s5
 801f614:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f618:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f61a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f61e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f622:	ee13 2a10 	vmov	r2, s6
 801f626:	931b      	str	r3, [sp, #108]	; 0x6c
 801f628:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f62a:	ee16 6a90 	vmov	r6, s13
 801f62e:	fb92 f3f3 	sdiv	r3, r2, r3
 801f632:	931c      	str	r3, [sp, #112]	; 0x70
 801f634:	9b07      	ldr	r3, [sp, #28]
 801f636:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801f638:	3b01      	subs	r3, #1
 801f63a:	9307      	str	r3, [sp, #28]
 801f63c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801f63e:	bf0c      	ite	eq
 801f640:	4615      	moveq	r5, r2
 801f642:	461d      	movne	r5, r3
 801f644:	eeb0 3a67 	vmov.f32	s6, s15
 801f648:	eef0 2a47 	vmov.f32	s5, s14
 801f64c:	e6f4      	b.n	801f438 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a>
 801f64e:	f111 0b01 	adds.w	fp, r1, #1
 801f652:	d48e      	bmi.n	801f572 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f654:	45de      	cmp	lr, fp
 801f656:	db8c      	blt.n	801f572 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f658:	f110 0b01 	adds.w	fp, r0, #1
 801f65c:	d489      	bmi.n	801f572 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f65e:	455b      	cmp	r3, fp
 801f660:	db87      	blt.n	801f572 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f662:	b21b      	sxth	r3, r3
 801f664:	e9cd 1001 	strd	r1, r0, [sp, #4]
 801f668:	e9cd 2c03 	strd	r2, ip, [sp, #12]
 801f66c:	9300      	str	r3, [sp, #0]
 801f66e:	4642      	mov	r2, r8
 801f670:	fa0f f38e 	sxth.w	r3, lr
 801f674:	4649      	mov	r1, r9
 801f676:	980d      	ldr	r0, [sp, #52]	; 0x34
 801f678:	f7ff fe4d 	bl	801f316 <_ZNK8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtssiihh>
 801f67c:	e779      	b.n	801f572 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801f67e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801f680:	1420      	asrs	r0, r4, #16
 801f682:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 801f686:	1431      	asrs	r1, r6, #16
 801f688:	fb03 0101 	mla	r1, r3, r1, r0
 801f68c:	f3c6 3e03 	ubfx	lr, r6, #12, #4
 801f690:	eb08 0041 	add.w	r0, r8, r1, lsl #1
 801f694:	f838 c011 	ldrh.w	ip, [r8, r1, lsl #1]
 801f698:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801f69c:	8841      	ldrh	r1, [r0, #2]
 801f69e:	f1be 0f00 	cmp.w	lr, #0
 801f6a2:	d00b      	beq.n	801f6bc <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ae>
 801f6a4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801f6a8:	3b01      	subs	r3, #1
 801f6aa:	005b      	lsls	r3, r3, #1
 801f6ac:	3302      	adds	r3, #2
 801f6ae:	eb00 0b03 	add.w	fp, r0, r3
 801f6b2:	5ac3      	ldrh	r3, [r0, r3]
 801f6b4:	930a      	str	r3, [sp, #40]	; 0x28
 801f6b6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 801f6ba:	930b      	str	r3, [sp, #44]	; 0x2c
 801f6bc:	fb12 f30e 	smulbb	r3, r2, lr
 801f6c0:	ea4f 400c 	mov.w	r0, ip, lsl #16
 801f6c4:	ea4f 4b01 	mov.w	fp, r1, lsl #16
 801f6c8:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 801f6cc:	f000 60fc 	and.w	r0, r0, #132120576	; 0x7e00000
 801f6d0:	10db      	asrs	r3, r3, #3
 801f6d2:	ea40 000c 	orr.w	r0, r0, ip
 801f6d6:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f6da:	f1ce 0c10 	rsb	ip, lr, #16
 801f6de:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 801f6e2:	ebac 0c02 	sub.w	ip, ip, r2
 801f6e6:	ea4b 0101 	orr.w	r1, fp, r1
 801f6ea:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 801f6ee:	4351      	muls	r1, r2
 801f6f0:	eb03 0c4c 	add.w	ip, r3, ip, lsl #1
 801f6f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801f6f6:	fb0c 1c00 	mla	ip, ip, r0, r1
 801f6fa:	ea4f 4b02 	mov.w	fp, r2, lsl #16
 801f6fe:	f00b 6bfc 	and.w	fp, fp, #132120576	; 0x7e00000
 801f702:	f422 60fc 	bic.w	r0, r2, #2016	; 0x7e0
 801f706:	ea4b 0000 	orr.w	r0, fp, r0
 801f70a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801f70c:	fb03 c000 	mla	r0, r3, r0, ip
 801f710:	990a      	ldr	r1, [sp, #40]	; 0x28
 801f712:	0412      	lsls	r2, r2, #16
 801f714:	f002 62fc 	and.w	r2, r2, #132120576	; 0x7e00000
 801f718:	f421 6bfc 	bic.w	fp, r1, #2016	; 0x7e0
 801f71c:	ebc3 034e 	rsb	r3, r3, lr, lsl #1
 801f720:	ea42 0b0b 	orr.w	fp, r2, fp
 801f724:	fb03 000b 	mla	r0, r3, fp, r0
 801f728:	0d43      	lsrs	r3, r0, #21
 801f72a:	0940      	lsrs	r0, r0, #5
 801f72c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 801f730:	f420 60fc 	bic.w	r0, r0, #2016	; 0x7e0
 801f734:	4318      	orrs	r0, r3
 801f736:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 801f738:	f82a 0b02 	strh.w	r0, [sl], #2
 801f73c:	441c      	add	r4, r3
 801f73e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 801f740:	f109 39ff 	add.w	r9, r9, #4294967295
 801f744:	441e      	add	r6, r3
 801f746:	e73c      	b.n	801f5c2 <_ZN8touchgfx8LCD16bpp54TextureMapper_RGB565_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801f748:	b00f      	add	sp, #60	; 0x3c
 801f74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f74e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>:
 801f74e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f752:	b085      	sub	sp, #20
 801f754:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 801f758:	9102      	str	r1, [sp, #8]
 801f75a:	fb04 7103 	mla	r1, r4, r3, r7
 801f75e:	2c00      	cmp	r4, #0
 801f760:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 801f764:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 801f768:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 801f76c:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 801f770:	f2c0 811b 	blt.w	801f9aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 801f774:	45a6      	cmp	lr, r4
 801f776:	f340 8118 	ble.w	801f9aa <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x25c>
 801f77a:	2f00      	cmp	r7, #0
 801f77c:	f2c0 8113 	blt.w	801f9a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 801f780:	42bb      	cmp	r3, r7
 801f782:	f340 8110 	ble.w	801f9a6 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x258>
 801f786:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 801f78a:	1c7a      	adds	r2, r7, #1
 801f78c:	f100 8110 	bmi.w	801f9b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 801f790:	4293      	cmp	r3, r2
 801f792:	f340 810d 	ble.w	801f9b0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x262>
 801f796:	2e00      	cmp	r6, #0
 801f798:	f000 810c 	beq.w	801f9b4 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x266>
 801f79c:	f8dc 1004 	ldr.w	r1, [ip, #4]
 801f7a0:	3401      	adds	r4, #1
 801f7a2:	f100 810b 	bmi.w	801f9bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 801f7a6:	45a6      	cmp	lr, r4
 801f7a8:	f340 8108 	ble.w	801f9bc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26e>
 801f7ac:	2800      	cmp	r0, #0
 801f7ae:	f000 8108 	beq.w	801f9c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x274>
 801f7b2:	2f00      	cmp	r7, #0
 801f7b4:	f2c0 8100 	blt.w	801f9b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 801f7b8:	42bb      	cmp	r3, r7
 801f7ba:	f340 80fd 	ble.w	801f9b8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x26a>
 801f7be:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 801f7c2:	3701      	adds	r7, #1
 801f7c4:	f100 8100 	bmi.w	801f9c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 801f7c8:	42bb      	cmp	r3, r7
 801f7ca:	f340 80fd 	ble.w	801f9c8 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27a>
 801f7ce:	2e00      	cmp	r6, #0
 801f7d0:	f000 80fc 	beq.w	801f9cc <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x27e>
 801f7d4:	3301      	adds	r3, #1
 801f7d6:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801f7da:	b2b6      	uxth	r6, r6
 801f7dc:	b280      	uxth	r0, r0
 801f7de:	fb00 fe06 	mul.w	lr, r0, r6
 801f7e2:	0136      	lsls	r6, r6, #4
 801f7e4:	eba6 070e 	sub.w	r7, r6, lr
 801f7e8:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 801f7ec:	b2bf      	uxth	r7, r7
 801f7ee:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 801f7f2:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 801f7f6:	fb0a f607 	mul.w	r6, sl, r7
 801f7fa:	b280      	uxth	r0, r0
 801f7fc:	1a1b      	subs	r3, r3, r0
 801f7fe:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 801f802:	b29b      	uxth	r3, r3
 801f804:	fb0b 6603 	mla	r6, fp, r3, r6
 801f808:	ea4f 6914 	mov.w	r9, r4, lsr #24
 801f80c:	fb00 6609 	mla	r6, r0, r9, r6
 801f810:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801f814:	fb0e 6608 	mla	r6, lr, r8, r6
 801f818:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801f81c:	9600      	str	r6, [sp, #0]
 801f81e:	2e00      	cmp	r6, #0
 801f820:	f000 80be 	beq.w	801f9a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x252>
 801f824:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801f828:	fb0b fc0c 	mul.w	ip, fp, ip
 801f82c:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 801f830:	fb0b f505 	mul.w	r5, fp, r5
 801f834:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801f838:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 801f83c:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f840:	44dc      	add	ip, fp
 801f842:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f846:	9501      	str	r5, [sp, #4]
 801f848:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 801f84c:	9503      	str	r5, [sp, #12]
 801f84e:	9d01      	ldr	r5, [sp, #4]
 801f850:	9e02      	ldr	r6, [sp, #8]
 801f852:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 801f856:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 801f85a:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 801f85e:	fb0a fc0c 	mul.w	ip, sl, ip
 801f862:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 801f866:	ea4f 251c 	mov.w	r5, ip, lsr #8
 801f86a:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f86e:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f872:	4465      	add	r5, ip
 801f874:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 801f878:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 801f87c:	fb09 fc0c 	mul.w	ip, r9, ip
 801f880:	fb09 f904 	mul.w	r9, r9, r4
 801f884:	f509 7480 	add.w	r4, r9, #256	; 0x100
 801f888:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801f88c:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 801f890:	fb08 f404 	mul.w	r4, r8, r4
 801f894:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801f898:	fb08 f802 	mul.w	r8, r8, r2
 801f89c:	0a2d      	lsrs	r5, r5, #8
 801f89e:	0a22      	lsrs	r2, r4, #8
 801f8a0:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 801f8a4:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801f8a8:	437d      	muls	r5, r7
 801f8aa:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 801f8ae:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801f8b2:	4414      	add	r4, r2
 801f8b4:	f508 7280 	add.w	r2, r8, #256	; 0x100
 801f8b8:	fb0a fa01 	mul.w	sl, sl, r1
 801f8bc:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801f8c0:	9a03      	ldr	r2, [sp, #12]
 801f8c2:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 801f8c6:	fb02 5503 	mla	r5, r2, r3, r5
 801f8ca:	0a24      	lsrs	r4, r4, #8
 801f8cc:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 801f8d0:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 801f8d4:	ea4f 211c 	mov.w	r1, ip, lsr #8
 801f8d8:	fb04 540e 	mla	r4, r4, lr, r5
 801f8dc:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801f8e0:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 801f8e4:	4461      	add	r1, ip
 801f8e6:	0a09      	lsrs	r1, r1, #8
 801f8e8:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 801f8ec:	fb01 4100 	mla	r1, r1, r0, r4
 801f8f0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f8f4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801f8f8:	fb07 f70a 	mul.w	r7, r7, sl
 801f8fc:	0a09      	lsrs	r1, r1, #8
 801f8fe:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 801f902:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 801f906:	fb03 7101 	mla	r1, r3, r1, r7
 801f90a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801f90e:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 801f912:	fb0e 1e08 	mla	lr, lr, r8, r1
 801f916:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801f91a:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 801f91e:	fb00 e101 	mla	r1, r0, r1, lr
 801f922:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
 801f926:	9a00      	ldr	r2, [sp, #0]
 801f928:	b287      	uxth	r7, r0
 801f92a:	437a      	muls	r2, r7
 801f92c:	1c53      	adds	r3, r2, #1
 801f92e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801f932:	ea6f 2313 	mvn.w	r3, r3, lsr #8
 801f936:	0a09      	lsrs	r1, r1, #8
 801f938:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 801f93c:	4321      	orrs	r1, r4
 801f93e:	0c0a      	lsrs	r2, r1, #16
 801f940:	8836      	ldrh	r6, [r6, #0]
 801f942:	fb12 f207 	smulbb	r2, r2, r7
 801f946:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801f94a:	b2c8      	uxtb	r0, r1
 801f94c:	1235      	asrs	r5, r6, #8
 801f94e:	fb14 f407 	smulbb	r4, r4, r7
 801f952:	fb10 f007 	smulbb	r0, r0, r7
 801f956:	b2db      	uxtb	r3, r3
 801f958:	f005 05f8 	and.w	r5, r5, #248	; 0xf8
 801f95c:	fb05 2503 	mla	r5, r5, r3, r2
 801f960:	10f2      	asrs	r2, r6, #3
 801f962:	00f6      	lsls	r6, r6, #3
 801f964:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801f968:	b2f6      	uxtb	r6, r6
 801f96a:	fb02 4203 	mla	r2, r2, r3, r4
 801f96e:	fb06 0303 	mla	r3, r6, r3, r0
 801f972:	b2ad      	uxth	r5, r5
 801f974:	b299      	uxth	r1, r3
 801f976:	b294      	uxth	r4, r2
 801f978:	1c6b      	adds	r3, r5, #1
 801f97a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f97e:	1c62      	adds	r2, r4, #1
 801f980:	1c4b      	adds	r3, r1, #1
 801f982:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801f986:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801f98a:	f405 4578 	and.w	r5, r5, #63488	; 0xf800
 801f98e:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801f992:	0952      	lsrs	r2, r2, #5
 801f994:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801f998:	432b      	orrs	r3, r5
 801f99a:	4313      	orrs	r3, r2
 801f99c:	9a02      	ldr	r2, [sp, #8]
 801f99e:	8013      	strh	r3, [r2, #0]
 801f9a0:	b005      	add	sp, #20
 801f9a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9a6:	2500      	movs	r5, #0
 801f9a8:	e6ef      	b.n	801f78a <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x3c>
 801f9aa:	2100      	movs	r1, #0
 801f9ac:	460d      	mov	r5, r1
 801f9ae:	e6f7      	b.n	801f7a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 801f9b0:	2100      	movs	r1, #0
 801f9b2:	e6f5      	b.n	801f7a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 801f9b4:	4631      	mov	r1, r6
 801f9b6:	e6f3      	b.n	801f7a0 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x52>
 801f9b8:	2400      	movs	r4, #0
 801f9ba:	e702      	b.n	801f7c2 <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x74>
 801f9bc:	2200      	movs	r2, #0
 801f9be:	4614      	mov	r4, r2
 801f9c0:	e70b      	b.n	801f7da <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 801f9c2:	4602      	mov	r2, r0
 801f9c4:	4604      	mov	r4, r0
 801f9c6:	e708      	b.n	801f7da <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 801f9c8:	2200      	movs	r2, #0
 801f9ca:	e706      	b.n	801f7da <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>
 801f9cc:	4632      	mov	r2, r6
 801f9ce:	e704      	b.n	801f7da <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh+0x8c>

0801f9d0 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f9d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f9d4:	b09d      	sub	sp, #116	; 0x74
 801f9d6:	9219      	str	r2, [sp, #100]	; 0x64
 801f9d8:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 801f9da:	901b      	str	r0, [sp, #108]	; 0x6c
 801f9dc:	9307      	str	r3, [sp, #28]
 801f9de:	6850      	ldr	r0, [r2, #4]
 801f9e0:	f89d 30bc 	ldrb.w	r3, [sp, #188]	; 0xbc
 801f9e4:	9117      	str	r1, [sp, #92]	; 0x5c
 801f9e6:	931a      	str	r3, [sp, #104]	; 0x68
 801f9e8:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	; 0xb0
 801f9ec:	fb00 1303 	mla	r3, r0, r3, r1
 801f9f0:	e9dd 4627 	ldrd	r4, r6, [sp, #156]	; 0x9c
 801f9f4:	6812      	ldr	r2, [r2, #0]
 801f9f6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801f9fa:	930a      	str	r3, [sp, #40]	; 0x28
 801f9fc:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801f9fe:	681b      	ldr	r3, [r3, #0]
 801fa00:	9310      	str	r3, [sp, #64]	; 0x40
 801fa02:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 801fa06:	930b      	str	r3, [sp, #44]	; 0x2c
 801fa08:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fa0a:	2b00      	cmp	r3, #0
 801fa0c:	dc03      	bgt.n	801fa16 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801fa0e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801fa10:	2b00      	cmp	r3, #0
 801fa12:	f340 8375 	ble.w	8020100 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 801fa16:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fa18:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fa1c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fa20:	1e48      	subs	r0, r1, #1
 801fa22:	1e57      	subs	r7, r2, #1
 801fa24:	9b07      	ldr	r3, [sp, #28]
 801fa26:	2b00      	cmp	r3, #0
 801fa28:	f340 818e 	ble.w	801fd48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x378>
 801fa2c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801fa30:	ea4f 4326 	mov.w	r3, r6, asr #16
 801fa34:	d406      	bmi.n	801fa44 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fa36:	4584      	cmp	ip, r0
 801fa38:	da04      	bge.n	801fa44 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fa3a:	2b00      	cmp	r3, #0
 801fa3c:	db02      	blt.n	801fa44 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fa3e:	42bb      	cmp	r3, r7
 801fa40:	f2c0 8183 	blt.w	801fd4a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801fa44:	f11c 0c01 	adds.w	ip, ip, #1
 801fa48:	f100 8173 	bmi.w	801fd32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801fa4c:	4561      	cmp	r1, ip
 801fa4e:	f2c0 8170 	blt.w	801fd32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801fa52:	3301      	adds	r3, #1
 801fa54:	f100 816d 	bmi.w	801fd32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801fa58:	429a      	cmp	r2, r3
 801fa5a:	f2c0 816a 	blt.w	801fd32 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x362>
 801fa5e:	9b07      	ldr	r3, [sp, #28]
 801fa60:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 801fa62:	9318      	str	r3, [sp, #96]	; 0x60
 801fa64:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fa66:	2b00      	cmp	r3, #0
 801fa68:	f340 818c 	ble.w	801fd84 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801fa6c:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 801fa6e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fa70:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801fa74:	1422      	asrs	r2, r4, #16
 801fa76:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801fa7a:	f3c4 3003 	ubfx	r0, r4, #12, #4
 801fa7e:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801fa82:	689b      	ldr	r3, [r3, #8]
 801fa84:	f100 81cd 	bmi.w	801fe22 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801fa88:	f103 38ff 	add.w	r8, r3, #4294967295
 801fa8c:	4542      	cmp	r2, r8
 801fa8e:	f280 81c8 	bge.w	801fe22 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801fa92:	f1bc 0f00 	cmp.w	ip, #0
 801fa96:	f2c0 81c4 	blt.w	801fe22 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801fa9a:	f10e 38ff 	add.w	r8, lr, #4294967295
 801fa9e:	45c4      	cmp	ip, r8
 801faa0:	f280 81bf 	bge.w	801fe22 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x452>
 801faa4:	b21b      	sxth	r3, r3
 801faa6:	fb0c 2203 	mla	r2, ip, r3, r2
 801faaa:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801faac:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 801fab0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 801fab4:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801fab8:	2800      	cmp	r0, #0
 801faba:	f000 81a9 	beq.w	801fe10 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x440>
 801fabe:	f8d8 5004 	ldr.w	r5, [r8, #4]
 801fac2:	950c      	str	r5, [sp, #48]	; 0x30
 801fac4:	0e2d      	lsrs	r5, r5, #24
 801fac6:	9513      	str	r5, [sp, #76]	; 0x4c
 801fac8:	b181      	cbz	r1, 801faec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801faca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 801face:	3b01      	subs	r3, #1
 801fad0:	009b      	lsls	r3, r3, #2
 801fad2:	3304      	adds	r3, #4
 801fad4:	eb08 0c03 	add.w	ip, r8, r3
 801fad8:	f858 3003 	ldr.w	r3, [r8, r3]
 801fadc:	9308      	str	r3, [sp, #32]
 801fade:	0e1b      	lsrs	r3, r3, #24
 801fae0:	9311      	str	r3, [sp, #68]	; 0x44
 801fae2:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801fae6:	930d      	str	r3, [sp, #52]	; 0x34
 801fae8:	0e1b      	lsrs	r3, r3, #24
 801faea:	9314      	str	r3, [sp, #80]	; 0x50
 801faec:	b280      	uxth	r0, r0
 801faee:	b289      	uxth	r1, r1
 801faf0:	fb00 f901 	mul.w	r9, r0, r1
 801faf4:	0100      	lsls	r0, r0, #4
 801faf6:	eba0 0809 	sub.w	r8, r0, r9
 801fafa:	f5c0 7380 	rsb	r3, r0, #256	; 0x100
 801fafe:	9813      	ldr	r0, [sp, #76]	; 0x4c
 801fb00:	fa1f f888 	uxth.w	r8, r8
 801fb04:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fb08:	fb08 f000 	mul.w	r0, r8, r0
 801fb0c:	b289      	uxth	r1, r1
 801fb0e:	1a5b      	subs	r3, r3, r1
 801fb10:	b29b      	uxth	r3, r3
 801fb12:	fb03 000e 	mla	r0, r3, lr, r0
 801fb16:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fb18:	fb01 0005 	mla	r0, r1, r5, r0
 801fb1c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801fb1e:	fb09 0005 	mla	r0, r9, r5, r0
 801fb22:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801fb26:	2800      	cmp	r0, #0
 801fb28:	f000 80fa 	beq.w	801fd20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801fb2c:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 801fb30:	d01b      	beq.n	801fb6a <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19a>
 801fb32:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 801fb36:	fb0e fa0a 	mul.w	sl, lr, sl
 801fb3a:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fb3e:	fb0e fe02 	mul.w	lr, lr, r2
 801fb42:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801fb46:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801fb4a:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801fb4e:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 801fb52:	4452      	add	r2, sl
 801fb54:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801fb58:	0a12      	lsrs	r2, r2, #8
 801fb5a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fb5e:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 801fb62:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 801fb66:	ea42 020c 	orr.w	r2, r2, ip
 801fb6a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801fb6c:	2dff      	cmp	r5, #255	; 0xff
 801fb6e:	d021      	beq.n	801fbb4 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e4>
 801fb70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fb72:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801fb76:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801fb78:	fb05 fb0b 	mul.w	fp, r5, fp
 801fb7c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fb7e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fb82:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801fb86:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801fb88:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fb8c:	fb05 fa0a 	mul.w	sl, r5, sl
 801fb90:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fb94:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fb98:	44de      	add	lr, fp
 801fb9a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fb9e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fba2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fba6:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fbaa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fbae:	ea4e 050a 	orr.w	r5, lr, sl
 801fbb2:	950c      	str	r5, [sp, #48]	; 0x30
 801fbb4:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fbb6:	2dff      	cmp	r5, #255	; 0xff
 801fbb8:	d021      	beq.n	801fbfe <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801fbba:	9d08      	ldr	r5, [sp, #32]
 801fbbc:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801fbc0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fbc2:	fb05 fb0b 	mul.w	fp, r5, fp
 801fbc6:	9d08      	ldr	r5, [sp, #32]
 801fbc8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fbcc:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801fbd0:	9d11      	ldr	r5, [sp, #68]	; 0x44
 801fbd2:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fbd6:	fb05 fa0a 	mul.w	sl, r5, sl
 801fbda:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fbde:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fbe2:	44de      	add	lr, fp
 801fbe4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fbe8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fbec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fbf0:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fbf4:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fbf8:	ea4e 050a 	orr.w	r5, lr, sl
 801fbfc:	9508      	str	r5, [sp, #32]
 801fbfe:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801fc00:	2dff      	cmp	r5, #255	; 0xff
 801fc02:	d021      	beq.n	801fc48 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801fc04:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801fc06:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 801fc0a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801fc0c:	fb05 fb0b 	mul.w	fp, r5, fp
 801fc10:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801fc12:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801fc16:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801fc1a:	9d14      	ldr	r5, [sp, #80]	; 0x50
 801fc1c:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fc20:	fb05 fa0a 	mul.w	sl, r5, sl
 801fc24:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 801fc28:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 801fc2c:	44de      	add	lr, fp
 801fc2e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801fc32:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801fc36:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fc3a:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 801fc3e:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fc42:	ea4e 050a 	orr.w	r5, lr, sl
 801fc46:	950d      	str	r5, [sp, #52]	; 0x34
 801fc48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fc4a:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 801fc4e:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 801fc52:	fb08 fc0c 	mul.w	ip, r8, ip
 801fc56:	fb03 cc0e 	mla	ip, r3, lr, ip
 801fc5a:	9d08      	ldr	r5, [sp, #32]
 801fc5c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 801fc60:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 801fc64:	fb01 cc0e 	mla	ip, r1, lr, ip
 801fc68:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801fc6a:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 801fc6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801fc70:	fb09 cc0e 	mla	ip, r9, lr, ip
 801fc74:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 801fc78:	fb08 f80e 	mul.w	r8, r8, lr
 801fc7c:	fb03 8202 	mla	r2, r3, r2, r8
 801fc80:	9b08      	ldr	r3, [sp, #32]
 801fc82:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fc86:	f403 4a7f 	and.w	sl, r3, #65280	; 0xff00
 801fc8a:	fb01 220a 	mla	r2, r1, sl, r2
 801fc8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fc90:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fc94:	f403 417f 	and.w	r1, r3, #65280	; 0xff00
 801fc98:	fb09 2901 	mla	r9, r9, r1, r2
 801fc9c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801fc9e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801fca2:	4342      	muls	r2, r0
 801fca4:	1c50      	adds	r0, r2, #1
 801fca6:	eb00 2012 	add.w	r0, r0, r2, lsr #8
 801fcaa:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801fcae:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 801fcb2:	ea4c 0c09 	orr.w	ip, ip, r9
 801fcb6:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 801fcb8:	ea4f 421c 	mov.w	r2, ip, lsr #16
 801fcbc:	883b      	ldrh	r3, [r7, #0]
 801fcbe:	fb12 f205 	smulbb	r2, r2, r5
 801fcc2:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801fcc6:	fa5f fc8c 	uxtb.w	ip, ip
 801fcca:	1219      	asrs	r1, r3, #8
 801fccc:	fb1c fc05 	smulbb	ip, ip, r5
 801fcd0:	b2c0      	uxtb	r0, r0
 801fcd2:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 801fcd6:	fb01 2100 	mla	r1, r1, r0, r2
 801fcda:	10da      	asrs	r2, r3, #3
 801fcdc:	00db      	lsls	r3, r3, #3
 801fcde:	fb1e fe05 	smulbb	lr, lr, r5
 801fce2:	b2db      	uxtb	r3, r3
 801fce4:	fb03 c300 	mla	r3, r3, r0, ip
 801fce8:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 801fcec:	b289      	uxth	r1, r1
 801fcee:	fb02 e200 	mla	r2, r2, r0, lr
 801fcf2:	fa1f fc83 	uxth.w	ip, r3
 801fcf6:	1c4b      	adds	r3, r1, #1
 801fcf8:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801fcfc:	f10c 0301 	add.w	r3, ip, #1
 801fd00:	eb03 231c 	add.w	r3, r3, ip, lsr #8
 801fd04:	b292      	uxth	r2, r2
 801fd06:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 801fd0a:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 801fd0e:	430b      	orrs	r3, r1
 801fd10:	1c51      	adds	r1, r2, #1
 801fd12:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801fd16:	0952      	lsrs	r2, r2, #5
 801fd18:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 801fd1c:	4313      	orrs	r3, r2
 801fd1e:	803b      	strh	r3, [r7, #0]
 801fd20:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fd22:	3702      	adds	r7, #2
 801fd24:	441c      	add	r4, r3
 801fd26:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fd28:	441e      	add	r6, r3
 801fd2a:	9b18      	ldr	r3, [sp, #96]	; 0x60
 801fd2c:	3b01      	subs	r3, #1
 801fd2e:	9318      	str	r3, [sp, #96]	; 0x60
 801fd30:	e698      	b.n	801fa64 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801fd32:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 801fd34:	441c      	add	r4, r3
 801fd36:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 801fd38:	441e      	add	r6, r3
 801fd3a:	9b07      	ldr	r3, [sp, #28]
 801fd3c:	3b01      	subs	r3, #1
 801fd3e:	9307      	str	r3, [sp, #28]
 801fd40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fd42:	3302      	adds	r3, #2
 801fd44:	930a      	str	r3, [sp, #40]	; 0x28
 801fd46:	e66d      	b.n	801fa24 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801fd48:	d023      	beq.n	801fd92 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c2>
 801fd4a:	9b07      	ldr	r3, [sp, #28]
 801fd4c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 801fd4e:	3b01      	subs	r3, #1
 801fd50:	fb00 4003 	mla	r0, r0, r3, r4
 801fd54:	1400      	asrs	r0, r0, #16
 801fd56:	f53f ae82 	bmi.w	801fa5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fd5a:	3901      	subs	r1, #1
 801fd5c:	4288      	cmp	r0, r1
 801fd5e:	f6bf ae7e 	bge.w	801fa5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fd62:	992a      	ldr	r1, [sp, #168]	; 0xa8
 801fd64:	fb01 6303 	mla	r3, r1, r3, r6
 801fd68:	141b      	asrs	r3, r3, #16
 801fd6a:	f53f ae78 	bmi.w	801fa5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fd6e:	3a01      	subs	r2, #1
 801fd70:	4293      	cmp	r3, r2
 801fd72:	f6bf ae74 	bge.w	801fa5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fd76:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801fd7a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 801fd7e:	f1bb 0f00 	cmp.w	fp, #0
 801fd82:	dc6c      	bgt.n	801fe5e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 801fd84:	9b07      	ldr	r3, [sp, #28]
 801fd86:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 801fd8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801fd8c:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 801fd90:	930a      	str	r3, [sp, #40]	; 0x28
 801fd92:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fd94:	2b00      	cmp	r3, #0
 801fd96:	f340 81b3 	ble.w	8020100 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x730>
 801fd9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801fd9e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fda2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fda6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fdaa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fdae:	eef0 6a62 	vmov.f32	s13, s5
 801fdb2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fdb6:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fdba:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fdbe:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fdc2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fdc6:	ee16 4a90 	vmov	r4, s13
 801fdca:	eef0 6a43 	vmov.f32	s13, s6
 801fdce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fdd2:	ee12 2a90 	vmov	r2, s5
 801fdd6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fdda:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fddc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fde0:	fb92 f3f3 	sdiv	r3, r2, r3
 801fde4:	ee13 2a10 	vmov	r2, s6
 801fde8:	9329      	str	r3, [sp, #164]	; 0xa4
 801fdea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fdec:	ee16 6a90 	vmov	r6, s13
 801fdf0:	fb92 f3f3 	sdiv	r3, r2, r3
 801fdf4:	932a      	str	r3, [sp, #168]	; 0xa8
 801fdf6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 801fdf8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801fdfa:	3b01      	subs	r3, #1
 801fdfc:	9317      	str	r3, [sp, #92]	; 0x5c
 801fdfe:	9b26      	ldr	r3, [sp, #152]	; 0x98
 801fe00:	bf08      	it	eq
 801fe02:	4613      	moveq	r3, r2
 801fe04:	eeb0 3a67 	vmov.f32	s6, s15
 801fe08:	9307      	str	r3, [sp, #28]
 801fe0a:	eef0 2a47 	vmov.f32	s5, s14
 801fe0e:	e5fb      	b.n	801fa08 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801fe10:	2900      	cmp	r1, #0
 801fe12:	f43f ae6b 	beq.w	801faec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fe16:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801fe1a:	9308      	str	r3, [sp, #32]
 801fe1c:	0e1b      	lsrs	r3, r3, #24
 801fe1e:	9311      	str	r3, [sp, #68]	; 0x44
 801fe20:	e664      	b.n	801faec <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801fe22:	f112 0801 	adds.w	r8, r2, #1
 801fe26:	f53f af7b 	bmi.w	801fd20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801fe2a:	4543      	cmp	r3, r8
 801fe2c:	f6ff af78 	blt.w	801fd20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801fe30:	f11c 0801 	adds.w	r8, ip, #1
 801fe34:	f53f af74 	bmi.w	801fd20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801fe38:	45c6      	cmp	lr, r8
 801fe3a:	f6ff af71 	blt.w	801fd20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801fe3e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 801fe40:	9201      	str	r2, [sp, #4]
 801fe42:	fa0f f28e 	sxth.w	r2, lr
 801fe46:	e9cd 1504 	strd	r1, r5, [sp, #16]
 801fe4a:	e9cd c002 	strd	ip, r0, [sp, #8]
 801fe4e:	9200      	str	r2, [sp, #0]
 801fe50:	b21b      	sxth	r3, r3
 801fe52:	9a10      	ldr	r2, [sp, #64]	; 0x40
 801fe54:	4639      	mov	r1, r7
 801fe56:	981b      	ldr	r0, [sp, #108]	; 0x6c
 801fe58:	f7ff fc79 	bl	801f74e <_ZNK8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPtPKmssiihhh>
 801fe5c:	e760      	b.n	801fd20 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x350>
 801fe5e:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 801fe60:	1427      	asrs	r7, r4, #16
 801fe62:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fe66:	1433      	asrs	r3, r6, #16
 801fe68:	fb01 7303 	mla	r3, r1, r3, r7
 801fe6c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 801fe6e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801fe72:	eb05 0783 	add.w	r7, r5, r3, lsl #2
 801fe76:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 801fe7a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801fe7e:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801fe82:	2a00      	cmp	r2, #0
 801fe84:	f000 8133 	beq.w	80200ee <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x71e>
 801fe88:	687d      	ldr	r5, [r7, #4]
 801fe8a:	950e      	str	r5, [sp, #56]	; 0x38
 801fe8c:	0e2d      	lsrs	r5, r5, #24
 801fe8e:	9515      	str	r5, [sp, #84]	; 0x54
 801fe90:	b178      	cbz	r0, 801feb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 801fe92:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 801fe96:	3901      	subs	r1, #1
 801fe98:	0089      	lsls	r1, r1, #2
 801fe9a:	3104      	adds	r1, #4
 801fe9c:	eb07 0e01 	add.w	lr, r7, r1
 801fea0:	5879      	ldr	r1, [r7, r1]
 801fea2:	9109      	str	r1, [sp, #36]	; 0x24
 801fea4:	0e09      	lsrs	r1, r1, #24
 801fea6:	9112      	str	r1, [sp, #72]	; 0x48
 801fea8:	f8de 1004 	ldr.w	r1, [lr, #4]
 801feac:	910f      	str	r1, [sp, #60]	; 0x3c
 801feae:	0e09      	lsrs	r1, r1, #24
 801feb0:	9116      	str	r1, [sp, #88]	; 0x58
 801feb2:	b292      	uxth	r2, r2
 801feb4:	b280      	uxth	r0, r0
 801feb6:	fb02 f800 	mul.w	r8, r2, r0
 801feba:	0112      	lsls	r2, r2, #4
 801febc:	eba2 0e08 	sub.w	lr, r2, r8
 801fec0:	9915      	ldr	r1, [sp, #84]	; 0x54
 801fec2:	fa1f fe8e 	uxth.w	lr, lr
 801fec6:	ebc8 1000 	rsb	r0, r8, r0, lsl #4
 801feca:	fb0e f101 	mul.w	r1, lr, r1
 801fece:	b280      	uxth	r0, r0
 801fed0:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801fed4:	1a12      	subs	r2, r2, r0
 801fed6:	b292      	uxth	r2, r2
 801fed8:	fb02 110c 	mla	r1, r2, ip, r1
 801fedc:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801fede:	fb00 1105 	mla	r1, r0, r5, r1
 801fee2:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801fee4:	fb08 1105 	mla	r1, r8, r5, r1
 801fee8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801feec:	2900      	cmp	r1, #0
 801feee:	f000 80f5 	beq.w	80200dc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70c>
 801fef2:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 801fef6:	d019      	beq.n	801ff2c <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55c>
 801fef8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 801fefc:	fb0c fa0a 	mul.w	sl, ip, sl
 801ff00:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801ff04:	fb0c fc03 	mul.w	ip, ip, r3
 801ff08:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ff0c:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ff10:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 801ff14:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 801ff18:	4453      	add	r3, sl
 801ff1a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801ff1e:	0a1b      	lsrs	r3, r3, #8
 801ff20:	0a3f      	lsrs	r7, r7, #8
 801ff22:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 801ff26:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 801ff2a:	433b      	orrs	r3, r7
 801ff2c:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801ff2e:	2dff      	cmp	r5, #255	; 0xff
 801ff30:	d020      	beq.n	801ff74 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a4>
 801ff32:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801ff34:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801ff38:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801ff3a:	436f      	muls	r7, r5
 801ff3c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 801ff3e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ff42:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801ff46:	9d15      	ldr	r5, [sp, #84]	; 0x54
 801ff48:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ff4c:	fb05 fa0a 	mul.w	sl, r5, sl
 801ff50:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ff54:	44bc      	add	ip, r7
 801ff56:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ff5a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ff5e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ff62:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ff66:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ff6a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ff6e:	ea4c 050a 	orr.w	r5, ip, sl
 801ff72:	950e      	str	r5, [sp, #56]	; 0x38
 801ff74:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ff76:	2dff      	cmp	r5, #255	; 0xff
 801ff78:	d020      	beq.n	801ffbc <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ec>
 801ff7a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801ff7c:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801ff80:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ff82:	436f      	muls	r7, r5
 801ff84:	9d09      	ldr	r5, [sp, #36]	; 0x24
 801ff86:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ff8a:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801ff8e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 801ff90:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ff94:	fb05 fa0a 	mul.w	sl, r5, sl
 801ff98:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ff9c:	44bc      	add	ip, r7
 801ff9e:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ffa2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ffa6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ffaa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ffae:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ffb2:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801ffb6:	ea4c 050a 	orr.w	r5, ip, sl
 801ffba:	9509      	str	r5, [sp, #36]	; 0x24
 801ffbc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801ffbe:	2dff      	cmp	r5, #255	; 0xff
 801ffc0:	d020      	beq.n	8020004 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x634>
 801ffc2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801ffc4:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 801ffc8:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801ffca:	436f      	muls	r7, r5
 801ffcc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801ffce:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ffd2:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 801ffd6:	9d16      	ldr	r5, [sp, #88]	; 0x58
 801ffd8:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 801ffdc:	fb05 fa0a 	mul.w	sl, r5, sl
 801ffe0:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801ffe4:	44bc      	add	ip, r7
 801ffe6:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 801ffea:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ffee:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801fff2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801fff6:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 801fffa:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 801fffe:	ea4c 050a 	orr.w	r5, ip, sl
 8020002:	950f      	str	r5, [sp, #60]	; 0x3c
 8020004:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020006:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 802000a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802000e:	fb0e f707 	mul.w	r7, lr, r7
 8020012:	fb02 770c 	mla	r7, r2, ip, r7
 8020016:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8020018:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 802001c:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 8020020:	fb00 770c 	mla	r7, r0, ip, r7
 8020024:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8020026:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 802002a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802002c:	fb08 770c 	mla	r7, r8, ip, r7
 8020030:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8020034:	fb0e fe0c 	mul.w	lr, lr, ip
 8020038:	fb02 e303 	mla	r3, r2, r3, lr
 802003c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802003e:	0a3f      	lsrs	r7, r7, #8
 8020040:	f402 4a7f 	and.w	sl, r2, #65280	; 0xff00
 8020044:	fb00 330a 	mla	r3, r0, sl, r3
 8020048:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 802004a:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 802004e:	f402 4c7f 	and.w	ip, r2, #65280	; 0xff00
 8020052:	fb08 3c0c 	mla	ip, r8, ip, r3
 8020056:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020058:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802005c:	4359      	muls	r1, r3
 802005e:	1c4b      	adds	r3, r1, #1
 8020060:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8020064:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020068:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 802006c:	ea47 070c 	orr.w	r7, r7, ip
 8020070:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8020072:	0c3b      	lsrs	r3, r7, #16
 8020074:	f8b9 0000 	ldrh.w	r0, [r9]
 8020078:	fb13 f305 	smulbb	r3, r3, r5
 802007c:	f3c7 2c07 	ubfx	ip, r7, #8, #8
 8020080:	b2ff      	uxtb	r7, r7
 8020082:	1202      	asrs	r2, r0, #8
 8020084:	fb17 f705 	smulbb	r7, r7, r5
 8020088:	b2c9      	uxtb	r1, r1
 802008a:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
 802008e:	fb02 3201 	mla	r2, r2, r1, r3
 8020092:	10c3      	asrs	r3, r0, #3
 8020094:	00c0      	lsls	r0, r0, #3
 8020096:	fb1c fc05 	smulbb	ip, ip, r5
 802009a:	b2c0      	uxtb	r0, r0
 802009c:	fb00 7001 	mla	r0, r0, r1, r7
 80200a0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
 80200a4:	fb03 c301 	mla	r3, r3, r1, ip
 80200a8:	b292      	uxth	r2, r2
 80200aa:	b280      	uxth	r0, r0
 80200ac:	1c51      	adds	r1, r2, #1
 80200ae:	f100 0c01 	add.w	ip, r0, #1
 80200b2:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80200b6:	eb0c 2c10 	add.w	ip, ip, r0, lsr #8
 80200ba:	b29b      	uxth	r3, r3
 80200bc:	f3cc 2cc4 	ubfx	ip, ip, #11, #5
 80200c0:	f402 4278 	and.w	r2, r2, #63488	; 0xf800
 80200c4:	ea4c 0202 	orr.w	r2, ip, r2
 80200c8:	f103 0c01 	add.w	ip, r3, #1
 80200cc:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80200d0:	095b      	lsrs	r3, r3, #5
 80200d2:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80200d6:	431a      	orrs	r2, r3
 80200d8:	f8a9 2000 	strh.w	r2, [r9]
 80200dc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80200de:	f109 0902 	add.w	r9, r9, #2
 80200e2:	441c      	add	r4, r3
 80200e4:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 80200e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80200ea:	441e      	add	r6, r3
 80200ec:	e647      	b.n	801fd7e <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ae>
 80200ee:	2800      	cmp	r0, #0
 80200f0:	f43f aedf 	beq.w	801feb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 80200f4:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 80200f8:	9109      	str	r1, [sp, #36]	; 0x24
 80200fa:	0e09      	lsrs	r1, r1, #24
 80200fc:	9112      	str	r1, [sp, #72]	; 0x48
 80200fe:	e6d8      	b.n	801feb2 <_ZN8touchgfx8LCD16bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e2>
 8020100:	b01d      	add	sp, #116	; 0x74
 8020102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020106 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>:
 8020106:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802010a:	b085      	sub	sp, #20
 802010c:	e9dd 740f 	ldrd	r7, r4, [sp, #60]	; 0x3c
 8020110:	9102      	str	r1, [sp, #8]
 8020112:	fb04 7103 	mla	r1, r4, r3, r7
 8020116:	2c00      	cmp	r4, #0
 8020118:	f9bd e038 	ldrsh.w	lr, [sp, #56]	; 0x38
 802011c:	f89d 6044 	ldrb.w	r6, [sp, #68]	; 0x44
 8020120:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 8020124:	eb02 0c81 	add.w	ip, r2, r1, lsl #2
 8020128:	f2c0 810c 	blt.w	8020344 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 802012c:	45a6      	cmp	lr, r4
 802012e:	f340 8109 	ble.w	8020344 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23e>
 8020132:	2f00      	cmp	r7, #0
 8020134:	f2c0 8104 	blt.w	8020340 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 8020138:	42bb      	cmp	r3, r7
 802013a:	f340 8101 	ble.w	8020340 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x23a>
 802013e:	f852 5021 	ldr.w	r5, [r2, r1, lsl #2]
 8020142:	1c7a      	adds	r2, r7, #1
 8020144:	f100 8101 	bmi.w	802034a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 8020148:	4293      	cmp	r3, r2
 802014a:	f340 80fe 	ble.w	802034a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x244>
 802014e:	2e00      	cmp	r6, #0
 8020150:	f000 80fd 	beq.w	802034e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x248>
 8020154:	f8dc 1004 	ldr.w	r1, [ip, #4]
 8020158:	3401      	adds	r4, #1
 802015a:	f100 80fc 	bmi.w	8020356 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 802015e:	45a6      	cmp	lr, r4
 8020160:	f340 80f9 	ble.w	8020356 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x250>
 8020164:	2800      	cmp	r0, #0
 8020166:	f000 80f9 	beq.w	802035c <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x256>
 802016a:	2f00      	cmp	r7, #0
 802016c:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8020170:	f2c0 80ef 	blt.w	8020352 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 8020174:	42bb      	cmp	r3, r7
 8020176:	f340 80ec 	ble.w	8020352 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x24c>
 802017a:	f85c 4023 	ldr.w	r4, [ip, r3, lsl #2]
 802017e:	3701      	adds	r7, #1
 8020180:	f100 80ef 	bmi.w	8020362 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 8020184:	42bb      	cmp	r3, r7
 8020186:	f340 80ec 	ble.w	8020362 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x25c>
 802018a:	2e00      	cmp	r6, #0
 802018c:	f000 80eb 	beq.w	8020366 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x260>
 8020190:	6852      	ldr	r2, [r2, #4]
 8020192:	b2b6      	uxth	r6, r6
 8020194:	b280      	uxth	r0, r0
 8020196:	fb00 fe06 	mul.w	lr, r0, r6
 802019a:	0136      	lsls	r6, r6, #4
 802019c:	eba6 070e 	sub.w	r7, r6, lr
 80201a0:	ea4f 6a11 	mov.w	sl, r1, lsr #24
 80201a4:	b2bf      	uxth	r7, r7
 80201a6:	f5c6 7380 	rsb	r3, r6, #256	; 0x100
 80201aa:	ebce 1000 	rsb	r0, lr, r0, lsl #4
 80201ae:	fb07 f60a 	mul.w	r6, r7, sl
 80201b2:	b280      	uxth	r0, r0
 80201b4:	1a1b      	subs	r3, r3, r0
 80201b6:	ea4f 6b15 	mov.w	fp, r5, lsr #24
 80201ba:	b29b      	uxth	r3, r3
 80201bc:	fb0b 6603 	mla	r6, fp, r3, r6
 80201c0:	ea4f 6914 	mov.w	r9, r4, lsr #24
 80201c4:	fb00 6609 	mla	r6, r0, r9, r6
 80201c8:	ea4f 6812 	mov.w	r8, r2, lsr #24
 80201cc:	fb0e 6608 	mla	r6, lr, r8, r6
 80201d0:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80201d4:	9600      	str	r6, [sp, #0]
 80201d6:	2e00      	cmp	r6, #0
 80201d8:	f000 80af 	beq.w	802033a <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x234>
 80201dc:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80201e0:	fb0b fc0c 	mul.w	ip, fp, ip
 80201e4:	f405 457f 	and.w	r5, r5, #65280	; 0xff00
 80201e8:	fb0b f505 	mul.w	r5, fp, r5
 80201ec:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80201f0:	f00b 1bff 	and.w	fp, fp, #16711935	; 0xff00ff
 80201f4:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 80201f8:	44dc      	add	ip, fp
 80201fa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80201fe:	9501      	str	r5, [sp, #4]
 8020200:	f00c 15ff 	and.w	r5, ip, #16711935	; 0xff00ff
 8020204:	9503      	str	r5, [sp, #12]
 8020206:	9d01      	ldr	r5, [sp, #4]
 8020208:	9e02      	ldr	r6, [sp, #8]
 802020a:	f505 7c80 	add.w	ip, r5, #256	; 0x100
 802020e:	eb0c 2515 	add.w	r5, ip, r5, lsr #8
 8020212:	f001 1cff 	and.w	ip, r1, #16711935	; 0xff00ff
 8020216:	fb0a fc0c 	mul.w	ip, sl, ip
 802021a:	ea4f 2b15 	mov.w	fp, r5, lsr #8
 802021e:	ea4f 251c 	mov.w	r5, ip, lsr #8
 8020222:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 8020226:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802022a:	4465      	add	r5, ip
 802022c:	f004 1cff 	and.w	ip, r4, #16711935	; 0xff00ff
 8020230:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 8020234:	fb09 fc0c 	mul.w	ip, r9, ip
 8020238:	fb09 f904 	mul.w	r9, r9, r4
 802023c:	f509 7480 	add.w	r4, r9, #256	; 0x100
 8020240:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 8020244:	f002 14ff 	and.w	r4, r2, #16711935	; 0xff00ff
 8020248:	fb08 f404 	mul.w	r4, r8, r4
 802024c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020250:	fb08 f802 	mul.w	r8, r8, r2
 8020254:	0a2d      	lsrs	r5, r5, #8
 8020256:	0a22      	lsrs	r2, r4, #8
 8020258:	f005 15ff 	and.w	r5, r5, #16711935	; 0xff00ff
 802025c:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 8020260:	437d      	muls	r5, r7
 8020262:	f104 1401 	add.w	r4, r4, #65537	; 0x10001
 8020266:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 802026a:	4414      	add	r4, r2
 802026c:	f508 7280 	add.w	r2, r8, #256	; 0x100
 8020270:	fb0a fa01 	mul.w	sl, sl, r1
 8020274:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020278:	9a03      	ldr	r2, [sp, #12]
 802027a:	f50a 7180 	add.w	r1, sl, #256	; 0x100
 802027e:	fb02 5503 	mla	r5, r2, r3, r5
 8020282:	0a24      	lsrs	r4, r4, #8
 8020284:	eb01 2a1a 	add.w	sl, r1, sl, lsr #8
 8020288:	f004 14ff 	and.w	r4, r4, #16711935	; 0xff00ff
 802028c:	ea4f 211c 	mov.w	r1, ip, lsr #8
 8020290:	fb04 540e 	mla	r4, r4, lr, r5
 8020294:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 8020298:	f10c 1c01 	add.w	ip, ip, #65537	; 0x10001
 802029c:	4461      	add	r1, ip
 802029e:	0a09      	lsrs	r1, r1, #8
 80202a0:	f001 11ff 	and.w	r1, r1, #16711935	; 0xff00ff
 80202a4:	fb01 4100 	mla	r1, r1, r0, r4
 80202a8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80202ac:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80202b0:	fb07 f70a 	mul.w	r7, r7, sl
 80202b4:	0a09      	lsrs	r1, r1, #8
 80202b6:	f001 14ff 	and.w	r4, r1, #16711935	; 0xff00ff
 80202ba:	f40b 417f 	and.w	r1, fp, #65280	; 0xff00
 80202be:	fb03 7101 	mla	r1, r3, r1, r7
 80202c2:	9b00      	ldr	r3, [sp, #0]
 80202c4:	ea4f 2818 	mov.w	r8, r8, lsr #8
 80202c8:	43da      	mvns	r2, r3
 80202ca:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80202ce:	fb0e 1e08 	mla	lr, lr, r8, r1
 80202d2:	8836      	ldrh	r6, [r6, #0]
 80202d4:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80202d8:	f409 417f 	and.w	r1, r9, #65280	; 0xff00
 80202dc:	fb00 e101 	mla	r1, r0, r1, lr
 80202e0:	1233      	asrs	r3, r6, #8
 80202e2:	b2d2      	uxtb	r2, r2
 80202e4:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
 80202e8:	4353      	muls	r3, r2
 80202ea:	10f0      	asrs	r0, r6, #3
 80202ec:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 80202f0:	4350      	muls	r0, r2
 80202f2:	0a09      	lsrs	r1, r1, #8
 80202f4:	00f6      	lsls	r6, r6, #3
 80202f6:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 80202fa:	b2f6      	uxtb	r6, r6
 80202fc:	4321      	orrs	r1, r4
 80202fe:	4356      	muls	r6, r2
 8020300:	1c5a      	adds	r2, r3, #1
 8020302:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8020306:	0c0b      	lsrs	r3, r1, #16
 8020308:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802030c:	1c42      	adds	r2, r0, #1
 802030e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020312:	0a0a      	lsrs	r2, r1, #8
 8020314:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8020318:	021b      	lsls	r3, r3, #8
 802031a:	00d2      	lsls	r2, r2, #3
 802031c:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020320:	f403 4378 	and.w	r3, r3, #63488	; 0xf800
 8020324:	4313      	orrs	r3, r2
 8020326:	1c72      	adds	r2, r6, #1
 8020328:	eb02 2616 	add.w	r6, r2, r6, lsr #8
 802032c:	eb01 2116 	add.w	r1, r1, r6, lsr #8
 8020330:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8020334:	4319      	orrs	r1, r3
 8020336:	9b02      	ldr	r3, [sp, #8]
 8020338:	8019      	strh	r1, [r3, #0]
 802033a:	b005      	add	sp, #20
 802033c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020340:	2500      	movs	r5, #0
 8020342:	e6fe      	b.n	8020142 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x3c>
 8020344:	2100      	movs	r1, #0
 8020346:	460d      	mov	r5, r1
 8020348:	e706      	b.n	8020158 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802034a:	2100      	movs	r1, #0
 802034c:	e704      	b.n	8020158 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 802034e:	4631      	mov	r1, r6
 8020350:	e702      	b.n	8020158 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x52>
 8020352:	2400      	movs	r4, #0
 8020354:	e713      	b.n	802017e <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x78>
 8020356:	2200      	movs	r2, #0
 8020358:	4614      	mov	r4, r2
 802035a:	e71a      	b.n	8020192 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 802035c:	4602      	mov	r2, r0
 802035e:	4604      	mov	r4, r0
 8020360:	e717      	b.n	8020192 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8020362:	2200      	movs	r2, #0
 8020364:	e715      	b.n	8020192 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
 8020366:	4632      	mov	r2, r6
 8020368:	e713      	b.n	8020192 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh+0x8c>
	...

0802036c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802036c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020370:	b09b      	sub	sp, #108	; 0x6c
 8020372:	9218      	str	r2, [sp, #96]	; 0x60
 8020374:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8020376:	9019      	str	r0, [sp, #100]	; 0x64
 8020378:	6850      	ldr	r0, [r2, #4]
 802037a:	9116      	str	r1, [sp, #88]	; 0x58
 802037c:	9307      	str	r3, [sp, #28]
 802037e:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	; 0xa8
 8020382:	fb00 1303 	mla	r3, r0, r3, r1
 8020386:	e9dd 4625 	ldrd	r4, r6, [sp, #148]	; 0x94
 802038a:	6812      	ldr	r2, [r2, #0]
 802038c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020390:	930a      	str	r3, [sp, #40]	; 0x28
 8020392:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020394:	681b      	ldr	r3, [r3, #0]
 8020396:	930f      	str	r3, [sp, #60]	; 0x3c
 8020398:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802039a:	2b00      	cmp	r3, #0
 802039c:	dc03      	bgt.n	80203a6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 802039e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80203a0:	2b00      	cmp	r3, #0
 80203a2:	f340 8387 	ble.w	8020ab4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 80203a6:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80203a8:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80203ac:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80203b0:	1e48      	subs	r0, r1, #1
 80203b2:	1e57      	subs	r7, r2, #1
 80203b4:	9b07      	ldr	r3, [sp, #28]
 80203b6:	2b00      	cmp	r3, #0
 80203b8:	f340 8166 	ble.w	8020688 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 80203bc:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80203c0:	ea4f 4326 	mov.w	r3, r6, asr #16
 80203c4:	d406      	bmi.n	80203d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80203c6:	4584      	cmp	ip, r0
 80203c8:	da04      	bge.n	80203d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80203ca:	2b00      	cmp	r3, #0
 80203cc:	db02      	blt.n	80203d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80203ce:	42bb      	cmp	r3, r7
 80203d0:	f2c0 815b 	blt.w	802068a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 80203d4:	f11c 0c01 	adds.w	ip, ip, #1
 80203d8:	f100 814b 	bmi.w	8020672 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80203dc:	4561      	cmp	r1, ip
 80203de:	f2c0 8148 	blt.w	8020672 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80203e2:	3301      	adds	r3, #1
 80203e4:	f100 8145 	bmi.w	8020672 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80203e8:	429a      	cmp	r2, r3
 80203ea:	f2c0 8142 	blt.w	8020672 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x306>
 80203ee:	9b07      	ldr	r3, [sp, #28]
 80203f0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80203f2:	9317      	str	r3, [sp, #92]	; 0x5c
 80203f4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80203f6:	2b00      	cmp	r3, #0
 80203f8:	f340 8165 	ble.w	80206c6 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35a>
 80203fc:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80203fe:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020400:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8020404:	1422      	asrs	r2, r4, #16
 8020406:	ea4f 4c26 	mov.w	ip, r6, asr #16
 802040a:	f3c4 3103 	ubfx	r1, r4, #12, #4
 802040e:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8020412:	689b      	ldr	r3, [r3, #8]
 8020414:	f100 81d5 	bmi.w	80207c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8020418:	f103 38ff 	add.w	r8, r3, #4294967295
 802041c:	4542      	cmp	r2, r8
 802041e:	f280 81d0 	bge.w	80207c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8020422:	f1bc 0f00 	cmp.w	ip, #0
 8020426:	f2c0 81cc 	blt.w	80207c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 802042a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802042e:	45c4      	cmp	ip, r8
 8020430:	f280 81c7 	bge.w	80207c2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x456>
 8020434:	b21b      	sxth	r3, r3
 8020436:	fb0c 2203 	mla	r2, ip, r3, r2
 802043a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802043c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8020440:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
 8020444:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8020448:	2900      	cmp	r1, #0
 802044a:	f000 8182 	beq.w	8020752 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e6>
 802044e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8020452:	950b      	str	r5, [sp, #44]	; 0x2c
 8020454:	0e2d      	lsrs	r5, r5, #24
 8020456:	9512      	str	r5, [sp, #72]	; 0x48
 8020458:	b180      	cbz	r0, 802047c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 802045a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 802045e:	3b01      	subs	r3, #1
 8020460:	009b      	lsls	r3, r3, #2
 8020462:	3304      	adds	r3, #4
 8020464:	eb08 0c03 	add.w	ip, r8, r3
 8020468:	f858 3003 	ldr.w	r3, [r8, r3]
 802046c:	9308      	str	r3, [sp, #32]
 802046e:	0e1b      	lsrs	r3, r3, #24
 8020470:	9310      	str	r3, [sp, #64]	; 0x40
 8020472:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8020476:	930c      	str	r3, [sp, #48]	; 0x30
 8020478:	0e1b      	lsrs	r3, r3, #24
 802047a:	9313      	str	r3, [sp, #76]	; 0x4c
 802047c:	b289      	uxth	r1, r1
 802047e:	b280      	uxth	r0, r0
 8020480:	fb01 f900 	mul.w	r9, r1, r0
 8020484:	0109      	lsls	r1, r1, #4
 8020486:	eba1 0809 	sub.w	r8, r1, r9
 802048a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 802048c:	fa1f f888 	uxth.w	r8, r8
 8020490:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020494:	fb08 f303 	mul.w	r3, r8, r3
 8020498:	b280      	uxth	r0, r0
 802049a:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 802049e:	1a09      	subs	r1, r1, r0
 80204a0:	b289      	uxth	r1, r1
 80204a2:	fb01 330e 	mla	r3, r1, lr, r3
 80204a6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80204a8:	fb00 3305 	mla	r3, r0, r5, r3
 80204ac:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80204ae:	fb09 3305 	mla	r3, r9, r5, r3
 80204b2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80204b6:	2b00      	cmp	r3, #0
 80204b8:	f000 80d2 	beq.w	8020660 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80204bc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 80204c0:	d01b      	beq.n	80204fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18e>
 80204c2:	f002 1aff 	and.w	sl, r2, #16711935	; 0xff00ff
 80204c6:	fb0e fa0a 	mul.w	sl, lr, sl
 80204ca:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80204ce:	fb0e fe02 	mul.w	lr, lr, r2
 80204d2:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80204d6:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80204da:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80204de:	f50e 7c80 	add.w	ip, lr, #256	; 0x100
 80204e2:	4452      	add	r2, sl
 80204e4:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80204e8:	0a12      	lsrs	r2, r2, #8
 80204ea:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80204ee:	f002 12ff 	and.w	r2, r2, #16711935	; 0xff00ff
 80204f2:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80204f6:	ea42 020c 	orr.w	r2, r2, ip
 80204fa:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80204fc:	2dff      	cmp	r5, #255	; 0xff
 80204fe:	d021      	beq.n	8020544 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8020500:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8020502:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8020506:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020508:	fb05 fb0b 	mul.w	fp, r5, fp
 802050c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 802050e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020512:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8020516:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8020518:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802051c:	fb05 fa0a 	mul.w	sl, r5, sl
 8020520:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 8020524:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020528:	44de      	add	lr, fp
 802052a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802052e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020532:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020536:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802053a:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802053e:	ea4e 050a 	orr.w	r5, lr, sl
 8020542:	950b      	str	r5, [sp, #44]	; 0x2c
 8020544:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8020546:	2dff      	cmp	r5, #255	; 0xff
 8020548:	d021      	beq.n	802058e <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x222>
 802054a:	9d08      	ldr	r5, [sp, #32]
 802054c:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 8020550:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8020552:	fb05 fb0b 	mul.w	fp, r5, fp
 8020556:	9d08      	ldr	r5, [sp, #32]
 8020558:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802055c:	9d10      	ldr	r5, [sp, #64]	; 0x40
 802055e:	fb05 fa0e 	mul.w	sl, r5, lr
 8020562:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020566:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 802056a:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 802056e:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 8020572:	44de      	add	lr, fp
 8020574:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020578:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802057c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020580:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 8020584:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020588:	ea4e 050a 	orr.w	r5, lr, sl
 802058c:	9508      	str	r5, [sp, #32]
 802058e:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8020590:	2dff      	cmp	r5, #255	; 0xff
 8020592:	d021      	beq.n	80205d8 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8020594:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8020596:	f005 1bff 	and.w	fp, r5, #16711935	; 0xff00ff
 802059a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 802059c:	fb05 fb0b 	mul.w	fp, r5, fp
 80205a0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80205a2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80205a6:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80205aa:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 80205ac:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80205b0:	fb05 fa0a 	mul.w	sl, r5, sl
 80205b4:	f10b 1b01 	add.w	fp, fp, #65537	; 0x10001
 80205b8:	f50a 7c80 	add.w	ip, sl, #256	; 0x100
 80205bc:	44de      	add	lr, fp
 80205be:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80205c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80205c6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80205ca:	f00e 1eff 	and.w	lr, lr, #16711935	; 0xff00ff
 80205ce:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 80205d2:	ea4e 050a 	orr.w	r5, lr, sl
 80205d6:	950c      	str	r5, [sp, #48]	; 0x30
 80205d8:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80205da:	f002 1eff 	and.w	lr, r2, #16711935	; 0xff00ff
 80205de:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80205e2:	fb08 fc0c 	mul.w	ip, r8, ip
 80205e6:	fb01 cc0e 	mla	ip, r1, lr, ip
 80205ea:	9d08      	ldr	r5, [sp, #32]
 80205ec:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 80205f0:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 80205f4:	fb00 cc0e 	mla	ip, r0, lr, ip
 80205f8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80205fa:	2bff      	cmp	r3, #255	; 0xff
 80205fc:	f005 1eff 	and.w	lr, r5, #16711935	; 0xff00ff
 8020600:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8020602:	fb09 cc0e 	mla	ip, r9, lr, ip
 8020606:	f405 4e7f 	and.w	lr, r5, #65280	; 0xff00
 802060a:	fb08 f80e 	mul.w	r8, r8, lr
 802060e:	fb01 8202 	mla	r2, r1, r2, r8
 8020612:	9908      	ldr	r1, [sp, #32]
 8020614:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020618:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 802061c:	fb00 220a 	mla	r2, r0, sl, r2
 8020620:	990c      	ldr	r1, [sp, #48]	; 0x30
 8020622:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020626:	f401 407f 	and.w	r0, r1, #65280	; 0xff00
 802062a:	fb09 2900 	mla	r9, r9, r0, r2
 802062e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020632:	f409 497f 	and.w	r9, r9, #65280	; 0xff00
 8020636:	ea4c 0c09 	orr.w	ip, ip, r9
 802063a:	ea4f 221c 	mov.w	r2, ip, lsr #8
 802063e:	f040 8091 	bne.w	8020764 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f8>
 8020642:	ea4f 135c 	mov.w	r3, ip, lsr #5
 8020646:	f422 62ff 	bic.w	r2, r2, #2040	; 0x7f8
 802064a:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802064e:	f022 0207 	bic.w	r2, r2, #7
 8020652:	431a      	orrs	r2, r3
 8020654:	f3cc 0cc4 	ubfx	ip, ip, #3, #5
 8020658:	ea4c 0c02 	orr.w	ip, ip, r2
 802065c:	f8a7 c000 	strh.w	ip, [r7]
 8020660:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020662:	3702      	adds	r7, #2
 8020664:	441c      	add	r4, r3
 8020666:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020668:	441e      	add	r6, r3
 802066a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 802066c:	3b01      	subs	r3, #1
 802066e:	9317      	str	r3, [sp, #92]	; 0x5c
 8020670:	e6c0      	b.n	80203f4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8020672:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020674:	441c      	add	r4, r3
 8020676:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020678:	441e      	add	r6, r3
 802067a:	9b07      	ldr	r3, [sp, #28]
 802067c:	3b01      	subs	r3, #1
 802067e:	9307      	str	r3, [sp, #28]
 8020680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020682:	3302      	adds	r3, #2
 8020684:	930a      	str	r3, [sp, #40]	; 0x28
 8020686:	e695      	b.n	80203b4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020688:	d024      	beq.n	80206d4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x368>
 802068a:	9b07      	ldr	r3, [sp, #28]
 802068c:	9827      	ldr	r0, [sp, #156]	; 0x9c
 802068e:	3b01      	subs	r3, #1
 8020690:	fb00 4003 	mla	r0, r0, r3, r4
 8020694:	1400      	asrs	r0, r0, #16
 8020696:	f53f aeaa 	bmi.w	80203ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 802069a:	3901      	subs	r1, #1
 802069c:	4288      	cmp	r0, r1
 802069e:	f6bf aea6 	bge.w	80203ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80206a2:	9928      	ldr	r1, [sp, #160]	; 0xa0
 80206a4:	fb01 6303 	mla	r3, r1, r3, r6
 80206a8:	141b      	asrs	r3, r3, #16
 80206aa:	f53f aea0 	bmi.w	80203ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80206ae:	3a01      	subs	r2, #1
 80206b0:	4293      	cmp	r3, r2
 80206b2:	f6bf ae9c 	bge.w	80203ee <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 80206b6:	f8dd b01c 	ldr.w	fp, [sp, #28]
 80206ba:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80206be:	f1bb 0f00 	cmp.w	fp, #0
 80206c2:	f300 809a 	bgt.w	80207fa <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48e>
 80206c6:	9b07      	ldr	r3, [sp, #28]
 80206c8:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 80206cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80206ce:	eb03 0345 	add.w	r3, r3, r5, lsl #1
 80206d2:	930a      	str	r3, [sp, #40]	; 0x28
 80206d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80206d6:	2b00      	cmp	r3, #0
 80206d8:	f340 81ec 	ble.w	8020ab4 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x748>
 80206dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80206e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80206e4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80206e8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80206ec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80206f0:	eef0 6a62 	vmov.f32	s13, s5
 80206f4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80206f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80206fc:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020700:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020704:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020708:	ee16 4a90 	vmov	r4, s13
 802070c:	eef0 6a43 	vmov.f32	s13, s6
 8020710:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020714:	ee12 2a90 	vmov	r2, s5
 8020718:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 802071c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802071e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020722:	fb92 f3f3 	sdiv	r3, r2, r3
 8020726:	ee13 2a10 	vmov	r2, s6
 802072a:	9327      	str	r3, [sp, #156]	; 0x9c
 802072c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802072e:	ee16 6a90 	vmov	r6, s13
 8020732:	fb92 f3f3 	sdiv	r3, r2, r3
 8020736:	9328      	str	r3, [sp, #160]	; 0xa0
 8020738:	9b16      	ldr	r3, [sp, #88]	; 0x58
 802073a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 802073c:	3b01      	subs	r3, #1
 802073e:	9316      	str	r3, [sp, #88]	; 0x58
 8020740:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020742:	bf08      	it	eq
 8020744:	4613      	moveq	r3, r2
 8020746:	eeb0 3a67 	vmov.f32	s6, s15
 802074a:	9307      	str	r3, [sp, #28]
 802074c:	eef0 2a47 	vmov.f32	s5, s14
 8020750:	e622      	b.n	8020398 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c>
 8020752:	2800      	cmp	r0, #0
 8020754:	f43f ae92 	beq.w	802047c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8020758:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 802075c:	9308      	str	r3, [sp, #32]
 802075e:	0e1b      	lsrs	r3, r3, #24
 8020760:	9310      	str	r3, [sp, #64]	; 0x40
 8020762:	e68b      	b.n	802047c <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x110>
 8020764:	43db      	mvns	r3, r3
 8020766:	8839      	ldrh	r1, [r7, #0]
 8020768:	fa5f f883 	uxtb.w	r8, r3
 802076c:	ea4f 2e21 	mov.w	lr, r1, asr #8
 8020770:	f00e 0ef8 	and.w	lr, lr, #248	; 0xf8
 8020774:	fb0e fe08 	mul.w	lr, lr, r8
 8020778:	10c8      	asrs	r0, r1, #3
 802077a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 802077e:	fb00 f008 	mul.w	r0, r0, r8
 8020782:	00cb      	lsls	r3, r1, #3
 8020784:	f10e 0101 	add.w	r1, lr, #1
 8020788:	eb01 2e1e 	add.w	lr, r1, lr, lsr #8
 802078c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8020790:	eb01 211e 	add.w	r1, r1, lr, lsr #8
 8020794:	b2db      	uxtb	r3, r3
 8020796:	f100 0e01 	add.w	lr, r0, #1
 802079a:	fb03 f308 	mul.w	r3, r3, r8
 802079e:	eb0e 2010 	add.w	r0, lr, r0, lsr #8
 80207a2:	4dc6      	ldr	r5, [pc, #792]	; (8020abc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 80207a4:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 80207a8:	b2c9      	uxtb	r1, r1
 80207aa:	00d2      	lsls	r2, r2, #3
 80207ac:	ea05 2101 	and.w	r1, r5, r1, lsl #8
 80207b0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80207b4:	430a      	orrs	r2, r1
 80207b6:	1c59      	adds	r1, r3, #1
 80207b8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80207bc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 80207c0:	e748      	b.n	8020654 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e8>
 80207c2:	f112 0801 	adds.w	r8, r2, #1
 80207c6:	f53f af4b 	bmi.w	8020660 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80207ca:	4543      	cmp	r3, r8
 80207cc:	f6ff af48 	blt.w	8020660 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80207d0:	f11c 0801 	adds.w	r8, ip, #1
 80207d4:	f53f af44 	bmi.w	8020660 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80207d8:	45c6      	cmp	lr, r8
 80207da:	f6ff af41 	blt.w	8020660 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80207de:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 80207e2:	fa0f f28e 	sxth.w	r2, lr
 80207e6:	e9cd 1003 	strd	r1, r0, [sp, #12]
 80207ea:	9200      	str	r2, [sp, #0]
 80207ec:	b21b      	sxth	r3, r3
 80207ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80207f0:	4639      	mov	r1, r7
 80207f2:	9819      	ldr	r0, [sp, #100]	; 0x64
 80207f4:	f7ff fc87 	bl	8020106 <_ZNK8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKmssiihh>
 80207f8:	e732      	b.n	8020660 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 80207fa:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80207fc:	1421      	asrs	r1, r4, #16
 80207fe:	f9b3 7008 	ldrsh.w	r7, [r3, #8]
 8020802:	1433      	asrs	r3, r6, #16
 8020804:	fb07 1303 	mla	r3, r7, r3, r1
 8020808:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 802080a:	990f      	ldr	r1, [sp, #60]	; 0x3c
 802080c:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020810:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8020814:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8020818:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802081c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020820:	2a00      	cmp	r2, #0
 8020822:	f000 8108 	beq.w	8020a36 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ca>
 8020826:	684d      	ldr	r5, [r1, #4]
 8020828:	950d      	str	r5, [sp, #52]	; 0x34
 802082a:	0e2d      	lsrs	r5, r5, #24
 802082c:	9514      	str	r5, [sp, #80]	; 0x50
 802082e:	b178      	cbz	r0, 8020850 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8020830:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8020834:	3f01      	subs	r7, #1
 8020836:	00bf      	lsls	r7, r7, #2
 8020838:	3704      	adds	r7, #4
 802083a:	eb01 0e07 	add.w	lr, r1, r7
 802083e:	59c9      	ldr	r1, [r1, r7]
 8020840:	9109      	str	r1, [sp, #36]	; 0x24
 8020842:	0e09      	lsrs	r1, r1, #24
 8020844:	9111      	str	r1, [sp, #68]	; 0x44
 8020846:	f8de 1004 	ldr.w	r1, [lr, #4]
 802084a:	910e      	str	r1, [sp, #56]	; 0x38
 802084c:	0e09      	lsrs	r1, r1, #24
 802084e:	9115      	str	r1, [sp, #84]	; 0x54
 8020850:	b292      	uxth	r2, r2
 8020852:	b280      	uxth	r0, r0
 8020854:	fb02 f900 	mul.w	r9, r2, r0
 8020858:	0112      	lsls	r2, r2, #4
 802085a:	eba2 0e09 	sub.w	lr, r2, r9
 802085e:	f5c2 7180 	rsb	r1, r2, #256	; 0x100
 8020862:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020864:	fa1f fe8e 	uxth.w	lr, lr
 8020868:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 802086c:	fb0e f202 	mul.w	r2, lr, r2
 8020870:	b280      	uxth	r0, r0
 8020872:	1a09      	subs	r1, r1, r0
 8020874:	b289      	uxth	r1, r1
 8020876:	fb01 220c 	mla	r2, r1, ip, r2
 802087a:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802087c:	fb00 2205 	mla	r2, r0, r5, r2
 8020880:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8020882:	fb09 2205 	mla	r2, r9, r5, r2
 8020886:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802088a:	2a00      	cmp	r2, #0
 802088c:	f000 80ca 	beq.w	8020a24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8020890:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8020894:	d019      	beq.n	80208ca <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x55e>
 8020896:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802089a:	fb0c fa0a 	mul.w	sl, ip, sl
 802089e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80208a2:	fb0c fc03 	mul.w	ip, ip, r3
 80208a6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80208aa:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80208ae:	f10a 1a01 	add.w	sl, sl, #65537	; 0x10001
 80208b2:	f50c 7780 	add.w	r7, ip, #256	; 0x100
 80208b6:	4453      	add	r3, sl
 80208b8:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80208bc:	0a1b      	lsrs	r3, r3, #8
 80208be:	0a3f      	lsrs	r7, r7, #8
 80208c0:	f003 13ff 	and.w	r3, r3, #16711935	; 0xff00ff
 80208c4:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 80208c8:	433b      	orrs	r3, r7
 80208ca:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80208cc:	2dff      	cmp	r5, #255	; 0xff
 80208ce:	d020      	beq.n	8020912 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a6>
 80208d0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80208d2:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80208d6:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80208d8:	436f      	muls	r7, r5
 80208da:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80208dc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80208e0:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 80208e4:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80208e6:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 80208ea:	fb05 fa0a 	mul.w	sl, r5, sl
 80208ee:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 80208f2:	44bc      	add	ip, r7
 80208f4:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 80208f8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80208fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020900:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020904:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020908:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802090c:	ea4c 050a 	orr.w	r5, ip, sl
 8020910:	950d      	str	r5, [sp, #52]	; 0x34
 8020912:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020914:	2dff      	cmp	r5, #255	; 0xff
 8020916:	d020      	beq.n	802095a <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5ee>
 8020918:	9d09      	ldr	r5, [sp, #36]	; 0x24
 802091a:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 802091e:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8020920:	436f      	muls	r7, r5
 8020922:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8020924:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 8020928:	9d11      	ldr	r5, [sp, #68]	; 0x44
 802092a:	fb05 fa0c 	mul.w	sl, r5, ip
 802092e:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020932:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020936:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802093a:	44bc      	add	ip, r7
 802093c:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020940:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020944:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020948:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802094c:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020950:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 8020954:	ea4c 050a 	orr.w	r5, ip, sl
 8020958:	9509      	str	r5, [sp, #36]	; 0x24
 802095a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 802095c:	2dff      	cmp	r5, #255	; 0xff
 802095e:	d020      	beq.n	80209a2 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x636>
 8020960:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8020962:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 8020966:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8020968:	436f      	muls	r7, r5
 802096a:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 802096c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020970:	f405 4a7f 	and.w	sl, r5, #65280	; 0xff00
 8020974:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8020976:	f107 1701 	add.w	r7, r7, #65537	; 0x10001
 802097a:	fb05 fa0a 	mul.w	sl, r5, sl
 802097e:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020982:	44bc      	add	ip, r7
 8020984:	f50a 7780 	add.w	r7, sl, #256	; 0x100
 8020988:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802098c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020990:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020994:	f00c 1cff 	and.w	ip, ip, #16711935	; 0xff00ff
 8020998:	f40a 4a7f 	and.w	sl, sl, #65280	; 0xff00
 802099c:	ea4c 050a 	orr.w	r5, ip, sl
 80209a0:	950e      	str	r5, [sp, #56]	; 0x38
 80209a2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80209a4:	f003 1cff 	and.w	ip, r3, #16711935	; 0xff00ff
 80209a8:	f005 17ff 	and.w	r7, r5, #16711935	; 0xff00ff
 80209ac:	fb0e f707 	mul.w	r7, lr, r7
 80209b0:	fb01 770c 	mla	r7, r1, ip, r7
 80209b4:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80209b6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80209ba:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80209be:	fb00 770c 	mla	r7, r0, ip, r7
 80209c2:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 80209c4:	2aff      	cmp	r2, #255	; 0xff
 80209c6:	f005 1cff 	and.w	ip, r5, #16711935	; 0xff00ff
 80209ca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80209cc:	fb09 770c 	mla	r7, r9, ip, r7
 80209d0:	f405 4c7f 	and.w	ip, r5, #65280	; 0xff00
 80209d4:	fb0e fe0c 	mul.w	lr, lr, ip
 80209d8:	fb01 e303 	mla	r3, r1, r3, lr
 80209dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80209de:	ea4f 2717 	mov.w	r7, r7, lsr #8
 80209e2:	f401 4a7f 	and.w	sl, r1, #65280	; 0xff00
 80209e6:	fb00 330a 	mla	r3, r0, sl, r3
 80209ea:	990e      	ldr	r1, [sp, #56]	; 0x38
 80209ec:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 80209f0:	f401 4c7f 	and.w	ip, r1, #65280	; 0xff00
 80209f4:	fb09 3c0c 	mla	ip, r9, ip, r3
 80209f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80209fc:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8020a00:	ea47 070c 	orr.w	r7, r7, ip
 8020a04:	ea4f 2317 	mov.w	r3, r7, lsr #8
 8020a08:	d11e      	bne.n	8020a48 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6dc>
 8020a0a:	097a      	lsrs	r2, r7, #5
 8020a0c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8020a10:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020a14:	f023 0307 	bic.w	r3, r3, #7
 8020a18:	4313      	orrs	r3, r2
 8020a1a:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8020a1e:	431f      	orrs	r7, r3
 8020a20:	f8a8 7000 	strh.w	r7, [r8]
 8020a24:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8020a26:	f108 0802 	add.w	r8, r8, #2
 8020a2a:	441c      	add	r4, r3
 8020a2c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020a2e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020a32:	441e      	add	r6, r3
 8020a34:	e643      	b.n	80206be <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x352>
 8020a36:	2800      	cmp	r0, #0
 8020a38:	f43f af0a 	beq.w	8020850 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8020a3c:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8020a40:	9109      	str	r1, [sp, #36]	; 0x24
 8020a42:	0e09      	lsrs	r1, r1, #24
 8020a44:	9111      	str	r1, [sp, #68]	; 0x44
 8020a46:	e703      	b.n	8020850 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e4>
 8020a48:	43d2      	mvns	r2, r2
 8020a4a:	f8b8 1000 	ldrh.w	r1, [r8]
 8020a4e:	fa5f fe82 	uxtb.w	lr, r2
 8020a52:	ea4f 2c21 	mov.w	ip, r1, asr #8
 8020a56:	f00c 0cf8 	and.w	ip, ip, #248	; 0xf8
 8020a5a:	fb0c fc0e 	mul.w	ip, ip, lr
 8020a5e:	10c8      	asrs	r0, r1, #3
 8020a60:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020a64:	fb00 f00e 	mul.w	r0, r0, lr
 8020a68:	00ca      	lsls	r2, r1, #3
 8020a6a:	f10c 0101 	add.w	r1, ip, #1
 8020a6e:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8020a72:	b2d2      	uxtb	r2, r2
 8020a74:	0c39      	lsrs	r1, r7, #16
 8020a76:	fb02 f20e 	mul.w	r2, r2, lr
 8020a7a:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8020a7e:	490f      	ldr	r1, [pc, #60]	; (8020abc <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x750>)
 8020a80:	fa5f fc8c 	uxtb.w	ip, ip
 8020a84:	ea01 2c0c 	and.w	ip, r1, ip, lsl #8
 8020a88:	1c41      	adds	r1, r0, #1
 8020a8a:	eb01 2010 	add.w	r0, r1, r0, lsr #8
 8020a8e:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020a92:	1c51      	adds	r1, r2, #1
 8020a94:	00c0      	lsls	r0, r0, #3
 8020a96:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8020a9a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020a9e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8020aa2:	ea4c 0c00 	orr.w	ip, ip, r0
 8020aa6:	f3c7 07c4 	ubfx	r7, r7, #3, #5
 8020aaa:	ea47 0c0c 	orr.w	ip, r7, ip
 8020aae:	f8a8 c000 	strh.w	ip, [r8]
 8020ab2:	e7b7      	b.n	8020a24 <_ZN8touchgfx8LCD16bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 8020ab4:	b01b      	add	sp, #108	; 0x6c
 8020ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020aba:	bf00      	nop
 8020abc:	fffff800 	.word	0xfffff800

08020ac0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>:
 8020ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020ac4:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 8020ac8:	2d00      	cmp	r5, #0
 8020aca:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 8020ace:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 8020ad2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8020ad6:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8020ada:	fb05 0e03 	mla	lr, r5, r3, r0
 8020ade:	f2c0 808c 	blt.w	8020bfa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8020ae2:	45a9      	cmp	r9, r5
 8020ae4:	f340 8089 	ble.w	8020bfa <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x13a>
 8020ae8:	2800      	cmp	r0, #0
 8020aea:	f2c0 8084 	blt.w	8020bf6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8020aee:	4580      	cmp	r8, r0
 8020af0:	f340 8081 	ble.w	8020bf6 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x136>
 8020af4:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8020af8:	5d16      	ldrb	r6, [r2, r4]
 8020afa:	f01e 0f01 	tst.w	lr, #1
 8020afe:	bf0c      	ite	eq
 8020b00:	f006 060f 	andeq.w	r6, r6, #15
 8020b04:	1136      	asrne	r6, r6, #4
 8020b06:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8020b0a:	b2f6      	uxtb	r6, r6
 8020b0c:	1c44      	adds	r4, r0, #1
 8020b0e:	d477      	bmi.n	8020c00 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8020b10:	45a0      	cmp	r8, r4
 8020b12:	dd75      	ble.n	8020c00 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x140>
 8020b14:	2f00      	cmp	r7, #0
 8020b16:	d075      	beq.n	8020c04 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x144>
 8020b18:	f10e 0a01 	add.w	sl, lr, #1
 8020b1c:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8020b20:	5d14      	ldrb	r4, [r2, r4]
 8020b22:	f01a 0f01 	tst.w	sl, #1
 8020b26:	bf0c      	ite	eq
 8020b28:	f004 040f 	andeq.w	r4, r4, #15
 8020b2c:	1124      	asrne	r4, r4, #4
 8020b2e:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8020b32:	b2e4      	uxtb	r4, r4
 8020b34:	3501      	adds	r5, #1
 8020b36:	d469      	bmi.n	8020c0c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8020b38:	45a9      	cmp	r9, r5
 8020b3a:	dd67      	ble.n	8020c0c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x14c>
 8020b3c:	f1bc 0f00 	cmp.w	ip, #0
 8020b40:	d067      	beq.n	8020c12 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x152>
 8020b42:	2800      	cmp	r0, #0
 8020b44:	db60      	blt.n	8020c08 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8020b46:	4580      	cmp	r8, r0
 8020b48:	dd5e      	ble.n	8020c08 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x148>
 8020b4a:	eb03 090e 	add.w	r9, r3, lr
 8020b4e:	ea4f 0559 	mov.w	r5, r9, lsr #1
 8020b52:	5d55      	ldrb	r5, [r2, r5]
 8020b54:	f019 0f01 	tst.w	r9, #1
 8020b58:	bf0c      	ite	eq
 8020b5a:	f005 050f 	andeq.w	r5, r5, #15
 8020b5e:	112d      	asrne	r5, r5, #4
 8020b60:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8020b64:	b2ed      	uxtb	r5, r5
 8020b66:	3001      	adds	r0, #1
 8020b68:	d456      	bmi.n	8020c18 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8020b6a:	4580      	cmp	r8, r0
 8020b6c:	dd54      	ble.n	8020c18 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x158>
 8020b6e:	2f00      	cmp	r7, #0
 8020b70:	d054      	beq.n	8020c1c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x15c>
 8020b72:	3301      	adds	r3, #1
 8020b74:	449e      	add	lr, r3
 8020b76:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8020b7a:	5cd0      	ldrb	r0, [r2, r3]
 8020b7c:	f01e 0f01 	tst.w	lr, #1
 8020b80:	bf0c      	ite	eq
 8020b82:	f000 000f 	andeq.w	r0, r0, #15
 8020b86:	1100      	asrne	r0, r0, #4
 8020b88:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020b8c:	b2c3      	uxtb	r3, r0
 8020b8e:	b2ba      	uxth	r2, r7
 8020b90:	fa1f fc8c 	uxth.w	ip, ip
 8020b94:	fb02 f00c 	mul.w	r0, r2, ip
 8020b98:	0112      	lsls	r2, r2, #4
 8020b9a:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 8020b9e:	1a12      	subs	r2, r2, r0
 8020ba0:	b292      	uxth	r2, r2
 8020ba2:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 8020ba6:	4362      	muls	r2, r4
 8020ba8:	fa1f fc8c 	uxth.w	ip, ip
 8020bac:	eba7 070c 	sub.w	r7, r7, ip
 8020bb0:	b2bf      	uxth	r7, r7
 8020bb2:	fb06 2207 	mla	r2, r6, r7, r2
 8020bb6:	fb0c 2505 	mla	r5, ip, r5, r2
 8020bba:	fb00 5303 	mla	r3, r0, r3, r5
 8020bbe:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020bc2:	b1b3      	cbz	r3, 8020bf2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8020bc4:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8020bc8:	435a      	muls	r2, r3
 8020bca:	1c53      	adds	r3, r2, #1
 8020bcc:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020bd0:	4a2d      	ldr	r2, [pc, #180]	; (8020c88 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1c8>)
 8020bd2:	121b      	asrs	r3, r3, #8
 8020bd4:	6812      	ldr	r2, [r2, #0]
 8020bd6:	2bff      	cmp	r3, #255	; 0xff
 8020bd8:	ea4f 2612 	mov.w	r6, r2, lsr #8
 8020bdc:	d120      	bne.n	8020c20 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x160>
 8020bde:	4b2b      	ldr	r3, [pc, #172]	; (8020c8c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x1cc>)
 8020be0:	0950      	lsrs	r0, r2, #5
 8020be2:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020be6:	4033      	ands	r3, r6
 8020be8:	4318      	orrs	r0, r3
 8020bea:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020bee:	4302      	orrs	r2, r0
 8020bf0:	800a      	strh	r2, [r1, #0]
 8020bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020bf6:	2600      	movs	r6, #0
 8020bf8:	e788      	b.n	8020b0c <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x4c>
 8020bfa:	2400      	movs	r4, #0
 8020bfc:	4626      	mov	r6, r4
 8020bfe:	e799      	b.n	8020b34 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8020c00:	2400      	movs	r4, #0
 8020c02:	e797      	b.n	8020b34 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8020c04:	463c      	mov	r4, r7
 8020c06:	e795      	b.n	8020b34 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x74>
 8020c08:	2500      	movs	r5, #0
 8020c0a:	e7ac      	b.n	8020b66 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xa6>
 8020c0c:	2300      	movs	r3, #0
 8020c0e:	461d      	mov	r5, r3
 8020c10:	e7bd      	b.n	8020b8e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8020c12:	4663      	mov	r3, ip
 8020c14:	4665      	mov	r5, ip
 8020c16:	e7ba      	b.n	8020b8e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8020c18:	2300      	movs	r3, #0
 8020c1a:	e7b8      	b.n	8020b8e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8020c1c:	463b      	mov	r3, r7
 8020c1e:	e7b6      	b.n	8020b8e <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0xce>
 8020c20:	b29f      	uxth	r7, r3
 8020c22:	43db      	mvns	r3, r3
 8020c24:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8020c28:	880d      	ldrh	r5, [r1, #0]
 8020c2a:	fb10 f007 	smulbb	r0, r0, r7
 8020c2e:	b2f6      	uxtb	r6, r6
 8020c30:	b2d2      	uxtb	r2, r2
 8020c32:	122c      	asrs	r4, r5, #8
 8020c34:	fb12 f207 	smulbb	r2, r2, r7
 8020c38:	fb16 f607 	smulbb	r6, r6, r7
 8020c3c:	b2db      	uxtb	r3, r3
 8020c3e:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8020c42:	fb04 0403 	mla	r4, r4, r3, r0
 8020c46:	10e8      	asrs	r0, r5, #3
 8020c48:	00ed      	lsls	r5, r5, #3
 8020c4a:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8020c4e:	b2ed      	uxtb	r5, r5
 8020c50:	fb00 6603 	mla	r6, r0, r3, r6
 8020c54:	fb05 2303 	mla	r3, r5, r3, r2
 8020c58:	b2a4      	uxth	r4, r4
 8020c5a:	b29a      	uxth	r2, r3
 8020c5c:	1c63      	adds	r3, r4, #1
 8020c5e:	b2b0      	uxth	r0, r6
 8020c60:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8020c64:	1c53      	adds	r3, r2, #1
 8020c66:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8020c6a:	1c42      	adds	r2, r0, #1
 8020c6c:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8020c70:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8020c74:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 8020c78:	0940      	lsrs	r0, r0, #5
 8020c7a:	4323      	orrs	r3, r4
 8020c7c:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8020c80:	4303      	orrs	r3, r0
 8020c82:	800b      	strh	r3, [r1, #0]
 8020c84:	e7b5      	b.n	8020bf2 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh+0x132>
 8020c86:	bf00      	nop
 8020c88:	2001fe90 	.word	0x2001fe90
 8020c8c:	00fff800 	.word	0x00fff800

08020c90 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c94:	b097      	sub	sp, #92	; 0x5c
 8020c96:	9214      	str	r2, [sp, #80]	; 0x50
 8020c98:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8020c9a:	9015      	str	r0, [sp, #84]	; 0x54
 8020c9c:	9309      	str	r3, [sp, #36]	; 0x24
 8020c9e:	6850      	ldr	r0, [r2, #4]
 8020ca0:	f89d 30a4 	ldrb.w	r3, [sp, #164]	; 0xa4
 8020ca4:	910d      	str	r1, [sp, #52]	; 0x34
 8020ca6:	930f      	str	r3, [sp, #60]	; 0x3c
 8020ca8:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	; 0x98
 8020cac:	fb00 1303 	mla	r3, r0, r3, r1
 8020cb0:	e9dd 4621 	ldrd	r4, r6, [sp, #132]	; 0x84
 8020cb4:	6812      	ldr	r2, [r2, #0]
 8020cb6:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 8020cba:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020cbc:	689b      	ldr	r3, [r3, #8]
 8020cbe:	3301      	adds	r3, #1
 8020cc0:	f023 0301 	bic.w	r3, r3, #1
 8020cc4:	930a      	str	r3, [sp, #40]	; 0x28
 8020cc6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020cc8:	681f      	ldr	r7, [r3, #0]
 8020cca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020ccc:	2b00      	cmp	r3, #0
 8020cce:	dc03      	bgt.n	8020cd8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8020cd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8020cd2:	2b00      	cmp	r3, #0
 8020cd4:	f340 8287 	ble.w	80211e6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8020cd8:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020cda:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020cde:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020ce2:	1e48      	subs	r0, r1, #1
 8020ce4:	f102 3cff 	add.w	ip, r2, #4294967295
 8020ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020cea:	2b00      	cmp	r3, #0
 8020cec:	f340 80c3 	ble.w	8020e76 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8020cf0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8020cf4:	ea4f 4326 	mov.w	r3, r6, asr #16
 8020cf8:	d406      	bmi.n	8020d08 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020cfa:	4586      	cmp	lr, r0
 8020cfc:	da04      	bge.n	8020d08 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020cfe:	2b00      	cmp	r3, #0
 8020d00:	db02      	blt.n	8020d08 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8020d02:	4563      	cmp	r3, ip
 8020d04:	f2c0 80b8 	blt.w	8020e78 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 8020d08:	f11e 0e01 	adds.w	lr, lr, #1
 8020d0c:	f100 80a9 	bmi.w	8020e62 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8020d10:	4571      	cmp	r1, lr
 8020d12:	f2c0 80a6 	blt.w	8020e62 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8020d16:	3301      	adds	r3, #1
 8020d18:	f100 80a3 	bmi.w	8020e62 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8020d1c:	429a      	cmp	r2, r3
 8020d1e:	f2c0 80a0 	blt.w	8020e62 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d2>
 8020d22:	46c8      	mov	r8, r9
 8020d24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020d26:	f9bd a028 	ldrsh.w	sl, [sp, #40]	; 0x28
 8020d2a:	930e      	str	r3, [sp, #56]	; 0x38
 8020d2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020d2e:	2b00      	cmp	r3, #0
 8020d30:	f340 80c2 	ble.w	8020eb8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x228>
 8020d34:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8020d36:	1430      	asrs	r0, r6, #16
 8020d38:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8020d3c:	1423      	asrs	r3, r4, #16
 8020d3e:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8020d42:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8020d46:	f100 814d 	bmi.w	8020fe4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8020d4a:	f10c 3bff 	add.w	fp, ip, #4294967295
 8020d4e:	455b      	cmp	r3, fp
 8020d50:	f280 8148 	bge.w	8020fe4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8020d54:	2800      	cmp	r0, #0
 8020d56:	f2c0 8145 	blt.w	8020fe4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8020d5a:	f10e 3bff 	add.w	fp, lr, #4294967295
 8020d5e:	4558      	cmp	r0, fp
 8020d60:	f280 8140 	bge.w	8020fe4 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x354>
 8020d64:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8020d66:	fb00 3305 	mla	r3, r0, r5, r3
 8020d6a:	0858      	lsrs	r0, r3, #1
 8020d6c:	f817 c000 	ldrb.w	ip, [r7, r0]
 8020d70:	07dd      	lsls	r5, r3, #31
 8020d72:	bf54      	ite	pl
 8020d74:	f00c 0c0f 	andpl.w	ip, ip, #15
 8020d78:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8020d7c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8020d80:	fa5f fc8c 	uxtb.w	ip, ip
 8020d84:	2a00      	cmp	r2, #0
 8020d86:	f000 80db 	beq.w	8020f40 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8020d8a:	1c58      	adds	r0, r3, #1
 8020d8c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8020d90:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8020d94:	07c0      	lsls	r0, r0, #31
 8020d96:	bf54      	ite	pl
 8020d98:	f00e 0e0f 	andpl.w	lr, lr, #15
 8020d9c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8020da0:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8020da4:	fa5f f08e 	uxtb.w	r0, lr
 8020da8:	9010      	str	r0, [sp, #64]	; 0x40
 8020daa:	b1c9      	cbz	r1, 8020de0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8020dac:	4453      	add	r3, sl
 8020dae:	0858      	lsrs	r0, r3, #1
 8020db0:	5c38      	ldrb	r0, [r7, r0]
 8020db2:	07dd      	lsls	r5, r3, #31
 8020db4:	bf54      	ite	pl
 8020db6:	f000 000f 	andpl.w	r0, r0, #15
 8020dba:	1100      	asrmi	r0, r0, #4
 8020dbc:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8020dc0:	3301      	adds	r3, #1
 8020dc2:	b2c0      	uxtb	r0, r0
 8020dc4:	900b      	str	r0, [sp, #44]	; 0x2c
 8020dc6:	0858      	lsrs	r0, r3, #1
 8020dc8:	f817 e000 	ldrb.w	lr, [r7, r0]
 8020dcc:	07dd      	lsls	r5, r3, #31
 8020dce:	bf54      	ite	pl
 8020dd0:	f00e 030f 	andpl.w	r3, lr, #15
 8020dd4:	ea4f 132e 	movmi.w	r3, lr, asr #4
 8020dd8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020ddc:	b2db      	uxtb	r3, r3
 8020dde:	9311      	str	r3, [sp, #68]	; 0x44
 8020de0:	b292      	uxth	r2, r2
 8020de2:	b289      	uxth	r1, r1
 8020de4:	fb02 f301 	mul.w	r3, r2, r1
 8020de8:	0112      	lsls	r2, r2, #4
 8020dea:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 8020dee:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8020df0:	1ad2      	subs	r2, r2, r3
 8020df2:	b292      	uxth	r2, r2
 8020df4:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8020df8:	436a      	muls	r2, r5
 8020dfa:	b289      	uxth	r1, r1
 8020dfc:	1a40      	subs	r0, r0, r1
 8020dfe:	b280      	uxth	r0, r0
 8020e00:	fb0c 2c00 	mla	ip, ip, r0, r2
 8020e04:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8020e06:	fb01 c102 	mla	r1, r1, r2, ip
 8020e0a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8020e0c:	fb03 1302 	mla	r3, r3, r2, r1
 8020e10:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020e14:	b1db      	cbz	r3, 8020e4e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8020e16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020e18:	4353      	muls	r3, r2
 8020e1a:	1c5a      	adds	r2, r3, #1
 8020e1c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020e20:	4ac6      	ldr	r2, [pc, #792]	; (802113c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 8020e22:	121b      	asrs	r3, r3, #8
 8020e24:	6812      	ldr	r2, [r2, #0]
 8020e26:	2bff      	cmp	r3, #255	; 0xff
 8020e28:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8020e2c:	f040 8099 	bne.w	8020f62 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d2>
 8020e30:	0953      	lsrs	r3, r2, #5
 8020e32:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8020e36:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020e3a:	f02c 0c07 	bic.w	ip, ip, #7
 8020e3e:	ea43 0c0c 	orr.w	ip, r3, ip
 8020e42:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8020e46:	ea4c 0202 	orr.w	r2, ip, r2
 8020e4a:	f8a8 2000 	strh.w	r2, [r8]
 8020e4e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020e50:	f108 0802 	add.w	r8, r8, #2
 8020e54:	441c      	add	r4, r3
 8020e56:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020e58:	441e      	add	r6, r3
 8020e5a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020e5c:	3b01      	subs	r3, #1
 8020e5e:	930e      	str	r3, [sp, #56]	; 0x38
 8020e60:	e764      	b.n	8020d2c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9c>
 8020e62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8020e64:	f109 0902 	add.w	r9, r9, #2
 8020e68:	441c      	add	r4, r3
 8020e6a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8020e6c:	441e      	add	r6, r3
 8020e6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e70:	3b01      	subs	r3, #1
 8020e72:	9309      	str	r3, [sp, #36]	; 0x24
 8020e74:	e738      	b.n	8020ce8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 8020e76:	d024      	beq.n	8020ec2 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8020e78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020e7a:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8020e7c:	3b01      	subs	r3, #1
 8020e7e:	fb00 4003 	mla	r0, r0, r3, r4
 8020e82:	1400      	asrs	r0, r0, #16
 8020e84:	f53f af4d 	bmi.w	8020d22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020e88:	3901      	subs	r1, #1
 8020e8a:	4288      	cmp	r0, r1
 8020e8c:	f6bf af49 	bge.w	8020d22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020e90:	9924      	ldr	r1, [sp, #144]	; 0x90
 8020e92:	fb01 6303 	mla	r3, r1, r3, r6
 8020e96:	141b      	asrs	r3, r3, #16
 8020e98:	f53f af43 	bmi.w	8020d22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020e9c:	3a01      	subs	r2, #1
 8020e9e:	4293      	cmp	r3, r2
 8020ea0:	f6bf af3f 	bge.w	8020d22 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8020ea4:	46c8      	mov	r8, r9
 8020ea6:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8020eaa:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 8020eae:	930e      	str	r3, [sp, #56]	; 0x38
 8020eb0:	f1bb 0f00 	cmp.w	fp, #0
 8020eb4:	f300 80b7 	bgt.w	8021026 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x396>
 8020eb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020eba:	ea23 75e3 	bic.w	r5, r3, r3, asr #31
 8020ebe:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 8020ec2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020ec4:	2b00      	cmp	r3, #0
 8020ec6:	f340 818e 	ble.w	80211e6 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 8020eca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8020ece:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020ed2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8020ed6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020eda:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020ede:	eef0 6a62 	vmov.f32	s13, s5
 8020ee2:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020ee6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020eea:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020eee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020ef2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020ef6:	ee16 4a90 	vmov	r4, s13
 8020efa:	eef0 6a43 	vmov.f32	s13, s6
 8020efe:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8020f02:	ee12 2a90 	vmov	r2, s5
 8020f06:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020f0a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020f0c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020f10:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f14:	ee13 2a10 	vmov	r2, s6
 8020f18:	9323      	str	r3, [sp, #140]	; 0x8c
 8020f1a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020f1c:	ee16 6a90 	vmov	r6, s13
 8020f20:	fb92 f3f3 	sdiv	r3, r2, r3
 8020f24:	9324      	str	r3, [sp, #144]	; 0x90
 8020f26:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020f28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8020f2a:	3b01      	subs	r3, #1
 8020f2c:	930d      	str	r3, [sp, #52]	; 0x34
 8020f2e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8020f30:	bf08      	it	eq
 8020f32:	4613      	moveq	r3, r2
 8020f34:	eeb0 3a67 	vmov.f32	s6, s15
 8020f38:	9309      	str	r3, [sp, #36]	; 0x24
 8020f3a:	eef0 2a47 	vmov.f32	s5, s14
 8020f3e:	e6c4      	b.n	8020cca <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8020f40:	2900      	cmp	r1, #0
 8020f42:	f43f af4d 	beq.w	8020de0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8020f46:	eb0a 0003 	add.w	r0, sl, r3
 8020f4a:	0843      	lsrs	r3, r0, #1
 8020f4c:	5cfb      	ldrb	r3, [r7, r3]
 8020f4e:	07c0      	lsls	r0, r0, #31
 8020f50:	bf54      	ite	pl
 8020f52:	f003 030f 	andpl.w	r3, r3, #15
 8020f56:	111b      	asrmi	r3, r3, #4
 8020f58:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8020f5c:	b2db      	uxtb	r3, r3
 8020f5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8020f60:	e73e      	b.n	8020de0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8020f62:	fa1f fb83 	uxth.w	fp, r3
 8020f66:	43db      	mvns	r3, r3
 8020f68:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8020f6c:	f8b8 e000 	ldrh.w	lr, [r8]
 8020f70:	fb11 f10b 	smulbb	r1, r1, fp
 8020f74:	fa5f fc8c 	uxtb.w	ip, ip
 8020f78:	b2d2      	uxtb	r2, r2
 8020f7a:	ea4f 202e 	mov.w	r0, lr, asr #8
 8020f7e:	fb1c fc0b 	smulbb	ip, ip, fp
 8020f82:	fb12 fb0b 	smulbb	fp, r2, fp
 8020f86:	b2db      	uxtb	r3, r3
 8020f88:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 8020f8c:	fb00 1003 	mla	r0, r0, r3, r1
 8020f90:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8020f94:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 8020f98:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 8020f9c:	fa5f fe8e 	uxtb.w	lr, lr
 8020fa0:	fb01 cc03 	mla	ip, r1, r3, ip
 8020fa4:	fb0e bb03 	mla	fp, lr, r3, fp
 8020fa8:	b280      	uxth	r0, r0
 8020faa:	1c43      	adds	r3, r0, #1
 8020fac:	fa1f fc8c 	uxth.w	ip, ip
 8020fb0:	fa1f fb8b 	uxth.w	fp, fp
 8020fb4:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020fb8:	f400 4378 	and.w	r3, r0, #63488	; 0xf800
 8020fbc:	f10c 0101 	add.w	r1, ip, #1
 8020fc0:	f10b 0001 	add.w	r0, fp, #1
 8020fc4:	eb00 201b 	add.w	r0, r0, fp, lsr #8
 8020fc8:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 8020fcc:	f3c0 20c4 	ubfx	r0, r0, #11, #5
 8020fd0:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 8020fd4:	4318      	orrs	r0, r3
 8020fd6:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 8020fda:	ea40 000c 	orr.w	r0, r0, ip
 8020fde:	f8a8 0000 	strh.w	r0, [r8]
 8020fe2:	e734      	b.n	8020e4e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8020fe4:	f113 0b01 	adds.w	fp, r3, #1
 8020fe8:	f53f af31 	bmi.w	8020e4e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8020fec:	45dc      	cmp	ip, fp
 8020fee:	f6ff af2e 	blt.w	8020e4e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8020ff2:	f110 0b01 	adds.w	fp, r0, #1
 8020ff6:	f53f af2a 	bmi.w	8020e4e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8020ffa:	45de      	cmp	lr, fp
 8020ffc:	f6ff af27 	blt.w	8020e4e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8021000:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8021002:	9302      	str	r3, [sp, #8]
 8021004:	fa0f f38e 	sxth.w	r3, lr
 8021008:	9301      	str	r3, [sp, #4]
 802100a:	fa0f f38c 	sxth.w	r3, ip
 802100e:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8021012:	e9cd 1505 	strd	r1, r5, [sp, #20]
 8021016:	9300      	str	r3, [sp, #0]
 8021018:	463a      	mov	r2, r7
 802101a:	4653      	mov	r3, sl
 802101c:	4641      	mov	r1, r8
 802101e:	9815      	ldr	r0, [sp, #84]	; 0x54
 8021020:	f7ff fd4e 	bl	8020ac0 <_ZNK8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPtPKtsssiihhh>
 8021024:	e713      	b.n	8020e4e <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8021026:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8021028:	1422      	asrs	r2, r4, #16
 802102a:	1433      	asrs	r3, r6, #16
 802102c:	fb05 2303 	mla	r3, r5, r3, r2
 8021030:	085a      	lsrs	r2, r3, #1
 8021032:	5cba      	ldrb	r2, [r7, r2]
 8021034:	07dd      	lsls	r5, r3, #31
 8021036:	bf54      	ite	pl
 8021038:	f002 020f 	andpl.w	r2, r2, #15
 802103c:	1112      	asrmi	r2, r2, #4
 802103e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021042:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8021046:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802104a:	b2d2      	uxtb	r2, r2
 802104c:	2900      	cmp	r1, #0
 802104e:	d077      	beq.n	8021140 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>
 8021050:	f103 0e01 	add.w	lr, r3, #1
 8021054:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 8021058:	f817 c00c 	ldrb.w	ip, [r7, ip]
 802105c:	f01e 0f01 	tst.w	lr, #1
 8021060:	bf0c      	ite	eq
 8021062:	f00c 0c0f 	andeq.w	ip, ip, #15
 8021066:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802106a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802106e:	fa5f f58c 	uxtb.w	r5, ip
 8021072:	9512      	str	r5, [sp, #72]	; 0x48
 8021074:	b300      	cbz	r0, 80210b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8021076:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021078:	442b      	add	r3, r5
 802107a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802107e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021082:	07dd      	lsls	r5, r3, #31
 8021084:	bf54      	ite	pl
 8021086:	f00c 0c0f 	andpl.w	ip, ip, #15
 802108a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802108e:	3301      	adds	r3, #1
 8021090:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021094:	fa5f f58c 	uxtb.w	r5, ip
 8021098:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802109c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 80210a0:	950c      	str	r5, [sp, #48]	; 0x30
 80210a2:	07dd      	lsls	r5, r3, #31
 80210a4:	bf54      	ite	pl
 80210a6:	f00c 0c0f 	andpl.w	ip, ip, #15
 80210aa:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 80210ae:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 80210b2:	fa5f f38c 	uxtb.w	r3, ip
 80210b6:	9313      	str	r3, [sp, #76]	; 0x4c
 80210b8:	b289      	uxth	r1, r1
 80210ba:	b280      	uxth	r0, r0
 80210bc:	fb01 f300 	mul.w	r3, r1, r0
 80210c0:	0109      	lsls	r1, r1, #4
 80210c2:	f5c1 7c80 	rsb	ip, r1, #256	; 0x100
 80210c6:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80210c8:	1ac9      	subs	r1, r1, r3
 80210ca:	b289      	uxth	r1, r1
 80210cc:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80210d0:	4369      	muls	r1, r5
 80210d2:	b280      	uxth	r0, r0
 80210d4:	ebac 0c00 	sub.w	ip, ip, r0
 80210d8:	fa1f fc8c 	uxth.w	ip, ip
 80210dc:	fb02 120c 	mla	r2, r2, ip, r1
 80210e0:	990c      	ldr	r1, [sp, #48]	; 0x30
 80210e2:	fb00 2001 	mla	r0, r0, r1, r2
 80210e6:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80210e8:	fb03 0302 	mla	r3, r3, r2, r0
 80210ec:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80210f0:	b1d3      	cbz	r3, 8021128 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 80210f2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80210f4:	4353      	muls	r3, r2
 80210f6:	1c5a      	adds	r2, r3, #1
 80210f8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80210fc:	4a0f      	ldr	r2, [pc, #60]	; (802113c <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ac>)
 80210fe:	121b      	asrs	r3, r3, #8
 8021100:	6812      	ldr	r2, [r2, #0]
 8021102:	2bff      	cmp	r3, #255	; 0xff
 8021104:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8021108:	d12e      	bne.n	8021168 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4d8>
 802110a:	0953      	lsrs	r3, r2, #5
 802110c:	f42c 6cff 	bic.w	ip, ip, #2040	; 0x7f8
 8021110:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021114:	f02c 0c07 	bic.w	ip, ip, #7
 8021118:	ea43 0c0c 	orr.w	ip, r3, ip
 802111c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021120:	ea4c 0202 	orr.w	r2, ip, r2
 8021124:	f8a8 2000 	strh.w	r2, [r8]
 8021128:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 802112a:	f108 0802 	add.w	r8, r8, #2
 802112e:	441c      	add	r4, r3
 8021130:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021132:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021136:	441e      	add	r6, r3
 8021138:	e6ba      	b.n	8020eb0 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 802113a:	bf00      	nop
 802113c:	2001fe90 	.word	0x2001fe90
 8021140:	2800      	cmp	r0, #0
 8021142:	d0b9      	beq.n	80210b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8021144:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8021146:	442b      	add	r3, r5
 8021148:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802114c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8021150:	07db      	lsls	r3, r3, #31
 8021152:	bf54      	ite	pl
 8021154:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021158:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802115c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021160:	fa5f f38c 	uxtb.w	r3, ip
 8021164:	930c      	str	r3, [sp, #48]	; 0x30
 8021166:	e7a7      	b.n	80210b8 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x428>
 8021168:	fa1f fa83 	uxth.w	sl, r3
 802116c:	43db      	mvns	r3, r3
 802116e:	f3c2 4107 	ubfx	r1, r2, #16, #8
 8021172:	f8b8 e000 	ldrh.w	lr, [r8]
 8021176:	fb11 f10a 	smulbb	r1, r1, sl
 802117a:	b2d2      	uxtb	r2, r2
 802117c:	ea4f 202e 	mov.w	r0, lr, asr #8
 8021180:	fb12 f20a 	smulbb	r2, r2, sl
 8021184:	b2db      	uxtb	r3, r3
 8021186:	f000 00f8 	and.w	r0, r0, #248	; 0xf8
 802118a:	fb00 1003 	mla	r0, r0, r3, r1
 802118e:	fa5f fc8c 	uxtb.w	ip, ip
 8021192:	ea4f 01ee 	mov.w	r1, lr, asr #3
 8021196:	ea4f 0ece 	mov.w	lr, lr, lsl #3
 802119a:	fb1c fc0a 	smulbb	ip, ip, sl
 802119e:	fa5f fe8e 	uxtb.w	lr, lr
 80211a2:	fb0e 2203 	mla	r2, lr, r3, r2
 80211a6:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
 80211aa:	fb01 cc03 	mla	ip, r1, r3, ip
 80211ae:	b280      	uxth	r0, r0
 80211b0:	b292      	uxth	r2, r2
 80211b2:	1c43      	adds	r3, r0, #1
 80211b4:	1c51      	adds	r1, r2, #1
 80211b6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 80211ba:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 80211be:	fa1f fc8c 	uxth.w	ip, ip
 80211c2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80211c6:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 80211ca:	4308      	orrs	r0, r1
 80211cc:	f10c 0101 	add.w	r1, ip, #1
 80211d0:	eb01 2c1c 	add.w	ip, r1, ip, lsr #8
 80211d4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 80211d8:	f40c 6cfc 	and.w	ip, ip, #2016	; 0x7e0
 80211dc:	ea40 000c 	orr.w	r0, r0, ip
 80211e0:	f8a8 0000 	strh.w	r0, [r8]
 80211e4:	e7a0      	b.n	8021128 <_ZN8touchgfx8LCD16bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x498>
 80211e6:	b017      	add	sp, #92	; 0x5c
 80211e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080211ec <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>:
 80211ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80211f0:	e9dd 050a 	ldrd	r0, r5, [sp, #40]	; 0x28
 80211f4:	2d00      	cmp	r5, #0
 80211f6:	f9bd 8020 	ldrsh.w	r8, [sp, #32]
 80211fa:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	; 0x24
 80211fe:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 8021202:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
 8021206:	fb05 0e03 	mla	lr, r5, r3, r0
 802120a:	f2c0 80b0 	blt.w	802136e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 802120e:	45a9      	cmp	r9, r5
 8021210:	f340 80ad 	ble.w	802136e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x182>
 8021214:	2800      	cmp	r0, #0
 8021216:	f2c0 80a8 	blt.w	802136a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 802121a:	4580      	cmp	r8, r0
 802121c:	f340 80a5 	ble.w	802136a <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17e>
 8021220:	ea4f 045e 	mov.w	r4, lr, lsr #1
 8021224:	5d16      	ldrb	r6, [r2, r4]
 8021226:	f01e 0f01 	tst.w	lr, #1
 802122a:	bf0c      	ite	eq
 802122c:	f006 060f 	andeq.w	r6, r6, #15
 8021230:	1136      	asrne	r6, r6, #4
 8021232:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8021236:	b2f6      	uxtb	r6, r6
 8021238:	1c44      	adds	r4, r0, #1
 802123a:	f100 809b 	bmi.w	8021374 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 802123e:	45a0      	cmp	r8, r4
 8021240:	f340 8098 	ble.w	8021374 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x188>
 8021244:	2f00      	cmp	r7, #0
 8021246:	f000 8097 	beq.w	8021378 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x18c>
 802124a:	f10e 0a01 	add.w	sl, lr, #1
 802124e:	ea4f 045a 	mov.w	r4, sl, lsr #1
 8021252:	5d14      	ldrb	r4, [r2, r4]
 8021254:	f01a 0f01 	tst.w	sl, #1
 8021258:	bf0c      	ite	eq
 802125a:	f004 040f 	andeq.w	r4, r4, #15
 802125e:	1124      	asrne	r4, r4, #4
 8021260:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8021264:	b2e4      	uxtb	r4, r4
 8021266:	3501      	adds	r5, #1
 8021268:	f100 808a 	bmi.w	8021380 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 802126c:	45a9      	cmp	r9, r5
 802126e:	f340 8087 	ble.w	8021380 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x194>
 8021272:	f1bc 0f00 	cmp.w	ip, #0
 8021276:	f000 8086 	beq.w	8021386 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x19a>
 802127a:	2800      	cmp	r0, #0
 802127c:	db7e      	blt.n	802137c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 802127e:	4580      	cmp	r8, r0
 8021280:	dd7c      	ble.n	802137c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x190>
 8021282:	eb03 090e 	add.w	r9, r3, lr
 8021286:	ea4f 0559 	mov.w	r5, r9, lsr #1
 802128a:	5d55      	ldrb	r5, [r2, r5]
 802128c:	f019 0f01 	tst.w	r9, #1
 8021290:	bf0c      	ite	eq
 8021292:	f005 050f 	andeq.w	r5, r5, #15
 8021296:	112d      	asrne	r5, r5, #4
 8021298:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802129c:	b2ed      	uxtb	r5, r5
 802129e:	3001      	adds	r0, #1
 80212a0:	d474      	bmi.n	802138c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 80212a2:	4580      	cmp	r8, r0
 80212a4:	dd72      	ble.n	802138c <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a0>
 80212a6:	2f00      	cmp	r7, #0
 80212a8:	d072      	beq.n	8021390 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a4>
 80212aa:	3301      	adds	r3, #1
 80212ac:	449e      	add	lr, r3
 80212ae:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80212b2:	5cd0      	ldrb	r0, [r2, r3]
 80212b4:	f01e 0f01 	tst.w	lr, #1
 80212b8:	bf0c      	ite	eq
 80212ba:	f000 000f 	andeq.w	r0, r0, #15
 80212be:	1100      	asrne	r0, r0, #4
 80212c0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80212c4:	b2c3      	uxtb	r3, r0
 80212c6:	b2ba      	uxth	r2, r7
 80212c8:	fa1f fc8c 	uxth.w	ip, ip
 80212cc:	fb02 f00c 	mul.w	r0, r2, ip
 80212d0:	0112      	lsls	r2, r2, #4
 80212d2:	f5c2 7780 	rsb	r7, r2, #256	; 0x100
 80212d6:	1a12      	subs	r2, r2, r0
 80212d8:	b292      	uxth	r2, r2
 80212da:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80212de:	4362      	muls	r2, r4
 80212e0:	fa1f fc8c 	uxth.w	ip, ip
 80212e4:	eba7 070c 	sub.w	r7, r7, ip
 80212e8:	b2bf      	uxth	r7, r7
 80212ea:	fb06 2207 	mla	r2, r6, r7, r2
 80212ee:	fb0c 2505 	mla	r5, ip, r5, r2
 80212f2:	fb00 5303 	mla	r3, r0, r3, r5
 80212f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80212fa:	b3a3      	cbz	r3, 8021366 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x17a>
 80212fc:	4a25      	ldr	r2, [pc, #148]	; (8021394 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x1a8>)
 80212fe:	880e      	ldrh	r6, [r1, #0]
 8021300:	6815      	ldr	r5, [r2, #0]
 8021302:	b29a      	uxth	r2, r3
 8021304:	43db      	mvns	r3, r3
 8021306:	f3c5 4007 	ubfx	r0, r5, #16, #8
 802130a:	fb10 f002 	smulbb	r0, r0, r2
 802130e:	f3c5 2707 	ubfx	r7, r5, #8, #8
 8021312:	b2ed      	uxtb	r5, r5
 8021314:	1234      	asrs	r4, r6, #8
 8021316:	fb17 f702 	smulbb	r7, r7, r2
 802131a:	fb15 f202 	smulbb	r2, r5, r2
 802131e:	b2db      	uxtb	r3, r3
 8021320:	f004 04f8 	and.w	r4, r4, #248	; 0xf8
 8021324:	fb04 0403 	mla	r4, r4, r3, r0
 8021328:	10f0      	asrs	r0, r6, #3
 802132a:	00f6      	lsls	r6, r6, #3
 802132c:	f000 00fc 	and.w	r0, r0, #252	; 0xfc
 8021330:	b2f6      	uxtb	r6, r6
 8021332:	fb00 7003 	mla	r0, r0, r3, r7
 8021336:	fb06 2303 	mla	r3, r6, r3, r2
 802133a:	b2a4      	uxth	r4, r4
 802133c:	b29a      	uxth	r2, r3
 802133e:	1c63      	adds	r3, r4, #1
 8021340:	b280      	uxth	r0, r0
 8021342:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8021346:	1c53      	adds	r3, r2, #1
 8021348:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 802134c:	1c42      	adds	r2, r0, #1
 802134e:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8021352:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8021356:	f3c3 23c4 	ubfx	r3, r3, #11, #5
 802135a:	0940      	lsrs	r0, r0, #5
 802135c:	4323      	orrs	r3, r4
 802135e:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021362:	4303      	orrs	r3, r0
 8021364:	800b      	strh	r3, [r1, #0]
 8021366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802136a:	2600      	movs	r6, #0
 802136c:	e764      	b.n	8021238 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x4c>
 802136e:	2400      	movs	r4, #0
 8021370:	4626      	mov	r6, r4
 8021372:	e778      	b.n	8021266 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8021374:	2400      	movs	r4, #0
 8021376:	e776      	b.n	8021266 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 8021378:	463c      	mov	r4, r7
 802137a:	e774      	b.n	8021266 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0x7a>
 802137c:	2500      	movs	r5, #0
 802137e:	e78e      	b.n	802129e <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xb2>
 8021380:	2300      	movs	r3, #0
 8021382:	461d      	mov	r5, r3
 8021384:	e79f      	b.n	80212c6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8021386:	4663      	mov	r3, ip
 8021388:	4665      	mov	r5, ip
 802138a:	e79c      	b.n	80212c6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 802138c:	2300      	movs	r3, #0
 802138e:	e79a      	b.n	80212c6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8021390:	463b      	mov	r3, r7
 8021392:	e798      	b.n	80212c6 <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh+0xda>
 8021394:	2001fe90 	.word	0x2001fe90

08021398 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802139c:	b093      	sub	sp, #76	; 0x4c
 802139e:	920c      	str	r2, [sp, #48]	; 0x30
 80213a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80213a2:	9011      	str	r0, [sp, #68]	; 0x44
 80213a4:	6850      	ldr	r0, [r2, #4]
 80213a6:	9107      	str	r1, [sp, #28]
 80213a8:	461d      	mov	r5, r3
 80213aa:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	; 0x88
 80213ae:	e9dd 461d 	ldrd	r4, r6, [sp, #116]	; 0x74
 80213b2:	fb00 1303 	mla	r3, r0, r3, r1
 80213b6:	6812      	ldr	r2, [r2, #0]
 80213b8:	eb02 0943 	add.w	r9, r2, r3, lsl #1
 80213bc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80213be:	689b      	ldr	r3, [r3, #8]
 80213c0:	3301      	adds	r3, #1
 80213c2:	f023 0301 	bic.w	r3, r3, #1
 80213c6:	9306      	str	r3, [sp, #24]
 80213c8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80213ca:	681f      	ldr	r7, [r3, #0]
 80213cc:	9b07      	ldr	r3, [sp, #28]
 80213ce:	2b00      	cmp	r3, #0
 80213d0:	dc03      	bgt.n	80213da <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80213d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80213d4:	2b00      	cmp	r3, #0
 80213d6:	f340 8265 	ble.w	80218a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 80213da:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80213dc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80213e0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80213e4:	1e48      	subs	r0, r1, #1
 80213e6:	f102 3cff 	add.w	ip, r2, #4294967295
 80213ea:	2d00      	cmp	r5, #0
 80213ec:	f340 80b7 	ble.w	802155e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 80213f0:	ea5f 4e24 	movs.w	lr, r4, asr #16
 80213f4:	ea4f 4326 	mov.w	r3, r6, asr #16
 80213f8:	d406      	bmi.n	8021408 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80213fa:	4586      	cmp	lr, r0
 80213fc:	da04      	bge.n	8021408 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80213fe:	2b00      	cmp	r3, #0
 8021400:	db02      	blt.n	8021408 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8021402:	4563      	cmp	r3, ip
 8021404:	f2c0 80ac 	blt.w	8021560 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8021408:	f11e 0e01 	adds.w	lr, lr, #1
 802140c:	f100 809f 	bmi.w	802154e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8021410:	4571      	cmp	r1, lr
 8021412:	f2c0 809c 	blt.w	802154e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8021416:	3301      	adds	r3, #1
 8021418:	f100 8099 	bmi.w	802154e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 802141c:	429a      	cmp	r2, r3
 802141e:	f2c0 8096 	blt.w	802154e <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8021422:	46c8      	mov	r8, r9
 8021424:	f9bd a018 	ldrsh.w	sl, [sp, #24]
 8021428:	9509      	str	r5, [sp, #36]	; 0x24
 802142a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802142c:	2b00      	cmp	r3, #0
 802142e:	f340 80b5 	ble.w	802159c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x204>
 8021432:	f3c4 3303 	ubfx	r3, r4, #12, #4
 8021436:	9308      	str	r3, [sp, #32]
 8021438:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802143a:	1430      	asrs	r0, r6, #16
 802143c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8021440:	1423      	asrs	r3, r4, #16
 8021442:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8021446:	f100 813e 	bmi.w	80216c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802144a:	f10c 3bff 	add.w	fp, ip, #4294967295
 802144e:	455b      	cmp	r3, fp
 8021450:	f280 8139 	bge.w	80216c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8021454:	2800      	cmp	r0, #0
 8021456:	f2c0 8136 	blt.w	80216c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 802145a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802145e:	4558      	cmp	r0, fp
 8021460:	f280 8131 	bge.w	80216c6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32e>
 8021464:	9a06      	ldr	r2, [sp, #24]
 8021466:	fb00 3302 	mla	r3, r0, r2, r3
 802146a:	0858      	lsrs	r0, r3, #1
 802146c:	f817 c000 	ldrb.w	ip, [r7, r0]
 8021470:	07da      	lsls	r2, r3, #31
 8021472:	bf54      	ite	pl
 8021474:	f00c 0c0f 	andpl.w	ip, ip, #15
 8021478:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802147c:	9a08      	ldr	r2, [sp, #32]
 802147e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8021482:	fa5f fc8c 	uxtb.w	ip, ip
 8021486:	2a00      	cmp	r2, #0
 8021488:	f000 80cb 	beq.w	8021622 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 802148c:	1c58      	adds	r0, r3, #1
 802148e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8021492:	f817 e00e 	ldrb.w	lr, [r7, lr]
 8021496:	07c0      	lsls	r0, r0, #31
 8021498:	bf54      	ite	pl
 802149a:	f00e 0e0f 	andpl.w	lr, lr, #15
 802149e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80214a2:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80214a6:	fa5f fe8e 	uxtb.w	lr, lr
 80214aa:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80214ae:	b1b9      	cbz	r1, 80214e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 80214b0:	4453      	add	r3, sl
 80214b2:	0858      	lsrs	r0, r3, #1
 80214b4:	5c38      	ldrb	r0, [r7, r0]
 80214b6:	07da      	lsls	r2, r3, #31
 80214b8:	bf54      	ite	pl
 80214ba:	f000 000f 	andpl.w	r0, r0, #15
 80214be:	1100      	asrmi	r0, r0, #4
 80214c0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80214c4:	b2c0      	uxtb	r0, r0
 80214c6:	900a      	str	r0, [sp, #40]	; 0x28
 80214c8:	1c58      	adds	r0, r3, #1
 80214ca:	0843      	lsrs	r3, r0, #1
 80214cc:	5cfb      	ldrb	r3, [r7, r3]
 80214ce:	07c2      	lsls	r2, r0, #31
 80214d0:	bf54      	ite	pl
 80214d2:	f003 030f 	andpl.w	r3, r3, #15
 80214d6:	111b      	asrmi	r3, r3, #4
 80214d8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80214dc:	b2db      	uxtb	r3, r3
 80214de:	930e      	str	r3, [sp, #56]	; 0x38
 80214e0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80214e4:	b289      	uxth	r1, r1
 80214e6:	fb02 f301 	mul.w	r3, r2, r1
 80214ea:	0112      	lsls	r2, r2, #4
 80214ec:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 80214f0:	b289      	uxth	r1, r1
 80214f2:	f5c2 7080 	rsb	r0, r2, #256	; 0x100
 80214f6:	1a40      	subs	r0, r0, r1
 80214f8:	fa1f fe80 	uxth.w	lr, r0
 80214fc:	1ad2      	subs	r2, r2, r3
 80214fe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8021500:	b292      	uxth	r2, r2
 8021502:	4342      	muls	r2, r0
 8021504:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8021508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 802150a:	fb01 c102 	mla	r1, r1, r2, ip
 802150e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8021510:	fb03 1302 	mla	r3, r3, r2, r1
 8021514:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021518:	2bff      	cmp	r3, #255	; 0xff
 802151a:	f040 8093 	bne.w	8021644 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 802151e:	4bbe      	ldr	r3, [pc, #760]	; (8021818 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 8021520:	681a      	ldr	r2, [r3, #0]
 8021522:	4bbe      	ldr	r3, [pc, #760]	; (802181c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 8021524:	0951      	lsrs	r1, r2, #5
 8021526:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 802152a:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802152e:	430b      	orrs	r3, r1
 8021530:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 8021534:	4313      	orrs	r3, r2
 8021536:	f8a8 3000 	strh.w	r3, [r8]
 802153a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 802153c:	f108 0802 	add.w	r8, r8, #2
 8021540:	441c      	add	r4, r3
 8021542:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021544:	441e      	add	r6, r3
 8021546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021548:	3b01      	subs	r3, #1
 802154a:	9309      	str	r3, [sp, #36]	; 0x24
 802154c:	e76d      	b.n	802142a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 802154e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8021550:	3d01      	subs	r5, #1
 8021552:	441c      	add	r4, r3
 8021554:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8021556:	f109 0902 	add.w	r9, r9, #2
 802155a:	441e      	add	r6, r3
 802155c:	e745      	b.n	80213ea <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802155e:	d021      	beq.n	80215a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8021560:	981f      	ldr	r0, [sp, #124]	; 0x7c
 8021562:	1e6b      	subs	r3, r5, #1
 8021564:	fb00 4003 	mla	r0, r0, r3, r4
 8021568:	1400      	asrs	r0, r0, #16
 802156a:	f53f af5a 	bmi.w	8021422 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802156e:	3901      	subs	r1, #1
 8021570:	4288      	cmp	r0, r1
 8021572:	f6bf af56 	bge.w	8021422 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8021576:	9920      	ldr	r1, [sp, #128]	; 0x80
 8021578:	fb01 6303 	mla	r3, r1, r3, r6
 802157c:	141b      	asrs	r3, r3, #16
 802157e:	f53f af50 	bmi.w	8021422 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8021582:	3a01      	subs	r2, #1
 8021584:	4293      	cmp	r3, r2
 8021586:	f6bf af4c 	bge.w	8021422 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 802158a:	46a8      	mov	r8, r5
 802158c:	46ce      	mov	lr, r9
 802158e:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8021592:	9308      	str	r3, [sp, #32]
 8021594:	f1b8 0f00 	cmp.w	r8, #0
 8021598:	f300 80b5 	bgt.w	8021706 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 802159c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 80215a0:	eb09 0945 	add.w	r9, r9, r5, lsl #1
 80215a4:	9b07      	ldr	r3, [sp, #28]
 80215a6:	2b00      	cmp	r3, #0
 80215a8:	f340 817c 	ble.w	80218a4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50c>
 80215ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80215b0:	ee30 0a04 	vadd.f32	s0, s0, s8
 80215b4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80215b8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80215bc:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80215c0:	eef0 6a62 	vmov.f32	s13, s5
 80215c4:	ee31 1a05 	vadd.f32	s2, s2, s10
 80215c8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80215cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80215d0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80215d4:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80215d8:	ee16 4a90 	vmov	r4, s13
 80215dc:	eef0 6a43 	vmov.f32	s13, s6
 80215e0:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80215e4:	ee12 2a90 	vmov	r2, s5
 80215e8:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80215ec:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80215ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80215f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80215f6:	ee13 2a10 	vmov	r2, s6
 80215fa:	931f      	str	r3, [sp, #124]	; 0x7c
 80215fc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80215fe:	ee16 6a90 	vmov	r6, s13
 8021602:	fb92 f3f3 	sdiv	r3, r2, r3
 8021606:	9320      	str	r3, [sp, #128]	; 0x80
 8021608:	9b07      	ldr	r3, [sp, #28]
 802160a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 802160c:	3b01      	subs	r3, #1
 802160e:	9307      	str	r3, [sp, #28]
 8021610:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8021612:	bf0c      	ite	eq
 8021614:	4615      	moveq	r5, r2
 8021616:	461d      	movne	r5, r3
 8021618:	eeb0 3a67 	vmov.f32	s6, s15
 802161c:	eef0 2a47 	vmov.f32	s5, s14
 8021620:	e6d4      	b.n	80213cc <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8021622:	2900      	cmp	r1, #0
 8021624:	f43f af5c 	beq.w	80214e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8021628:	eb0a 0003 	add.w	r0, sl, r3
 802162c:	0843      	lsrs	r3, r0, #1
 802162e:	5cfb      	ldrb	r3, [r7, r3]
 8021630:	07c0      	lsls	r0, r0, #31
 8021632:	bf54      	ite	pl
 8021634:	f003 030f 	andpl.w	r3, r3, #15
 8021638:	111b      	asrmi	r3, r3, #4
 802163a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 802163e:	b2db      	uxtb	r3, r3
 8021640:	930a      	str	r3, [sp, #40]	; 0x28
 8021642:	e74d      	b.n	80214e0 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8021644:	2b00      	cmp	r3, #0
 8021646:	f43f af78 	beq.w	802153a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 802164a:	fa1f fe83 	uxth.w	lr, r3
 802164e:	43db      	mvns	r3, r3
 8021650:	4a71      	ldr	r2, [pc, #452]	; (8021818 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 8021652:	f8b8 c000 	ldrh.w	ip, [r8]
 8021656:	6810      	ldr	r0, [r2, #0]
 8021658:	ea4f 212c 	mov.w	r1, ip, asr #8
 802165c:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8021660:	fb12 f20e 	smulbb	r2, r2, lr
 8021664:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8021668:	b2c0      	uxtb	r0, r0
 802166a:	fb1b fb0e 	smulbb	fp, fp, lr
 802166e:	fb10 fe0e 	smulbb	lr, r0, lr
 8021672:	b2db      	uxtb	r3, r3
 8021674:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 8021678:	fb01 2103 	mla	r1, r1, r3, r2
 802167c:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8021680:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8021684:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 8021688:	fa5f fc8c 	uxtb.w	ip, ip
 802168c:	fb02 b203 	mla	r2, r2, r3, fp
 8021690:	fb0c e303 	mla	r3, ip, r3, lr
 8021694:	b289      	uxth	r1, r1
 8021696:	1c48      	adds	r0, r1, #1
 8021698:	b292      	uxth	r2, r2
 802169a:	b29b      	uxth	r3, r3
 802169c:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80216a0:	f401 4078 	and.w	r0, r1, #63488	; 0xf800
 80216a4:	f102 0b01 	add.w	fp, r2, #1
 80216a8:	1c59      	adds	r1, r3, #1
 80216aa:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 80216ae:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 80216b2:	f3c1 21c4 	ubfx	r1, r1, #11, #5
 80216b6:	0952      	lsrs	r2, r2, #5
 80216b8:	4301      	orrs	r1, r0
 80216ba:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80216be:	4311      	orrs	r1, r2
 80216c0:	f8a8 1000 	strh.w	r1, [r8]
 80216c4:	e739      	b.n	802153a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80216c6:	f113 0b01 	adds.w	fp, r3, #1
 80216ca:	f53f af36 	bmi.w	802153a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80216ce:	45dc      	cmp	ip, fp
 80216d0:	f6ff af33 	blt.w	802153a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80216d4:	f110 0b01 	adds.w	fp, r0, #1
 80216d8:	f53f af2f 	bmi.w	802153a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80216dc:	45de      	cmp	lr, fp
 80216de:	f6ff af2c 	blt.w	802153a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 80216e2:	9a08      	ldr	r2, [sp, #32]
 80216e4:	9302      	str	r3, [sp, #8]
 80216e6:	fa0f f38e 	sxth.w	r3, lr
 80216ea:	9301      	str	r3, [sp, #4]
 80216ec:	fa0f f38c 	sxth.w	r3, ip
 80216f0:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80216f4:	9105      	str	r1, [sp, #20]
 80216f6:	9300      	str	r3, [sp, #0]
 80216f8:	463a      	mov	r2, r7
 80216fa:	4653      	mov	r3, sl
 80216fc:	4641      	mov	r1, r8
 80216fe:	9811      	ldr	r0, [sp, #68]	; 0x44
 8021700:	f7ff fd74 	bl	80211ec <_ZNK8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPtPKtsssiihh>
 8021704:	e719      	b.n	802153a <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a2>
 8021706:	9906      	ldr	r1, [sp, #24]
 8021708:	1422      	asrs	r2, r4, #16
 802170a:	1433      	asrs	r3, r6, #16
 802170c:	fb01 2303 	mla	r3, r1, r3, r2
 8021710:	085a      	lsrs	r2, r3, #1
 8021712:	5cba      	ldrb	r2, [r7, r2]
 8021714:	07d9      	lsls	r1, r3, #31
 8021716:	bf54      	ite	pl
 8021718:	f002 020f 	andpl.w	r2, r2, #15
 802171c:	1112      	asrmi	r2, r2, #4
 802171e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8021722:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8021726:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 802172a:	b2d2      	uxtb	r2, r2
 802172c:	2800      	cmp	r0, #0
 802172e:	d062      	beq.n	80217f6 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8021730:	f103 0a01 	add.w	sl, r3, #1
 8021734:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8021738:	5c79      	ldrb	r1, [r7, r1]
 802173a:	f01a 0f01 	tst.w	sl, #1
 802173e:	bf0c      	ite	eq
 8021740:	f001 010f 	andeq.w	r1, r1, #15
 8021744:	1109      	asrne	r1, r1, #4
 8021746:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802174a:	b2c9      	uxtb	r1, r1
 802174c:	910f      	str	r1, [sp, #60]	; 0x3c
 802174e:	f1bc 0f00 	cmp.w	ip, #0
 8021752:	d019      	beq.n	8021788 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8021754:	9908      	ldr	r1, [sp, #32]
 8021756:	440b      	add	r3, r1
 8021758:	0859      	lsrs	r1, r3, #1
 802175a:	5c79      	ldrb	r1, [r7, r1]
 802175c:	f013 0f01 	tst.w	r3, #1
 8021760:	bf0c      	ite	eq
 8021762:	f001 010f 	andeq.w	r1, r1, #15
 8021766:	1109      	asrne	r1, r1, #4
 8021768:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 802176c:	b2c9      	uxtb	r1, r1
 802176e:	3301      	adds	r3, #1
 8021770:	910b      	str	r1, [sp, #44]	; 0x2c
 8021772:	0859      	lsrs	r1, r3, #1
 8021774:	5c79      	ldrb	r1, [r7, r1]
 8021776:	07db      	lsls	r3, r3, #31
 8021778:	bf54      	ite	pl
 802177a:	f001 010f 	andpl.w	r1, r1, #15
 802177e:	1109      	asrmi	r1, r1, #4
 8021780:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8021784:	b2c9      	uxtb	r1, r1
 8021786:	9110      	str	r1, [sp, #64]	; 0x40
 8021788:	b280      	uxth	r0, r0
 802178a:	fa1f fc8c 	uxth.w	ip, ip
 802178e:	fb00 f30c 	mul.w	r3, r0, ip
 8021792:	0100      	lsls	r0, r0, #4
 8021794:	ebc3 1c0c 	rsb	ip, r3, ip, lsl #4
 8021798:	fa1f fc8c 	uxth.w	ip, ip
 802179c:	f5c0 7180 	rsb	r1, r0, #256	; 0x100
 80217a0:	eba1 010c 	sub.w	r1, r1, ip
 80217a4:	fa1f fa81 	uxth.w	sl, r1
 80217a8:	1ac0      	subs	r0, r0, r3
 80217aa:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80217ac:	b280      	uxth	r0, r0
 80217ae:	4348      	muls	r0, r1
 80217b0:	fb02 020a 	mla	r2, r2, sl, r0
 80217b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80217b6:	fb0c 2c01 	mla	ip, ip, r1, r2
 80217ba:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80217bc:	fb03 c302 	mla	r3, r3, r2, ip
 80217c0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80217c4:	2bff      	cmp	r3, #255	; 0xff
 80217c6:	d12b      	bne.n	8021820 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 80217c8:	4b13      	ldr	r3, [pc, #76]	; (8021818 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x480>)
 80217ca:	681a      	ldr	r2, [r3, #0]
 80217cc:	4b13      	ldr	r3, [pc, #76]	; (802181c <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x484>)
 80217ce:	0951      	lsrs	r1, r2, #5
 80217d0:	ea03 2312 	and.w	r3, r3, r2, lsr #8
 80217d4:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80217d8:	430b      	orrs	r3, r1
 80217da:	f3c2 02c4 	ubfx	r2, r2, #3, #5
 80217de:	4313      	orrs	r3, r2
 80217e0:	f8ae 3000 	strh.w	r3, [lr]
 80217e4:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80217e6:	f10e 0e02 	add.w	lr, lr, #2
 80217ea:	441c      	add	r4, r3
 80217ec:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80217ee:	f108 38ff 	add.w	r8, r8, #4294967295
 80217f2:	441e      	add	r6, r3
 80217f4:	e6ce      	b.n	8021594 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fc>
 80217f6:	f1bc 0f00 	cmp.w	ip, #0
 80217fa:	d0c5      	beq.n	8021788 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 80217fc:	9908      	ldr	r1, [sp, #32]
 80217fe:	440b      	add	r3, r1
 8021800:	0859      	lsrs	r1, r3, #1
 8021802:	5c79      	ldrb	r1, [r7, r1]
 8021804:	07db      	lsls	r3, r3, #31
 8021806:	bf54      	ite	pl
 8021808:	f001 010f 	andpl.w	r1, r1, #15
 802180c:	1109      	asrmi	r1, r1, #4
 802180e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8021812:	b2c9      	uxtb	r1, r1
 8021814:	910b      	str	r1, [sp, #44]	; 0x2c
 8021816:	e7b7      	b.n	8021788 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f0>
 8021818:	2001fe90 	.word	0x2001fe90
 802181c:	fffff800 	.word	0xfffff800
 8021820:	2b00      	cmp	r3, #0
 8021822:	d0df      	beq.n	80217e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8021824:	fa1f fa83 	uxth.w	sl, r3
 8021828:	43db      	mvns	r3, r3
 802182a:	4a20      	ldr	r2, [pc, #128]	; (80218ac <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x514>)
 802182c:	f8be c000 	ldrh.w	ip, [lr]
 8021830:	6810      	ldr	r0, [r2, #0]
 8021832:	ea4f 212c 	mov.w	r1, ip, asr #8
 8021836:	f3c0 4207 	ubfx	r2, r0, #16, #8
 802183a:	fb12 f20a 	smulbb	r2, r2, sl
 802183e:	f3c0 2b07 	ubfx	fp, r0, #8, #8
 8021842:	b2c0      	uxtb	r0, r0
 8021844:	fb10 f00a 	smulbb	r0, r0, sl
 8021848:	b2db      	uxtb	r3, r3
 802184a:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
 802184e:	fb01 2103 	mla	r1, r1, r3, r2
 8021852:	ea4f 02ec 	mov.w	r2, ip, asr #3
 8021856:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 802185a:	fb1b fb0a 	smulbb	fp, fp, sl
 802185e:	fa5f fc8c 	uxtb.w	ip, ip
 8021862:	fb0c 0003 	mla	r0, ip, r3, r0
 8021866:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
 802186a:	fb02 b203 	mla	r2, r2, r3, fp
 802186e:	b289      	uxth	r1, r1
 8021870:	b280      	uxth	r0, r0
 8021872:	1c4b      	adds	r3, r1, #1
 8021874:	f100 0b01 	add.w	fp, r0, #1
 8021878:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 802187c:	eb0b 2b10 	add.w	fp, fp, r0, lsr #8
 8021880:	b292      	uxth	r2, r2
 8021882:	f3cb 2bc4 	ubfx	fp, fp, #11, #5
 8021886:	f401 4178 	and.w	r1, r1, #63488	; 0xf800
 802188a:	ea4b 0101 	orr.w	r1, fp, r1
 802188e:	f102 0b01 	add.w	fp, r2, #1
 8021892:	eb0b 2212 	add.w	r2, fp, r2, lsr #8
 8021896:	0952      	lsrs	r2, r2, #5
 8021898:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802189c:	4311      	orrs	r1, r2
 802189e:	f8ae 1000 	strh.w	r1, [lr]
 80218a2:	e79f      	b.n	80217e4 <_ZN8touchgfx8LCD16bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 80218a4:	b013      	add	sp, #76	; 0x4c
 80218a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80218aa:	bf00      	nop
 80218ac:	2001fe90 	.word	0x2001fe90

080218b0 <CRC_Lock>:
 80218b0:	b530      	push	{r4, r5, lr}
 80218b2:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 80218b6:	f24c 2540 	movw	r5, #49728	; 0xc240
 80218ba:	4a1e      	ldr	r2, [pc, #120]	; (8021934 <CRC_Lock+0x84>)
 80218bc:	6813      	ldr	r3, [r2, #0]
 80218be:	f023 0301 	bic.w	r3, r3, #1
 80218c2:	6013      	str	r3, [r2, #0]
 80218c4:	4b1c      	ldr	r3, [pc, #112]	; (8021938 <CRC_Lock+0x88>)
 80218c6:	681a      	ldr	r2, [r3, #0]
 80218c8:	4022      	ands	r2, r4
 80218ca:	42aa      	cmp	r2, r5
 80218cc:	d005      	beq.n	80218da <CRC_Lock+0x2a>
 80218ce:	f24c 2270 	movw	r2, #49776	; 0xc270
 80218d2:	681b      	ldr	r3, [r3, #0]
 80218d4:	4023      	ands	r3, r4
 80218d6:	4293      	cmp	r3, r2
 80218d8:	d124      	bne.n	8021924 <CRC_Lock+0x74>
 80218da:	4b18      	ldr	r3, [pc, #96]	; (802193c <CRC_Lock+0x8c>)
 80218dc:	681b      	ldr	r3, [r3, #0]
 80218de:	bb0b      	cbnz	r3, 8021924 <CRC_Lock+0x74>
 80218e0:	4b17      	ldr	r3, [pc, #92]	; (8021940 <CRC_Lock+0x90>)
 80218e2:	681a      	ldr	r2, [r3, #0]
 80218e4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80218e8:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80218ec:	d00d      	beq.n	802190a <CRC_Lock+0x5a>
 80218ee:	f240 4483 	movw	r4, #1155	; 0x483
 80218f2:	681a      	ldr	r2, [r3, #0]
 80218f4:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80218f8:	42a2      	cmp	r2, r4
 80218fa:	d006      	beq.n	802190a <CRC_Lock+0x5a>
 80218fc:	f240 4285 	movw	r2, #1157	; 0x485
 8021900:	681b      	ldr	r3, [r3, #0]
 8021902:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8021906:	4293      	cmp	r3, r2
 8021908:	d10c      	bne.n	8021924 <CRC_Lock+0x74>
 802190a:	2201      	movs	r2, #1
 802190c:	4b0d      	ldr	r3, [pc, #52]	; (8021944 <CRC_Lock+0x94>)
 802190e:	601a      	str	r2, [r3, #0]
 8021910:	681a      	ldr	r2, [r3, #0]
 8021912:	2a00      	cmp	r2, #0
 8021914:	d1fc      	bne.n	8021910 <CRC_Lock+0x60>
 8021916:	4b0c      	ldr	r3, [pc, #48]	; (8021948 <CRC_Lock+0x98>)
 8021918:	6018      	str	r0, [r3, #0]
 802191a:	6818      	ldr	r0, [r3, #0]
 802191c:	1a43      	subs	r3, r0, r1
 802191e:	4258      	negs	r0, r3
 8021920:	4158      	adcs	r0, r3
 8021922:	bd30      	pop	{r4, r5, pc}
 8021924:	2201      	movs	r2, #1
 8021926:	4b09      	ldr	r3, [pc, #36]	; (802194c <CRC_Lock+0x9c>)
 8021928:	601a      	str	r2, [r3, #0]
 802192a:	681a      	ldr	r2, [r3, #0]
 802192c:	2a00      	cmp	r2, #0
 802192e:	d1fc      	bne.n	802192a <CRC_Lock+0x7a>
 8021930:	4b07      	ldr	r3, [pc, #28]	; (8021950 <CRC_Lock+0xa0>)
 8021932:	e7f1      	b.n	8021918 <CRC_Lock+0x68>
 8021934:	e0002000 	.word	0xe0002000
 8021938:	e000ed00 	.word	0xe000ed00
 802193c:	e0042000 	.word	0xe0042000
 8021940:	5c001000 	.word	0x5c001000
 8021944:	58024c08 	.word	0x58024c08
 8021948:	58024c00 	.word	0x58024c00
 802194c:	40023008 	.word	0x40023008
 8021950:	40023000 	.word	0x40023000

08021954 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8021954:	6101      	str	r1, [r0, #16]
 8021956:	4770      	bx	lr

08021958 <_ZN8touchgfx8Gestures4tickEv>:
 8021958:	7b83      	ldrb	r3, [r0, #14]
 802195a:	b14b      	cbz	r3, 8021970 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802195c:	8903      	ldrh	r3, [r0, #8]
 802195e:	3301      	adds	r3, #1
 8021960:	b29b      	uxth	r3, r3
 8021962:	2b07      	cmp	r3, #7
 8021964:	8103      	strh	r3, [r0, #8]
 8021966:	bf81      	itttt	hi
 8021968:	2300      	movhi	r3, #0
 802196a:	8143      	strhhi	r3, [r0, #10]
 802196c:	8183      	strhhi	r3, [r0, #12]
 802196e:	7383      	strbhi	r3, [r0, #14]
 8021970:	4770      	bx	lr
	...

08021974 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8021974:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8021978:	4698      	mov	r8, r3
 802197a:	4604      	mov	r4, r0
 802197c:	8883      	ldrh	r3, [r0, #4]
 802197e:	460e      	mov	r6, r1
 8021980:	88c1      	ldrh	r1, [r0, #6]
 8021982:	2000      	movs	r0, #0
 8021984:	f8ad 3006 	strh.w	r3, [sp, #6]
 8021988:	eba8 0303 	sub.w	r3, r8, r3
 802198c:	b21b      	sxth	r3, r3
 802198e:	4617      	mov	r7, r2
 8021990:	4a17      	ldr	r2, [pc, #92]	; (80219f0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 8021992:	2b00      	cmp	r3, #0
 8021994:	bfb8      	it	lt
 8021996:	425b      	neglt	r3, r3
 8021998:	9200      	str	r2, [sp, #0]
 802199a:	8aa2      	ldrh	r2, [r4, #20]
 802199c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 80219a0:	b21b      	sxth	r3, r3
 80219a2:	4293      	cmp	r3, r2
 80219a4:	f88d 0004 	strb.w	r0, [sp, #4]
 80219a8:	f8ad 1008 	strh.w	r1, [sp, #8]
 80219ac:	f8ad 800a 	strh.w	r8, [sp, #10]
 80219b0:	f8ad 500c 	strh.w	r5, [sp, #12]
 80219b4:	dc07      	bgt.n	80219c6 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 80219b6:	1a69      	subs	r1, r5, r1
 80219b8:	b209      	sxth	r1, r1
 80219ba:	2900      	cmp	r1, #0
 80219bc:	bfb8      	it	lt
 80219be:	4249      	neglt	r1, r1
 80219c0:	b209      	sxth	r1, r1
 80219c2:	428a      	cmp	r2, r1
 80219c4:	da10      	bge.n	80219e8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 80219c6:	6920      	ldr	r0, [r4, #16]
 80219c8:	4669      	mov	r1, sp
 80219ca:	6803      	ldr	r3, [r0, #0]
 80219cc:	eba8 0606 	sub.w	r6, r8, r6
 80219d0:	685b      	ldr	r3, [r3, #4]
 80219d2:	4798      	blx	r3
 80219d4:	2300      	movs	r3, #0
 80219d6:	2001      	movs	r0, #1
 80219d8:	1bef      	subs	r7, r5, r7
 80219da:	8123      	strh	r3, [r4, #8]
 80219dc:	8166      	strh	r6, [r4, #10]
 80219de:	81a7      	strh	r7, [r4, #12]
 80219e0:	f8a4 8004 	strh.w	r8, [r4, #4]
 80219e4:	80e5      	strh	r5, [r4, #6]
 80219e6:	73a0      	strb	r0, [r4, #14]
 80219e8:	b004      	add	sp, #16
 80219ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80219ee:	bf00      	nop
 80219f0:	08024434 	.word	0x08024434

080219f4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80219f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80219f6:	461e      	mov	r6, r3
 80219f8:	1e4b      	subs	r3, r1, #1
 80219fa:	2b01      	cmp	r3, #1
 80219fc:	b085      	sub	sp, #20
 80219fe:	4604      	mov	r4, r0
 8021a00:	460d      	mov	r5, r1
 8021a02:	4617      	mov	r7, r2
 8021a04:	d84b      	bhi.n	8021a9e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 8021a06:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8021a0a:	1cd3      	adds	r3, r2, #3
 8021a0c:	b29b      	uxth	r3, r3
 8021a0e:	2b06      	cmp	r3, #6
 8021a10:	d916      	bls.n	8021a40 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8021a12:	f8df c0a0 	ldr.w	ip, [pc, #160]	; 8021ab4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8021a16:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021a1a:	f8cd c004 	str.w	ip, [sp, #4]
 8021a1e:	f04f 0c00 	mov.w	ip, #0
 8021a22:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8021a26:	6900      	ldr	r0, [r0, #16]
 8021a28:	f8ad 100c 	strh.w	r1, [sp, #12]
 8021a2c:	f88d c008 	strb.w	ip, [sp, #8]
 8021a30:	f8ad 200a 	strh.w	r2, [sp, #10]
 8021a34:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021a38:	6803      	ldr	r3, [r0, #0]
 8021a3a:	a901      	add	r1, sp, #4
 8021a3c:	689b      	ldr	r3, [r3, #8]
 8021a3e:	4798      	blx	r3
 8021a40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8021a44:	1cd3      	adds	r3, r2, #3
 8021a46:	b29b      	uxth	r3, r3
 8021a48:	2b06      	cmp	r3, #6
 8021a4a:	d916      	bls.n	8021a7a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021a4c:	f8df c064 	ldr.w	ip, [pc, #100]	; 8021ab4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8021a50:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021a54:	f8cd c004 	str.w	ip, [sp, #4]
 8021a58:	f04f 0c01 	mov.w	ip, #1
 8021a5c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8021a60:	6920      	ldr	r0, [r4, #16]
 8021a62:	f8ad 100c 	strh.w	r1, [sp, #12]
 8021a66:	f88d c008 	strb.w	ip, [sp, #8]
 8021a6a:	f8ad 200a 	strh.w	r2, [sp, #10]
 8021a6e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021a72:	6803      	ldr	r3, [r0, #0]
 8021a74:	a901      	add	r1, sp, #4
 8021a76:	689b      	ldr	r3, [r3, #8]
 8021a78:	4798      	blx	r3
 8021a7a:	4b0d      	ldr	r3, [pc, #52]	; (8021ab0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8021a7c:	6920      	ldr	r0, [r4, #16]
 8021a7e:	9301      	str	r3, [sp, #4]
 8021a80:	2300      	movs	r3, #0
 8021a82:	f88d 5008 	strb.w	r5, [sp, #8]
 8021a86:	f8ad 700a 	strh.w	r7, [sp, #10]
 8021a8a:	f8ad 600c 	strh.w	r6, [sp, #12]
 8021a8e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8021a92:	6803      	ldr	r3, [r0, #0]
 8021a94:	a901      	add	r1, sp, #4
 8021a96:	681b      	ldr	r3, [r3, #0]
 8021a98:	4798      	blx	r3
 8021a9a:	b005      	add	sp, #20
 8021a9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021a9e:	2900      	cmp	r1, #0
 8021aa0:	d1eb      	bne.n	8021a7a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021aa2:	80a2      	strh	r2, [r4, #4]
 8021aa4:	80c6      	strh	r6, [r0, #6]
 8021aa6:	60a1      	str	r1, [r4, #8]
 8021aa8:	81a1      	strh	r1, [r4, #12]
 8021aaa:	73a1      	strb	r1, [r4, #14]
 8021aac:	e7e5      	b.n	8021a7a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8021aae:	bf00      	nop
 8021ab0:	08024420 	.word	0x08024420
 8021ab4:	08024448 	.word	0x08024448

08021ab8 <__aeabi_atexit>:
 8021ab8:	460b      	mov	r3, r1
 8021aba:	4601      	mov	r1, r0
 8021abc:	4618      	mov	r0, r3
 8021abe:	f000 b851 	b.w	8021b64 <__cxa_atexit>

08021ac2 <_ZdlPvj>:
 8021ac2:	f000 b812 	b.w	8021aea <_ZdlPv>

08021ac6 <__cxa_guard_acquire>:
 8021ac6:	6803      	ldr	r3, [r0, #0]
 8021ac8:	07db      	lsls	r3, r3, #31
 8021aca:	d406      	bmi.n	8021ada <__cxa_guard_acquire+0x14>
 8021acc:	7843      	ldrb	r3, [r0, #1]
 8021ace:	b103      	cbz	r3, 8021ad2 <__cxa_guard_acquire+0xc>
 8021ad0:	deff      	udf	#255	; 0xff
 8021ad2:	2301      	movs	r3, #1
 8021ad4:	7043      	strb	r3, [r0, #1]
 8021ad6:	4618      	mov	r0, r3
 8021ad8:	4770      	bx	lr
 8021ada:	2000      	movs	r0, #0
 8021adc:	4770      	bx	lr

08021ade <__cxa_guard_release>:
 8021ade:	2301      	movs	r3, #1
 8021ae0:	6003      	str	r3, [r0, #0]
 8021ae2:	4770      	bx	lr

08021ae4 <__cxa_pure_virtual>:
 8021ae4:	b508      	push	{r3, lr}
 8021ae6:	f000 f80d 	bl	8021b04 <_ZSt9terminatev>

08021aea <_ZdlPv>:
 8021aea:	f000 b987 	b.w	8021dfc <free>

08021aee <_ZN10__cxxabiv111__terminateEPFvvE>:
 8021aee:	b508      	push	{r3, lr}
 8021af0:	4780      	blx	r0
 8021af2:	f000 f80c 	bl	8021b0e <abort>
	...

08021af8 <_ZSt13get_terminatev>:
 8021af8:	4b01      	ldr	r3, [pc, #4]	; (8021b00 <_ZSt13get_terminatev+0x8>)
 8021afa:	e8d3 0faf 	lda	r0, [r3]
 8021afe:	4770      	bx	lr
 8021b00:	200000ec 	.word	0x200000ec

08021b04 <_ZSt9terminatev>:
 8021b04:	b508      	push	{r3, lr}
 8021b06:	f7ff fff7 	bl	8021af8 <_ZSt13get_terminatev>
 8021b0a:	f7ff fff0 	bl	8021aee <_ZN10__cxxabiv111__terminateEPFvvE>

08021b0e <abort>:
 8021b0e:	2006      	movs	r0, #6
 8021b10:	b508      	push	{r3, lr}
 8021b12:	f000 fe03 	bl	802271c <raise>
 8021b16:	2001      	movs	r0, #1
 8021b18:	f7e0 f876 	bl	8001c08 <_exit>

08021b1c <__assert_func>:
 8021b1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021b1e:	4614      	mov	r4, r2
 8021b20:	461a      	mov	r2, r3
 8021b22:	4b09      	ldr	r3, [pc, #36]	; (8021b48 <__assert_func+0x2c>)
 8021b24:	4605      	mov	r5, r0
 8021b26:	681b      	ldr	r3, [r3, #0]
 8021b28:	68d8      	ldr	r0, [r3, #12]
 8021b2a:	b14c      	cbz	r4, 8021b40 <__assert_func+0x24>
 8021b2c:	4b07      	ldr	r3, [pc, #28]	; (8021b4c <__assert_func+0x30>)
 8021b2e:	9100      	str	r1, [sp, #0]
 8021b30:	4907      	ldr	r1, [pc, #28]	; (8021b50 <__assert_func+0x34>)
 8021b32:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021b36:	462b      	mov	r3, r5
 8021b38:	f000 f8fe 	bl	8021d38 <fiprintf>
 8021b3c:	f7ff ffe7 	bl	8021b0e <abort>
 8021b40:	4b04      	ldr	r3, [pc, #16]	; (8021b54 <__assert_func+0x38>)
 8021b42:	461c      	mov	r4, r3
 8021b44:	e7f3      	b.n	8021b2e <__assert_func+0x12>
 8021b46:	bf00      	nop
 8021b48:	200000f0 	.word	0x200000f0
 8021b4c:	08024710 	.word	0x08024710
 8021b50:	0802471d 	.word	0x0802471d
 8021b54:	0802474b 	.word	0x0802474b

08021b58 <atexit>:
 8021b58:	2300      	movs	r3, #0
 8021b5a:	4601      	mov	r1, r0
 8021b5c:	461a      	mov	r2, r3
 8021b5e:	4618      	mov	r0, r3
 8021b60:	f000 bf0e 	b.w	8022980 <__register_exitproc>

08021b64 <__cxa_atexit>:
 8021b64:	b510      	push	{r4, lr}
 8021b66:	4c05      	ldr	r4, [pc, #20]	; (8021b7c <__cxa_atexit+0x18>)
 8021b68:	4613      	mov	r3, r2
 8021b6a:	b12c      	cbz	r4, 8021b78 <__cxa_atexit+0x14>
 8021b6c:	460a      	mov	r2, r1
 8021b6e:	4601      	mov	r1, r0
 8021b70:	2002      	movs	r0, #2
 8021b72:	f000 ff05 	bl	8022980 <__register_exitproc>
 8021b76:	bd10      	pop	{r4, pc}
 8021b78:	4620      	mov	r0, r4
 8021b7a:	e7fc      	b.n	8021b76 <__cxa_atexit+0x12>
 8021b7c:	08022981 	.word	0x08022981

08021b80 <__errno>:
 8021b80:	4b01      	ldr	r3, [pc, #4]	; (8021b88 <__errno+0x8>)
 8021b82:	6818      	ldr	r0, [r3, #0]
 8021b84:	4770      	bx	lr
 8021b86:	bf00      	nop
 8021b88:	200000f0 	.word	0x200000f0

08021b8c <std>:
 8021b8c:	2300      	movs	r3, #0
 8021b8e:	b510      	push	{r4, lr}
 8021b90:	4604      	mov	r4, r0
 8021b92:	6083      	str	r3, [r0, #8]
 8021b94:	8181      	strh	r1, [r0, #12]
 8021b96:	4619      	mov	r1, r3
 8021b98:	6643      	str	r3, [r0, #100]	; 0x64
 8021b9a:	81c2      	strh	r2, [r0, #14]
 8021b9c:	2208      	movs	r2, #8
 8021b9e:	6183      	str	r3, [r0, #24]
 8021ba0:	e9c0 3300 	strd	r3, r3, [r0]
 8021ba4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021ba8:	305c      	adds	r0, #92	; 0x5c
 8021baa:	f000 f93c 	bl	8021e26 <memset>
 8021bae:	4b05      	ldr	r3, [pc, #20]	; (8021bc4 <std+0x38>)
 8021bb0:	6224      	str	r4, [r4, #32]
 8021bb2:	6263      	str	r3, [r4, #36]	; 0x24
 8021bb4:	4b04      	ldr	r3, [pc, #16]	; (8021bc8 <std+0x3c>)
 8021bb6:	62a3      	str	r3, [r4, #40]	; 0x28
 8021bb8:	4b04      	ldr	r3, [pc, #16]	; (8021bcc <std+0x40>)
 8021bba:	62e3      	str	r3, [r4, #44]	; 0x2c
 8021bbc:	4b04      	ldr	r3, [pc, #16]	; (8021bd0 <std+0x44>)
 8021bbe:	6323      	str	r3, [r4, #48]	; 0x30
 8021bc0:	bd10      	pop	{r4, pc}
 8021bc2:	bf00      	nop
 8021bc4:	08022755 	.word	0x08022755
 8021bc8:	08022777 	.word	0x08022777
 8021bcc:	080227af 	.word	0x080227af
 8021bd0:	080227d3 	.word	0x080227d3

08021bd4 <_cleanup_r>:
 8021bd4:	4901      	ldr	r1, [pc, #4]	; (8021bdc <_cleanup_r+0x8>)
 8021bd6:	f000 b8c1 	b.w	8021d5c <_fwalk_reent>
 8021bda:	bf00      	nop
 8021bdc:	08022b71 	.word	0x08022b71

08021be0 <__sfmoreglue>:
 8021be0:	b570      	push	{r4, r5, r6, lr}
 8021be2:	2268      	movs	r2, #104	; 0x68
 8021be4:	1e4d      	subs	r5, r1, #1
 8021be6:	460e      	mov	r6, r1
 8021be8:	4355      	muls	r5, r2
 8021bea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8021bee:	f000 f98f 	bl	8021f10 <_malloc_r>
 8021bf2:	4604      	mov	r4, r0
 8021bf4:	b140      	cbz	r0, 8021c08 <__sfmoreglue+0x28>
 8021bf6:	2100      	movs	r1, #0
 8021bf8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8021bfc:	e9c0 1600 	strd	r1, r6, [r0]
 8021c00:	300c      	adds	r0, #12
 8021c02:	60a0      	str	r0, [r4, #8]
 8021c04:	f000 f90f 	bl	8021e26 <memset>
 8021c08:	4620      	mov	r0, r4
 8021c0a:	bd70      	pop	{r4, r5, r6, pc}

08021c0c <__sfp_lock_acquire>:
 8021c0c:	4801      	ldr	r0, [pc, #4]	; (8021c14 <__sfp_lock_acquire+0x8>)
 8021c0e:	f000 b8ea 	b.w	8021de6 <__retarget_lock_acquire_recursive>
 8021c12:	bf00      	nop
 8021c14:	2001ff86 	.word	0x2001ff86

08021c18 <__sfp_lock_release>:
 8021c18:	4801      	ldr	r0, [pc, #4]	; (8021c20 <__sfp_lock_release+0x8>)
 8021c1a:	f000 b8e6 	b.w	8021dea <__retarget_lock_release_recursive>
 8021c1e:	bf00      	nop
 8021c20:	2001ff86 	.word	0x2001ff86

08021c24 <__sinit_lock_acquire>:
 8021c24:	4801      	ldr	r0, [pc, #4]	; (8021c2c <__sinit_lock_acquire+0x8>)
 8021c26:	f000 b8de 	b.w	8021de6 <__retarget_lock_acquire_recursive>
 8021c2a:	bf00      	nop
 8021c2c:	2001ff87 	.word	0x2001ff87

08021c30 <__sinit_lock_release>:
 8021c30:	4801      	ldr	r0, [pc, #4]	; (8021c38 <__sinit_lock_release+0x8>)
 8021c32:	f000 b8da 	b.w	8021dea <__retarget_lock_release_recursive>
 8021c36:	bf00      	nop
 8021c38:	2001ff87 	.word	0x2001ff87

08021c3c <__sinit>:
 8021c3c:	b510      	push	{r4, lr}
 8021c3e:	4604      	mov	r4, r0
 8021c40:	f7ff fff0 	bl	8021c24 <__sinit_lock_acquire>
 8021c44:	69a3      	ldr	r3, [r4, #24]
 8021c46:	b11b      	cbz	r3, 8021c50 <__sinit+0x14>
 8021c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021c4c:	f7ff bff0 	b.w	8021c30 <__sinit_lock_release>
 8021c50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8021c54:	6523      	str	r3, [r4, #80]	; 0x50
 8021c56:	4620      	mov	r0, r4
 8021c58:	4b12      	ldr	r3, [pc, #72]	; (8021ca4 <__sinit+0x68>)
 8021c5a:	4a13      	ldr	r2, [pc, #76]	; (8021ca8 <__sinit+0x6c>)
 8021c5c:	681b      	ldr	r3, [r3, #0]
 8021c5e:	62a2      	str	r2, [r4, #40]	; 0x28
 8021c60:	42a3      	cmp	r3, r4
 8021c62:	bf04      	itt	eq
 8021c64:	2301      	moveq	r3, #1
 8021c66:	61a3      	streq	r3, [r4, #24]
 8021c68:	f000 f820 	bl	8021cac <__sfp>
 8021c6c:	6060      	str	r0, [r4, #4]
 8021c6e:	4620      	mov	r0, r4
 8021c70:	f000 f81c 	bl	8021cac <__sfp>
 8021c74:	60a0      	str	r0, [r4, #8]
 8021c76:	4620      	mov	r0, r4
 8021c78:	f000 f818 	bl	8021cac <__sfp>
 8021c7c:	2200      	movs	r2, #0
 8021c7e:	2104      	movs	r1, #4
 8021c80:	60e0      	str	r0, [r4, #12]
 8021c82:	6860      	ldr	r0, [r4, #4]
 8021c84:	f7ff ff82 	bl	8021b8c <std>
 8021c88:	2201      	movs	r2, #1
 8021c8a:	2109      	movs	r1, #9
 8021c8c:	68a0      	ldr	r0, [r4, #8]
 8021c8e:	f7ff ff7d 	bl	8021b8c <std>
 8021c92:	2202      	movs	r2, #2
 8021c94:	2112      	movs	r1, #18
 8021c96:	68e0      	ldr	r0, [r4, #12]
 8021c98:	f7ff ff78 	bl	8021b8c <std>
 8021c9c:	2301      	movs	r3, #1
 8021c9e:	61a3      	str	r3, [r4, #24]
 8021ca0:	e7d2      	b.n	8021c48 <__sinit+0xc>
 8021ca2:	bf00      	nop
 8021ca4:	080247ac 	.word	0x080247ac
 8021ca8:	08021bd5 	.word	0x08021bd5

08021cac <__sfp>:
 8021cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021cae:	4607      	mov	r7, r0
 8021cb0:	f7ff ffac 	bl	8021c0c <__sfp_lock_acquire>
 8021cb4:	4b1e      	ldr	r3, [pc, #120]	; (8021d30 <__sfp+0x84>)
 8021cb6:	681e      	ldr	r6, [r3, #0]
 8021cb8:	69b3      	ldr	r3, [r6, #24]
 8021cba:	b913      	cbnz	r3, 8021cc2 <__sfp+0x16>
 8021cbc:	4630      	mov	r0, r6
 8021cbe:	f7ff ffbd 	bl	8021c3c <__sinit>
 8021cc2:	3648      	adds	r6, #72	; 0x48
 8021cc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8021cc8:	3b01      	subs	r3, #1
 8021cca:	d503      	bpl.n	8021cd4 <__sfp+0x28>
 8021ccc:	6833      	ldr	r3, [r6, #0]
 8021cce:	b30b      	cbz	r3, 8021d14 <__sfp+0x68>
 8021cd0:	6836      	ldr	r6, [r6, #0]
 8021cd2:	e7f7      	b.n	8021cc4 <__sfp+0x18>
 8021cd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8021cd8:	b9d5      	cbnz	r5, 8021d10 <__sfp+0x64>
 8021cda:	4b16      	ldr	r3, [pc, #88]	; (8021d34 <__sfp+0x88>)
 8021cdc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8021ce0:	6665      	str	r5, [r4, #100]	; 0x64
 8021ce2:	60e3      	str	r3, [r4, #12]
 8021ce4:	f000 f87e 	bl	8021de4 <__retarget_lock_init_recursive>
 8021ce8:	f7ff ff96 	bl	8021c18 <__sfp_lock_release>
 8021cec:	2208      	movs	r2, #8
 8021cee:	4629      	mov	r1, r5
 8021cf0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8021cf4:	6025      	str	r5, [r4, #0]
 8021cf6:	61a5      	str	r5, [r4, #24]
 8021cf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8021cfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8021d00:	f000 f891 	bl	8021e26 <memset>
 8021d04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8021d08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8021d0c:	4620      	mov	r0, r4
 8021d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021d10:	3468      	adds	r4, #104	; 0x68
 8021d12:	e7d9      	b.n	8021cc8 <__sfp+0x1c>
 8021d14:	2104      	movs	r1, #4
 8021d16:	4638      	mov	r0, r7
 8021d18:	f7ff ff62 	bl	8021be0 <__sfmoreglue>
 8021d1c:	4604      	mov	r4, r0
 8021d1e:	6030      	str	r0, [r6, #0]
 8021d20:	2800      	cmp	r0, #0
 8021d22:	d1d5      	bne.n	8021cd0 <__sfp+0x24>
 8021d24:	f7ff ff78 	bl	8021c18 <__sfp_lock_release>
 8021d28:	230c      	movs	r3, #12
 8021d2a:	603b      	str	r3, [r7, #0]
 8021d2c:	e7ee      	b.n	8021d0c <__sfp+0x60>
 8021d2e:	bf00      	nop
 8021d30:	080247ac 	.word	0x080247ac
 8021d34:	ffff0001 	.word	0xffff0001

08021d38 <fiprintf>:
 8021d38:	b40e      	push	{r1, r2, r3}
 8021d3a:	b503      	push	{r0, r1, lr}
 8021d3c:	ab03      	add	r3, sp, #12
 8021d3e:	4601      	mov	r1, r0
 8021d40:	4805      	ldr	r0, [pc, #20]	; (8021d58 <fiprintf+0x20>)
 8021d42:	f853 2b04 	ldr.w	r2, [r3], #4
 8021d46:	6800      	ldr	r0, [r0, #0]
 8021d48:	9301      	str	r3, [sp, #4]
 8021d4a:	f000 f97f 	bl	802204c <_vfiprintf_r>
 8021d4e:	b002      	add	sp, #8
 8021d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8021d54:	b003      	add	sp, #12
 8021d56:	4770      	bx	lr
 8021d58:	200000f0 	.word	0x200000f0

08021d5c <_fwalk_reent>:
 8021d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021d60:	4606      	mov	r6, r0
 8021d62:	4688      	mov	r8, r1
 8021d64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8021d68:	2700      	movs	r7, #0
 8021d6a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021d6e:	f1b9 0901 	subs.w	r9, r9, #1
 8021d72:	d505      	bpl.n	8021d80 <_fwalk_reent+0x24>
 8021d74:	6824      	ldr	r4, [r4, #0]
 8021d76:	2c00      	cmp	r4, #0
 8021d78:	d1f7      	bne.n	8021d6a <_fwalk_reent+0xe>
 8021d7a:	4638      	mov	r0, r7
 8021d7c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021d80:	89ab      	ldrh	r3, [r5, #12]
 8021d82:	2b01      	cmp	r3, #1
 8021d84:	d907      	bls.n	8021d96 <_fwalk_reent+0x3a>
 8021d86:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021d8a:	3301      	adds	r3, #1
 8021d8c:	d003      	beq.n	8021d96 <_fwalk_reent+0x3a>
 8021d8e:	4629      	mov	r1, r5
 8021d90:	4630      	mov	r0, r6
 8021d92:	47c0      	blx	r8
 8021d94:	4307      	orrs	r7, r0
 8021d96:	3568      	adds	r5, #104	; 0x68
 8021d98:	e7e9      	b.n	8021d6e <_fwalk_reent+0x12>
	...

08021d9c <__libc_init_array>:
 8021d9c:	b570      	push	{r4, r5, r6, lr}
 8021d9e:	4d0d      	ldr	r5, [pc, #52]	; (8021dd4 <__libc_init_array+0x38>)
 8021da0:	2600      	movs	r6, #0
 8021da2:	4c0d      	ldr	r4, [pc, #52]	; (8021dd8 <__libc_init_array+0x3c>)
 8021da4:	1b64      	subs	r4, r4, r5
 8021da6:	10a4      	asrs	r4, r4, #2
 8021da8:	42a6      	cmp	r6, r4
 8021daa:	d109      	bne.n	8021dc0 <__libc_init_array+0x24>
 8021dac:	4d0b      	ldr	r5, [pc, #44]	; (8021ddc <__libc_init_array+0x40>)
 8021dae:	2600      	movs	r6, #0
 8021db0:	4c0b      	ldr	r4, [pc, #44]	; (8021de0 <__libc_init_array+0x44>)
 8021db2:	f000 ffdf 	bl	8022d74 <_init>
 8021db6:	1b64      	subs	r4, r4, r5
 8021db8:	10a4      	asrs	r4, r4, #2
 8021dba:	42a6      	cmp	r6, r4
 8021dbc:	d105      	bne.n	8021dca <__libc_init_array+0x2e>
 8021dbe:	bd70      	pop	{r4, r5, r6, pc}
 8021dc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8021dc4:	3601      	adds	r6, #1
 8021dc6:	4798      	blx	r3
 8021dc8:	e7ee      	b.n	8021da8 <__libc_init_array+0xc>
 8021dca:	f855 3b04 	ldr.w	r3, [r5], #4
 8021dce:	3601      	adds	r6, #1
 8021dd0:	4798      	blx	r3
 8021dd2:	e7f2      	b.n	8021dba <__libc_init_array+0x1e>
 8021dd4:	080582c0 	.word	0x080582c0
 8021dd8:	080582c0 	.word	0x080582c0
 8021ddc:	080582c0 	.word	0x080582c0
 8021de0:	080582d4 	.word	0x080582d4

08021de4 <__retarget_lock_init_recursive>:
 8021de4:	4770      	bx	lr

08021de6 <__retarget_lock_acquire_recursive>:
 8021de6:	4770      	bx	lr

08021de8 <__retarget_lock_release>:
 8021de8:	4770      	bx	lr

08021dea <__retarget_lock_release_recursive>:
 8021dea:	4770      	bx	lr

08021dec <malloc>:
 8021dec:	4b02      	ldr	r3, [pc, #8]	; (8021df8 <malloc+0xc>)
 8021dee:	4601      	mov	r1, r0
 8021df0:	6818      	ldr	r0, [r3, #0]
 8021df2:	f000 b88d 	b.w	8021f10 <_malloc_r>
 8021df6:	bf00      	nop
 8021df8:	200000f0 	.word	0x200000f0

08021dfc <free>:
 8021dfc:	4b02      	ldr	r3, [pc, #8]	; (8021e08 <free+0xc>)
 8021dfe:	4601      	mov	r1, r0
 8021e00:	6818      	ldr	r0, [r3, #0]
 8021e02:	f000 b819 	b.w	8021e38 <_free_r>
 8021e06:	bf00      	nop
 8021e08:	200000f0 	.word	0x200000f0

08021e0c <memcpy>:
 8021e0c:	440a      	add	r2, r1
 8021e0e:	1e43      	subs	r3, r0, #1
 8021e10:	4291      	cmp	r1, r2
 8021e12:	d100      	bne.n	8021e16 <memcpy+0xa>
 8021e14:	4770      	bx	lr
 8021e16:	b510      	push	{r4, lr}
 8021e18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021e1c:	4291      	cmp	r1, r2
 8021e1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021e22:	d1f9      	bne.n	8021e18 <memcpy+0xc>
 8021e24:	bd10      	pop	{r4, pc}

08021e26 <memset>:
 8021e26:	4402      	add	r2, r0
 8021e28:	4603      	mov	r3, r0
 8021e2a:	4293      	cmp	r3, r2
 8021e2c:	d100      	bne.n	8021e30 <memset+0xa>
 8021e2e:	4770      	bx	lr
 8021e30:	f803 1b01 	strb.w	r1, [r3], #1
 8021e34:	e7f9      	b.n	8021e2a <memset+0x4>
	...

08021e38 <_free_r>:
 8021e38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021e3a:	2900      	cmp	r1, #0
 8021e3c:	d043      	beq.n	8021ec6 <_free_r+0x8e>
 8021e3e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021e42:	1f0c      	subs	r4, r1, #4
 8021e44:	9001      	str	r0, [sp, #4]
 8021e46:	2b00      	cmp	r3, #0
 8021e48:	bfb8      	it	lt
 8021e4a:	18e4      	addlt	r4, r4, r3
 8021e4c:	f000 ff52 	bl	8022cf4 <__malloc_lock>
 8021e50:	4a1e      	ldr	r2, [pc, #120]	; (8021ecc <_free_r+0x94>)
 8021e52:	9801      	ldr	r0, [sp, #4]
 8021e54:	6813      	ldr	r3, [r2, #0]
 8021e56:	b933      	cbnz	r3, 8021e66 <_free_r+0x2e>
 8021e58:	6063      	str	r3, [r4, #4]
 8021e5a:	6014      	str	r4, [r2, #0]
 8021e5c:	b003      	add	sp, #12
 8021e5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8021e62:	f000 bf4d 	b.w	8022d00 <__malloc_unlock>
 8021e66:	42a3      	cmp	r3, r4
 8021e68:	d908      	bls.n	8021e7c <_free_r+0x44>
 8021e6a:	6825      	ldr	r5, [r4, #0]
 8021e6c:	1961      	adds	r1, r4, r5
 8021e6e:	428b      	cmp	r3, r1
 8021e70:	bf01      	itttt	eq
 8021e72:	6819      	ldreq	r1, [r3, #0]
 8021e74:	685b      	ldreq	r3, [r3, #4]
 8021e76:	1949      	addeq	r1, r1, r5
 8021e78:	6021      	streq	r1, [r4, #0]
 8021e7a:	e7ed      	b.n	8021e58 <_free_r+0x20>
 8021e7c:	461a      	mov	r2, r3
 8021e7e:	685b      	ldr	r3, [r3, #4]
 8021e80:	b10b      	cbz	r3, 8021e86 <_free_r+0x4e>
 8021e82:	42a3      	cmp	r3, r4
 8021e84:	d9fa      	bls.n	8021e7c <_free_r+0x44>
 8021e86:	6811      	ldr	r1, [r2, #0]
 8021e88:	1855      	adds	r5, r2, r1
 8021e8a:	42a5      	cmp	r5, r4
 8021e8c:	d10b      	bne.n	8021ea6 <_free_r+0x6e>
 8021e8e:	6824      	ldr	r4, [r4, #0]
 8021e90:	4421      	add	r1, r4
 8021e92:	1854      	adds	r4, r2, r1
 8021e94:	6011      	str	r1, [r2, #0]
 8021e96:	42a3      	cmp	r3, r4
 8021e98:	d1e0      	bne.n	8021e5c <_free_r+0x24>
 8021e9a:	681c      	ldr	r4, [r3, #0]
 8021e9c:	685b      	ldr	r3, [r3, #4]
 8021e9e:	4421      	add	r1, r4
 8021ea0:	6053      	str	r3, [r2, #4]
 8021ea2:	6011      	str	r1, [r2, #0]
 8021ea4:	e7da      	b.n	8021e5c <_free_r+0x24>
 8021ea6:	d902      	bls.n	8021eae <_free_r+0x76>
 8021ea8:	230c      	movs	r3, #12
 8021eaa:	6003      	str	r3, [r0, #0]
 8021eac:	e7d6      	b.n	8021e5c <_free_r+0x24>
 8021eae:	6825      	ldr	r5, [r4, #0]
 8021eb0:	1961      	adds	r1, r4, r5
 8021eb2:	428b      	cmp	r3, r1
 8021eb4:	bf02      	ittt	eq
 8021eb6:	6819      	ldreq	r1, [r3, #0]
 8021eb8:	685b      	ldreq	r3, [r3, #4]
 8021eba:	1949      	addeq	r1, r1, r5
 8021ebc:	6063      	str	r3, [r4, #4]
 8021ebe:	bf08      	it	eq
 8021ec0:	6021      	streq	r1, [r4, #0]
 8021ec2:	6054      	str	r4, [r2, #4]
 8021ec4:	e7ca      	b.n	8021e5c <_free_r+0x24>
 8021ec6:	b003      	add	sp, #12
 8021ec8:	bd30      	pop	{r4, r5, pc}
 8021eca:	bf00      	nop
 8021ecc:	2001ff88 	.word	0x2001ff88

08021ed0 <sbrk_aligned>:
 8021ed0:	b570      	push	{r4, r5, r6, lr}
 8021ed2:	4e0e      	ldr	r6, [pc, #56]	; (8021f0c <sbrk_aligned+0x3c>)
 8021ed4:	460c      	mov	r4, r1
 8021ed6:	4605      	mov	r5, r0
 8021ed8:	6831      	ldr	r1, [r6, #0]
 8021eda:	b911      	cbnz	r1, 8021ee2 <sbrk_aligned+0x12>
 8021edc:	f000 fbe6 	bl	80226ac <_sbrk_r>
 8021ee0:	6030      	str	r0, [r6, #0]
 8021ee2:	4621      	mov	r1, r4
 8021ee4:	4628      	mov	r0, r5
 8021ee6:	f000 fbe1 	bl	80226ac <_sbrk_r>
 8021eea:	1c43      	adds	r3, r0, #1
 8021eec:	d00a      	beq.n	8021f04 <sbrk_aligned+0x34>
 8021eee:	1cc4      	adds	r4, r0, #3
 8021ef0:	f024 0403 	bic.w	r4, r4, #3
 8021ef4:	42a0      	cmp	r0, r4
 8021ef6:	d007      	beq.n	8021f08 <sbrk_aligned+0x38>
 8021ef8:	1a21      	subs	r1, r4, r0
 8021efa:	4628      	mov	r0, r5
 8021efc:	f000 fbd6 	bl	80226ac <_sbrk_r>
 8021f00:	3001      	adds	r0, #1
 8021f02:	d101      	bne.n	8021f08 <sbrk_aligned+0x38>
 8021f04:	f04f 34ff 	mov.w	r4, #4294967295
 8021f08:	4620      	mov	r0, r4
 8021f0a:	bd70      	pop	{r4, r5, r6, pc}
 8021f0c:	2001ff8c 	.word	0x2001ff8c

08021f10 <_malloc_r>:
 8021f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021f14:	1ccd      	adds	r5, r1, #3
 8021f16:	4607      	mov	r7, r0
 8021f18:	f025 0503 	bic.w	r5, r5, #3
 8021f1c:	3508      	adds	r5, #8
 8021f1e:	2d0c      	cmp	r5, #12
 8021f20:	bf38      	it	cc
 8021f22:	250c      	movcc	r5, #12
 8021f24:	2d00      	cmp	r5, #0
 8021f26:	db01      	blt.n	8021f2c <_malloc_r+0x1c>
 8021f28:	42a9      	cmp	r1, r5
 8021f2a:	d905      	bls.n	8021f38 <_malloc_r+0x28>
 8021f2c:	230c      	movs	r3, #12
 8021f2e:	2600      	movs	r6, #0
 8021f30:	603b      	str	r3, [r7, #0]
 8021f32:	4630      	mov	r0, r6
 8021f34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021f38:	4e2e      	ldr	r6, [pc, #184]	; (8021ff4 <_malloc_r+0xe4>)
 8021f3a:	f000 fedb 	bl	8022cf4 <__malloc_lock>
 8021f3e:	6833      	ldr	r3, [r6, #0]
 8021f40:	461c      	mov	r4, r3
 8021f42:	bb34      	cbnz	r4, 8021f92 <_malloc_r+0x82>
 8021f44:	4629      	mov	r1, r5
 8021f46:	4638      	mov	r0, r7
 8021f48:	f7ff ffc2 	bl	8021ed0 <sbrk_aligned>
 8021f4c:	1c43      	adds	r3, r0, #1
 8021f4e:	4604      	mov	r4, r0
 8021f50:	d14d      	bne.n	8021fee <_malloc_r+0xde>
 8021f52:	6834      	ldr	r4, [r6, #0]
 8021f54:	4626      	mov	r6, r4
 8021f56:	2e00      	cmp	r6, #0
 8021f58:	d140      	bne.n	8021fdc <_malloc_r+0xcc>
 8021f5a:	6823      	ldr	r3, [r4, #0]
 8021f5c:	4631      	mov	r1, r6
 8021f5e:	4638      	mov	r0, r7
 8021f60:	eb04 0803 	add.w	r8, r4, r3
 8021f64:	f000 fba2 	bl	80226ac <_sbrk_r>
 8021f68:	4580      	cmp	r8, r0
 8021f6a:	d13a      	bne.n	8021fe2 <_malloc_r+0xd2>
 8021f6c:	6821      	ldr	r1, [r4, #0]
 8021f6e:	3503      	adds	r5, #3
 8021f70:	4638      	mov	r0, r7
 8021f72:	1a6d      	subs	r5, r5, r1
 8021f74:	f025 0503 	bic.w	r5, r5, #3
 8021f78:	3508      	adds	r5, #8
 8021f7a:	2d0c      	cmp	r5, #12
 8021f7c:	bf38      	it	cc
 8021f7e:	250c      	movcc	r5, #12
 8021f80:	4629      	mov	r1, r5
 8021f82:	f7ff ffa5 	bl	8021ed0 <sbrk_aligned>
 8021f86:	3001      	adds	r0, #1
 8021f88:	d02b      	beq.n	8021fe2 <_malloc_r+0xd2>
 8021f8a:	6823      	ldr	r3, [r4, #0]
 8021f8c:	442b      	add	r3, r5
 8021f8e:	6023      	str	r3, [r4, #0]
 8021f90:	e00e      	b.n	8021fb0 <_malloc_r+0xa0>
 8021f92:	6822      	ldr	r2, [r4, #0]
 8021f94:	1b52      	subs	r2, r2, r5
 8021f96:	d41e      	bmi.n	8021fd6 <_malloc_r+0xc6>
 8021f98:	2a0b      	cmp	r2, #11
 8021f9a:	d916      	bls.n	8021fca <_malloc_r+0xba>
 8021f9c:	1961      	adds	r1, r4, r5
 8021f9e:	42a3      	cmp	r3, r4
 8021fa0:	6025      	str	r5, [r4, #0]
 8021fa2:	bf18      	it	ne
 8021fa4:	6059      	strne	r1, [r3, #4]
 8021fa6:	6863      	ldr	r3, [r4, #4]
 8021fa8:	bf08      	it	eq
 8021faa:	6031      	streq	r1, [r6, #0]
 8021fac:	5162      	str	r2, [r4, r5]
 8021fae:	604b      	str	r3, [r1, #4]
 8021fb0:	f104 060b 	add.w	r6, r4, #11
 8021fb4:	4638      	mov	r0, r7
 8021fb6:	f000 fea3 	bl	8022d00 <__malloc_unlock>
 8021fba:	1d23      	adds	r3, r4, #4
 8021fbc:	f026 0607 	bic.w	r6, r6, #7
 8021fc0:	1af2      	subs	r2, r6, r3
 8021fc2:	d0b6      	beq.n	8021f32 <_malloc_r+0x22>
 8021fc4:	1b9b      	subs	r3, r3, r6
 8021fc6:	50a3      	str	r3, [r4, r2]
 8021fc8:	e7b3      	b.n	8021f32 <_malloc_r+0x22>
 8021fca:	6862      	ldr	r2, [r4, #4]
 8021fcc:	42a3      	cmp	r3, r4
 8021fce:	bf0c      	ite	eq
 8021fd0:	6032      	streq	r2, [r6, #0]
 8021fd2:	605a      	strne	r2, [r3, #4]
 8021fd4:	e7ec      	b.n	8021fb0 <_malloc_r+0xa0>
 8021fd6:	4623      	mov	r3, r4
 8021fd8:	6864      	ldr	r4, [r4, #4]
 8021fda:	e7b2      	b.n	8021f42 <_malloc_r+0x32>
 8021fdc:	4634      	mov	r4, r6
 8021fde:	6876      	ldr	r6, [r6, #4]
 8021fe0:	e7b9      	b.n	8021f56 <_malloc_r+0x46>
 8021fe2:	230c      	movs	r3, #12
 8021fe4:	4638      	mov	r0, r7
 8021fe6:	603b      	str	r3, [r7, #0]
 8021fe8:	f000 fe8a 	bl	8022d00 <__malloc_unlock>
 8021fec:	e7a1      	b.n	8021f32 <_malloc_r+0x22>
 8021fee:	6025      	str	r5, [r4, #0]
 8021ff0:	e7de      	b.n	8021fb0 <_malloc_r+0xa0>
 8021ff2:	bf00      	nop
 8021ff4:	2001ff88 	.word	0x2001ff88

08021ff8 <__sfputc_r>:
 8021ff8:	6893      	ldr	r3, [r2, #8]
 8021ffa:	3b01      	subs	r3, #1
 8021ffc:	2b00      	cmp	r3, #0
 8021ffe:	6093      	str	r3, [r2, #8]
 8022000:	b410      	push	{r4}
 8022002:	da08      	bge.n	8022016 <__sfputc_r+0x1e>
 8022004:	6994      	ldr	r4, [r2, #24]
 8022006:	42a3      	cmp	r3, r4
 8022008:	db01      	blt.n	802200e <__sfputc_r+0x16>
 802200a:	290a      	cmp	r1, #10
 802200c:	d103      	bne.n	8022016 <__sfputc_r+0x1e>
 802200e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022012:	f000 bbe3 	b.w	80227dc <__swbuf_r>
 8022016:	6813      	ldr	r3, [r2, #0]
 8022018:	1c58      	adds	r0, r3, #1
 802201a:	6010      	str	r0, [r2, #0]
 802201c:	4608      	mov	r0, r1
 802201e:	7019      	strb	r1, [r3, #0]
 8022020:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022024:	4770      	bx	lr

08022026 <__sfputs_r>:
 8022026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022028:	4606      	mov	r6, r0
 802202a:	460f      	mov	r7, r1
 802202c:	4614      	mov	r4, r2
 802202e:	18d5      	adds	r5, r2, r3
 8022030:	42ac      	cmp	r4, r5
 8022032:	d101      	bne.n	8022038 <__sfputs_r+0x12>
 8022034:	2000      	movs	r0, #0
 8022036:	e007      	b.n	8022048 <__sfputs_r+0x22>
 8022038:	463a      	mov	r2, r7
 802203a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802203e:	4630      	mov	r0, r6
 8022040:	f7ff ffda 	bl	8021ff8 <__sfputc_r>
 8022044:	1c43      	adds	r3, r0, #1
 8022046:	d1f3      	bne.n	8022030 <__sfputs_r+0xa>
 8022048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802204c <_vfiprintf_r>:
 802204c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022050:	460d      	mov	r5, r1
 8022052:	b09d      	sub	sp, #116	; 0x74
 8022054:	4614      	mov	r4, r2
 8022056:	4698      	mov	r8, r3
 8022058:	4606      	mov	r6, r0
 802205a:	b118      	cbz	r0, 8022064 <_vfiprintf_r+0x18>
 802205c:	6983      	ldr	r3, [r0, #24]
 802205e:	b90b      	cbnz	r3, 8022064 <_vfiprintf_r+0x18>
 8022060:	f7ff fdec 	bl	8021c3c <__sinit>
 8022064:	4b89      	ldr	r3, [pc, #548]	; (802228c <_vfiprintf_r+0x240>)
 8022066:	429d      	cmp	r5, r3
 8022068:	d11b      	bne.n	80220a2 <_vfiprintf_r+0x56>
 802206a:	6875      	ldr	r5, [r6, #4]
 802206c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802206e:	07d9      	lsls	r1, r3, #31
 8022070:	d405      	bmi.n	802207e <_vfiprintf_r+0x32>
 8022072:	89ab      	ldrh	r3, [r5, #12]
 8022074:	059a      	lsls	r2, r3, #22
 8022076:	d402      	bmi.n	802207e <_vfiprintf_r+0x32>
 8022078:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802207a:	f7ff feb4 	bl	8021de6 <__retarget_lock_acquire_recursive>
 802207e:	89ab      	ldrh	r3, [r5, #12]
 8022080:	071b      	lsls	r3, r3, #28
 8022082:	d501      	bpl.n	8022088 <_vfiprintf_r+0x3c>
 8022084:	692b      	ldr	r3, [r5, #16]
 8022086:	b9eb      	cbnz	r3, 80220c4 <_vfiprintf_r+0x78>
 8022088:	4629      	mov	r1, r5
 802208a:	4630      	mov	r0, r6
 802208c:	f000 fc0a 	bl	80228a4 <__swsetup_r>
 8022090:	b1c0      	cbz	r0, 80220c4 <_vfiprintf_r+0x78>
 8022092:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022094:	07dc      	lsls	r4, r3, #31
 8022096:	d50e      	bpl.n	80220b6 <_vfiprintf_r+0x6a>
 8022098:	f04f 30ff 	mov.w	r0, #4294967295
 802209c:	b01d      	add	sp, #116	; 0x74
 802209e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80220a2:	4b7b      	ldr	r3, [pc, #492]	; (8022290 <_vfiprintf_r+0x244>)
 80220a4:	429d      	cmp	r5, r3
 80220a6:	d101      	bne.n	80220ac <_vfiprintf_r+0x60>
 80220a8:	68b5      	ldr	r5, [r6, #8]
 80220aa:	e7df      	b.n	802206c <_vfiprintf_r+0x20>
 80220ac:	4b79      	ldr	r3, [pc, #484]	; (8022294 <_vfiprintf_r+0x248>)
 80220ae:	429d      	cmp	r5, r3
 80220b0:	bf08      	it	eq
 80220b2:	68f5      	ldreq	r5, [r6, #12]
 80220b4:	e7da      	b.n	802206c <_vfiprintf_r+0x20>
 80220b6:	89ab      	ldrh	r3, [r5, #12]
 80220b8:	0598      	lsls	r0, r3, #22
 80220ba:	d4ed      	bmi.n	8022098 <_vfiprintf_r+0x4c>
 80220bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80220be:	f7ff fe94 	bl	8021dea <__retarget_lock_release_recursive>
 80220c2:	e7e9      	b.n	8022098 <_vfiprintf_r+0x4c>
 80220c4:	2300      	movs	r3, #0
 80220c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80220ca:	f04f 0901 	mov.w	r9, #1
 80220ce:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8022298 <_vfiprintf_r+0x24c>
 80220d2:	9309      	str	r3, [sp, #36]	; 0x24
 80220d4:	2320      	movs	r3, #32
 80220d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80220da:	2330      	movs	r3, #48	; 0x30
 80220dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80220e0:	4623      	mov	r3, r4
 80220e2:	469a      	mov	sl, r3
 80220e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80220e8:	b10a      	cbz	r2, 80220ee <_vfiprintf_r+0xa2>
 80220ea:	2a25      	cmp	r2, #37	; 0x25
 80220ec:	d1f9      	bne.n	80220e2 <_vfiprintf_r+0x96>
 80220ee:	ebba 0b04 	subs.w	fp, sl, r4
 80220f2:	d00b      	beq.n	802210c <_vfiprintf_r+0xc0>
 80220f4:	465b      	mov	r3, fp
 80220f6:	4622      	mov	r2, r4
 80220f8:	4629      	mov	r1, r5
 80220fa:	4630      	mov	r0, r6
 80220fc:	f7ff ff93 	bl	8022026 <__sfputs_r>
 8022100:	3001      	adds	r0, #1
 8022102:	f000 80aa 	beq.w	802225a <_vfiprintf_r+0x20e>
 8022106:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022108:	445a      	add	r2, fp
 802210a:	9209      	str	r2, [sp, #36]	; 0x24
 802210c:	f89a 3000 	ldrb.w	r3, [sl]
 8022110:	2b00      	cmp	r3, #0
 8022112:	f000 80a2 	beq.w	802225a <_vfiprintf_r+0x20e>
 8022116:	2300      	movs	r3, #0
 8022118:	f04f 32ff 	mov.w	r2, #4294967295
 802211c:	f10a 0a01 	add.w	sl, sl, #1
 8022120:	9304      	str	r3, [sp, #16]
 8022122:	9307      	str	r3, [sp, #28]
 8022124:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022128:	931a      	str	r3, [sp, #104]	; 0x68
 802212a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802212e:	4654      	mov	r4, sl
 8022130:	2205      	movs	r2, #5
 8022132:	4859      	ldr	r0, [pc, #356]	; (8022298 <_vfiprintf_r+0x24c>)
 8022134:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022138:	f000 fdce 	bl	8022cd8 <memchr>
 802213c:	9a04      	ldr	r2, [sp, #16]
 802213e:	b9d8      	cbnz	r0, 8022178 <_vfiprintf_r+0x12c>
 8022140:	06d1      	lsls	r1, r2, #27
 8022142:	bf44      	itt	mi
 8022144:	2320      	movmi	r3, #32
 8022146:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802214a:	0713      	lsls	r3, r2, #28
 802214c:	bf44      	itt	mi
 802214e:	232b      	movmi	r3, #43	; 0x2b
 8022150:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022154:	f89a 3000 	ldrb.w	r3, [sl]
 8022158:	2b2a      	cmp	r3, #42	; 0x2a
 802215a:	d015      	beq.n	8022188 <_vfiprintf_r+0x13c>
 802215c:	9a07      	ldr	r2, [sp, #28]
 802215e:	4654      	mov	r4, sl
 8022160:	2000      	movs	r0, #0
 8022162:	f04f 0c0a 	mov.w	ip, #10
 8022166:	4621      	mov	r1, r4
 8022168:	f811 3b01 	ldrb.w	r3, [r1], #1
 802216c:	3b30      	subs	r3, #48	; 0x30
 802216e:	2b09      	cmp	r3, #9
 8022170:	d94e      	bls.n	8022210 <_vfiprintf_r+0x1c4>
 8022172:	b1b0      	cbz	r0, 80221a2 <_vfiprintf_r+0x156>
 8022174:	9207      	str	r2, [sp, #28]
 8022176:	e014      	b.n	80221a2 <_vfiprintf_r+0x156>
 8022178:	eba0 0308 	sub.w	r3, r0, r8
 802217c:	46a2      	mov	sl, r4
 802217e:	fa09 f303 	lsl.w	r3, r9, r3
 8022182:	4313      	orrs	r3, r2
 8022184:	9304      	str	r3, [sp, #16]
 8022186:	e7d2      	b.n	802212e <_vfiprintf_r+0xe2>
 8022188:	9b03      	ldr	r3, [sp, #12]
 802218a:	1d19      	adds	r1, r3, #4
 802218c:	681b      	ldr	r3, [r3, #0]
 802218e:	2b00      	cmp	r3, #0
 8022190:	9103      	str	r1, [sp, #12]
 8022192:	bfbb      	ittet	lt
 8022194:	425b      	neglt	r3, r3
 8022196:	f042 0202 	orrlt.w	r2, r2, #2
 802219a:	9307      	strge	r3, [sp, #28]
 802219c:	9307      	strlt	r3, [sp, #28]
 802219e:	bfb8      	it	lt
 80221a0:	9204      	strlt	r2, [sp, #16]
 80221a2:	7823      	ldrb	r3, [r4, #0]
 80221a4:	2b2e      	cmp	r3, #46	; 0x2e
 80221a6:	d10c      	bne.n	80221c2 <_vfiprintf_r+0x176>
 80221a8:	7863      	ldrb	r3, [r4, #1]
 80221aa:	2b2a      	cmp	r3, #42	; 0x2a
 80221ac:	d135      	bne.n	802221a <_vfiprintf_r+0x1ce>
 80221ae:	9b03      	ldr	r3, [sp, #12]
 80221b0:	3402      	adds	r4, #2
 80221b2:	1d1a      	adds	r2, r3, #4
 80221b4:	681b      	ldr	r3, [r3, #0]
 80221b6:	2b00      	cmp	r3, #0
 80221b8:	9203      	str	r2, [sp, #12]
 80221ba:	bfb8      	it	lt
 80221bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80221c0:	9305      	str	r3, [sp, #20]
 80221c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80222a8 <_vfiprintf_r+0x25c>
 80221c6:	2203      	movs	r2, #3
 80221c8:	7821      	ldrb	r1, [r4, #0]
 80221ca:	4650      	mov	r0, sl
 80221cc:	f000 fd84 	bl	8022cd8 <memchr>
 80221d0:	b140      	cbz	r0, 80221e4 <_vfiprintf_r+0x198>
 80221d2:	2340      	movs	r3, #64	; 0x40
 80221d4:	eba0 000a 	sub.w	r0, r0, sl
 80221d8:	3401      	adds	r4, #1
 80221da:	fa03 f000 	lsl.w	r0, r3, r0
 80221de:	9b04      	ldr	r3, [sp, #16]
 80221e0:	4303      	orrs	r3, r0
 80221e2:	9304      	str	r3, [sp, #16]
 80221e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80221e8:	2206      	movs	r2, #6
 80221ea:	482c      	ldr	r0, [pc, #176]	; (802229c <_vfiprintf_r+0x250>)
 80221ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80221f0:	f000 fd72 	bl	8022cd8 <memchr>
 80221f4:	2800      	cmp	r0, #0
 80221f6:	d03f      	beq.n	8022278 <_vfiprintf_r+0x22c>
 80221f8:	4b29      	ldr	r3, [pc, #164]	; (80222a0 <_vfiprintf_r+0x254>)
 80221fa:	bb1b      	cbnz	r3, 8022244 <_vfiprintf_r+0x1f8>
 80221fc:	9b03      	ldr	r3, [sp, #12]
 80221fe:	3307      	adds	r3, #7
 8022200:	f023 0307 	bic.w	r3, r3, #7
 8022204:	3308      	adds	r3, #8
 8022206:	9303      	str	r3, [sp, #12]
 8022208:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802220a:	443b      	add	r3, r7
 802220c:	9309      	str	r3, [sp, #36]	; 0x24
 802220e:	e767      	b.n	80220e0 <_vfiprintf_r+0x94>
 8022210:	fb0c 3202 	mla	r2, ip, r2, r3
 8022214:	460c      	mov	r4, r1
 8022216:	2001      	movs	r0, #1
 8022218:	e7a5      	b.n	8022166 <_vfiprintf_r+0x11a>
 802221a:	2300      	movs	r3, #0
 802221c:	3401      	adds	r4, #1
 802221e:	f04f 0c0a 	mov.w	ip, #10
 8022222:	4619      	mov	r1, r3
 8022224:	9305      	str	r3, [sp, #20]
 8022226:	4620      	mov	r0, r4
 8022228:	f810 2b01 	ldrb.w	r2, [r0], #1
 802222c:	3a30      	subs	r2, #48	; 0x30
 802222e:	2a09      	cmp	r2, #9
 8022230:	d903      	bls.n	802223a <_vfiprintf_r+0x1ee>
 8022232:	2b00      	cmp	r3, #0
 8022234:	d0c5      	beq.n	80221c2 <_vfiprintf_r+0x176>
 8022236:	9105      	str	r1, [sp, #20]
 8022238:	e7c3      	b.n	80221c2 <_vfiprintf_r+0x176>
 802223a:	fb0c 2101 	mla	r1, ip, r1, r2
 802223e:	4604      	mov	r4, r0
 8022240:	2301      	movs	r3, #1
 8022242:	e7f0      	b.n	8022226 <_vfiprintf_r+0x1da>
 8022244:	ab03      	add	r3, sp, #12
 8022246:	462a      	mov	r2, r5
 8022248:	a904      	add	r1, sp, #16
 802224a:	4630      	mov	r0, r6
 802224c:	9300      	str	r3, [sp, #0]
 802224e:	4b15      	ldr	r3, [pc, #84]	; (80222a4 <_vfiprintf_r+0x258>)
 8022250:	e000      	b.n	8022254 <_vfiprintf_r+0x208>
 8022252:	bf00      	nop
 8022254:	4607      	mov	r7, r0
 8022256:	1c78      	adds	r0, r7, #1
 8022258:	d1d6      	bne.n	8022208 <_vfiprintf_r+0x1bc>
 802225a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802225c:	07d9      	lsls	r1, r3, #31
 802225e:	d405      	bmi.n	802226c <_vfiprintf_r+0x220>
 8022260:	89ab      	ldrh	r3, [r5, #12]
 8022262:	059a      	lsls	r2, r3, #22
 8022264:	d402      	bmi.n	802226c <_vfiprintf_r+0x220>
 8022266:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022268:	f7ff fdbf 	bl	8021dea <__retarget_lock_release_recursive>
 802226c:	89ab      	ldrh	r3, [r5, #12]
 802226e:	065b      	lsls	r3, r3, #25
 8022270:	f53f af12 	bmi.w	8022098 <_vfiprintf_r+0x4c>
 8022274:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022276:	e711      	b.n	802209c <_vfiprintf_r+0x50>
 8022278:	ab03      	add	r3, sp, #12
 802227a:	462a      	mov	r2, r5
 802227c:	a904      	add	r1, sp, #16
 802227e:	4630      	mov	r0, r6
 8022280:	9300      	str	r3, [sp, #0]
 8022282:	4b08      	ldr	r3, [pc, #32]	; (80222a4 <_vfiprintf_r+0x258>)
 8022284:	f000 f882 	bl	802238c <_printf_i>
 8022288:	e7e4      	b.n	8022254 <_vfiprintf_r+0x208>
 802228a:	bf00      	nop
 802228c:	0802476c 	.word	0x0802476c
 8022290:	0802478c 	.word	0x0802478c
 8022294:	0802474c 	.word	0x0802474c
 8022298:	080247b0 	.word	0x080247b0
 802229c:	080247ba 	.word	0x080247ba
 80222a0:	00000000 	.word	0x00000000
 80222a4:	08022027 	.word	0x08022027
 80222a8:	080247b6 	.word	0x080247b6

080222ac <_printf_common>:
 80222ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80222b0:	4616      	mov	r6, r2
 80222b2:	4699      	mov	r9, r3
 80222b4:	688a      	ldr	r2, [r1, #8]
 80222b6:	4607      	mov	r7, r0
 80222b8:	690b      	ldr	r3, [r1, #16]
 80222ba:	460c      	mov	r4, r1
 80222bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80222c0:	4293      	cmp	r3, r2
 80222c2:	bfb8      	it	lt
 80222c4:	4613      	movlt	r3, r2
 80222c6:	6033      	str	r3, [r6, #0]
 80222c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80222cc:	b10a      	cbz	r2, 80222d2 <_printf_common+0x26>
 80222ce:	3301      	adds	r3, #1
 80222d0:	6033      	str	r3, [r6, #0]
 80222d2:	6823      	ldr	r3, [r4, #0]
 80222d4:	0699      	lsls	r1, r3, #26
 80222d6:	bf42      	ittt	mi
 80222d8:	6833      	ldrmi	r3, [r6, #0]
 80222da:	3302      	addmi	r3, #2
 80222dc:	6033      	strmi	r3, [r6, #0]
 80222de:	6825      	ldr	r5, [r4, #0]
 80222e0:	f015 0506 	ands.w	r5, r5, #6
 80222e4:	d106      	bne.n	80222f4 <_printf_common+0x48>
 80222e6:	f104 0a19 	add.w	sl, r4, #25
 80222ea:	68e3      	ldr	r3, [r4, #12]
 80222ec:	6832      	ldr	r2, [r6, #0]
 80222ee:	1a9b      	subs	r3, r3, r2
 80222f0:	42ab      	cmp	r3, r5
 80222f2:	dc29      	bgt.n	8022348 <_printf_common+0x9c>
 80222f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80222f8:	1e13      	subs	r3, r2, #0
 80222fa:	6822      	ldr	r2, [r4, #0]
 80222fc:	bf18      	it	ne
 80222fe:	2301      	movne	r3, #1
 8022300:	0692      	lsls	r2, r2, #26
 8022302:	d42e      	bmi.n	8022362 <_printf_common+0xb6>
 8022304:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022308:	4649      	mov	r1, r9
 802230a:	4638      	mov	r0, r7
 802230c:	47c0      	blx	r8
 802230e:	3001      	adds	r0, #1
 8022310:	d021      	beq.n	8022356 <_printf_common+0xaa>
 8022312:	6823      	ldr	r3, [r4, #0]
 8022314:	341a      	adds	r4, #26
 8022316:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 802231a:	f003 0306 	and.w	r3, r3, #6
 802231e:	6832      	ldr	r2, [r6, #0]
 8022320:	2600      	movs	r6, #0
 8022322:	2b04      	cmp	r3, #4
 8022324:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8022328:	bf08      	it	eq
 802232a:	1aad      	subeq	r5, r5, r2
 802232c:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8022330:	bf14      	ite	ne
 8022332:	2500      	movne	r5, #0
 8022334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022338:	4293      	cmp	r3, r2
 802233a:	bfc4      	itt	gt
 802233c:	1a9b      	subgt	r3, r3, r2
 802233e:	18ed      	addgt	r5, r5, r3
 8022340:	42b5      	cmp	r5, r6
 8022342:	d11a      	bne.n	802237a <_printf_common+0xce>
 8022344:	2000      	movs	r0, #0
 8022346:	e008      	b.n	802235a <_printf_common+0xae>
 8022348:	2301      	movs	r3, #1
 802234a:	4652      	mov	r2, sl
 802234c:	4649      	mov	r1, r9
 802234e:	4638      	mov	r0, r7
 8022350:	47c0      	blx	r8
 8022352:	3001      	adds	r0, #1
 8022354:	d103      	bne.n	802235e <_printf_common+0xb2>
 8022356:	f04f 30ff 	mov.w	r0, #4294967295
 802235a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802235e:	3501      	adds	r5, #1
 8022360:	e7c3      	b.n	80222ea <_printf_common+0x3e>
 8022362:	18e1      	adds	r1, r4, r3
 8022364:	1c5a      	adds	r2, r3, #1
 8022366:	2030      	movs	r0, #48	; 0x30
 8022368:	3302      	adds	r3, #2
 802236a:	4422      	add	r2, r4
 802236c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8022370:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022374:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022378:	e7c4      	b.n	8022304 <_printf_common+0x58>
 802237a:	2301      	movs	r3, #1
 802237c:	4622      	mov	r2, r4
 802237e:	4649      	mov	r1, r9
 8022380:	4638      	mov	r0, r7
 8022382:	47c0      	blx	r8
 8022384:	3001      	adds	r0, #1
 8022386:	d0e6      	beq.n	8022356 <_printf_common+0xaa>
 8022388:	3601      	adds	r6, #1
 802238a:	e7d9      	b.n	8022340 <_printf_common+0x94>

0802238c <_printf_i>:
 802238c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022390:	7e0f      	ldrb	r7, [r1, #24]
 8022392:	4691      	mov	r9, r2
 8022394:	4680      	mov	r8, r0
 8022396:	460c      	mov	r4, r1
 8022398:	2f78      	cmp	r7, #120	; 0x78
 802239a:	469a      	mov	sl, r3
 802239c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 802239e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80223a2:	d807      	bhi.n	80223b4 <_printf_i+0x28>
 80223a4:	2f62      	cmp	r7, #98	; 0x62
 80223a6:	d80a      	bhi.n	80223be <_printf_i+0x32>
 80223a8:	2f00      	cmp	r7, #0
 80223aa:	f000 80d8 	beq.w	802255e <_printf_i+0x1d2>
 80223ae:	2f58      	cmp	r7, #88	; 0x58
 80223b0:	f000 80a3 	beq.w	80224fa <_printf_i+0x16e>
 80223b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80223b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80223bc:	e03a      	b.n	8022434 <_printf_i+0xa8>
 80223be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80223c2:	2b15      	cmp	r3, #21
 80223c4:	d8f6      	bhi.n	80223b4 <_printf_i+0x28>
 80223c6:	a101      	add	r1, pc, #4	; (adr r1, 80223cc <_printf_i+0x40>)
 80223c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80223cc:	08022425 	.word	0x08022425
 80223d0:	08022439 	.word	0x08022439
 80223d4:	080223b5 	.word	0x080223b5
 80223d8:	080223b5 	.word	0x080223b5
 80223dc:	080223b5 	.word	0x080223b5
 80223e0:	080223b5 	.word	0x080223b5
 80223e4:	08022439 	.word	0x08022439
 80223e8:	080223b5 	.word	0x080223b5
 80223ec:	080223b5 	.word	0x080223b5
 80223f0:	080223b5 	.word	0x080223b5
 80223f4:	080223b5 	.word	0x080223b5
 80223f8:	08022545 	.word	0x08022545
 80223fc:	08022469 	.word	0x08022469
 8022400:	08022527 	.word	0x08022527
 8022404:	080223b5 	.word	0x080223b5
 8022408:	080223b5 	.word	0x080223b5
 802240c:	08022567 	.word	0x08022567
 8022410:	080223b5 	.word	0x080223b5
 8022414:	08022469 	.word	0x08022469
 8022418:	080223b5 	.word	0x080223b5
 802241c:	080223b5 	.word	0x080223b5
 8022420:	0802252f 	.word	0x0802252f
 8022424:	682b      	ldr	r3, [r5, #0]
 8022426:	1d1a      	adds	r2, r3, #4
 8022428:	681b      	ldr	r3, [r3, #0]
 802242a:	602a      	str	r2, [r5, #0]
 802242c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022430:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022434:	2301      	movs	r3, #1
 8022436:	e0a3      	b.n	8022580 <_printf_i+0x1f4>
 8022438:	6820      	ldr	r0, [r4, #0]
 802243a:	6829      	ldr	r1, [r5, #0]
 802243c:	0606      	lsls	r6, r0, #24
 802243e:	f101 0304 	add.w	r3, r1, #4
 8022442:	d50a      	bpl.n	802245a <_printf_i+0xce>
 8022444:	680e      	ldr	r6, [r1, #0]
 8022446:	602b      	str	r3, [r5, #0]
 8022448:	2e00      	cmp	r6, #0
 802244a:	da03      	bge.n	8022454 <_printf_i+0xc8>
 802244c:	232d      	movs	r3, #45	; 0x2d
 802244e:	4276      	negs	r6, r6
 8022450:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022454:	485e      	ldr	r0, [pc, #376]	; (80225d0 <_printf_i+0x244>)
 8022456:	230a      	movs	r3, #10
 8022458:	e019      	b.n	802248e <_printf_i+0x102>
 802245a:	680e      	ldr	r6, [r1, #0]
 802245c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8022460:	602b      	str	r3, [r5, #0]
 8022462:	bf18      	it	ne
 8022464:	b236      	sxthne	r6, r6
 8022466:	e7ef      	b.n	8022448 <_printf_i+0xbc>
 8022468:	682b      	ldr	r3, [r5, #0]
 802246a:	6820      	ldr	r0, [r4, #0]
 802246c:	1d19      	adds	r1, r3, #4
 802246e:	6029      	str	r1, [r5, #0]
 8022470:	0601      	lsls	r1, r0, #24
 8022472:	d501      	bpl.n	8022478 <_printf_i+0xec>
 8022474:	681e      	ldr	r6, [r3, #0]
 8022476:	e002      	b.n	802247e <_printf_i+0xf2>
 8022478:	0646      	lsls	r6, r0, #25
 802247a:	d5fb      	bpl.n	8022474 <_printf_i+0xe8>
 802247c:	881e      	ldrh	r6, [r3, #0]
 802247e:	2f6f      	cmp	r7, #111	; 0x6f
 8022480:	4853      	ldr	r0, [pc, #332]	; (80225d0 <_printf_i+0x244>)
 8022482:	bf0c      	ite	eq
 8022484:	2308      	moveq	r3, #8
 8022486:	230a      	movne	r3, #10
 8022488:	2100      	movs	r1, #0
 802248a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802248e:	6865      	ldr	r5, [r4, #4]
 8022490:	2d00      	cmp	r5, #0
 8022492:	60a5      	str	r5, [r4, #8]
 8022494:	bfa2      	ittt	ge
 8022496:	6821      	ldrge	r1, [r4, #0]
 8022498:	f021 0104 	bicge.w	r1, r1, #4
 802249c:	6021      	strge	r1, [r4, #0]
 802249e:	b90e      	cbnz	r6, 80224a4 <_printf_i+0x118>
 80224a0:	2d00      	cmp	r5, #0
 80224a2:	d04d      	beq.n	8022540 <_printf_i+0x1b4>
 80224a4:	4615      	mov	r5, r2
 80224a6:	fbb6 f1f3 	udiv	r1, r6, r3
 80224aa:	fb03 6711 	mls	r7, r3, r1, r6
 80224ae:	5dc7      	ldrb	r7, [r0, r7]
 80224b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80224b4:	4637      	mov	r7, r6
 80224b6:	460e      	mov	r6, r1
 80224b8:	42bb      	cmp	r3, r7
 80224ba:	d9f4      	bls.n	80224a6 <_printf_i+0x11a>
 80224bc:	2b08      	cmp	r3, #8
 80224be:	d10b      	bne.n	80224d8 <_printf_i+0x14c>
 80224c0:	6823      	ldr	r3, [r4, #0]
 80224c2:	07de      	lsls	r6, r3, #31
 80224c4:	d508      	bpl.n	80224d8 <_printf_i+0x14c>
 80224c6:	6923      	ldr	r3, [r4, #16]
 80224c8:	6861      	ldr	r1, [r4, #4]
 80224ca:	4299      	cmp	r1, r3
 80224cc:	bfde      	ittt	le
 80224ce:	2330      	movle	r3, #48	; 0x30
 80224d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80224d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80224d8:	1b52      	subs	r2, r2, r5
 80224da:	6122      	str	r2, [r4, #16]
 80224dc:	464b      	mov	r3, r9
 80224de:	aa03      	add	r2, sp, #12
 80224e0:	4621      	mov	r1, r4
 80224e2:	4640      	mov	r0, r8
 80224e4:	f8cd a000 	str.w	sl, [sp]
 80224e8:	f7ff fee0 	bl	80222ac <_printf_common>
 80224ec:	3001      	adds	r0, #1
 80224ee:	d14c      	bne.n	802258a <_printf_i+0x1fe>
 80224f0:	f04f 30ff 	mov.w	r0, #4294967295
 80224f4:	b004      	add	sp, #16
 80224f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80224fa:	4835      	ldr	r0, [pc, #212]	; (80225d0 <_printf_i+0x244>)
 80224fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8022500:	6829      	ldr	r1, [r5, #0]
 8022502:	6823      	ldr	r3, [r4, #0]
 8022504:	f851 6b04 	ldr.w	r6, [r1], #4
 8022508:	6029      	str	r1, [r5, #0]
 802250a:	061d      	lsls	r5, r3, #24
 802250c:	d514      	bpl.n	8022538 <_printf_i+0x1ac>
 802250e:	07df      	lsls	r7, r3, #31
 8022510:	bf44      	itt	mi
 8022512:	f043 0320 	orrmi.w	r3, r3, #32
 8022516:	6023      	strmi	r3, [r4, #0]
 8022518:	b91e      	cbnz	r6, 8022522 <_printf_i+0x196>
 802251a:	6823      	ldr	r3, [r4, #0]
 802251c:	f023 0320 	bic.w	r3, r3, #32
 8022520:	6023      	str	r3, [r4, #0]
 8022522:	2310      	movs	r3, #16
 8022524:	e7b0      	b.n	8022488 <_printf_i+0xfc>
 8022526:	6823      	ldr	r3, [r4, #0]
 8022528:	f043 0320 	orr.w	r3, r3, #32
 802252c:	6023      	str	r3, [r4, #0]
 802252e:	2378      	movs	r3, #120	; 0x78
 8022530:	4828      	ldr	r0, [pc, #160]	; (80225d4 <_printf_i+0x248>)
 8022532:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022536:	e7e3      	b.n	8022500 <_printf_i+0x174>
 8022538:	0659      	lsls	r1, r3, #25
 802253a:	bf48      	it	mi
 802253c:	b2b6      	uxthmi	r6, r6
 802253e:	e7e6      	b.n	802250e <_printf_i+0x182>
 8022540:	4615      	mov	r5, r2
 8022542:	e7bb      	b.n	80224bc <_printf_i+0x130>
 8022544:	682b      	ldr	r3, [r5, #0]
 8022546:	6826      	ldr	r6, [r4, #0]
 8022548:	1d18      	adds	r0, r3, #4
 802254a:	6961      	ldr	r1, [r4, #20]
 802254c:	6028      	str	r0, [r5, #0]
 802254e:	0635      	lsls	r5, r6, #24
 8022550:	681b      	ldr	r3, [r3, #0]
 8022552:	d501      	bpl.n	8022558 <_printf_i+0x1cc>
 8022554:	6019      	str	r1, [r3, #0]
 8022556:	e002      	b.n	802255e <_printf_i+0x1d2>
 8022558:	0670      	lsls	r0, r6, #25
 802255a:	d5fb      	bpl.n	8022554 <_printf_i+0x1c8>
 802255c:	8019      	strh	r1, [r3, #0]
 802255e:	2300      	movs	r3, #0
 8022560:	4615      	mov	r5, r2
 8022562:	6123      	str	r3, [r4, #16]
 8022564:	e7ba      	b.n	80224dc <_printf_i+0x150>
 8022566:	682b      	ldr	r3, [r5, #0]
 8022568:	2100      	movs	r1, #0
 802256a:	1d1a      	adds	r2, r3, #4
 802256c:	602a      	str	r2, [r5, #0]
 802256e:	681d      	ldr	r5, [r3, #0]
 8022570:	6862      	ldr	r2, [r4, #4]
 8022572:	4628      	mov	r0, r5
 8022574:	f000 fbb0 	bl	8022cd8 <memchr>
 8022578:	b108      	cbz	r0, 802257e <_printf_i+0x1f2>
 802257a:	1b40      	subs	r0, r0, r5
 802257c:	6060      	str	r0, [r4, #4]
 802257e:	6863      	ldr	r3, [r4, #4]
 8022580:	6123      	str	r3, [r4, #16]
 8022582:	2300      	movs	r3, #0
 8022584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022588:	e7a8      	b.n	80224dc <_printf_i+0x150>
 802258a:	6923      	ldr	r3, [r4, #16]
 802258c:	462a      	mov	r2, r5
 802258e:	4649      	mov	r1, r9
 8022590:	4640      	mov	r0, r8
 8022592:	47d0      	blx	sl
 8022594:	3001      	adds	r0, #1
 8022596:	d0ab      	beq.n	80224f0 <_printf_i+0x164>
 8022598:	6823      	ldr	r3, [r4, #0]
 802259a:	079b      	lsls	r3, r3, #30
 802259c:	d413      	bmi.n	80225c6 <_printf_i+0x23a>
 802259e:	68e0      	ldr	r0, [r4, #12]
 80225a0:	9b03      	ldr	r3, [sp, #12]
 80225a2:	4298      	cmp	r0, r3
 80225a4:	bfb8      	it	lt
 80225a6:	4618      	movlt	r0, r3
 80225a8:	e7a4      	b.n	80224f4 <_printf_i+0x168>
 80225aa:	2301      	movs	r3, #1
 80225ac:	4632      	mov	r2, r6
 80225ae:	4649      	mov	r1, r9
 80225b0:	4640      	mov	r0, r8
 80225b2:	47d0      	blx	sl
 80225b4:	3001      	adds	r0, #1
 80225b6:	d09b      	beq.n	80224f0 <_printf_i+0x164>
 80225b8:	3501      	adds	r5, #1
 80225ba:	68e3      	ldr	r3, [r4, #12]
 80225bc:	9903      	ldr	r1, [sp, #12]
 80225be:	1a5b      	subs	r3, r3, r1
 80225c0:	42ab      	cmp	r3, r5
 80225c2:	dcf2      	bgt.n	80225aa <_printf_i+0x21e>
 80225c4:	e7eb      	b.n	802259e <_printf_i+0x212>
 80225c6:	2500      	movs	r5, #0
 80225c8:	f104 0619 	add.w	r6, r4, #25
 80225cc:	e7f5      	b.n	80225ba <_printf_i+0x22e>
 80225ce:	bf00      	nop
 80225d0:	080247c1 	.word	0x080247c1
 80225d4:	080247d2 	.word	0x080247d2

080225d8 <cleanup_glue>:
 80225d8:	b538      	push	{r3, r4, r5, lr}
 80225da:	460c      	mov	r4, r1
 80225dc:	6809      	ldr	r1, [r1, #0]
 80225de:	4605      	mov	r5, r0
 80225e0:	b109      	cbz	r1, 80225e6 <cleanup_glue+0xe>
 80225e2:	f7ff fff9 	bl	80225d8 <cleanup_glue>
 80225e6:	4621      	mov	r1, r4
 80225e8:	4628      	mov	r0, r5
 80225ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80225ee:	f7ff bc23 	b.w	8021e38 <_free_r>
	...

080225f4 <_reclaim_reent>:
 80225f4:	4b2c      	ldr	r3, [pc, #176]	; (80226a8 <_reclaim_reent+0xb4>)
 80225f6:	681b      	ldr	r3, [r3, #0]
 80225f8:	4283      	cmp	r3, r0
 80225fa:	b570      	push	{r4, r5, r6, lr}
 80225fc:	4604      	mov	r4, r0
 80225fe:	d051      	beq.n	80226a4 <_reclaim_reent+0xb0>
 8022600:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8022602:	b143      	cbz	r3, 8022616 <_reclaim_reent+0x22>
 8022604:	68db      	ldr	r3, [r3, #12]
 8022606:	2b00      	cmp	r3, #0
 8022608:	d14a      	bne.n	80226a0 <_reclaim_reent+0xac>
 802260a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 802260c:	6819      	ldr	r1, [r3, #0]
 802260e:	b111      	cbz	r1, 8022616 <_reclaim_reent+0x22>
 8022610:	4620      	mov	r0, r4
 8022612:	f7ff fc11 	bl	8021e38 <_free_r>
 8022616:	6961      	ldr	r1, [r4, #20]
 8022618:	b111      	cbz	r1, 8022620 <_reclaim_reent+0x2c>
 802261a:	4620      	mov	r0, r4
 802261c:	f7ff fc0c 	bl	8021e38 <_free_r>
 8022620:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8022622:	b111      	cbz	r1, 802262a <_reclaim_reent+0x36>
 8022624:	4620      	mov	r0, r4
 8022626:	f7ff fc07 	bl	8021e38 <_free_r>
 802262a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 802262c:	b111      	cbz	r1, 8022634 <_reclaim_reent+0x40>
 802262e:	4620      	mov	r0, r4
 8022630:	f7ff fc02 	bl	8021e38 <_free_r>
 8022634:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8022636:	b111      	cbz	r1, 802263e <_reclaim_reent+0x4a>
 8022638:	4620      	mov	r0, r4
 802263a:	f7ff fbfd 	bl	8021e38 <_free_r>
 802263e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8022640:	b111      	cbz	r1, 8022648 <_reclaim_reent+0x54>
 8022642:	4620      	mov	r0, r4
 8022644:	f7ff fbf8 	bl	8021e38 <_free_r>
 8022648:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 802264a:	b111      	cbz	r1, 8022652 <_reclaim_reent+0x5e>
 802264c:	4620      	mov	r0, r4
 802264e:	f7ff fbf3 	bl	8021e38 <_free_r>
 8022652:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8022654:	b111      	cbz	r1, 802265c <_reclaim_reent+0x68>
 8022656:	4620      	mov	r0, r4
 8022658:	f7ff fbee 	bl	8021e38 <_free_r>
 802265c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802265e:	b111      	cbz	r1, 8022666 <_reclaim_reent+0x72>
 8022660:	4620      	mov	r0, r4
 8022662:	f7ff fbe9 	bl	8021e38 <_free_r>
 8022666:	69a3      	ldr	r3, [r4, #24]
 8022668:	b1e3      	cbz	r3, 80226a4 <_reclaim_reent+0xb0>
 802266a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 802266c:	4620      	mov	r0, r4
 802266e:	4798      	blx	r3
 8022670:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8022672:	b1b9      	cbz	r1, 80226a4 <_reclaim_reent+0xb0>
 8022674:	4620      	mov	r0, r4
 8022676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 802267a:	f7ff bfad 	b.w	80225d8 <cleanup_glue>
 802267e:	5949      	ldr	r1, [r1, r5]
 8022680:	b941      	cbnz	r1, 8022694 <_reclaim_reent+0xa0>
 8022682:	3504      	adds	r5, #4
 8022684:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8022686:	2d80      	cmp	r5, #128	; 0x80
 8022688:	68d9      	ldr	r1, [r3, #12]
 802268a:	d1f8      	bne.n	802267e <_reclaim_reent+0x8a>
 802268c:	4620      	mov	r0, r4
 802268e:	f7ff fbd3 	bl	8021e38 <_free_r>
 8022692:	e7ba      	b.n	802260a <_reclaim_reent+0x16>
 8022694:	680e      	ldr	r6, [r1, #0]
 8022696:	4620      	mov	r0, r4
 8022698:	f7ff fbce 	bl	8021e38 <_free_r>
 802269c:	4631      	mov	r1, r6
 802269e:	e7ef      	b.n	8022680 <_reclaim_reent+0x8c>
 80226a0:	2500      	movs	r5, #0
 80226a2:	e7ef      	b.n	8022684 <_reclaim_reent+0x90>
 80226a4:	bd70      	pop	{r4, r5, r6, pc}
 80226a6:	bf00      	nop
 80226a8:	200000f0 	.word	0x200000f0

080226ac <_sbrk_r>:
 80226ac:	b538      	push	{r3, r4, r5, lr}
 80226ae:	2300      	movs	r3, #0
 80226b0:	4d05      	ldr	r5, [pc, #20]	; (80226c8 <_sbrk_r+0x1c>)
 80226b2:	4604      	mov	r4, r0
 80226b4:	4608      	mov	r0, r1
 80226b6:	602b      	str	r3, [r5, #0]
 80226b8:	f7df fb1e 	bl	8001cf8 <_sbrk>
 80226bc:	1c43      	adds	r3, r0, #1
 80226be:	d102      	bne.n	80226c6 <_sbrk_r+0x1a>
 80226c0:	682b      	ldr	r3, [r5, #0]
 80226c2:	b103      	cbz	r3, 80226c6 <_sbrk_r+0x1a>
 80226c4:	6023      	str	r3, [r4, #0]
 80226c6:	bd38      	pop	{r3, r4, r5, pc}
 80226c8:	20020098 	.word	0x20020098

080226cc <_raise_r>:
 80226cc:	291f      	cmp	r1, #31
 80226ce:	b538      	push	{r3, r4, r5, lr}
 80226d0:	4604      	mov	r4, r0
 80226d2:	460d      	mov	r5, r1
 80226d4:	d904      	bls.n	80226e0 <_raise_r+0x14>
 80226d6:	2316      	movs	r3, #22
 80226d8:	6003      	str	r3, [r0, #0]
 80226da:	f04f 30ff 	mov.w	r0, #4294967295
 80226de:	bd38      	pop	{r3, r4, r5, pc}
 80226e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80226e2:	b112      	cbz	r2, 80226ea <_raise_r+0x1e>
 80226e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80226e8:	b94b      	cbnz	r3, 80226fe <_raise_r+0x32>
 80226ea:	4620      	mov	r0, r4
 80226ec:	f000 f830 	bl	8022750 <_getpid_r>
 80226f0:	462a      	mov	r2, r5
 80226f2:	4601      	mov	r1, r0
 80226f4:	4620      	mov	r0, r4
 80226f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80226fa:	f000 b817 	b.w	802272c <_kill_r>
 80226fe:	2b01      	cmp	r3, #1
 8022700:	d00a      	beq.n	8022718 <_raise_r+0x4c>
 8022702:	1c59      	adds	r1, r3, #1
 8022704:	d103      	bne.n	802270e <_raise_r+0x42>
 8022706:	2316      	movs	r3, #22
 8022708:	6003      	str	r3, [r0, #0]
 802270a:	2001      	movs	r0, #1
 802270c:	e7e7      	b.n	80226de <_raise_r+0x12>
 802270e:	2400      	movs	r4, #0
 8022710:	4628      	mov	r0, r5
 8022712:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022716:	4798      	blx	r3
 8022718:	2000      	movs	r0, #0
 802271a:	e7e0      	b.n	80226de <_raise_r+0x12>

0802271c <raise>:
 802271c:	4b02      	ldr	r3, [pc, #8]	; (8022728 <raise+0xc>)
 802271e:	4601      	mov	r1, r0
 8022720:	6818      	ldr	r0, [r3, #0]
 8022722:	f7ff bfd3 	b.w	80226cc <_raise_r>
 8022726:	bf00      	nop
 8022728:	200000f0 	.word	0x200000f0

0802272c <_kill_r>:
 802272c:	b538      	push	{r3, r4, r5, lr}
 802272e:	2300      	movs	r3, #0
 8022730:	4d06      	ldr	r5, [pc, #24]	; (802274c <_kill_r+0x20>)
 8022732:	4604      	mov	r4, r0
 8022734:	4608      	mov	r0, r1
 8022736:	4611      	mov	r1, r2
 8022738:	602b      	str	r3, [r5, #0]
 802273a:	f7df fa55 	bl	8001be8 <_kill>
 802273e:	1c43      	adds	r3, r0, #1
 8022740:	d102      	bne.n	8022748 <_kill_r+0x1c>
 8022742:	682b      	ldr	r3, [r5, #0]
 8022744:	b103      	cbz	r3, 8022748 <_kill_r+0x1c>
 8022746:	6023      	str	r3, [r4, #0]
 8022748:	bd38      	pop	{r3, r4, r5, pc}
 802274a:	bf00      	nop
 802274c:	20020098 	.word	0x20020098

08022750 <_getpid_r>:
 8022750:	f7df ba42 	b.w	8001bd8 <_getpid>

08022754 <__sread>:
 8022754:	b510      	push	{r4, lr}
 8022756:	460c      	mov	r4, r1
 8022758:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802275c:	f000 fad6 	bl	8022d0c <_read_r>
 8022760:	2800      	cmp	r0, #0
 8022762:	bfab      	itete	ge
 8022764:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8022766:	89a3      	ldrhlt	r3, [r4, #12]
 8022768:	181b      	addge	r3, r3, r0
 802276a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802276e:	bfac      	ite	ge
 8022770:	6563      	strge	r3, [r4, #84]	; 0x54
 8022772:	81a3      	strhlt	r3, [r4, #12]
 8022774:	bd10      	pop	{r4, pc}

08022776 <__swrite>:
 8022776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802277a:	461f      	mov	r7, r3
 802277c:	898b      	ldrh	r3, [r1, #12]
 802277e:	4605      	mov	r5, r0
 8022780:	460c      	mov	r4, r1
 8022782:	05db      	lsls	r3, r3, #23
 8022784:	4616      	mov	r6, r2
 8022786:	d505      	bpl.n	8022794 <__swrite+0x1e>
 8022788:	2302      	movs	r3, #2
 802278a:	2200      	movs	r2, #0
 802278c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022790:	f000 fa2a 	bl	8022be8 <_lseek_r>
 8022794:	89a3      	ldrh	r3, [r4, #12]
 8022796:	4632      	mov	r2, r6
 8022798:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802279c:	4628      	mov	r0, r5
 802279e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80227a2:	81a3      	strh	r3, [r4, #12]
 80227a4:	463b      	mov	r3, r7
 80227a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80227aa:	f000 b869 	b.w	8022880 <_write_r>

080227ae <__sseek>:
 80227ae:	b510      	push	{r4, lr}
 80227b0:	460c      	mov	r4, r1
 80227b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80227b6:	f000 fa17 	bl	8022be8 <_lseek_r>
 80227ba:	1c43      	adds	r3, r0, #1
 80227bc:	89a3      	ldrh	r3, [r4, #12]
 80227be:	bf15      	itete	ne
 80227c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80227c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80227c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80227ca:	81a3      	strheq	r3, [r4, #12]
 80227cc:	bf18      	it	ne
 80227ce:	81a3      	strhne	r3, [r4, #12]
 80227d0:	bd10      	pop	{r4, pc}

080227d2 <__sclose>:
 80227d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80227d6:	f000 b937 	b.w	8022a48 <_close_r>
	...

080227dc <__swbuf_r>:
 80227dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80227de:	460e      	mov	r6, r1
 80227e0:	4614      	mov	r4, r2
 80227e2:	4605      	mov	r5, r0
 80227e4:	b118      	cbz	r0, 80227ee <__swbuf_r+0x12>
 80227e6:	6983      	ldr	r3, [r0, #24]
 80227e8:	b90b      	cbnz	r3, 80227ee <__swbuf_r+0x12>
 80227ea:	f7ff fa27 	bl	8021c3c <__sinit>
 80227ee:	4b21      	ldr	r3, [pc, #132]	; (8022874 <__swbuf_r+0x98>)
 80227f0:	429c      	cmp	r4, r3
 80227f2:	d12b      	bne.n	802284c <__swbuf_r+0x70>
 80227f4:	686c      	ldr	r4, [r5, #4]
 80227f6:	69a3      	ldr	r3, [r4, #24]
 80227f8:	60a3      	str	r3, [r4, #8]
 80227fa:	89a3      	ldrh	r3, [r4, #12]
 80227fc:	071a      	lsls	r2, r3, #28
 80227fe:	d52f      	bpl.n	8022860 <__swbuf_r+0x84>
 8022800:	6923      	ldr	r3, [r4, #16]
 8022802:	b36b      	cbz	r3, 8022860 <__swbuf_r+0x84>
 8022804:	6923      	ldr	r3, [r4, #16]
 8022806:	b2f6      	uxtb	r6, r6
 8022808:	6820      	ldr	r0, [r4, #0]
 802280a:	4637      	mov	r7, r6
 802280c:	1ac0      	subs	r0, r0, r3
 802280e:	6963      	ldr	r3, [r4, #20]
 8022810:	4283      	cmp	r3, r0
 8022812:	dc04      	bgt.n	802281e <__swbuf_r+0x42>
 8022814:	4621      	mov	r1, r4
 8022816:	4628      	mov	r0, r5
 8022818:	f000 f9aa 	bl	8022b70 <_fflush_r>
 802281c:	bb30      	cbnz	r0, 802286c <__swbuf_r+0x90>
 802281e:	68a3      	ldr	r3, [r4, #8]
 8022820:	3001      	adds	r0, #1
 8022822:	3b01      	subs	r3, #1
 8022824:	60a3      	str	r3, [r4, #8]
 8022826:	6823      	ldr	r3, [r4, #0]
 8022828:	1c5a      	adds	r2, r3, #1
 802282a:	6022      	str	r2, [r4, #0]
 802282c:	701e      	strb	r6, [r3, #0]
 802282e:	6963      	ldr	r3, [r4, #20]
 8022830:	4283      	cmp	r3, r0
 8022832:	d004      	beq.n	802283e <__swbuf_r+0x62>
 8022834:	89a3      	ldrh	r3, [r4, #12]
 8022836:	07db      	lsls	r3, r3, #31
 8022838:	d506      	bpl.n	8022848 <__swbuf_r+0x6c>
 802283a:	2e0a      	cmp	r6, #10
 802283c:	d104      	bne.n	8022848 <__swbuf_r+0x6c>
 802283e:	4621      	mov	r1, r4
 8022840:	4628      	mov	r0, r5
 8022842:	f000 f995 	bl	8022b70 <_fflush_r>
 8022846:	b988      	cbnz	r0, 802286c <__swbuf_r+0x90>
 8022848:	4638      	mov	r0, r7
 802284a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802284c:	4b0a      	ldr	r3, [pc, #40]	; (8022878 <__swbuf_r+0x9c>)
 802284e:	429c      	cmp	r4, r3
 8022850:	d101      	bne.n	8022856 <__swbuf_r+0x7a>
 8022852:	68ac      	ldr	r4, [r5, #8]
 8022854:	e7cf      	b.n	80227f6 <__swbuf_r+0x1a>
 8022856:	4b09      	ldr	r3, [pc, #36]	; (802287c <__swbuf_r+0xa0>)
 8022858:	429c      	cmp	r4, r3
 802285a:	bf08      	it	eq
 802285c:	68ec      	ldreq	r4, [r5, #12]
 802285e:	e7ca      	b.n	80227f6 <__swbuf_r+0x1a>
 8022860:	4621      	mov	r1, r4
 8022862:	4628      	mov	r0, r5
 8022864:	f000 f81e 	bl	80228a4 <__swsetup_r>
 8022868:	2800      	cmp	r0, #0
 802286a:	d0cb      	beq.n	8022804 <__swbuf_r+0x28>
 802286c:	f04f 37ff 	mov.w	r7, #4294967295
 8022870:	e7ea      	b.n	8022848 <__swbuf_r+0x6c>
 8022872:	bf00      	nop
 8022874:	0802476c 	.word	0x0802476c
 8022878:	0802478c 	.word	0x0802478c
 802287c:	0802474c 	.word	0x0802474c

08022880 <_write_r>:
 8022880:	b538      	push	{r3, r4, r5, lr}
 8022882:	4604      	mov	r4, r0
 8022884:	4d06      	ldr	r5, [pc, #24]	; (80228a0 <_write_r+0x20>)
 8022886:	4608      	mov	r0, r1
 8022888:	4611      	mov	r1, r2
 802288a:	2200      	movs	r2, #0
 802288c:	602a      	str	r2, [r5, #0]
 802288e:	461a      	mov	r2, r3
 8022890:	f7df f9e1 	bl	8001c56 <_write>
 8022894:	1c43      	adds	r3, r0, #1
 8022896:	d102      	bne.n	802289e <_write_r+0x1e>
 8022898:	682b      	ldr	r3, [r5, #0]
 802289a:	b103      	cbz	r3, 802289e <_write_r+0x1e>
 802289c:	6023      	str	r3, [r4, #0]
 802289e:	bd38      	pop	{r3, r4, r5, pc}
 80228a0:	20020098 	.word	0x20020098

080228a4 <__swsetup_r>:
 80228a4:	4b32      	ldr	r3, [pc, #200]	; (8022970 <__swsetup_r+0xcc>)
 80228a6:	b570      	push	{r4, r5, r6, lr}
 80228a8:	681d      	ldr	r5, [r3, #0]
 80228aa:	4606      	mov	r6, r0
 80228ac:	460c      	mov	r4, r1
 80228ae:	b125      	cbz	r5, 80228ba <__swsetup_r+0x16>
 80228b0:	69ab      	ldr	r3, [r5, #24]
 80228b2:	b913      	cbnz	r3, 80228ba <__swsetup_r+0x16>
 80228b4:	4628      	mov	r0, r5
 80228b6:	f7ff f9c1 	bl	8021c3c <__sinit>
 80228ba:	4b2e      	ldr	r3, [pc, #184]	; (8022974 <__swsetup_r+0xd0>)
 80228bc:	429c      	cmp	r4, r3
 80228be:	d10f      	bne.n	80228e0 <__swsetup_r+0x3c>
 80228c0:	686c      	ldr	r4, [r5, #4]
 80228c2:	89a3      	ldrh	r3, [r4, #12]
 80228c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80228c8:	0719      	lsls	r1, r3, #28
 80228ca:	d42c      	bmi.n	8022926 <__swsetup_r+0x82>
 80228cc:	06dd      	lsls	r5, r3, #27
 80228ce:	d411      	bmi.n	80228f4 <__swsetup_r+0x50>
 80228d0:	2309      	movs	r3, #9
 80228d2:	6033      	str	r3, [r6, #0]
 80228d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80228d8:	f04f 30ff 	mov.w	r0, #4294967295
 80228dc:	81a3      	strh	r3, [r4, #12]
 80228de:	e03e      	b.n	802295e <__swsetup_r+0xba>
 80228e0:	4b25      	ldr	r3, [pc, #148]	; (8022978 <__swsetup_r+0xd4>)
 80228e2:	429c      	cmp	r4, r3
 80228e4:	d101      	bne.n	80228ea <__swsetup_r+0x46>
 80228e6:	68ac      	ldr	r4, [r5, #8]
 80228e8:	e7eb      	b.n	80228c2 <__swsetup_r+0x1e>
 80228ea:	4b24      	ldr	r3, [pc, #144]	; (802297c <__swsetup_r+0xd8>)
 80228ec:	429c      	cmp	r4, r3
 80228ee:	bf08      	it	eq
 80228f0:	68ec      	ldreq	r4, [r5, #12]
 80228f2:	e7e6      	b.n	80228c2 <__swsetup_r+0x1e>
 80228f4:	0758      	lsls	r0, r3, #29
 80228f6:	d512      	bpl.n	802291e <__swsetup_r+0x7a>
 80228f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80228fa:	b141      	cbz	r1, 802290e <__swsetup_r+0x6a>
 80228fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022900:	4299      	cmp	r1, r3
 8022902:	d002      	beq.n	802290a <__swsetup_r+0x66>
 8022904:	4630      	mov	r0, r6
 8022906:	f7ff fa97 	bl	8021e38 <_free_r>
 802290a:	2300      	movs	r3, #0
 802290c:	6363      	str	r3, [r4, #52]	; 0x34
 802290e:	89a3      	ldrh	r3, [r4, #12]
 8022910:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022914:	81a3      	strh	r3, [r4, #12]
 8022916:	2300      	movs	r3, #0
 8022918:	6063      	str	r3, [r4, #4]
 802291a:	6923      	ldr	r3, [r4, #16]
 802291c:	6023      	str	r3, [r4, #0]
 802291e:	89a3      	ldrh	r3, [r4, #12]
 8022920:	f043 0308 	orr.w	r3, r3, #8
 8022924:	81a3      	strh	r3, [r4, #12]
 8022926:	6923      	ldr	r3, [r4, #16]
 8022928:	b94b      	cbnz	r3, 802293e <__swsetup_r+0x9a>
 802292a:	89a3      	ldrh	r3, [r4, #12]
 802292c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022930:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022934:	d003      	beq.n	802293e <__swsetup_r+0x9a>
 8022936:	4621      	mov	r1, r4
 8022938:	4630      	mov	r0, r6
 802293a:	f000 f98d 	bl	8022c58 <__smakebuf_r>
 802293e:	89a0      	ldrh	r0, [r4, #12]
 8022940:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022944:	f010 0301 	ands.w	r3, r0, #1
 8022948:	d00a      	beq.n	8022960 <__swsetup_r+0xbc>
 802294a:	2300      	movs	r3, #0
 802294c:	60a3      	str	r3, [r4, #8]
 802294e:	6963      	ldr	r3, [r4, #20]
 8022950:	425b      	negs	r3, r3
 8022952:	61a3      	str	r3, [r4, #24]
 8022954:	6923      	ldr	r3, [r4, #16]
 8022956:	b943      	cbnz	r3, 802296a <__swsetup_r+0xc6>
 8022958:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 802295c:	d1ba      	bne.n	80228d4 <__swsetup_r+0x30>
 802295e:	bd70      	pop	{r4, r5, r6, pc}
 8022960:	0781      	lsls	r1, r0, #30
 8022962:	bf58      	it	pl
 8022964:	6963      	ldrpl	r3, [r4, #20]
 8022966:	60a3      	str	r3, [r4, #8]
 8022968:	e7f4      	b.n	8022954 <__swsetup_r+0xb0>
 802296a:	2000      	movs	r0, #0
 802296c:	e7f7      	b.n	802295e <__swsetup_r+0xba>
 802296e:	bf00      	nop
 8022970:	200000f0 	.word	0x200000f0
 8022974:	0802476c 	.word	0x0802476c
 8022978:	0802478c 	.word	0x0802478c
 802297c:	0802474c 	.word	0x0802474c

08022980 <__register_exitproc>:
 8022980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022984:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 8022a44 <__register_exitproc+0xc4>
 8022988:	4606      	mov	r6, r0
 802298a:	461f      	mov	r7, r3
 802298c:	460d      	mov	r5, r1
 802298e:	f8d8 0000 	ldr.w	r0, [r8]
 8022992:	4691      	mov	r9, r2
 8022994:	f7ff fa27 	bl	8021de6 <__retarget_lock_acquire_recursive>
 8022998:	4b26      	ldr	r3, [pc, #152]	; (8022a34 <__register_exitproc+0xb4>)
 802299a:	681c      	ldr	r4, [r3, #0]
 802299c:	b934      	cbnz	r4, 80229ac <__register_exitproc+0x2c>
 802299e:	4c26      	ldr	r4, [pc, #152]	; (8022a38 <__register_exitproc+0xb8>)
 80229a0:	601c      	str	r4, [r3, #0]
 80229a2:	4b26      	ldr	r3, [pc, #152]	; (8022a3c <__register_exitproc+0xbc>)
 80229a4:	b113      	cbz	r3, 80229ac <__register_exitproc+0x2c>
 80229a6:	681b      	ldr	r3, [r3, #0]
 80229a8:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 80229ac:	6863      	ldr	r3, [r4, #4]
 80229ae:	2b1f      	cmp	r3, #31
 80229b0:	dd07      	ble.n	80229c2 <__register_exitproc+0x42>
 80229b2:	f8d8 0000 	ldr.w	r0, [r8]
 80229b6:	f7ff fa18 	bl	8021dea <__retarget_lock_release_recursive>
 80229ba:	f04f 30ff 	mov.w	r0, #4294967295
 80229be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80229c2:	b35e      	cbz	r6, 8022a1c <__register_exitproc+0x9c>
 80229c4:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 80229c8:	b988      	cbnz	r0, 80229ee <__register_exitproc+0x6e>
 80229ca:	4b1d      	ldr	r3, [pc, #116]	; (8022a40 <__register_exitproc+0xc0>)
 80229cc:	b923      	cbnz	r3, 80229d8 <__register_exitproc+0x58>
 80229ce:	f8d8 0000 	ldr.w	r0, [r8]
 80229d2:	f7ff fa09 	bl	8021de8 <__retarget_lock_release>
 80229d6:	e7f0      	b.n	80229ba <__register_exitproc+0x3a>
 80229d8:	f44f 7084 	mov.w	r0, #264	; 0x108
 80229dc:	f7ff fa06 	bl	8021dec <malloc>
 80229e0:	2800      	cmp	r0, #0
 80229e2:	d0f4      	beq.n	80229ce <__register_exitproc+0x4e>
 80229e4:	2300      	movs	r3, #0
 80229e6:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80229ea:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80229ee:	6863      	ldr	r3, [r4, #4]
 80229f0:	2201      	movs	r2, #1
 80229f2:	2e02      	cmp	r6, #2
 80229f4:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80229f8:	fa02 f203 	lsl.w	r2, r2, r3
 80229fc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8022a00:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8022a04:	ea43 0302 	orr.w	r3, r3, r2
 8022a08:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8022a0c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8022a10:	bf02      	ittt	eq
 8022a12:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 8022a16:	4313      	orreq	r3, r2
 8022a18:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8022a1c:	6863      	ldr	r3, [r4, #4]
 8022a1e:	f8d8 0000 	ldr.w	r0, [r8]
 8022a22:	1c5a      	adds	r2, r3, #1
 8022a24:	3302      	adds	r3, #2
 8022a26:	6062      	str	r2, [r4, #4]
 8022a28:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8022a2c:	f7ff f9dd 	bl	8021dea <__retarget_lock_release_recursive>
 8022a30:	2000      	movs	r0, #0
 8022a32:	e7c4      	b.n	80229be <__register_exitproc+0x3e>
 8022a34:	20020128 	.word	0x20020128
 8022a38:	2002009c 	.word	0x2002009c
 8022a3c:	080247e4 	.word	0x080247e4
 8022a40:	08021ded 	.word	0x08021ded
 8022a44:	20000154 	.word	0x20000154

08022a48 <_close_r>:
 8022a48:	b538      	push	{r3, r4, r5, lr}
 8022a4a:	2300      	movs	r3, #0
 8022a4c:	4d05      	ldr	r5, [pc, #20]	; (8022a64 <_close_r+0x1c>)
 8022a4e:	4604      	mov	r4, r0
 8022a50:	4608      	mov	r0, r1
 8022a52:	602b      	str	r3, [r5, #0]
 8022a54:	f7df f91b 	bl	8001c8e <_close>
 8022a58:	1c43      	adds	r3, r0, #1
 8022a5a:	d102      	bne.n	8022a62 <_close_r+0x1a>
 8022a5c:	682b      	ldr	r3, [r5, #0]
 8022a5e:	b103      	cbz	r3, 8022a62 <_close_r+0x1a>
 8022a60:	6023      	str	r3, [r4, #0]
 8022a62:	bd38      	pop	{r3, r4, r5, pc}
 8022a64:	20020098 	.word	0x20020098

08022a68 <__sflush_r>:
 8022a68:	898a      	ldrh	r2, [r1, #12]
 8022a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022a6e:	4605      	mov	r5, r0
 8022a70:	0710      	lsls	r0, r2, #28
 8022a72:	460c      	mov	r4, r1
 8022a74:	d458      	bmi.n	8022b28 <__sflush_r+0xc0>
 8022a76:	684b      	ldr	r3, [r1, #4]
 8022a78:	2b00      	cmp	r3, #0
 8022a7a:	dc05      	bgt.n	8022a88 <__sflush_r+0x20>
 8022a7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022a7e:	2b00      	cmp	r3, #0
 8022a80:	dc02      	bgt.n	8022a88 <__sflush_r+0x20>
 8022a82:	2000      	movs	r0, #0
 8022a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022a88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022a8a:	2e00      	cmp	r6, #0
 8022a8c:	d0f9      	beq.n	8022a82 <__sflush_r+0x1a>
 8022a8e:	2300      	movs	r3, #0
 8022a90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022a94:	682f      	ldr	r7, [r5, #0]
 8022a96:	602b      	str	r3, [r5, #0]
 8022a98:	d032      	beq.n	8022b00 <__sflush_r+0x98>
 8022a9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022a9c:	89a3      	ldrh	r3, [r4, #12]
 8022a9e:	075a      	lsls	r2, r3, #29
 8022aa0:	d505      	bpl.n	8022aae <__sflush_r+0x46>
 8022aa2:	6863      	ldr	r3, [r4, #4]
 8022aa4:	1ac0      	subs	r0, r0, r3
 8022aa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022aa8:	b10b      	cbz	r3, 8022aae <__sflush_r+0x46>
 8022aaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022aac:	1ac0      	subs	r0, r0, r3
 8022aae:	2300      	movs	r3, #0
 8022ab0:	4602      	mov	r2, r0
 8022ab2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022ab4:	4628      	mov	r0, r5
 8022ab6:	6a21      	ldr	r1, [r4, #32]
 8022ab8:	47b0      	blx	r6
 8022aba:	1c43      	adds	r3, r0, #1
 8022abc:	89a3      	ldrh	r3, [r4, #12]
 8022abe:	d106      	bne.n	8022ace <__sflush_r+0x66>
 8022ac0:	6829      	ldr	r1, [r5, #0]
 8022ac2:	291d      	cmp	r1, #29
 8022ac4:	d82c      	bhi.n	8022b20 <__sflush_r+0xb8>
 8022ac6:	4a29      	ldr	r2, [pc, #164]	; (8022b6c <__sflush_r+0x104>)
 8022ac8:	40ca      	lsrs	r2, r1
 8022aca:	07d6      	lsls	r6, r2, #31
 8022acc:	d528      	bpl.n	8022b20 <__sflush_r+0xb8>
 8022ace:	2200      	movs	r2, #0
 8022ad0:	04d9      	lsls	r1, r3, #19
 8022ad2:	6062      	str	r2, [r4, #4]
 8022ad4:	6922      	ldr	r2, [r4, #16]
 8022ad6:	6022      	str	r2, [r4, #0]
 8022ad8:	d504      	bpl.n	8022ae4 <__sflush_r+0x7c>
 8022ada:	1c42      	adds	r2, r0, #1
 8022adc:	d101      	bne.n	8022ae2 <__sflush_r+0x7a>
 8022ade:	682b      	ldr	r3, [r5, #0]
 8022ae0:	b903      	cbnz	r3, 8022ae4 <__sflush_r+0x7c>
 8022ae2:	6560      	str	r0, [r4, #84]	; 0x54
 8022ae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022ae6:	602f      	str	r7, [r5, #0]
 8022ae8:	2900      	cmp	r1, #0
 8022aea:	d0ca      	beq.n	8022a82 <__sflush_r+0x1a>
 8022aec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022af0:	4299      	cmp	r1, r3
 8022af2:	d002      	beq.n	8022afa <__sflush_r+0x92>
 8022af4:	4628      	mov	r0, r5
 8022af6:	f7ff f99f 	bl	8021e38 <_free_r>
 8022afa:	2000      	movs	r0, #0
 8022afc:	6360      	str	r0, [r4, #52]	; 0x34
 8022afe:	e7c1      	b.n	8022a84 <__sflush_r+0x1c>
 8022b00:	6a21      	ldr	r1, [r4, #32]
 8022b02:	2301      	movs	r3, #1
 8022b04:	4628      	mov	r0, r5
 8022b06:	47b0      	blx	r6
 8022b08:	1c41      	adds	r1, r0, #1
 8022b0a:	d1c7      	bne.n	8022a9c <__sflush_r+0x34>
 8022b0c:	682b      	ldr	r3, [r5, #0]
 8022b0e:	2b00      	cmp	r3, #0
 8022b10:	d0c4      	beq.n	8022a9c <__sflush_r+0x34>
 8022b12:	2b1d      	cmp	r3, #29
 8022b14:	d001      	beq.n	8022b1a <__sflush_r+0xb2>
 8022b16:	2b16      	cmp	r3, #22
 8022b18:	d101      	bne.n	8022b1e <__sflush_r+0xb6>
 8022b1a:	602f      	str	r7, [r5, #0]
 8022b1c:	e7b1      	b.n	8022a82 <__sflush_r+0x1a>
 8022b1e:	89a3      	ldrh	r3, [r4, #12]
 8022b20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022b24:	81a3      	strh	r3, [r4, #12]
 8022b26:	e7ad      	b.n	8022a84 <__sflush_r+0x1c>
 8022b28:	690f      	ldr	r7, [r1, #16]
 8022b2a:	2f00      	cmp	r7, #0
 8022b2c:	d0a9      	beq.n	8022a82 <__sflush_r+0x1a>
 8022b2e:	0793      	lsls	r3, r2, #30
 8022b30:	680e      	ldr	r6, [r1, #0]
 8022b32:	600f      	str	r7, [r1, #0]
 8022b34:	bf0c      	ite	eq
 8022b36:	694b      	ldreq	r3, [r1, #20]
 8022b38:	2300      	movne	r3, #0
 8022b3a:	eba6 0807 	sub.w	r8, r6, r7
 8022b3e:	608b      	str	r3, [r1, #8]
 8022b40:	f1b8 0f00 	cmp.w	r8, #0
 8022b44:	dd9d      	ble.n	8022a82 <__sflush_r+0x1a>
 8022b46:	4643      	mov	r3, r8
 8022b48:	463a      	mov	r2, r7
 8022b4a:	6a21      	ldr	r1, [r4, #32]
 8022b4c:	4628      	mov	r0, r5
 8022b4e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022b50:	47b0      	blx	r6
 8022b52:	2800      	cmp	r0, #0
 8022b54:	dc06      	bgt.n	8022b64 <__sflush_r+0xfc>
 8022b56:	89a3      	ldrh	r3, [r4, #12]
 8022b58:	f04f 30ff 	mov.w	r0, #4294967295
 8022b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022b60:	81a3      	strh	r3, [r4, #12]
 8022b62:	e78f      	b.n	8022a84 <__sflush_r+0x1c>
 8022b64:	4407      	add	r7, r0
 8022b66:	eba8 0800 	sub.w	r8, r8, r0
 8022b6a:	e7e9      	b.n	8022b40 <__sflush_r+0xd8>
 8022b6c:	20400001 	.word	0x20400001

08022b70 <_fflush_r>:
 8022b70:	b538      	push	{r3, r4, r5, lr}
 8022b72:	690b      	ldr	r3, [r1, #16]
 8022b74:	4605      	mov	r5, r0
 8022b76:	460c      	mov	r4, r1
 8022b78:	b913      	cbnz	r3, 8022b80 <_fflush_r+0x10>
 8022b7a:	2500      	movs	r5, #0
 8022b7c:	4628      	mov	r0, r5
 8022b7e:	bd38      	pop	{r3, r4, r5, pc}
 8022b80:	b118      	cbz	r0, 8022b8a <_fflush_r+0x1a>
 8022b82:	6983      	ldr	r3, [r0, #24]
 8022b84:	b90b      	cbnz	r3, 8022b8a <_fflush_r+0x1a>
 8022b86:	f7ff f859 	bl	8021c3c <__sinit>
 8022b8a:	4b14      	ldr	r3, [pc, #80]	; (8022bdc <_fflush_r+0x6c>)
 8022b8c:	429c      	cmp	r4, r3
 8022b8e:	d11b      	bne.n	8022bc8 <_fflush_r+0x58>
 8022b90:	686c      	ldr	r4, [r5, #4]
 8022b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022b96:	2b00      	cmp	r3, #0
 8022b98:	d0ef      	beq.n	8022b7a <_fflush_r+0xa>
 8022b9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022b9c:	07d0      	lsls	r0, r2, #31
 8022b9e:	d404      	bmi.n	8022baa <_fflush_r+0x3a>
 8022ba0:	0599      	lsls	r1, r3, #22
 8022ba2:	d402      	bmi.n	8022baa <_fflush_r+0x3a>
 8022ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022ba6:	f7ff f91e 	bl	8021de6 <__retarget_lock_acquire_recursive>
 8022baa:	4628      	mov	r0, r5
 8022bac:	4621      	mov	r1, r4
 8022bae:	f7ff ff5b 	bl	8022a68 <__sflush_r>
 8022bb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022bb4:	4605      	mov	r5, r0
 8022bb6:	07da      	lsls	r2, r3, #31
 8022bb8:	d4e0      	bmi.n	8022b7c <_fflush_r+0xc>
 8022bba:	89a3      	ldrh	r3, [r4, #12]
 8022bbc:	059b      	lsls	r3, r3, #22
 8022bbe:	d4dd      	bmi.n	8022b7c <_fflush_r+0xc>
 8022bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022bc2:	f7ff f912 	bl	8021dea <__retarget_lock_release_recursive>
 8022bc6:	e7d9      	b.n	8022b7c <_fflush_r+0xc>
 8022bc8:	4b05      	ldr	r3, [pc, #20]	; (8022be0 <_fflush_r+0x70>)
 8022bca:	429c      	cmp	r4, r3
 8022bcc:	d101      	bne.n	8022bd2 <_fflush_r+0x62>
 8022bce:	68ac      	ldr	r4, [r5, #8]
 8022bd0:	e7df      	b.n	8022b92 <_fflush_r+0x22>
 8022bd2:	4b04      	ldr	r3, [pc, #16]	; (8022be4 <_fflush_r+0x74>)
 8022bd4:	429c      	cmp	r4, r3
 8022bd6:	bf08      	it	eq
 8022bd8:	68ec      	ldreq	r4, [r5, #12]
 8022bda:	e7da      	b.n	8022b92 <_fflush_r+0x22>
 8022bdc:	0802476c 	.word	0x0802476c
 8022be0:	0802478c 	.word	0x0802478c
 8022be4:	0802474c 	.word	0x0802474c

08022be8 <_lseek_r>:
 8022be8:	b538      	push	{r3, r4, r5, lr}
 8022bea:	4604      	mov	r4, r0
 8022bec:	4d06      	ldr	r5, [pc, #24]	; (8022c08 <_lseek_r+0x20>)
 8022bee:	4608      	mov	r0, r1
 8022bf0:	4611      	mov	r1, r2
 8022bf2:	2200      	movs	r2, #0
 8022bf4:	602a      	str	r2, [r5, #0]
 8022bf6:	461a      	mov	r2, r3
 8022bf8:	f7df f870 	bl	8001cdc <_lseek>
 8022bfc:	1c43      	adds	r3, r0, #1
 8022bfe:	d102      	bne.n	8022c06 <_lseek_r+0x1e>
 8022c00:	682b      	ldr	r3, [r5, #0]
 8022c02:	b103      	cbz	r3, 8022c06 <_lseek_r+0x1e>
 8022c04:	6023      	str	r3, [r4, #0]
 8022c06:	bd38      	pop	{r3, r4, r5, pc}
 8022c08:	20020098 	.word	0x20020098

08022c0c <__swhatbuf_r>:
 8022c0c:	b570      	push	{r4, r5, r6, lr}
 8022c0e:	460e      	mov	r6, r1
 8022c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022c14:	b096      	sub	sp, #88	; 0x58
 8022c16:	4614      	mov	r4, r2
 8022c18:	2900      	cmp	r1, #0
 8022c1a:	461d      	mov	r5, r3
 8022c1c:	da08      	bge.n	8022c30 <__swhatbuf_r+0x24>
 8022c1e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8022c22:	2200      	movs	r2, #0
 8022c24:	602a      	str	r2, [r5, #0]
 8022c26:	061a      	lsls	r2, r3, #24
 8022c28:	d410      	bmi.n	8022c4c <__swhatbuf_r+0x40>
 8022c2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022c2e:	e00e      	b.n	8022c4e <__swhatbuf_r+0x42>
 8022c30:	466a      	mov	r2, sp
 8022c32:	f000 f87d 	bl	8022d30 <_fstat_r>
 8022c36:	2800      	cmp	r0, #0
 8022c38:	dbf1      	blt.n	8022c1e <__swhatbuf_r+0x12>
 8022c3a:	9a01      	ldr	r2, [sp, #4]
 8022c3c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8022c40:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8022c44:	425a      	negs	r2, r3
 8022c46:	415a      	adcs	r2, r3
 8022c48:	602a      	str	r2, [r5, #0]
 8022c4a:	e7ee      	b.n	8022c2a <__swhatbuf_r+0x1e>
 8022c4c:	2340      	movs	r3, #64	; 0x40
 8022c4e:	2000      	movs	r0, #0
 8022c50:	6023      	str	r3, [r4, #0]
 8022c52:	b016      	add	sp, #88	; 0x58
 8022c54:	bd70      	pop	{r4, r5, r6, pc}
	...

08022c58 <__smakebuf_r>:
 8022c58:	898b      	ldrh	r3, [r1, #12]
 8022c5a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022c5c:	079d      	lsls	r5, r3, #30
 8022c5e:	4606      	mov	r6, r0
 8022c60:	460c      	mov	r4, r1
 8022c62:	d507      	bpl.n	8022c74 <__smakebuf_r+0x1c>
 8022c64:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022c68:	6023      	str	r3, [r4, #0]
 8022c6a:	6123      	str	r3, [r4, #16]
 8022c6c:	2301      	movs	r3, #1
 8022c6e:	6163      	str	r3, [r4, #20]
 8022c70:	b002      	add	sp, #8
 8022c72:	bd70      	pop	{r4, r5, r6, pc}
 8022c74:	ab01      	add	r3, sp, #4
 8022c76:	466a      	mov	r2, sp
 8022c78:	f7ff ffc8 	bl	8022c0c <__swhatbuf_r>
 8022c7c:	9900      	ldr	r1, [sp, #0]
 8022c7e:	4605      	mov	r5, r0
 8022c80:	4630      	mov	r0, r6
 8022c82:	f7ff f945 	bl	8021f10 <_malloc_r>
 8022c86:	b948      	cbnz	r0, 8022c9c <__smakebuf_r+0x44>
 8022c88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022c8c:	059a      	lsls	r2, r3, #22
 8022c8e:	d4ef      	bmi.n	8022c70 <__smakebuf_r+0x18>
 8022c90:	f023 0303 	bic.w	r3, r3, #3
 8022c94:	f043 0302 	orr.w	r3, r3, #2
 8022c98:	81a3      	strh	r3, [r4, #12]
 8022c9a:	e7e3      	b.n	8022c64 <__smakebuf_r+0xc>
 8022c9c:	4b0d      	ldr	r3, [pc, #52]	; (8022cd4 <__smakebuf_r+0x7c>)
 8022c9e:	62b3      	str	r3, [r6, #40]	; 0x28
 8022ca0:	89a3      	ldrh	r3, [r4, #12]
 8022ca2:	6020      	str	r0, [r4, #0]
 8022ca4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022ca8:	6120      	str	r0, [r4, #16]
 8022caa:	81a3      	strh	r3, [r4, #12]
 8022cac:	9b00      	ldr	r3, [sp, #0]
 8022cae:	6163      	str	r3, [r4, #20]
 8022cb0:	9b01      	ldr	r3, [sp, #4]
 8022cb2:	b15b      	cbz	r3, 8022ccc <__smakebuf_r+0x74>
 8022cb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022cb8:	4630      	mov	r0, r6
 8022cba:	f000 f84b 	bl	8022d54 <_isatty_r>
 8022cbe:	b128      	cbz	r0, 8022ccc <__smakebuf_r+0x74>
 8022cc0:	89a3      	ldrh	r3, [r4, #12]
 8022cc2:	f023 0303 	bic.w	r3, r3, #3
 8022cc6:	f043 0301 	orr.w	r3, r3, #1
 8022cca:	81a3      	strh	r3, [r4, #12]
 8022ccc:	89a0      	ldrh	r0, [r4, #12]
 8022cce:	4305      	orrs	r5, r0
 8022cd0:	81a5      	strh	r5, [r4, #12]
 8022cd2:	e7cd      	b.n	8022c70 <__smakebuf_r+0x18>
 8022cd4:	08021bd5 	.word	0x08021bd5

08022cd8 <memchr>:
 8022cd8:	b2c9      	uxtb	r1, r1
 8022cda:	4402      	add	r2, r0
 8022cdc:	b510      	push	{r4, lr}
 8022cde:	4290      	cmp	r0, r2
 8022ce0:	4603      	mov	r3, r0
 8022ce2:	d101      	bne.n	8022ce8 <memchr+0x10>
 8022ce4:	2300      	movs	r3, #0
 8022ce6:	e003      	b.n	8022cf0 <memchr+0x18>
 8022ce8:	781c      	ldrb	r4, [r3, #0]
 8022cea:	3001      	adds	r0, #1
 8022cec:	428c      	cmp	r4, r1
 8022cee:	d1f6      	bne.n	8022cde <memchr+0x6>
 8022cf0:	4618      	mov	r0, r3
 8022cf2:	bd10      	pop	{r4, pc}

08022cf4 <__malloc_lock>:
 8022cf4:	4801      	ldr	r0, [pc, #4]	; (8022cfc <__malloc_lock+0x8>)
 8022cf6:	f7ff b876 	b.w	8021de6 <__retarget_lock_acquire_recursive>
 8022cfa:	bf00      	nop
 8022cfc:	2001ff85 	.word	0x2001ff85

08022d00 <__malloc_unlock>:
 8022d00:	4801      	ldr	r0, [pc, #4]	; (8022d08 <__malloc_unlock+0x8>)
 8022d02:	f7ff b872 	b.w	8021dea <__retarget_lock_release_recursive>
 8022d06:	bf00      	nop
 8022d08:	2001ff85 	.word	0x2001ff85

08022d0c <_read_r>:
 8022d0c:	b538      	push	{r3, r4, r5, lr}
 8022d0e:	4604      	mov	r4, r0
 8022d10:	4d06      	ldr	r5, [pc, #24]	; (8022d2c <_read_r+0x20>)
 8022d12:	4608      	mov	r0, r1
 8022d14:	4611      	mov	r1, r2
 8022d16:	2200      	movs	r2, #0
 8022d18:	602a      	str	r2, [r5, #0]
 8022d1a:	461a      	mov	r2, r3
 8022d1c:	f7de ff7e 	bl	8001c1c <_read>
 8022d20:	1c43      	adds	r3, r0, #1
 8022d22:	d102      	bne.n	8022d2a <_read_r+0x1e>
 8022d24:	682b      	ldr	r3, [r5, #0]
 8022d26:	b103      	cbz	r3, 8022d2a <_read_r+0x1e>
 8022d28:	6023      	str	r3, [r4, #0]
 8022d2a:	bd38      	pop	{r3, r4, r5, pc}
 8022d2c:	20020098 	.word	0x20020098

08022d30 <_fstat_r>:
 8022d30:	b538      	push	{r3, r4, r5, lr}
 8022d32:	2300      	movs	r3, #0
 8022d34:	4d06      	ldr	r5, [pc, #24]	; (8022d50 <_fstat_r+0x20>)
 8022d36:	4604      	mov	r4, r0
 8022d38:	4608      	mov	r0, r1
 8022d3a:	4611      	mov	r1, r2
 8022d3c:	602b      	str	r3, [r5, #0]
 8022d3e:	f7de ffb2 	bl	8001ca6 <_fstat>
 8022d42:	1c43      	adds	r3, r0, #1
 8022d44:	d102      	bne.n	8022d4c <_fstat_r+0x1c>
 8022d46:	682b      	ldr	r3, [r5, #0]
 8022d48:	b103      	cbz	r3, 8022d4c <_fstat_r+0x1c>
 8022d4a:	6023      	str	r3, [r4, #0]
 8022d4c:	bd38      	pop	{r3, r4, r5, pc}
 8022d4e:	bf00      	nop
 8022d50:	20020098 	.word	0x20020098

08022d54 <_isatty_r>:
 8022d54:	b538      	push	{r3, r4, r5, lr}
 8022d56:	2300      	movs	r3, #0
 8022d58:	4d05      	ldr	r5, [pc, #20]	; (8022d70 <_isatty_r+0x1c>)
 8022d5a:	4604      	mov	r4, r0
 8022d5c:	4608      	mov	r0, r1
 8022d5e:	602b      	str	r3, [r5, #0]
 8022d60:	f7de ffb1 	bl	8001cc6 <_isatty>
 8022d64:	1c43      	adds	r3, r0, #1
 8022d66:	d102      	bne.n	8022d6e <_isatty_r+0x1a>
 8022d68:	682b      	ldr	r3, [r5, #0]
 8022d6a:	b103      	cbz	r3, 8022d6e <_isatty_r+0x1a>
 8022d6c:	6023      	str	r3, [r4, #0]
 8022d6e:	bd38      	pop	{r3, r4, r5, pc}
 8022d70:	20020098 	.word	0x20020098

08022d74 <_init>:
 8022d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022d76:	bf00      	nop
 8022d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022d7a:	bc08      	pop	{r3}
 8022d7c:	469e      	mov	lr, r3
 8022d7e:	4770      	bx	lr

08022d80 <_fini>:
 8022d80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022d82:	bf00      	nop
 8022d84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022d86:	bc08      	pop	{r3}
 8022d88:	469e      	mov	lr, r3
 8022d8a:	4770      	bx	lr
